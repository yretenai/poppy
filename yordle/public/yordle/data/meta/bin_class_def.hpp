/// <auto-generated>
#pragma once

#include <array>
#include <cstdint>
#include <memory>
#include <set>
#include <string>

#include <yordle/yordle_export.h>
#include <yordle/data/meta/bin_class.hpp>
#include <yordle/data/meta/bin_dispatch.hpp>
#include <yordle/data/prop/inline_structure_prop.hpp>
#include <yordle/data/prop/map_prop.hpp>
#include <yordle/data/prop/optional_prop.hpp>
#include <yordle/data/prop/primitive_array_prop.hpp>
#include <yordle/data/prop/primitive_prop.hpp>
#include <yordle/data/prop/set_prop.hpp>
#include <yordle/data/prop/string_prop.hpp>
#include <yordle/data/prop/unordered_set_prop.hpp>
namespace yordle::data::meta {
    class YORDLE_EXPORT WardSkinDisabler : public bin_class { 
    public:
        explicit WardSkinDisabler(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4197693672 || bin_class::is_type(type);
        }

        bool DisableAllSkins = false;
        std::set<uint32_t> DisabledIds {};
    };

    class YORDLE_EXPORT IContextualAction : public bin_class { 
    public:
        explicit IContextualAction(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1073283193 || bin_class::is_type(type);
        }

        uint32_t mHashedSituationTrigger = 0;
        uint32_t mMaxOccurences = 0;
    };

    class YORDLE_EXPORT ContextualActionPlayAnimation : public IContextualAction { 
    public:
        explicit ContextualActionPlayAnimation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3095435268 || IContextualAction::is_type(type);
        }

        uint32_t mHashedAnimationName = 0;
        bool mPlayAsEmote = false;
    };

    class YORDLE_EXPORT ContextualActionTriggerEvent : public IContextualAction { 
    public:
        explicit ContextualActionTriggerEvent(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 500070696 || IContextualAction::is_type(type);
        }

    };

    class YORDLE_EXPORT ContextualActionPlayAudio : public IContextualAction { 
    public:
        explicit ContextualActionPlayAudio(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1668724992 || IContextualAction::is_type(type);
        }

        std::string mSelfEventName {};
        std::string mAllyEventName {};
        std::string mEnemyEventName {};
        std::string mSpectatorEventName {};
        bool mWaitForAnnouncerQueue = false;
        bool x54cd5fca = false;
        bool xbeb655b5 = false;
        std::string x66a1c28b {};
        float mWaitTimeout = 0.0;
    };

    class YORDLE_EXPORT ContextualActionPlayVO : public ContextualActionPlayAudio { 
    public:
        explicit ContextualActionPlayVO(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 696305421 || ContextualActionPlayAudio::is_type(type);
        }

    };

    class YORDLE_EXPORT IContextualCondition : public bin_class { 
    public:
        explicit IContextualCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3400586476 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT ContextualConditionNegation : public IContextualCondition { 
    public:
        explicit ContextualConditionNegation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1104587944 || IContextualCondition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IContextualCondition> mChildCondition {};
    };

    class YORDLE_EXPORT ContextualConditionItemID : public IContextualCondition { 
    public:
        explicit ContextualConditionItemID(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1086321689 || IContextualCondition::is_type(type);
        }

        std::set<uint32_t> mItems {};
    };

    class YORDLE_EXPORT ContextualConditionMultikillSize : public IContextualCondition { 
    public:
        explicit ContextualConditionMultikillSize(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2611344701 || IContextualCondition::is_type(type);
        }

        uint8_t mMultikillSize = 0;
    };

    class YORDLE_EXPORT ContextualConditionKillCount : public IContextualCondition { 
    public:
        explicit ContextualConditionKillCount(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 888087826 || IContextualCondition::is_type(type);
        }

        uint16_t mTotalKills = 0;
        uint8_t mCompareOp = 0;
    };

    class YORDLE_EXPORT ContextualConditionItemVOGroup : public IContextualCondition { 
    public:
        explicit ContextualConditionItemVOGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3828924738 || IContextualCondition::is_type(type);
        }

        uint32_t mItemVOGroupHash = 0;
    };

    class YORDLE_EXPORT ContextualConditionHasItemFromVOGroup : public IContextualCondition { 
    public:
        explicit ContextualConditionHasItemFromVOGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2121488724 || IContextualCondition::is_type(type);
        }

        uint32_t mItemVOGroupHash = 0;
    };

    class YORDLE_EXPORT ContextualConditionLastBoughtItem : public IContextualCondition { 
    public:
        explicit ContextualConditionLastBoughtItem(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3450583319 || IContextualCondition::is_type(type);
        }

        uint32_t mItem = 0;
    };

    class YORDLE_EXPORT ContextualConditionRuleCooldown : public IContextualCondition { 
    public:
        explicit ContextualConditionRuleCooldown(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3030776672 || IContextualCondition::is_type(type);
        }

        float mRuleCooldown = 0.0;
    };

    class YORDLE_EXPORT ContextualConditionChanceToPlay : public IContextualCondition { 
    public:
        explicit ContextualConditionChanceToPlay(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 766985824 || IContextualCondition::is_type(type);
        }

        uint8_t mPercentChanceToPlay = 0;
    };

    class YORDLE_EXPORT ContextualConditionMoveDistance : public IContextualCondition { 
    public:
        explicit ContextualConditionMoveDistance(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1605316801 || IContextualCondition::is_type(type);
        }

        float mDistance = 0.0;
        uint8_t mCompareOp = 0;
    };

    class YORDLE_EXPORT ContextualConditionCharacterLevel : public IContextualCondition { 
    public:
        explicit ContextualConditionCharacterLevel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1454228832 || IContextualCondition::is_type(type);
        }

        uint8_t mCharacterLevel = 0;
        uint8_t mCompareOp = 0;
    };

    class YORDLE_EXPORT ContextualConditionTimeSinceStealthStateChange : public IContextualCondition { 
    public:
        explicit ContextualConditionTimeSinceStealthStateChange(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2646785396 || IContextualCondition::is_type(type);
        }

        uint8_t mStateToCheck = 0;
        uint8_t mCompareOp = 0;
        float mTimeThreshold = 0.0;
    };

    class YORDLE_EXPORT ContextualConditionMarkerName : public IContextualCondition { 
    public:
        explicit ContextualConditionMarkerName(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1442744202 || IContextualCondition::is_type(type);
        }

        std::set<std::string> mMarkerNames {};
    };

    class YORDLE_EXPORT ContextualConditionNeutralMinionMapSide : public IContextualCondition { 
    public:
        explicit ContextualConditionNeutralMinionMapSide(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 92678189 || IContextualCondition::is_type(type);
        }

        uint8_t mTeamCompareOp = 0;
    };

    class YORDLE_EXPORT ContextualConditionNeutralMinionCampName : public IContextualCondition { 
    public:
        explicit ContextualConditionNeutralMinionCampName(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2644467766 || IContextualCondition::is_type(type);
        }

        uint32_t mCampName = 0;
    };

    class YORDLE_EXPORT ContextualConditionNeutralMinionCampIsAlive : public IContextualCondition { 
    public:
        explicit ContextualConditionNeutralMinionCampIsAlive(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2698836486 || IContextualCondition::is_type(type);
        }

        bool mCampIsAlive = false;
    };

    class YORDLE_EXPORT ContextualConditionNeutralCampId : public IContextualCondition { 
    public:
        explicit ContextualConditionNeutralCampId(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3967297150 || IContextualCondition::is_type(type);
        }

        uint8_t mCampId = 0;
    };

    class YORDLE_EXPORT ContextualConditionSituationHasRecentlyRun : public IContextualCondition { 
    public:
        explicit ContextualConditionSituationHasRecentlyRun(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3867527440 || IContextualCondition::is_type(type);
        }

        uint32_t mSituationNameHash = 0;
        float mTime = 0.0;
    };

    class YORDLE_EXPORT ContextualConditionMapID : public IContextualCondition { 
    public:
        explicit ContextualConditionMapID(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 160416398 || IContextualCondition::is_type(type);
        }

        uint32_t mMapIDs = 0;
    };

    class YORDLE_EXPORT ContextualConditionObjectiveTakeByMyTeam : public IContextualCondition { 
    public:
        explicit ContextualConditionObjectiveTakeByMyTeam(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2095729679 || IContextualCondition::is_type(type);
        }

        uint32_t mTakenObjective = 0;
    };

    class YORDLE_EXPORT ContextualConditionMapRegionName : public IContextualCondition { 
    public:
        explicit ContextualConditionMapRegionName(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3222630896 || IContextualCondition::is_type(type);
        }

        uint8_t mRegionType = 0;
        std::string mRegionName {};
    };

    class YORDLE_EXPORT ContextualConditionTurretPosition : public IContextualCondition { 
    public:
        explicit ContextualConditionTurretPosition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2156731698 || IContextualCondition::is_type(type);
        }

        uint8_t mTurretPosition = 0;
    };

    class YORDLE_EXPORT ContextualConditionHasGold : public IContextualCondition { 
    public:
        explicit ContextualConditionHasGold(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1420908503 || IContextualCondition::is_type(type);
        }

        float mGold = 0.0;
    };

    class YORDLE_EXPORT ContextualConditionCustomTimer : public IContextualCondition { 
    public:
        explicit ContextualConditionCustomTimer(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1904648305 || IContextualCondition::is_type(type);
        }

        float mCustomTimer = 0.0;
    };

    class YORDLE_EXPORT ContextualConditionGameTimer : public IContextualCondition { 
    public:
        explicit ContextualConditionGameTimer(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1010350366 || IContextualCondition::is_type(type);
        }

        float mGameTimeInMinutes = 0.0;
        uint8_t mCompareOp = 0;
    };

    class YORDLE_EXPORT ContextualConditionShopOpenCount : public IContextualCondition { 
    public:
        explicit ContextualConditionShopOpenCount(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1926860258 || IContextualCondition::is_type(type);
        }

        uint32_t mShopOpenCount = 0;
    };

    class YORDLE_EXPORT ContextualConditionShopCloseCount : public IContextualCondition { 
    public:
        explicit ContextualConditionShopCloseCount(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1386770836 || IContextualCondition::is_type(type);
        }

        uint32_t mShopCloseCount = 0;
    };

    class YORDLE_EXPORT ContextualConditionItemPurchased : public IContextualCondition { 
    public:
        explicit ContextualConditionItemPurchased(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4109134353 || IContextualCondition::is_type(type);
        }

        bool mItemPurchased = false;
    };

    class YORDLE_EXPORT ContextualConditionItemCanBePurchased : public IContextualCondition { 
    public:
        explicit ContextualConditionItemCanBePurchased(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4001334472 || IContextualCondition::is_type(type);
        }

        bool mItemCanBePurchased = false;
    };

    class YORDLE_EXPORT ContextualConditionItemPriceMinimum : public IContextualCondition { 
    public:
        explicit ContextualConditionItemPriceMinimum(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3440316227 || IContextualCondition::is_type(type);
        }

        uint32_t mItemPriceMinimum = 0;
    };

    class YORDLE_EXPORT ContextualConditionOwnerTeamNetChampionKills : public IContextualCondition { 
    public:
        explicit ContextualConditionOwnerTeamNetChampionKills(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1635608022 || IContextualCondition::is_type(type);
        }

        int32_t mOwnerTeamNetKillAdvantage = 0;
        uint8_t mKillAdvantageCompareOp = 0;
        float mTimeFrameSeconds = 0.0;
    };

    class YORDLE_EXPORT ContextualConditionNearbyChampionCount : public IContextualCondition { 
    public:
        explicit ContextualConditionNearbyChampionCount(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4264964658 || IContextualCondition::is_type(type);
        }

        uint8_t mTeamCompareOp = 0;
        uint32_t mCount = 0;
        uint8_t mCompareOp = 0;
    };

    class YORDLE_EXPORT ContextualConditionNumberOfCharactersNearTargetPos : public IContextualCondition { 
    public:
        explicit ContextualConditionNumberOfCharactersNearTargetPos(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4259363442 || IContextualCondition::is_type(type);
        }

        uint32_t mNumberOfCharacters = 0;
        uint8_t mCompareOp = 0;
        uint8_t mTeamCompareOp = 0;
    };

    class YORDLE_EXPORT ContextualConditionEnemyDeathsNearby : public IContextualCondition { 
    public:
        explicit ContextualConditionEnemyDeathsNearby(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1977541677 || IContextualCondition::is_type(type);
        }

        uint32_t mEnemyDeaths = 0;
    };

    class YORDLE_EXPORT ContextualConditionTeammateDeathsNearby : public IContextualCondition { 
    public:
        explicit ContextualConditionTeammateDeathsNearby(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3730624179 || IContextualCondition::is_type(type);
        }

        uint32_t mTeammateDeaths = 0;
    };

    class YORDLE_EXPORT ContextualConditionCharacter : public IContextualCondition { 
    public:
        explicit ContextualConditionCharacter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2730793650 || IContextualCondition::is_type(type);
        }

        uint8_t mCharacterType = 0;
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mChildConditions {};
    };

    class YORDLE_EXPORT ContextualConditionAnyOtherHero : public IContextualCondition { 
    public:
        explicit ContextualConditionAnyOtherHero(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 785741611 || IContextualCondition::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mChildConditions {};
    };

    class YORDLE_EXPORT ICharacterSubcondition : public bin_class { 
    public:
        explicit ICharacterSubcondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3725269960 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT ContextualConditionCharacterName : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterName(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3741107577 || ICharacterSubcondition::is_type(type);
        }

        std::set<uint32_t> mCharacters {};
    };

    class YORDLE_EXPORT ContextualConditionCharacterFormName : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterFormName(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3065745279 || ICharacterSubcondition::is_type(type);
        }

        std::string mFormName {};
    };

    class YORDLE_EXPORT ContextualConditionCharacterSkinID : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterSkinID(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3363398730 || ICharacterSubcondition::is_type(type);
        }

        std::set<int32_t> mSkinIDs {};
    };

    class YORDLE_EXPORT ContextualConditionCharacterMetadata : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterMetadata(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2510804743 || ICharacterSubcondition::is_type(type);
        }

        std::string mCategory {};
        std::string mData {};
    };

    class YORDLE_EXPORT ContextualConditionCharacterUnitTags : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterUnitTags(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2711604381 || ICharacterSubcondition::is_type(type);
        }

        uint8_t mTagMode = 0;
        std::shared_ptr<yordle::data::meta::bin_class> mUnitTags {};
    };

    class YORDLE_EXPORT ContextualConditionCharacterHealth : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterHealth(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 188655288 || ICharacterSubcondition::is_type(type);
        }

        float mTargetHealth = 0.0;
        uint8_t mCompareOp = 0;
    };

    class YORDLE_EXPORT ContextualConditionIsAlly : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionIsAlly(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3328327009 || ICharacterSubcondition::is_type(type);
        }

        bool mIsAlly = false;
    };

    class YORDLE_EXPORT ContextualConditionCharacterPlayingEmote : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterPlayingEmote(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 52525780 || ICharacterSubcondition::is_type(type);
        }

        uint8_t mEmoteID = 0;
    };

    class YORDLE_EXPORT ContextualConditionCharacterPlayingAnimation : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterPlayingAnimation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2213043706 || ICharacterSubcondition::is_type(type);
        }

        uint32_t mAnimationNameHash = 0;
    };

    class YORDLE_EXPORT ContextualConditionCharacterDistance : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterDistance(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1680964441 || ICharacterSubcondition::is_type(type);
        }

        float mDistance = 0.0;
        uint8_t mCompareOp = 0;
        uint8_t mDistanceTarget = 0;
    };

    class YORDLE_EXPORT ContextualConditionCharacterInRangeForSyncedAnimation : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterInRangeForSyncedAnimation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3402679647 || ICharacterSubcondition::is_type(type);
        }

    };

    class YORDLE_EXPORT ContextualConditionCharacterHasTimeRemainingForAnimation : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterHasTimeRemainingForAnimation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 342643998 || ICharacterSubcondition::is_type(type);
        }

        uint32_t mAnimationName = 0;
        float mMinRemainingTime = 0.0;
    };

    class YORDLE_EXPORT ContextualConditionCharacterIsCastingRecall : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterIsCastingRecall(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1618442710 || ICharacterSubcondition::is_type(type);
        }

    };

    class YORDLE_EXPORT ContextualConditionCharacterRole : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterRole(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1992674514 || ICharacterSubcondition::is_type(type);
        }

        uint8_t mRole = 0;
    };

    class YORDLE_EXPORT ContextualConditionCharacterHasCAC : public ICharacterSubcondition { 
    public:
        explicit ContextualConditionCharacterHasCAC(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3428313767 || ICharacterSubcondition::is_type(type);
        }

        std::set<uint32_t> mCacs {};
    };

    class YORDLE_EXPORT IContextualConditionSpell : public IContextualCondition { 
    public:
        explicit IContextualConditionSpell(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 576452982 || IContextualCondition::is_type(type);
        }

    };

    class YORDLE_EXPORT ContextualConditionSpell : public IContextualCondition { 
    public:
        explicit ContextualConditionSpell(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2059432175 || IContextualCondition::is_type(type);
        }

        uint32_t mSpellSlot = 0;
        std::set<std::shared_ptr<yordle::data::meta::IContextualConditionSpell>> mChildConditions {};
    };

    class YORDLE_EXPORT ContextualConditionSpellName : public IContextualConditionSpell { 
    public:
        explicit ContextualConditionSpellName(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1616828652 || IContextualConditionSpell::is_type(type);
        }

        uint32_t mSpell = 0;
    };

    class YORDLE_EXPORT ContextualConditionSpellSlot : public IContextualConditionSpell { 
    public:
        explicit ContextualConditionSpellSlot(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 880553955 || IContextualConditionSpell::is_type(type);
        }

        uint32_t mSpellSlot = 0;
    };

    class YORDLE_EXPORT ContextualConditionSpellLevel : public IContextualConditionSpell { 
    public:
        explicit ContextualConditionSpellLevel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1864557295 || IContextualConditionSpell::is_type(type);
        }

        uint8_t mSpellLevel = 0;
        uint8_t mCompareOp = 0;
    };

    class YORDLE_EXPORT ContextualConditionSpellIsReady : public IContextualConditionSpell { 
    public:
        explicit ContextualConditionSpellIsReady(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3932864058 || IContextualConditionSpell::is_type(type);
        }

        bool mSpellIsReady = false;
    };

    class YORDLE_EXPORT IContextualConditionBuff : public IContextualCondition { 
    public:
        explicit IContextualConditionBuff(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4210162581 || IContextualCondition::is_type(type);
        }

    };

    class YORDLE_EXPORT x418b95a : public IContextualConditionBuff { 
    public:
        explicit x418b95a(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 68729178 || IContextualConditionBuff::is_type(type);
        }

        uint32_t mBuff = 0;
        uint8_t x11206e1a = 0;
    };

    class YORDLE_EXPORT xb8d75e45 : public IContextualConditionBuff { 
    public:
        explicit xb8d75e45(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3101122117 || IContextualConditionBuff::is_type(type);
        }

        uint32_t mBuff = 0;
        uint8_t x11206e1a = 0;
    };

    class YORDLE_EXPORT ContextualRule : public bin_class { 
    public:
        explicit ContextualRule(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 584100880 || bin_class::is_type(type);
        }

        uint32_t mConditionRelationship = 0;
        std::set<std::shared_ptr<yordle::data::meta::IContextualCondition>> mConditions {};
        std::shared_ptr<yordle::data::meta::ContextualActionPlayAudio> mAudioAction {};
        std::shared_ptr<yordle::data::meta::ContextualActionPlayAnimation> mAnimationAction {};
        std::shared_ptr<yordle::data::meta::ContextualActionTriggerEvent> mTriggerEventAction {};
        std::optional<uint32_t> mPriority {};
        bool x68fee3c4 = false;
    };

    class YORDLE_EXPORT ContextualSituation : public bin_class { 
    public:
        explicit ContextualSituation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4230456894 || bin_class::is_type(type);
        }

        bool mChooseRandomValidRule = false;
        float mCoolDownTime = 0.0;
        std::set<std::shared_ptr<yordle::data::meta::ContextualRule>> mRules {};
    };

    class YORDLE_EXPORT DamageSourceTemplate : public bin_class { 
    public:
        explicit DamageSourceTemplate(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3888872651 || bin_class::is_type(type);
        }

        std::string name {};
        uint32_t DamageProperties = 0;
        std::set<std::string> DamageTags {};
    };

    class YORDLE_EXPORT DamageSourceSettings : public bin_class { 
    public:
        explicit DamageSourceSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3443066312 || bin_class::is_type(type);
        }

        std::set<std::string> damageTagDefinition {};
        std::set<std::shared_ptr<yordle::data::meta::DamageSourceTemplate>> templateDefinition {};
    };

    class YORDLE_EXPORT DeathTimesScalingPoint : public bin_class { 
    public:
        explicit DeathTimesScalingPoint(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2583264988 || bin_class::is_type(type);
        }

        uint32_t mStartTime = 0;
        float mPercentIncrease = 0.0;
    };

    class YORDLE_EXPORT DeathTimes : public bin_class { 
    public:
        explicit DeathTimes(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 319277549 || bin_class::is_type(type);
        }

        std::set<float> mTimeDeadPerLevel {};
        uint32_t mScalingStartTime = 0;
        uint32_t mScalingIncrementTime = 0;
        float mScalingPercentIncrease = 0.0;
        float mScalingPercentCap = 0.0;
        std::set<std::shared_ptr<yordle::data::meta::DeathTimesScalingPoint>> mScalingPoints {};
        bool mAllowRespawnMods = false;
        bool mStartDeathTimerForZombies = false;
    };

    class YORDLE_EXPORT AbilityResourceStateColorOptions : public bin_class { 
    public:
        explicit AbilityResourceStateColorOptions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3837969205 || bin_class::is_type(type);
        }

        std::array<uint8_t, 4> color {};
        std::array<uint8_t, 4> fadeColor {};
    };

    class YORDLE_EXPORT AbilityResourceStateData : public bin_class { 
    public:
        explicit AbilityResourceStateData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2001592274 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::AbilityResourceStateColorOptions> DefaultPalette {};
        std::shared_ptr<yordle::data::meta::AbilityResourceStateColorOptions> ColorblindPalette {};
        std::string textureSuffix {};
        std::string animationSuffix {};
    };

    class YORDLE_EXPORT AbilityResourceThresholdIndicatorRange : public bin_class { 
    public:
        explicit AbilityResourceThresholdIndicatorRange(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2815698218 || bin_class::is_type(type);
        }

        float rangeStart = 0.0;
        float rangeEnd = 0.0;
    };

    class YORDLE_EXPORT AbilityResourceTypeData : public bin_class { 
    public:
        explicit AbilityResourceTypeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3011369577 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::AbilityResourceStateData>> states {};
        bool showAbilityResource = false;
        bool showRegen = false;
        std::set<std::shared_ptr<yordle::data::meta::AbilityResourceThresholdIndicatorRange>> ThresholdIndicatorRanges {};
    };

    class YORDLE_EXPORT AbilityResourceTypeConfig : public bin_class { 
    public:
        explicit AbilityResourceTypeConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 994495723 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> mana {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> Energy {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> None {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> Shield {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> BattleFury {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> DragonFury {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> Rage {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> Heat {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> PrimalFury {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> Ferocity {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> Bloodwell {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> Wind {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> Ammo {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> Moonlight {};
        std::shared_ptr<yordle::data::meta::AbilityResourceTypeData> Other {};
    };

    class YORDLE_EXPORT EvolutionDescription : public bin_class { 
    public:
        explicit EvolutionDescription(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3253985952 || bin_class::is_type(type);
        }

        uint32_t mFlags = 0;
        std::string mTitle {};
        std::set<std::string> mTooltips {};
        std::set<std::string> mIconNames {};
    };

    class YORDLE_EXPORT ExperienceCurveData : public bin_class { 
    public:
        explicit ExperienceCurveData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2482357264 || bin_class::is_type(type);
        }

        std::set<float> mExperienceRequiredPerLevel {};
        std::set<float> mExperienceGrantedForKillPerLevel {};
        std::set<float> x9980fa2e {};
        float mBaseExperienceMultiplier = 0.0;
        float mLevelDifferenceExperienceMultiplier = 0.0;
        float mMinimumExperienceMultiplier = 0.0;
    };

    class YORDLE_EXPORT ExperienceModData : public bin_class { 
    public:
        explicit ExperienceModData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4040137199 || bin_class::is_type(type);
        }

        std::set<float> mPlayerMinionSplitXp {};
    };

    class YORDLE_EXPORT StatUIData : public bin_class { 
    public:
        explicit StatUIData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 309827837 || bin_class::is_type(type);
        }

        std::string mName {};
        std::string mAbbreviation {};
        uint8_t mDisplayType = 0;
        std::string mIconKey {};
        std::string mScalingTagKey {};
    };

    class YORDLE_EXPORT GlobalStatsUIData : public bin_class { 
    public:
        explicit GlobalStatsUIData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4087817779 || bin_class::is_type(type);
        }

        std::map<uint8_t, std::shared_ptr<yordle::data::meta::StatUIData>> mStatUIData {};
        std::string BaseOutputIconModifier {};
        std::string BonusOutputIconModifier {};
        std::string mNumberStyle {};
        std::string mNumberStylePercent {};
        std::string mNumberStyleBonus {};
        std::string mNumberStyleBonusPercent {};
        std::string FormulaPartStyleBonus {};
        std::string FormulaPartStyleBonusPercent {};
        std::string FormulaPartStyle {};
        std::string FormulaPartStylePercent {};
        std::string FormulaPartRangeStyleBonus {};
        std::string FormulaPartRangeStyleBonusPercent {};
        std::string FormulaPartRangeStyle {};
        std::string FormulaPartRangeStylePercent {};
        std::string mNumberStyleTotalAndCoefficient {};
        std::string mNumberStyleTotalAndCoefficientPercent {};
        std::string NumberStyleTotalAndScalingIcons {};
        std::string NumberStyleTotalAndFormula {};
        std::string mManaIconKey {};
        std::string mManaScalingTagKey {};
        std::string x2fa6c4b0 {};
        std::string x4ac09eef {};
        uint8_t xf04c21cd = 0;
        uint8_t xa844caca = 0;
        uint8_t x97343c80 = 0;
    };

    class YORDLE_EXPORT CameraTrapezoid : public bin_class { 
    public:
        explicit CameraTrapezoid(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1207715590 || bin_class::is_type(type);
        }

        float x9811eb50 = 0.0;
        float x82cb6669 = 0.0;
        float mMaxXTop = 0.0;
        float mMaxXBottom = 0.0;
    };

    class YORDLE_EXPORT CameraConfig : public bin_class { 
    public:
        explicit CameraConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3757418744 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::CameraTrapezoid> x671c887 {};
        float mAccelerationTimeMouse = 0.0;
        float mDecelerationTimeMouse = 0.0;
        float mAccelerationTimeKeyboard = 0.0;
        float mDecelerationTimeKeyboard = 0.0;
        float mTopdownZoom = 0.0;
        float mZoomMinDistance = 0.0;
        float mZoomMaxDistance = 0.0;
        float mZoomEaseTime = 0.0;
        float mZoomMinSpeed = 0.0;
        float mDragScale = 0.0;
        float mDragMomentumDecay = 0.0;
        float mDragMomentumRecencyWeight = 0.0;
        float mLockedCameraEasingDistance = 0.0;
        float mTransitionDurationIntoCinematicMode = 0.0;
        std::shared_ptr<yordle::data::meta::CameraTrapezoid> x71c9323a {};
        std::shared_ptr<yordle::data::meta::CameraTrapezoid> xf7617555 {};
        float x383f51a8 = 0.0;
    };

    class YORDLE_EXPORT MapAudioDataProperties : public bin_class { 
    public:
        explicit MapAudioDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3010308524 || bin_class::is_type(type);
        }

        uint32_t BaseData = 0;
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> bankUnits {};
        std::set<uint32_t> features {};
    };

    class YORDLE_EXPORT ClientStateAudioDataProperties : public bin_class { 
    public:
        explicit ClientStateAudioDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3024130158 || bin_class::is_type(type);
        }

        std::set<std::string> BankPaths {};
        std::string themeMusic {};
    };

    class YORDLE_EXPORT FeatureAudioDataProperties : public bin_class { 
    public:
        explicit FeatureAudioDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4071981464 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::bin_class>> bankUnits {};
        std::shared_ptr<yordle::data::meta::bin_class> music {};
        uint32_t feature = 0;
    };

    class YORDLE_EXPORT BankUnit : public bin_class { 
    public:
        explicit BankUnit(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2755749141 || bin_class::is_type(type);
        }

        std::string name {};
        std::set<std::string> bankPath {};
        std::set<std::string> events {};
        bool asynchrone = false;
        bool voiceOver = false;
    };

    class YORDLE_EXPORT AudioTagListProperties : public bin_class { 
    public:
        explicit AudioTagListProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1123665566 || bin_class::is_type(type);
        }

        std::set<std::string> tags {};
        std::string Key {};
    };

    class YORDLE_EXPORT AudioSystemDataProperties : public bin_class { 
    public:
        explicit AudioSystemDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 915602117 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::AudioTagListProperties>> systemTagEventList {};
    };

    class YORDLE_EXPORT AudioStatusEvents : public bin_class { 
    public:
        explicit AudioStatusEvents(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2254221038 || bin_class::is_type(type);
        }

        std::string rtpcName {};
        std::string startEvent {};
        std::string stopEvent {};
    };

    class YORDLE_EXPORT GlobalAudioDataProperties : public bin_class { 
    public:
        explicit GlobalAudioDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2263089413 || bin_class::is_type(type);
        }

        std::map<uint32_t, uint32_t> systems {};
        float cooldownVoiceOver = 0.0;
        std::map<uint8_t, std::shared_ptr<yordle::data::meta::AudioStatusEvents>> localPlayerStatusEvents {};
        uint32_t x103e4044 = 0;
    };

    class YORDLE_EXPORT MusicAudioDataProperties : public bin_class { 
    public:
        explicit MusicAudioDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1714459771 || bin_class::is_type(type);
        }

        std::string themeMusicID {};
        std::string themeMusicTransitionID {};
        std::string legacyThemeMusicID {};
        std::string legacyThemeMusicTransitionID {};
        std::string victoryMusicID {};
        std::string defeatMusicID {};
        std::string victoryBannerSound {};
        std::string defeatBannerSound {};
        std::string ambientEvent {};
        std::string reverbPreset {};
        std::string GameStartEvent {};
        std::string GameQuitEvent {};
    };

    class YORDLE_EXPORT EVOSettings : public bin_class { 
    public:
        explicit EVOSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1597933322 || bin_class::is_type(type);
        }

        bool mEnableChatVO = false;
        bool mEnableAnnouncerVOReplacement = false;
        int32_t mChatVOThrottleCounterThreshold = 0;
        float mChatVOThrottleCounterDecayTime = 0.0;
        float mPingVOThrottleThreshold = 0.0;
    };

    class YORDLE_EXPORT ICatalogEntryOwner : public bin_class { 
    public:
        explicit ICatalogEntryOwner(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2479546740 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT CatalogEntry : public bin_class { 
    public:
        explicit CatalogEntry(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 607049692 || bin_class::is_type(type);
        }

        std::string contentId {};
        uint32_t itemID = 0;
        std::string offerId {};
    };

    class YORDLE_EXPORT CensoredImage : public bin_class { 
    public:
        explicit CensoredImage(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3496109055 || bin_class::is_type(type);
        }

        std::string image {};
        std::map<uint32_t, std::string> UncensoredImages {};
    };

    class YORDLE_EXPORT Character : public bin_class { 
    public:
        explicit Character(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2335876880 || bin_class::is_type(type);
        }

        std::string name {};
    };

    class YORDLE_EXPORT SkinCharacterDataProperties_CharacterIdleEffect : public bin_class { 
    public:
        explicit SkinCharacterDataProperties_CharacterIdleEffect(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 856064357 || bin_class::is_type(type);
        }

        uint32_t effectKey = 0;
        std::string effectName {};
        std::array<float, 3> position {};
        std::string boneName {};
        std::string targetBoneName {};
    };

    class YORDLE_EXPORT SkinCharacterMetaDataProperties_SpawningSkinOffset : public bin_class { 
    public:
        explicit SkinCharacterMetaDataProperties_SpawningSkinOffset(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1393249095 || bin_class::is_type(type);
        }

        std::string tag {};
        int32_t offset = 0;
    };

    class YORDLE_EXPORT ESportTeamEntry : public bin_class { 
    public:
        explicit ESportTeamEntry(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 336658597 || bin_class::is_type(type);
        }

        std::string teamName {};
        std::string leagueName {};
        std::string textureName {};
    };

    class YORDLE_EXPORT ESportLeagueEntry : public bin_class { 
    public:
        explicit ESportLeagueEntry(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1219793301 || bin_class::is_type(type);
        }

        std::string leagueName {};
        std::string textureName {};
    };

    class YORDLE_EXPORT SkinCharacterMetaDataProperties : public bin_class { 
    public:
        explicit SkinCharacterMetaDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4160558231 || bin_class::is_type(type);
        }

        bool eSportCharacter = false;
        std::set<std::shared_ptr<yordle::data::meta::ESportTeamEntry>> eSportTeamTable {};
        std::set<std::shared_ptr<yordle::data::meta::ESportLeagueEntry>> eSportLeagueTable {};
        bool skinBasedRelativeColorScheme = false;
        bool isRelativeColorCharacter = false;
        std::set<int32_t> relativeColorSwapTable {};
        bool useAudioProperties = false;
        std::set<std::shared_ptr<yordle::data::meta::SkinCharacterMetaDataProperties_SpawningSkinOffset>> spawningSkinOffsets {};
        bool useGDSBinaries = false;
    };

    class YORDLE_EXPORT SkinAudioProperties : public bin_class { 
    public:
        explicit SkinAudioProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2407209295 || bin_class::is_type(type);
        }

        std::set<std::string> tagEventList {};
        std::set<std::shared_ptr<yordle::data::meta::BankUnit>> bankUnits {};
    };

    class YORDLE_EXPORT SkinAnimationProperties : public bin_class { 
    public:
        explicit SkinAnimationProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1114474915 || bin_class::is_type(type);
        }

        uint32_t animationGraphData = 0;
    };

    class YORDLE_EXPORT SkinEmblem : public bin_class { 
    public:
        explicit SkinEmblem(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2074733870 || bin_class::is_type(type);
        }

        uint32_t mEmblemData = 0;
        uint32_t mLoadingScreenAnchor = 0;
    };

    class YORDLE_EXPORT SkinSummonerEmoteLoadout : public bin_class { 
    public:
        explicit SkinSummonerEmoteLoadout(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4080233272 || bin_class::is_type(type);
        }

        std::set<uint32_t> mEmotes {};
    };

    class YORDLE_EXPORT SkinCharacterDataProperties : public bin_class { 
    public:
        explicit SkinCharacterDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2607278582 || bin_class::is_type(type);
        }

        uint32_t skinClassification = 0;
        std::string championSkinName {};
        uint32_t attributeFlags = 0;
        int32_t skinParent = 0;
        std::string metaDataTags {};
        uint32_t emoteLoadout = 0;
        std::shared_ptr<yordle::data::meta::bin_class> skinUpgradeData {};
        std::string endOfGameAlias {};
        std::string x4678b8f7 {};
        std::shared_ptr<yordle::data::meta::CensoredImage> loadscreen {};
        std::shared_ptr<yordle::data::meta::CensoredImage> loadscreenVintage {};
        std::shared_ptr<yordle::data::meta::SkinAudioProperties> skinAudioProperties {};
        std::shared_ptr<yordle::data::meta::SkinAnimationProperties> skinAnimationProperties {};
        std::shared_ptr<yordle::data::meta::bin_class> skinMeshProperties {};
        std::string armorMaterial {};
        std::set<std::string> themeMusic {};
        bool x592970c = false;
        std::string HudMuteEvent {};
        std::string HudUnmuteEvent {};
        std::set<std::string> defaultAnimations {};
        std::set<std::shared_ptr<yordle::data::meta::SkinCharacterDataProperties_CharacterIdleEffect>> idleParticlesEffects {};
        std::string particleOverride_ChampionKillDeathParticle {};
        std::string particleOverride_DeathParticle {};
        std::string mSpawnParticleName {};
        std::set<std::string> extraCharacterPreloads {};
        std::string voiceOverOverride {};
        bool skipVOOverride = false;
        std::string iconAvatar {};
        uint32_t mContextualActionData = 0;
        std::string skinAudioNameOverride {};
        std::optional<std::string> iconCircle {};
        std::optional<float> iconCircleScale {};
        std::optional<std::string> iconSquare {};
        std::set<std::string> alternateIconsCircle {};
        std::set<std::string> alternateIconsSquare {};
        std::map<uint32_t, std::string> uncensoredIconCircles {};
        std::map<uint32_t, std::string> uncensoredIconSquares {};
        std::shared_ptr<yordle::data::meta::bin_class> secondaryResourceHudDisplayData {};
        std::string emoteBuffbone {};
        float emoteYOffset = 0.0;
        std::string godrayFXbone {};
        std::shared_ptr<yordle::data::meta::bin_class> healthBarData {};
        std::set<std::shared_ptr<yordle::data::meta::SkinEmblem>> mEmblems {};
        std::optional<int32_t> rarityGemOverride {};
        uint32_t mResourceResolver = 0;
        std::set<uint32_t> mAdditionalResourceResolvers {};
        std::shared_ptr<yordle::data::meta::bin_class> mOptionalBin {};
        uint32_t x25f9aa72 = 0;
    };

    class YORDLE_EXPORT SkinFilterData : public bin_class { 
    public:
        explicit SkinFilterData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3022275834 || bin_class::is_type(type);
        }

        uint32_t FilterType = 0;
        bool xc176d167 = false;
        std::set<uint32_t> skinIds {};
    };

    class YORDLE_EXPORT CharacterPassiveData : public bin_class { 
    public:
        explicit CharacterPassiveData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2393107013 || bin_class::is_type(type);
        }

        uint32_t xbd3c31e4 = 0;
        std::set<uint32_t> mComponentBuffs {};
        std::set<uint32_t> mChildSpells {};
        uint8_t mDisplayFlags = 0;
        bool x6346a946 = false;
        std::shared_ptr<yordle::data::meta::SkinFilterData> SkinFilter {};
    };

    class YORDLE_EXPORT GlobalPerLevelStatsFactor : public bin_class { 
    public:
        explicit GlobalPerLevelStatsFactor(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1907548119 || bin_class::is_type(type);
        }

        std::set<float> mPerLevelStatsFactor {};
    };

    class YORDLE_EXPORT OverrideAutoAttackCastTimeData : public bin_class { 
    public:
        explicit OverrideAutoAttackCastTimeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3397751176 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mOverrideAutoattackCastTimeCalculation {};
    };

    class YORDLE_EXPORT CharacterRecord : public bin_class { 
    public:
        explicit CharacterRecord(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 602544405 || bin_class::is_type(type);
        }

        std::string mCharacterName {};
        std::string mFallbackCharacterName {};
        std::shared_ptr<yordle::data::meta::bin_class> targetLaserEffects {};
        std::shared_ptr<yordle::data::meta::bin_class> DisabledTargetLaserEffects {};
        std::shared_ptr<yordle::data::meta::EvolutionDescription> evolutionData {};
        std::shared_ptr<yordle::data::meta::bin_class> useableData {};
        float baseHP = 0.0;
        float hpPerLevel = 0.0;
        float baseStaticHPRegen = 0.0;
        float baseFactorHPRegen = 0.0;
        float hpRegenPerLevel = 0.0;
        float healthBarHeight = 0.0;
        bool healthBarFullParallax = false;
        std::string selfChampSpecificHealthSuffix {};
        std::string selfCBChampSpecificHealthSuffix {};
        std::string allyChampSpecificHealthSuffix {};
        std::string enemyChampSpecificHealthSuffix {};
        bool highlightHealthbarIcons = false;
        std::shared_ptr<yordle::data::meta::bin_class> primaryAbilityResource {};
        std::shared_ptr<yordle::data::meta::bin_class> secondaryAbilityResource {};
        float baseDamage = 0.0;
        float damagePerLevel = 0.0;
        float baseArmor = 0.0;
        float armorPerLevel = 0.0;
        float baseSpellBlock = 0.0;
        float spellBlockPerLevel = 0.0;
        float baseDodge = 0.0;
        float DodgePerLevel = 0.0;
        float baseMissChance = 0.0;
        float baseCritChance = 0.0;
        float critDamageMultiplier = 0.0;
        float critPerLevel = 0.0;
        float baseMoveSpeed = 0.0;
        float xcb4451d3 = 0.0;
        float attackRange = 0.0;
        float attackSpeed = 0.0;
        float attackSpeedRatio = 0.0;
        float attackSpeedPerLevel = 0.0;
        float AbilityPowerIncPerLevel = 0.0;
        float mAdaptiveForceToAbilityPowerWeight = 0.0;
        float attackAutoInterruptPercent = 0.0;
        float acquisitionRange = 0.0;
        std::optional<float> wakeUpRange {};
        std::optional<float> firstAcquisitionRange {};
        std::shared_ptr<yordle::data::meta::bin_class> basicAttack {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> extraAttacks {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> critAttacks {};
        float towerTargetingPriorityBoost = 0.0;
        float expGivenOnDeath = 0.0;
        float goldGivenOnDeath = 0.0;
        float goldRadius = 0.0;
        float experienceRadius = 0.0;
        float deathEventListeningRadius = 0.0;
        float localGoldGivenOnDeath = 0.0;
        float localExpGivenOnDeath = 0.0;
        bool localGoldSplitWithLastHitter = false;
        float globalGoldGivenOnDeath = 0.0;
        float globalExpGivenOnDeath = 0.0;
        std::optional<float> perceptionBubbleRadius {};
        std::optional<std::array<float, 3>> perceptionBoundingBoxSize {};
        float significance = 0.0;
        float untargetableSpawnTime = 0.0;
        float abilityPower = 0.0;
        std::set<std::string> spellNames {};
        std::set<std::string> extraSpells {};
        std::set<uint32_t> mAbilities {};
        uint32_t onKillEvent = 0;
        uint32_t OnKillEventSteal = 0;
        uint32_t onKillEventForSpectator = 0;
        std::string criticalAttack {};
        std::string passiveName {};
        std::string passiveLuaName {};
        std::string passiveToolTip {};
        std::string passiveSpell {};
        float passiveRange = 0.0;
        std::string passive1IconName {};
        std::string lore1 {};
        std::string tips1 {};
        std::string tips2 {};
        std::string friendlyTooltip {};
        std::string enemyTooltip {};
        std::string name {};
        std::string parName {};
        std::set<std::string> weaponMaterials {};
        std::string hoverIndicatorTextureName {};
        float hoverIndicatorRadius = 0.0;
        std::string hoverLineIndicatorBaseTextureName {};
        std::string hoverLineIndicatorTargetTextureName {};
        float hoverLineIndicatorWidth = 0.0;
        bool hoverIndicatorRotateToPlayer = false;
        std::string hoverIndicatorMinimapOverride {};
        std::string minimapIconOverride {};
        float hoverIndicatorRadiusMinimap = 0.0;
        float hoverLineIndicatorWidthMinimap = 0.0;
        float areaIndicatorRadius = 0.0;
        float areaIndicatorMinRadius = 0.0;
        float areaIndicatorMaxDistance = 0.0;
        float areaIndicatorTargetDistance = 0.0;
        float areaIndicatorMinDistance = 0.0;
        std::string areaIndicatorTextureName {};
        float areaIndicatorTextureSize = 0.0;
        std::string charAudioNameOverride {};
        bool x104d2294 = false;
        bool mUseCCAnimations = false;
        std::string jointForAnimAdjustedSelection {};
        float outlineBBoxExpansion = 0.0;
        std::string silhouetteAttachmentAnim {};
        float hitFxScale = 0.0;
        float selectionHeight = 0.0;
        float selectionRadius = 0.0;
        float pathfindingCollisionRadius = 0.0;
        std::optional<float> overrideGameplayCollisionRadius {};
        std::string unitTagsString {};
        uint32_t friendlyUxOverrideTeam = 0;
        std::string friendlyUxOverrideIncludeTagsString {};
        std::string friendlyUxOverrideExcludeTagsString {};
        std::shared_ptr<yordle::data::meta::bin_class> mEducationToolData {};
        std::set<int32_t> mAbilitySlotCC {};
        std::shared_ptr<yordle::data::meta::bin_class> characterToolData {};
        bool platformEnabled = false;
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> spellLevelUpInfo {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> recSpellRankUpInfo {};
        bool recordAsWard = false;
        float minionScoreValue = 0.0;
        bool useRiotRelationships = false;
        uint32_t flags = 0;
        uint32_t minionFlags = 0;
        std::string assetCategory {};
        std::set<uint32_t> purchaseIdentities {};
        std::set<uint32_t> mClientSideItemInventory {};
        uint32_t mPreferredPerkStyle = 0;
        std::shared_ptr<yordle::data::meta::bin_class> mPerkReplacements {};
        float deathTime = 0.0;
        float occludedUnitSelectableDistance = 0.0;
        float MovingTowardEnemyActivationAngle = 0.0;
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::bin_class>> mCharacterCalculations {};
        uint32_t mCharacterPassiveSpell = 0;
        std::set<std::shared_ptr<yordle::data::meta::CharacterPassiveData>> mCharacterPassiveBuffs {};
        std::shared_ptr<yordle::data::meta::bin_class> mDefaultStatOverrides {};
    };

    class YORDLE_EXPORT AbilityResourceSlotInfo : public bin_class { 
    public:
        explicit AbilityResourceSlotInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3459369333 || bin_class::is_type(type);
        }

        uint8_t arType = 0;
        float arBase = 0.0;
        float arPerLevel = 0.0;
        float arBaseStaticRegen = 0.0;
        float arBaseFactorRegen = 0.0;
        float arRegenPerLevel = 0.0;
        float arIncrements = 0.0;
        int32_t arMaxSegments = 0;
        bool arHasRegenText = false;
        bool arAllowMaxValueToBeOverridden = false;
        bool arContributesToHealthValues = false;
        bool arPreventRegenWhileAtZero = false;
        bool arDisplayAsPips = false;
        bool arIsShown = false;
        bool arIsShownOnlyOnLocalPlayer = false;
        std::string arOverrideSmallPipName {};
        std::string arOverrideMediumPipName {};
        std::string arOverrideLargePipName {};
        std::string arOverrideEmptyPipName {};
        std::string arOverrideSpacerName {};
        bool arNegativeSpacer = false;
        bool x5ca738c0 = false;
        bool xa9d3a87c = false;
    };

    class YORDLE_EXPORT AttackSlotData : public bin_class { 
    public:
        explicit AttackSlotData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 112014489 || bin_class::is_type(type);
        }

        std::optional<float> mAttackTotalTime {};
        std::optional<float> mAttackCastTime {};
        std::shared_ptr<yordle::data::meta::OverrideAutoAttackCastTimeData> mOverrideAutoattackCastTime {};
        std::optional<float> mAttackDelayCastOffsetPercent {};
        std::optional<float> mAttackDelayCastOffsetPercentAttackSpeedRatio {};
        std::optional<float> mAttackProbability {};
        std::optional<std::string> mAttackName {};
    };

    class YORDLE_EXPORT TargetLaserComponentEffects : public bin_class { 
    public:
        explicit TargetLaserComponentEffects(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 490133160 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::SkinCharacterDataProperties_CharacterIdleEffect> beamEffectDefinition {};
        std::shared_ptr<yordle::data::meta::SkinCharacterDataProperties_CharacterIdleEffect> towerTargetingEffectDefinition {};
        std::shared_ptr<yordle::data::meta::SkinCharacterDataProperties_CharacterIdleEffect> champTargetingEffectDefinition {};
    };

    class YORDLE_EXPORT ToolEducationData : public bin_class { 
    public:
        explicit ToolEducationData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2970707127 || bin_class::is_type(type);
        }

        int32_t firstItem = 0;
        int32_t skillOrder = 0;
    };

    class YORDLE_EXPORT CharacterToolData : public bin_class { 
    public:
        explicit CharacterToolData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3963447610 || bin_class::is_type(type);
        }

        std::string searchTags {};
        std::string searchTagsSecondary {};
    };

    class YORDLE_EXPORT Companion : public Character { 
    public:
        explicit Companion(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2573155477 || Character::is_type(type);
        }

    };

    class YORDLE_EXPORT InteractionData : public bin_class { 
    public:
        explicit InteractionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1250691283 || bin_class::is_type(type);
        }

        std::string idleAnim {};
        bool shouldRandomizeIdleAnimPhase = false;
    };

    class YORDLE_EXPORT ISpellRankUpRequirement : public bin_class { 
    public:
        explicit ISpellRankUpRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1708005576 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT HasSkillPointRequirement : public ISpellRankUpRequirement { 
    public:
        explicit HasSkillPointRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4223600025 || ISpellRankUpRequirement::is_type(type);
        }

    };

    class YORDLE_EXPORT CharacterLevelRequirement : public ISpellRankUpRequirement { 
    public:
        explicit CharacterLevelRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 130158569 || ISpellRankUpRequirement::is_type(type);
        }

        uint32_t mLevel = 0;
    };

    class YORDLE_EXPORT HasBuffRequirement : public ISpellRankUpRequirement { 
    public:
        explicit HasBuffRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1790796033 || ISpellRankUpRequirement::is_type(type);
        }

        uint32_t mBuffName = 0;
        bool mFromAnyone = false;
    };

    class YORDLE_EXPORT SpellRankUpRequirements : public bin_class { 
    public:
        explicit SpellRankUpRequirements(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3158945758 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::ISpellRankUpRequirement>> mRequirements {};
    };

    class YORDLE_EXPORT SpellLevelUpInfo : public bin_class { 
    public:
        explicit SpellLevelUpInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2606765944 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::SpellRankUpRequirements>> mRequirements {};
    };

    class YORDLE_EXPORT RecSpellRankUpInfo : public bin_class { 
    public:
        explicit RecSpellRankUpInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 825182082 || bin_class::is_type(type);
        }

        std::set<uint8_t> mDefaultPriority {};
        std::set<uint8_t> mEarlyLevelOverrides {};
    };

    class YORDLE_EXPORT UseableData : public bin_class { 
    public:
        explicit UseableData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4101150036 || bin_class::is_type(type);
        }

        uint32_t flags = 0;
        std::string useHeroSpellName {};
        std::string useSpellName {};
        int32_t useCooldownSpellSlot = 0;
    };

    class YORDLE_EXPORT CharacterHealthBarDataRecord : public bin_class { 
    public:
        explicit CharacterHealthBarDataRecord(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 297212766 || bin_class::is_type(type);
        }

        float hpPerTick = 0.0;
        std::string attachToBone {};
        uint8_t unitHealthBarStyle = 0;
        bool showWhileUntargetable = false;
        bool x9c5124c0 = false;
        uint32_t xe784dd2f = 0;
        bool x66a7d70a = false;
        bool x8bdcfa04 = false;
        bool x7f0b706e = false;
    };

    class YORDLE_EXPORT SponsoredBanner : public bin_class { 
    public:
        explicit SponsoredBanner(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 6610142 || bin_class::is_type(type);
        }

        uint32_t banner = 0;
        uint64_t SponsorTexturePath = 0;
    };

    class YORDLE_EXPORT EsportsBannerConfiguration : public bin_class { 
    public:
        explicit EsportsBannerConfiguration(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3503743985 || bin_class::is_type(type);
        }

        std::string name {};
        uint32_t esportsTeam = 0;
        std::string leagueName {};
        uint32_t eventMutator = 0;
        uint64_t texturePath = 0;
        std::set<std::shared_ptr<yordle::data::meta::SponsoredBanner>> IndividualBannerOverrides {};
    };

    class YORDLE_EXPORT EsportsBannerData : public bin_class { 
    public:
        explicit EsportsBannerData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 761042637 || bin_class::is_type(type);
        }

        std::string bannerName {};
        uint32_t Team = 0;
    };

    class YORDLE_EXPORT EsportsData : public bin_class { 
    public:
        explicit EsportsData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 249502963 || bin_class::is_type(type);
        }

        std::set<std::string> leagues {};
    };

    class YORDLE_EXPORT ClashLogo : public bin_class { 
    public:
        explicit ClashLogo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1951208621 || bin_class::is_type(type);
        }

        uint32_t mClashLogoId = 0;
        uint32_t mClashLogoColorId = 0;
        std::string mLogoPath {};
    };

    class YORDLE_EXPORT EsportsBannerOptions : public bin_class { 
    public:
        explicit EsportsBannerOptions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 224714173 || bin_class::is_type(type);
        }

        std::string subMeshName {};
        bool IsSpectatorOnly = false;
        uint64_t defaultTexturePath = 0;
        uint32_t DefaultBlankMaterial = 0;
    };

    class YORDLE_EXPORT MasteryBadgeData : public bin_class { 
    public:
        explicit MasteryBadgeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1337363141 || bin_class::is_type(type);
        }

        uint32_t mName = 0;
        std::string mParticleName {};
        float mRenderScale = 0.0;
        float mVerticalOffset = 0.0;
        int32_t mSummonerIconId = 0;
        uint32_t mMasteryLevel = 0;
    };

    class YORDLE_EXPORT MasteryBadgeConfig : public bin_class { 
    public:
        explicit MasteryBadgeConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4114078183 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::MasteryBadgeData>> mBadges {};
    };

    class YORDLE_EXPORT MasteryData : public bin_class { 
    public:
        explicit MasteryData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 505623326 || bin_class::is_type(type);
        }

        std::string texture {};
        std::string LevelTraKey {};
        std::string DetailsTraKey {};
    };

    class YORDLE_EXPORT ChampionMasteryMap : public bin_class { 
    public:
        explicit ChampionMasteryMap(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2781975535 || bin_class::is_type(type);
        }

        std::map<int32_t, uint32_t> masteryData {};
    };

    class YORDLE_EXPORT BaseLoadoutData : public bin_class { 
    public:
        explicit BaseLoadoutData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2514536512 || bin_class::is_type(type);
        }

        std::string mNameTraKey {};
        std::shared_ptr<yordle::data::meta::CatalogEntry> catalogEntry {};
        std::string mDescriptionTraKey {};
    };

    class YORDLE_EXPORT LoadoutFeatureData : public bin_class { 
    public:
        explicit LoadoutFeatureData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3930402607 || bin_class::is_type(type);
        }

        uint32_t mFeature = 0;
        std::optional<std::string> mMutator {};
        std::optional<std::string> mBinaryFile {};
        std::string mLoadoutCategory {};
        std::set<std::string> mLoadoutProperties {};
        std::map<std::string, std::string> mGDSObjectPathTemplates {};
        bool mLoadFromContentIds = false;
    };

    class YORDLE_EXPORT RecallDecalData : public bin_class { 
    public:
        explicit RecallDecalData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 695369637 || bin_class::is_type(type);
        }

        std::string effectFile {};
        std::string arrivalEffectFile {};
        std::string EmpoweredEffectFile {};
        std::string EmpoweredArrivalFile {};
        uint32_t recallDecalId = 0;
    };

    class YORDLE_EXPORT GearSkinUpgrade : public bin_class { 
    public:
        explicit GearSkinUpgrade(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 668820321 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mGearData {};
        std::string x358d080b {};
    };

    class YORDLE_EXPORT SkinUpgradeData : public bin_class { 
    public:
        explicit SkinUpgradeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1760736924 || bin_class::is_type(type);
        }

        std::set<uint32_t> mGearSkinUpgrades {};
    };

    class YORDLE_EXPORT TFTCompanionBucket : public bin_class { 
    public:
        explicit TFTCompanionBucket(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4009991563 || bin_class::is_type(type);
        }

        std::set<uint32_t> Companions {};
    };

    class YORDLE_EXPORT TFTBotLoadoutConfiguration : public bin_class { 
    public:
        explicit TFTBotLoadoutConfiguration(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2097505044 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::TFTCompanionBucket>> xeffbc65c {};
        std::set<uint32_t> mapSkins {};
    };

    class YORDLE_EXPORT BannerFlagData : public bin_class { 
    public:
        explicit BannerFlagData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2025704385 || bin_class::is_type(type);
        }

        uint32_t animationGraphData = 0;
        std::shared_ptr<yordle::data::meta::bin_class> skinMeshProperties {};
    };

    class YORDLE_EXPORT BannerFrameData : public bin_class { 
    public:
        explicit BannerFrameData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3564953724 || bin_class::is_type(type);
        }

        uint32_t animationGraphData = 0;
        std::shared_ptr<yordle::data::meta::bin_class> skinMeshProperties {};
    };

    class YORDLE_EXPORT CompanionData : public BaseLoadoutData { 
    public:
        explicit CompanionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2093092437 || BaseLoadoutData::is_type(type);
        }

        uint32_t rarity = 0;
        uint32_t level = 0;
        bool mDisabled = false;
        uint32_t mCharacter = 0;
        uint32_t mSkinId = 0;
        std::string speciesLink {};
        std::string mStandaloneCircleIcon {};
        std::string mStandaloneLoadoutsIcon {};
        std::string mStandaloneLoadoutsLargeIcon {};
        std::string mLoadScreen {};
    };

    class YORDLE_EXPORT CompanionSpeciesData : public bin_class { 
    public:
        explicit CompanionSpeciesData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2386264729 || bin_class::is_type(type);
        }

        std::string mSpeciesName {};
        uint32_t mSpeciesId = 0;
    };

    class YORDLE_EXPORT SummonerEmote : public bin_class { 
    public:
        explicit SummonerEmote(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1950165531 || bin_class::is_type(type);
        }

        uint32_t summonerEmoteId = 0;
        uint32_t vfxSystem = 0;
        std::string announcementIcon {};
        std::string selectionIcon {};
        float renderScale = 0.0;
        float verticalOffset = 0.0;
        std::string visibleSelectionName {};
    };

    class YORDLE_EXPORT SummonerEmoteSettings : public bin_class { 
    public:
        explicit SummonerEmoteSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 508241094 || bin_class::is_type(type);
        }

        uint32_t mFirstBlood = 0;
        uint32_t mAce = 0;
    };

    class YORDLE_EXPORT GearData : public bin_class { 
    public:
        explicit GearData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3023323566 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> skinMeshProperties {};
        uint32_t animationGraphData = 0;
        std::shared_ptr<yordle::data::meta::bin_class> mVFXResourceResolver {};
        std::string mEquipAnimation {};
        std::string mSelfOnlyPortraitIcon {};
        std::string mPortraitIcon {};
        std::set<uint32_t> xb6c044fb {};
        std::set<uint32_t> x21b6167e {};
    };

    class YORDLE_EXPORT ModeProgressionRewardData : public BaseLoadoutData { 
    public:
        explicit ModeProgressionRewardData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2355674 || BaseLoadoutData::is_type(type);
        }

        std::string mBuffName {};
        std::set<std::string> mCharacters {};
        std::shared_ptr<yordle::data::meta::bin_class> mVFXResourceResolver {};
    };

    class YORDLE_EXPORT RegaliaData : public BaseLoadoutData { 
    public:
        explicit RegaliaData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2286074286 || BaseLoadoutData::is_type(type);
        }

        std::string texture {};
    };

    class YORDLE_EXPORT RegaliaLookup : public bin_class { 
    public:
        explicit RegaliaLookup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1780014848 || bin_class::is_type(type);
        }

        std::string tier {};
        uint32_t regaliaCrest = 0;
        uint32_t regaliaCrown1 = 0;
        uint32_t regaliaCrown2 = 0;
        uint32_t regaliaCrown3 = 0;
        uint32_t regaliaCrown4 = 0;
        uint32_t RegaliaTrim = 0;
        uint32_t regaliaSplit1 = 0;
        uint32_t regaliaSplit2 = 0;
        uint32_t regaliaSplit3 = 0;
    };

    class YORDLE_EXPORT RegaliaRankedCrestEntry : public bin_class { 
    public:
        explicit RegaliaRankedCrestEntry(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3828118224 || bin_class::is_type(type);
        }

        uint32_t base = 0;
        std::map<int32_t, uint32_t> xfbb20410 {};
        std::map<int32_t, uint32_t> xaf2e170a {};
    };

    class YORDLE_EXPORT RegaliaRankedCrestMap : public bin_class { 
    public:
        explicit RegaliaRankedCrestMap(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2415052226 || bin_class::is_type(type);
        }

        std::map<std::string, std::shared_ptr<yordle::data::meta::RegaliaRankedCrestEntry>> x723d6f91 {};
    };

    class YORDLE_EXPORT RegaliaPrestigeCrestList : public bin_class { 
    public:
        explicit RegaliaPrestigeCrestList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3350243090 || bin_class::is_type(type);
        }

        std::set<uint32_t> PrestigeCrests {};
    };

    class YORDLE_EXPORT RegaliaRankedBannerMap : public bin_class { 
    public:
        explicit RegaliaRankedBannerMap(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 761319899 || bin_class::is_type(type);
        }

        std::map<std::string, uint32_t> xc5b8b568 {};
    };

    class YORDLE_EXPORT x2ba8fc33 : public bin_class { 
    public:
        explicit x2ba8fc33(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 732494899 || bin_class::is_type(type);
        }

        std::map<std::string, std::shared_ptr<yordle::data::meta::RegaliaData>> x5b1fd3c2 {};
    };

    class YORDLE_EXPORT StatStoneEventToTrack : public bin_class { 
    public:
        explicit StatStoneEventToTrack(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4146948500 || bin_class::is_type(type);
        }

        uint32_t EventToTrack = 0;
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> StatFilters {};
    };

    class YORDLE_EXPORT StatStoneData : public BaseLoadoutData { 
    public:
        explicit StatStoneData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3978526660 || BaseLoadoutData::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::StatStoneEventToTrack>> EventsToTrack {};
        uint32_t category = 0;
        uint32_t xfb2a56ef = 0;
        uint32_t x286fc9c3 = 0;
        std::set<uint64_t> Milestones {};
        bool EpicStatStone = false;
        bool TriggeredFromScript = false;
        bool IsRetired = false;
        uint8_t trackingType = 0;
        std::string stoneName {};
        bool x92bd18ab = false;
    };

    class YORDLE_EXPORT IStatStoneLogicDriver : public bin_class { 
    public:
        explicit IStatStoneLogicDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3276314181 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT TargetHasUnitTagFilter : public IStatStoneLogicDriver { 
    public:
        explicit TargetHasUnitTagFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3196462184 || IStatStoneLogicDriver::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> UnitTags {};
    };

    class YORDLE_EXPORT TrueDamageGivenFilter : public IStatStoneLogicDriver { 
    public:
        explicit TrueDamageGivenFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2925773367 || IStatStoneLogicDriver::is_type(type);
        }

    };

    class YORDLE_EXPORT CrowdControlFilter : public IStatStoneLogicDriver { 
    public:
        explicit CrowdControlFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2898073997 || IStatStoneLogicDriver::is_type(type);
        }

        std::set<uint8_t> x20cf84ac {};
        bool TrackDuration = false;
    };

    class YORDLE_EXPORT TargetHasBuffFilter : public IStatStoneLogicDriver { 
    public:
        explicit TargetHasBuffFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2971935795 || IStatStoneLogicDriver::is_type(type);
        }

        std::set<uint8_t> ValidBuffs {};
    };

    class YORDLE_EXPORT SourceTypeFilter : public IStatStoneLogicDriver { 
    public:
        explicit SourceTypeFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1442793122 || IStatStoneLogicDriver::is_type(type);
        }

        bool x47bac313 = false;
        bool x1e3fcd64 = false;
        bool xd5e57340 = false;
    };

    class YORDLE_EXPORT TargetTypeFilter : public IStatStoneLogicDriver { 
    public:
        explicit TargetTypeFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3994264754 || IStatStoneLogicDriver::is_type(type);
        }

        bool x47bac313 = false;
        bool x1e3fcd64 = false;
        bool xd5e57340 = false;
    };

    class YORDLE_EXPORT TargetTeamFilter : public IStatStoneLogicDriver { 
    public:
        explicit TargetTeamFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3663270019 || IStatStoneLogicDriver::is_type(type);
        }

        bool ally = false;
        bool enemy = false;
        bool Self = false;
    };

    class YORDLE_EXPORT SourceLessThanHealthPercentageFilter : public IStatStoneLogicDriver { 
    public:
        explicit SourceLessThanHealthPercentageFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1577686390 || IStatStoneLogicDriver::is_type(type);
        }

        float healthPercentage = 0.0;
    };

    class YORDLE_EXPORT AssistCountFilter : public IStatStoneLogicDriver { 
    public:
        explicit AssistCountFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3383798399 || IStatStoneLogicDriver::is_type(type);
        }

        uint8_t assistCount = 0;
    };

    class YORDLE_EXPORT MultiKillLogic : public IStatStoneLogicDriver { 
    public:
        explicit MultiKillLogic(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3987305908 || IStatStoneLogicDriver::is_type(type);
        }

    };

    class YORDLE_EXPORT DamageShieldedLogic : public IStatStoneLogicDriver { 
    public:
        explicit DamageShieldedLogic(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2857147974 || IStatStoneLogicDriver::is_type(type);
        }

        bool xa1e033be = false;
        bool x7944553a = false;
        bool x2ad527a6 = false;
        bool x621e14db = false;
        bool x60b7c1b6 = false;
        bool xcbc2f8ba = false;
        bool x2efb9d27 = false;
        bool x1701ca0a = false;
    };

    class YORDLE_EXPORT GoldSourceFilter : public IStatStoneLogicDriver { 
    public:
        explicit GoldSourceFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 924071072 || IStatStoneLogicDriver::is_type(type);
        }

        uint8_t ValidGoldSource = 0;
    };

    class YORDLE_EXPORT KillingSpreeFilter : public IStatStoneLogicDriver { 
    public:
        explicit KillingSpreeFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3258535250 || IStatStoneLogicDriver::is_type(type);
        }

        int32_t KillingSpreeCount = 0;
    };

    class YORDLE_EXPORT NeutralMinionCampClearedLogic : public IStatStoneLogicDriver { 
    public:
        explicit NeutralMinionCampClearedLogic(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2516419817 || IStatStoneLogicDriver::is_type(type);
        }

    };

    class YORDLE_EXPORT TurretFirstBloodLogic : public IStatStoneLogicDriver { 
    public:
        explicit TurretFirstBloodLogic(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1203614713 || IStatStoneLogicDriver::is_type(type);
        }

    };

    class YORDLE_EXPORT StatStoneSet : public bin_class { 
    public:
        explicit StatStoneSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2524344308 || bin_class::is_type(type);
        }

        std::string name {};
        std::shared_ptr<yordle::data::meta::CatalogEntry> catalogEntry {};
        std::set<uint32_t> statStones {};
    };

    class YORDLE_EXPORT StatStoneCategory : public bin_class { 
    public:
        explicit StatStoneCategory(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3156432820 || bin_class::is_type(type);
        }

        std::string gameIconUnlit {};
        std::string gameIconLit {};
        std::string gameIconFull {};
        std::string gameIconMini {};
        std::array<uint8_t, 4> CategoryColor {};
    };

    class YORDLE_EXPORT xead1b379 : public bin_class { 
    public:
        explicit xead1b379(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3939611513 || bin_class::is_type(type);
        }

        std::map<uint32_t, uint32_t> xfb403eda {};
    };

    class YORDLE_EXPORT x32be2466 : public bin_class { 
    public:
        explicit x32be2466(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 851321958 || bin_class::is_type(type);
        }

        std::map<uint32_t, uint32_t> x1a28d722 {};
    };

    class YORDLE_EXPORT TFTDamageSkin : public BaseLoadoutData { 
    public:
        explicit TFTDamageSkin(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2265035565 || BaseLoadoutData::is_type(type);
        }

        std::string mName {};
        uint32_t rarity = 0;
        std::string DamageBuffName {};
        uint32_t level = 0;
        bool disabled = false;
        uint32_t SkinID = 0;
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> x31af5dc6 {};
        uint32_t VfxResourceResolver = 0;
        std::string StandaloneLoadoutsIcon {};
        std::string StandaloneLoadoutsLargeIcon {};
        std::set<std::string> AudioBankPaths {};
        float x7ed5b4a7 = 0.0;
    };

    class YORDLE_EXPORT TftDamageSkinDescriptor : public bin_class { 
    public:
        explicit TftDamageSkinDescriptor(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3607046696 || bin_class::is_type(type);
        }

        uint32_t EffectType = 0;
        uint32_t x9d0cca5b = 0;
        std::string effectKey {};
        uint32_t AttachedToBone = 0;
        float EffectDelay = 0.0;
    };

    class YORDLE_EXPORT TftMapGroupData : public bin_class { 
    public:
        explicit TftMapGroupData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2233303452 || bin_class::is_type(type);
        }

        std::string mName {};
        uint32_t mId = 0;
    };

    class YORDLE_EXPORT TftMapSkin : public BaseLoadoutData { 
    public:
        explicit TftMapSkin(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2731557552 || BaseLoadoutData::is_type(type);
        }

        uint32_t rarity = 0;
        std::string StandaloneLoadoutsIcon {};
        std::string StandaloneLoadoutsLargeIcon {};
        std::string GroupLink {};
        std::set<std::string> AudioBankPaths {};
        std::set<uint32_t> characters {};
        std::string mapContainer {};
        uint16_t xafc467eb = 0;
        uint16_t x6e39b04a = 0;
    };

    class YORDLE_EXPORT TrophyData : public BaseLoadoutData { 
    public:
        explicit TrophyData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1176619879 || BaseLoadoutData::is_type(type);
        }

        float mPerceptionBubbleRadius = 0.0;
        std::shared_ptr<yordle::data::meta::bin_class> skinMeshProperties {};
        uint32_t animationGraphData = 0;
        std::shared_ptr<yordle::data::meta::bin_class> mVFXResourceResolver {};
        std::string mBracketTRAKey {};
    };

    class YORDLE_EXPORT TrophyPedestalData : public BaseLoadoutData { 
    public:
        explicit TrophyPedestalData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4045134945 || BaseLoadoutData::is_type(type);
        }

        uint32_t animationGraphData = 0;
        std::string mJointName {};
        std::shared_ptr<yordle::data::meta::bin_class> skinMeshProperties {};
        std::string mTierTRAKey {};
    };

    class YORDLE_EXPORT x1650a4ce : public bin_class { 
    public:
        explicit x1650a4ce(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 374383822 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT EmblemPosition : public bin_class { 
    public:
        explicit EmblemPosition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1572178072 || bin_class::is_type(type);
        }

        std::string mVertical {};
        std::string mHorizontal {};
    };

    class YORDLE_EXPORT EmblemData : public bin_class { 
    public:
        explicit EmblemData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1713655491 || bin_class::is_type(type);
        }

        bool mShowOnLoadingScreen = false;
        float mLoadingScreenScale = 0.0;
        std::string mImagePath {};
    };

    class YORDLE_EXPORT EmblemSettings : public bin_class { 
    public:
        explicit EmblemSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 381157638 || bin_class::is_type(type);
        }

        float mBottomFraction = 0.0;
        bool mDebugDrawEmblems = false;
    };

    class YORDLE_EXPORT GameModeAutoItemPurchasingConfig : public bin_class { 
    public:
        explicit GameModeAutoItemPurchasingConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1773891178 || bin_class::is_type(type);
        }

        int32_t x19ef67a2 = 0;
        std::set<std::string> xe34f62d0 {};
        std::set<std::string> xc8adfdbc {};
        std::set<std::string> x83f0cccd {};
        uint32_t x14596d09 = 0;
    };

    class YORDLE_EXPORT GameModeChampionList : public bin_class { 
    public:
        explicit GameModeChampionList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2322891183 || bin_class::is_type(type);
        }

        std::set<uint32_t> mChampions {};
    };

    class YORDLE_EXPORT GameModeConstant : public bin_class { 
    public:
        explicit GameModeConstant(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1670770484 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT GameModeConstantFloat : public GameModeConstant { 
    public:
        explicit GameModeConstantFloat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2541033414 || GameModeConstant::is_type(type);
        }

        float mValue = 0.0;
    };

    class YORDLE_EXPORT GameModeConstantInteger : public GameModeConstant { 
    public:
        explicit GameModeConstantInteger(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1074986366 || GameModeConstant::is_type(type);
        }

        int32_t mValue = 0;
    };

    class YORDLE_EXPORT GameModeConstantBool : public GameModeConstant { 
    public:
        explicit GameModeConstantBool(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1679679788 || GameModeConstant::is_type(type);
        }

        bool mValue = false;
    };

    class YORDLE_EXPORT GameModeConstantString : public GameModeConstant { 
    public:
        explicit GameModeConstantString(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2710093141 || GameModeConstant::is_type(type);
        }

        std::string mValue {};
    };

    class YORDLE_EXPORT GameModeConstantStringVector : public GameModeConstant { 
    public:
        explicit GameModeConstantStringVector(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3193188146 || GameModeConstant::is_type(type);
        }

        std::set<std::string> mValue {};
    };

    class YORDLE_EXPORT GameModeConstantTRAKey : public GameModeConstant { 
    public:
        explicit GameModeConstantTRAKey(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4100984476 || GameModeConstant::is_type(type);
        }

        std::string mValue {};
    };

    class YORDLE_EXPORT GameModeConstantVector3f : public GameModeConstant { 
    public:
        explicit GameModeConstantVector3f(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2293025490 || GameModeConstant::is_type(type);
        }

        std::array<float, 3> mValue {};
    };

    class YORDLE_EXPORT GameModeConstantFloatPerLevel : public GameModeConstant { 
    public:
        explicit GameModeConstantFloatPerLevel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2851992205 || GameModeConstant::is_type(type);
        }

        std::set<float> mValues {};
    };

    class YORDLE_EXPORT GameModeConstantsGroup : public bin_class { 
    public:
        explicit GameModeConstantsGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 720276364 || bin_class::is_type(type);
        }

        std::map<uint32_t, std::shared_ptr<yordle::data::meta::GameModeConstant>> mConstants {};
    };

    class YORDLE_EXPORT GameModeConstants : public bin_class { 
    public:
        explicit GameModeConstants(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 201829573 || bin_class::is_type(type);
        }

        std::map<uint32_t, std::shared_ptr<yordle::data::meta::GameModeConstantsGroup>> mGroups {};
    };

    class YORDLE_EXPORT GameModeItemList : public bin_class { 
    public:
        explicit GameModeItemList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 401601815 || bin_class::is_type(type);
        }

        std::set<uint32_t> mItems {};
    };

    class YORDLE_EXPORT GameModeMapData : public bin_class { 
    public:
        explicit GameModeMapData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2312017462 || bin_class::is_type(type);
        }

        uint32_t mModeName = 0;
        std::set<uint32_t> mChampionLists {};
        std::set<uint32_t> itemLists {};
        std::string xf74c67bb {};
        uint32_t mItemShopData = 0;
        uint32_t AnnouncementsMapping = 0;
        bool mRelativeColorization = false;
        uint32_t mNeutralTimersDisplay = 0;
        uint32_t mCursorConfig = 0;
        uint32_t mCursorConfigUpdate = 0;
        uint32_t mHudScoreData = 0;
        uint32_t mRenderStyle = 0;
        uint32_t mFloatingTextOverride = 0;
        uint32_t mStatsUiData = 0;
        bool mChampionIndicatorEnabled = false;
        bool ItemShopEnabled = false;
        uint32_t mExperienceCurveData = 0;
        uint32_t mExperienceModData = 0;
        uint32_t mDeathTimes = 0;
        uint32_t mLoadScreenTipConfiguration = 0;
        uint32_t mMapLocators = 0;
        std::set<uint32_t> mScriptDataObjectLists {};
        std::shared_ptr<yordle::data::meta::bin_class> mPerkReplacements {};
        uint32_t mGameModeConstants = 0;
        uint32_t mGameplayConfig = 0;
        uint32_t mMissionBuffData = 0;
        uint32_t mSurrenderSettings = 0;
        uint32_t x6941e612 = 0;
        bool x882a6450 = false;
        std::set<uint32_t> x70b29c3d {};
        std::string mLoadingScreenBackground {};
    };

    class YORDLE_EXPORT GameMutatorExpansions : public bin_class { 
    public:
        explicit GameMutatorExpansions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4119089369 || bin_class::is_type(type);
        }

        std::string mExpandedMutator {};
        std::set<std::string> mMutators {};
    };

    class YORDLE_EXPORT IGameCalculationPart : public bin_class { 
    public:
        explicit IGameCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3053458126 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT EffectValueCalculationPart : public IGameCalculationPart { 
    public:
        explicit EffectValueCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2344649559 || IGameCalculationPart::is_type(type);
        }

        int32_t mEffectIndex = 0;
    };

    class YORDLE_EXPORT NamedDataValueCalculationPart : public IGameCalculationPart { 
    public:
        explicit NamedDataValueCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 858698817 || IGameCalculationPart::is_type(type);
        }

        uint32_t mDataValue = 0;
    };

    class YORDLE_EXPORT CooldownMultiplierCalculationPart : public IGameCalculationPart { 
    public:
        explicit CooldownMultiplierCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 515850313 || IGameCalculationPart::is_type(type);
        }

    };

    class YORDLE_EXPORT CustomReductionMultiplierCalculationPart : public IGameCalculationPart { 
    public:
        explicit CustomReductionMultiplierCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2599819896 || IGameCalculationPart::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IGameCalculationPart> x6e82b179 {};
        float mMaximumReductionPercent = 0.0;
    };

    class YORDLE_EXPORT ProductOfSubPartsCalculationPart : public IGameCalculationPart { 
    public:
        explicit ProductOfSubPartsCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2903535207 || IGameCalculationPart::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IGameCalculationPart> mPart1 {};
        std::shared_ptr<yordle::data::meta::IGameCalculationPart> mPart2 {};
    };

    class YORDLE_EXPORT SumOfSubPartsCalculationPart : public IGameCalculationPart { 
    public:
        explicit SumOfSubPartsCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2225484659 || IGameCalculationPart::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IGameCalculationPart>> mSubparts {};
    };

    class YORDLE_EXPORT x803dae4c : public IGameCalculationPart { 
    public:
        explicit x803dae4c(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2151525964 || IGameCalculationPart::is_type(type);
        }

        std::optional<float> mCeiling {};
        std::optional<float> mFloor {};
        std::set<std::shared_ptr<yordle::data::meta::IGameCalculationPart>> mSubparts {};
    };

    class YORDLE_EXPORT NumberCalculationPart : public IGameCalculationPart { 
    public:
        explicit NumberCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2667126912 || IGameCalculationPart::is_type(type);
        }

        float mNumber = 0.0;
    };

    class YORDLE_EXPORT IGameCalculationPartWithStats : public IGameCalculationPart { 
    public:
        explicit IGameCalculationPartWithStats(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3052837161 || IGameCalculationPart::is_type(type);
        }

        uint8_t mStat = 0;
        uint8_t mStatFormula = 0;
    };

    class YORDLE_EXPORT StatByCoefficientCalculationPart : public IGameCalculationPartWithStats { 
    public:
        explicit StatByCoefficientCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1477816489 || IGameCalculationPartWithStats::is_type(type);
        }

        float mCoefficient = 0.0;
    };

    class YORDLE_EXPORT StatBySubPartCalculationPart : public IGameCalculationPartWithStats { 
    public:
        explicit StatBySubPartCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3440733311 || IGameCalculationPartWithStats::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IGameCalculationPart> mSubpart {};
    };

    class YORDLE_EXPORT StatByNamedDataValueCalculationPart : public IGameCalculationPartWithStats { 
    public:
        explicit StatByNamedDataValueCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1599893668 || IGameCalculationPartWithStats::is_type(type);
        }

        uint32_t mDataValue = 0;
    };

    class YORDLE_EXPORT x5abdfab : public IGameCalculationPart { 
    public:
        explicit x5abdfab(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 95149995 || IGameCalculationPart::is_type(type);
        }

        uint8_t mStat = 0;
        uint8_t mStatFormula = 0;
        float xbfe6ad01 = 0.0;
        uint32_t mDataValue = 0;
    };

    class YORDLE_EXPORT xe9fb4d18 : public IGameCalculationPart { 
    public:
        explicit xe9fb4d18(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3925560600 || IGameCalculationPart::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IGameCalculationPart> x616627c4 {};
        uint8_t x465802ea = 0;
        uint8_t x27833dcc = 0;
    };

    class YORDLE_EXPORT SubPartScaledProportionalToStat : public IGameCalculationPart { 
    public:
        explicit SubPartScaledProportionalToStat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2572940566 || IGameCalculationPart::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IGameCalculationPart> mSubpart {};
        float mRatio = 0.0;
        uint8_t mStat = 0;
        uint8_t mStatFormula = 0;
        std::string mStyleTag {};
        std::string xa5749b52 {};
    };

    class YORDLE_EXPORT AbilityResourceByCoefficientCalculationPart : public IGameCalculationPart { 
    public:
        explicit AbilityResourceByCoefficientCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1983743771 || IGameCalculationPart::is_type(type);
        }

        float mCoefficient = 0.0;
        uint8_t mAbilityResource = 0;
        uint8_t mStatFormula = 0;
    };

    class YORDLE_EXPORT IGameCalculationPartWithBuffCounter : public IGameCalculationPart { 
    public:
        explicit IGameCalculationPartWithBuffCounter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1989226833 || IGameCalculationPart::is_type(type);
        }

        uint32_t mBuffName = 0;
        std::string mIconKey {};
        std::string mScalingTagKey {};
    };

    class YORDLE_EXPORT BuffCounterByCoefficientCalculationPart : public IGameCalculationPartWithBuffCounter { 
    public:
        explicit BuffCounterByCoefficientCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1255179386 || IGameCalculationPartWithBuffCounter::is_type(type);
        }

        float mCoefficient = 0.0;
    };

    class YORDLE_EXPORT BuffCounterByNamedDataValueCalculationPart : public IGameCalculationPartWithBuffCounter { 
    public:
        explicit BuffCounterByNamedDataValueCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2063182569 || IGameCalculationPartWithBuffCounter::is_type(type);
        }

        uint32_t mDataValue = 0;
    };

    class YORDLE_EXPORT IGameCalculationPartByCharLevel : public IGameCalculationPart { 
    public:
        explicit IGameCalculationPartByCharLevel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 308440063 || IGameCalculationPart::is_type(type);
        }

    };

    class YORDLE_EXPORT ByCharLevelInterpolationCalculationPart : public IGameCalculationPartByCharLevel { 
    public:
        explicit ByCharLevelInterpolationCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 369020348 || IGameCalculationPartByCharLevel::is_type(type);
        }

        float mStartValue = 0.0;
        float mEndValue = 0.0;
        bool x7fe8e3b3 = false;
        bool xa331f6bf = false;
    };

    class YORDLE_EXPORT ByCharLevelBreakpointsCalculationPart : public IGameCalculationPartByCharLevel { 
    public:
        explicit ByCharLevelBreakpointsCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1559666382 || IGameCalculationPartByCharLevel::is_type(type);
        }

        float mLevel1Value = 0.0;
        float x2deb550 = 0.0;
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mBreakpoints {};
    };

    class YORDLE_EXPORT Breakpoint : public bin_class { 
    public:
        explicit Breakpoint(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2392053998 || bin_class::is_type(type);
        }

        uint32_t mLevel = 0;
        float xd5fd07ed = 0.0;
        float x57fdc438 = 0.0;
    };

    class YORDLE_EXPORT ByCharLevelFormulaCalculationPart : public IGameCalculationPartByCharLevel { 
    public:
        explicit ByCharLevelFormulaCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 606188120 || IGameCalculationPartByCharLevel::is_type(type);
        }

        std::set<float> mValues {};
    };

    class YORDLE_EXPORT x663d5e00 : public IGameCalculationPart { 
    public:
        explicit x663d5e00(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1715297792 || IGameCalculationPart::is_type(type);
        }

        float Coefficient = 0.0;
        uint8_t epicness = 0;
    };

    class YORDLE_EXPORT IGameCalculation : public bin_class { 
    public:
        explicit IGameCalculation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 389493299 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IGameCalculationPart> mMultiplier {};
        uint8_t xcbcac618 = 0;
        uint8_t x37070a8d = 0;
        uint8_t xe6eebb2f = 0;
        bool tooltipOnly = false;
    };

    class YORDLE_EXPORT GameCalculation : public IGameCalculation { 
    public:
        explicit GameCalculation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3158348420 || IGameCalculation::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IGameCalculationPart>> mFormulaParts {};
        bool mDisplayAsPercent = false;
        int32_t mPrecision = 0;
    };

    class YORDLE_EXPORT GameCalculationModified : public IGameCalculation { 
    public:
        explicit GameCalculationModified(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 118371731 || IGameCalculation::is_type(type);
        }

        std::optional<int32_t> mOverrideSpellLevel {};
        uint32_t mModifiedGameCalculation = 0;
    };

    class YORDLE_EXPORT GameCalculationConditional : public IGameCalculation { 
    public:
        explicit GameCalculationConditional(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3922646404 || IGameCalculation::is_type(type);
        }

        uint32_t mDefaultGameCalculation = 0;
        uint32_t mConditionalGameCalculation = 0;
        std::shared_ptr<yordle::data::meta::bin_class> xc0482365 {};
    };

    class YORDLE_EXPORT GameplayConfig : public bin_class { 
    public:
        explicit GameplayConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3168105463 || bin_class::is_type(type);
        }

        float mSpellPostponeTimeoutSec = 0.0;
        float mAutoAttackMinPreCastLockoutDeltaTimeSec = 0.0;
        float mAutoAttackMinPostCastLockoutDeltaTimeSec = 0.0;
        float mLethalityPercentGivenAtLevel0 = 0.0;
        int32_t mLethalityScalesToLevel = 0;
        int32_t mLethalityScalesCapsAtLevel = 0;
        float mLethalityRatioFromTarget = 0.0;
        float mLethalityRatioFromAttacker = 0.0;
        float AbilityHasteMax = 0.0;
        float mCritTotalArmorPenPercent = 0.0;
        float mCritBonusArmorPenPercent = 0.0;
        float mCritGlobalDamageMultiplier = 0.0;
        float mAdaptiveForceAbilityPowerScale = 0.0;
        float mAdaptiveForceAttackDamageScale = 0.0;
        float mMinionDeathDelay = 0.0;
        float mMinionAutoLeeway = 0.0;
        float mMinionAAHelperLimit = 0.0;
        float mItemSellQueueTime = 0.0;
        std::shared_ptr<yordle::data::meta::bin_class> mCCScoreMultipliers {};
        bool mPerSlotCDRIsAdditive = false;
        std::set<uint32_t> mSummonerSpells {};
        std::set<uint32_t> mLegacySummonerSpells {};
        std::shared_ptr<yordle::data::meta::IGameCalculation> mBasicAttackCalculation {};
        uint32_t ItemsRolesPerRow = 0;
        uint32_t xa64802f2 = 0;
    };

    class YORDLE_EXPORT EnchantmentGroup : public bin_class { 
    public:
        explicit EnchantmentGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 903342517 || bin_class::is_type(type);
        }

        std::set<int32_t> mEnchantments {};
        std::set<int32_t> mBaseItems {};
        bool mCanSidegrade = false;
        int32_t mItemIdRangeMinimum = 0;
        int32_t mItemIdRangeMaximum = 0;
    };

    class YORDLE_EXPORT ItemData : public bin_class { 
    public:
        explicit ItemData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 608970470 || bin_class::is_type(type);
        }

        std::string spellName {};
        std::string mDisplayName {};
        std::string mRequiredChampion {};
        std::string mRequiredAlly {};
        int32_t mRequiredLevel = 0;
        std::string mRequiredSpellName {};
        std::set<uint32_t> mRequiredPurchaseIdentities {};
        std::string mDisabledDescriptionOverride {};
        std::string mParentEnchantmentGroup {};
        std::string mDeathRecapName {};
        int32_t itemID = 0;
        int32_t maxStack = 0;
        std::set<uint32_t> mItemGroups {};
        std::set<uint32_t> mItemAdviceAttributes {};
        uint32_t itemVOGroup = 0;
        int32_t price = 0;
        std::string mRequiredBuffCurrencyName {};
        int32_t mRequiredBuffCurrencyCost = 0;
        float mSidegradeCredit = 0.0;
        bool consumed = false;
        bool usableInStore = false;
        bool consumeOnAcquire = false;
        bool clickable = false;
        bool mMajorActiveItem = false;
        bool mItemCalloutPlayer = false;
        bool mItemCalloutSpectator = false;
        uint8_t clearUndoHistory = 0;
        bool mCanBeSold = false;
        bool mHiddenFromOpponents = false;
        bool mIsEnchantment = false;
        int32_t specialRecipe = 0;
        uint8_t epicness = 0;
        uint8_t SecondaryEpicness = 0;
        std::set<uint32_t> recipeItemLinks {};
        std::set<uint32_t> requiredItemLinks {};
        std::set<uint32_t> sidegradeItemLinks {};
        std::set<uint32_t> mItemModifiers {};
        std::set<std::string> mScripts {};
        uint32_t parentItemLink = 0;
        uint32_t parentEnchantmentLink = 0;
        std::set<float> mEffectAmount {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mDataValues {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::bin_class>> xfb56608c {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::IGameCalculation>> mItemCalculations {};
        std::set<float> mEnchantmentEffectAmount {};
        std::set<float> mEffectByLevelAmount {};
        float mFlatCooldownMod = 0.0;
        float mPercentCooldownMod = 0.0;
        float mAbilityHasteMod = 0.0;
        float mFlatHPPoolMod = 0.0;
        float mPercentHPPoolMod = 0.0;
        float mFlatHPRegenMod = 0.0;
        float mPercentHPRegenMod = 0.0;
        float mPercentBaseHPRegenMod = 0.0;
        float mPercentTenacityItemMod = 0.0;
        float mPercentSlowResistMod = 0.0;
        float mFlatMovementSpeedMod = 0.0;
        float mPercentMovementSpeedMod = 0.0;
        float mPercentMultiplicativeMovementSpeedMod = 0.0;
        float mFlatArmorMod = 0.0;
        float mPercentArmorMod = 0.0;
        float mFlatArmorPenetrationMod = 0.0;
        float mPercentArmorPenetrationMod = 0.0;
        float mPercentBonusArmorPenetrationMod = 0.0;
        float mFlatMagicPenetrationMod = 0.0;
        float mPercentMagicPenetrationMod = 0.0;
        float mPercentBonusMagicPenetrationMod = 0.0;
        float mFlatSpellBlockMod = 0.0;
        float mPercentSpellBlockMod = 0.0;
        float mFlatDodgeMod = 0.0;
        float mFlatCritChanceMod = 0.0;
        float mFlatMissChanceMod = 0.0;
        float mFlatCritDamageMod = 0.0;
        float mPercentCritDamageMod = 0.0;
        float mFlatPhysicalDamageMod = 0.0;
        float mPercentPhysicalDamageMod = 0.0;
        float mFlatMagicDamageMod = 0.0;
        float mPercentMagicDamageMod = 0.0;
        float mFlatPhysicalReduction = 0.0;
        float mPercentPhysicalReduction = 0.0;
        float mFlatMagicReduction = 0.0;
        float mPercentMagicReduction = 0.0;
        float mPercentEXPBonus = 0.0;
        float mFlatAttackRangeMod = 0.0;
        float mPercentAttackRangeMod = 0.0;
        float mFlatCastRangeMod = 0.0;
        float mPercentCastRangeMod = 0.0;
        float mPercentAttackSpeedMod = 0.0;
        float mPercentMultiplicativeAttackSpeedMod = 0.0;
        float mPercentHealingAmountMod = 0.0;
        float mPercentLifeStealMod = 0.0;
        float mPercentSpellVampMod = 0.0;
        float PercentPhysicalVampMod = 0.0;
        float PercentOmnivampMod = 0.0;
        float mPercentSpellEffectivenessMod = 0.0;
        float mFlatBubbleRadiusMod = 0.0;
        float mPercentBubbleRadiusMod = 0.0;
        float sellBackModifier = 0.0;
        float mCooldownShowDisabledDuration = 0.0;
        float flatMPPoolMod = 0.0;
        float PercentMPPoolMod = 0.0;
        float flatMPRegenMod = 0.0;
        float PercentMPRegenMod = 0.0;
        float percentBaseMPRegenMod = 0.0;
        std::shared_ptr<yordle::data::meta::bin_class> mItemDataBuild {};
        std::set<std::string> mCategories {};
        std::shared_ptr<yordle::data::meta::bin_class> mItemDataAvailability {};
        int32_t mBuildDepth = 0;
        std::set<uint8_t> mItemAttributes {};
        int32_t x224a3815 = 0;
        uint8_t xc01bb6dd = 0;
        uint8_t x51265c89 = 0;
        std::shared_ptr<yordle::data::meta::bin_class> mItemDataClient {};
        std::shared_ptr<yordle::data::meta::bin_class> mVFXResourceResolver {};
    };

    class YORDLE_EXPORT ItemDataValue : public bin_class { 
    public:
        explicit ItemDataValue(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2999331975 || bin_class::is_type(type);
        }

        std::string mName {};
        float mValue = 0.0;
    };

    class YORDLE_EXPORT x61f8c41c : public bin_class { 
    public:
        explicit x61f8c41c(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1643693084 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::ItemDataValue>> x6afef1b {};
    };

    class YORDLE_EXPORT ItemDataAvailability : public bin_class { 
    public:
        explicit ItemDataAvailability(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3225152729 || bin_class::is_type(type);
        }

        bool mInStore = false;
        bool mForceLoad = false;
        bool mHidefromAll = false;
    };

    class YORDLE_EXPORT ItemDataBuild : public bin_class { 
    public:
        explicit ItemDataBuild(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3845505502 || bin_class::is_type(type);
        }

        std::set<uint32_t> itemLinks {};
    };

    class YORDLE_EXPORT ItemGroup : public bin_class { 
    public:
        explicit ItemGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 992861497 || bin_class::is_type(type);
        }

        uint32_t mItemGroupID = 0;
        int32_t mMaxGroupOwnable = 0;
        int32_t mInventorySlotMin = 0;
        int32_t mInventorySlotMax = 0;
        float mPurchaseCooldown = 0.0;
        bool mCooldownExtendedByAmbientGoldStart = false;
        std::set<uint32_t> mItemModifiers {};
    };

    class YORDLE_EXPORT ItemModifier : public bin_class { 
    public:
        explicit ItemModifier(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2109319947 || bin_class::is_type(type);
        }

        uint32_t mItemModifierID = 0;
        uint32_t mModifiedItem = 0;
        uint32_t mModifiedGroup = 0;
        uint32_t mModifiedIfBuildsFromItem = 0;
        int32_t mMinimumModifierInstancesToBeActive = 0;
        int32_t mMaximumModifierInstancesToBeActive = 0;
        int32_t mMaximumDeltasToStack = 0;
        bool mShowAsModifiedInUI = false;
        bool mModifierIsInheritedByOwnedParentItems = false;
        std::set<uint32_t> mAddedBuildFrom {};
        std::set<uint32_t> mRemovedBuildFrom {};
        bool mReplaceInsteadOfAddingBuildFrom = false;
        bool mIgnoreMaxGroupOwnable = false;
        uint32_t mIgnoreSpecificMaxGroupOwnable = 0;
        float mDeltaGoldCost = 0.0;
        float mDeltaGoldCostPercent = 0.0;
        float mDeltaBuffCurrencyCostPercent = 0.0;
        int32_t mDeltaRequiredLevel = 0;
        int32_t mDeltaBuffCurrencyCost = 0;
        int32_t mDeltaMaxStacks = 0;
        int32_t mVisualPriority = 0;
        std::string inventoryIconToOverlay {};
        std::string mDescriptionToAppend {};
        std::string mDescriptionToPrepend {};
        std::string mDescriptionToReplace {};
        std::string mDynamicTooltipToAppend {};
        std::string mDynamicTooltipToPrepend {};
        std::string mDynamicTooltipToReplace {};
        std::string mDisplayNameToAppend {};
        std::string mDisplayNameToPrepend {};
        std::string mDisplayNameToReplace {};
        bool mClickableToEnable = false;
        bool mMajorActiveItemToEnable = false;
        std::string mSpellNameToReplace {};
    };

    class YORDLE_EXPORT ItemDataClient : public bin_class { 
    public:
        explicit ItemDataClient(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2233135733 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mTooltipData {};
        std::string mDescription {};
        std::string mDynamicTooltip {};
        std::string mShopTooltip {};
        std::string ShopExtendedTooltip {};
        std::string inventoryIcon {};
        std::string InventoryIconSmall {};
        std::string InventoryIconLarge {};
        uint32_t InventoryIconMaterial = 0;
        uint8_t epicness = 0;
        float effectRadius = 0.0;
        std::set<int32_t> mFloatVarsDecimals {};
    };

    class YORDLE_EXPORT ChampionItemRecommendations : public bin_class { 
    public:
        explicit ChampionItemRecommendations(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3337884263 || bin_class::is_type(type);
        }

        uint32_t xcc35ff18 = 0;
        uint32_t mContextListLink = 0;
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> xad6d25a8 {};
        std::set<uint32_t> x2d7fd821 {};
    };

    class YORDLE_EXPORT ItemRecommendationItemList : public bin_class { 
    public:
        explicit ItemRecommendationItemList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1183984318 || bin_class::is_type(type);
        }

        std::set<uint32_t> mItemList {};
    };

    class YORDLE_EXPORT ItemRecommendationContextList : public bin_class { 
    public:
        explicit ItemRecommendationContextList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2188140632 || bin_class::is_type(type);
        }

        std::map<uint32_t, std::shared_ptr<yordle::data::meta::ItemRecommendationItemList>> mAllStartingItemIds {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::ItemRecommendationItemList>> xa109530e {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mContexts {};
    };

    class YORDLE_EXPORT ItemRecommendationContext : public bin_class { 
    public:
        explicit ItemRecommendationContext(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4266457040 || bin_class::is_type(type);
        }

        uint32_t mChampionId = 0;
        uint32_t mMapID = 0;
        uint32_t x37b75f5c = 0;
        uint32_t mPosition = 0;
        bool mIsDefaultPosition = false;
        std::shared_ptr<yordle::data::meta::bin_class> mStartingItemMatrix {};
        std::set<std::shared_ptr<yordle::data::meta::ItemRecommendationItemList>> mStartingItemBundles {};
        std::set<uint32_t> mPopularItems {};
        std::shared_ptr<yordle::data::meta::bin_class> mCompletedItemMatrix {};
    };

    class YORDLE_EXPORT ItemRecommendationChoices : public bin_class { 
    public:
        explicit ItemRecommendationChoices(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1589364011 || bin_class::is_type(type);
        }

        std::set<uint32_t> mChoices {};
    };

    class YORDLE_EXPORT ItemRecommendationMatrixRow : public bin_class { 
    public:
        explicit ItemRecommendationMatrixRow(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2727115092 || bin_class::is_type(type);
        }

        std::map<std::string, std::shared_ptr<yordle::data::meta::ItemRecommendationChoices>> mChoicesMap {};
    };

    class YORDLE_EXPORT ItemRecommendationMatrix : public bin_class { 
    public:
        explicit ItemRecommendationMatrix(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 779837744 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::ItemRecommendationMatrixRow>> mrows {};
    };

    class YORDLE_EXPORT x5a3bc52d : public bin_class { 
    public:
        explicit x5a3bc52d(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1513866541 || bin_class::is_type(type);
        }

        std::set<uint32_t> items {};
        uint32_t x50ef1a22 = 0;
    };

    class YORDLE_EXPORT ItemRecommendationCondition : public bin_class { 
    public:
        explicit ItemRecommendationCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 396544810 || bin_class::is_type(type);
        }

        uint32_t mItem = 0;
        uint32_t mDisplayLimit = 0;
        uint8_t mGroupId = 0;
    };

    class YORDLE_EXPORT ItemRecommendationOverrideContext : public bin_class { 
    public:
        explicit ItemRecommendationOverrideContext(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3898055584 || bin_class::is_type(type);
        }

        uint32_t mMapID = 0;
        uint32_t x37b75f5c = 0;
        uint32_t mPosition = 0;
    };

    class YORDLE_EXPORT ItemRecommendationOverrideStartingItemSet : public bin_class { 
    public:
        explicit ItemRecommendationOverrideStartingItemSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2556481222 || bin_class::is_type(type);
        }

        std::set<uint32_t> mStartingItems {};
    };

    class YORDLE_EXPORT ItemRecommendationOverride : public bin_class { 
    public:
        explicit ItemRecommendationOverride(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1661050393 || bin_class::is_type(type);
        }

        bool mForceOverride = false;
        std::set<std::shared_ptr<yordle::data::meta::ItemRecommendationOverrideContext>> mOverrideContexts {};
        std::set<std::shared_ptr<yordle::data::meta::ItemRecommendationOverrideStartingItemSet>> mStartingItemSets {};
        std::set<std::shared_ptr<yordle::data::meta::x5a3bc52d>> mRecItemRanges {};
        std::set<uint32_t> mCoreItems {};
        std::set<std::shared_ptr<yordle::data::meta::ItemRecommendationCondition>> mRecommendedItems {};
    };

    class YORDLE_EXPORT ItemRecommendationOverrideSet : public bin_class { 
    public:
        explicit ItemRecommendationOverrideSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2753712911 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::ItemRecommendationOverride>> mOverrides {};
    };

    class YORDLE_EXPORT ItemAdviceAttribute : public bin_class { 
    public:
        explicit ItemAdviceAttribute(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 573358062 || bin_class::is_type(type);
        }

        std::string mAttribute {};
    };

    class YORDLE_EXPORT ItemCareyOverrideStartingItemSet : public bin_class { 
    public:
        explicit ItemCareyOverrideStartingItemSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2822771443 || bin_class::is_type(type);
        }

        uint32_t mAttribute = 0;
    };

    class YORDLE_EXPORT ItemCareyOverrideStartingItemSetSet : public bin_class { 
    public:
        explicit ItemCareyOverrideStartingItemSetSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1101955153 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::ItemCareyOverrideStartingItemSet>> x6ca781cd {};
    };

    class YORDLE_EXPORT ItemShopGameModeData : public bin_class { 
    public:
        explicit ItemShopGameModeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4103435203 || bin_class::is_type(type);
        }

        std::set<uint32_t> xc561f8e9 {};
        uint32_t xc3b3430a = 0;
        uint32_t x51a18bc3 = 0;
        std::map<uint32_t, uint32_t> x897c69b7 {};
        std::map<uint32_t, uint32_t> RecItemsSwaps {};
    };

    class YORDLE_EXPORT CollectiblesEsportsTeamData : public bin_class { 
    public:
        explicit CollectiblesEsportsTeamData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3808259511 || bin_class::is_type(type);
        }

        uint32_t teamId = 0;
        std::string shortName {};
        std::string fullName {};
        std::string leagueName {};
    };

    class YORDLE_EXPORT SummonerIconData : public bin_class { 
    public:
        explicit SummonerIconData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2783969040 || bin_class::is_type(type);
        }

        uint32_t iconId = 0;
        uint32_t esportsTeam = 0;
        std::string gameTexture {};
        bool x50e5b6e1 = false;
        std::string eSportsEventMutator {};
    };

    class YORDLE_EXPORT LiveFeatureToggles : public bin_class { 
    public:
        explicit LiveFeatureToggles(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 954042444 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mLoLToggles {};
        std::shared_ptr<yordle::data::meta::bin_class> mGameplayToggles {};
        std::shared_ptr<yordle::data::meta::bin_class> mEngineToggles {};
    };

    class YORDLE_EXPORT LoLFeatureToggles : public bin_class { 
    public:
        explicit LoLFeatureToggles(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3353146463 || bin_class::is_type(type);
        }

        bool NewSpellScript = false;
        bool xf2505841 = false;
        bool x6dbee4b7 = false;
        bool xa3820b10 = false;
        bool ItemUndo = false;
        bool xf1125a78 = false;
        bool queuedOrdersTriggerPreIssueOrder = false;
        bool EnableCustomPlayerScoreColoring = false;
        bool closeOnEndGameAfterDelay = false;
        bool PromoController = false;
        bool cooldownSpellQueueing = false;
        bool useNewAttackSpeed = false;
        bool UseNewFireBBEvents = false;
        bool abilityResetUI = false;
        bool xa6cc4da4 = false;
        bool xa6000d17 = false;
        bool xed504579 = false;
        bool xd3323ebc = false;
        bool x8cd3b1f9 = false;
        bool x8bab003a = false;
        bool x3e3c2065 = false;
        bool x6f0ba2b0 = false;
        bool x69b85d1 = false;
        bool x59e03167 = false;
        bool x6d9b5c59 = false;
        bool xcc5e3f8d = false;
        bool x82799f80 = false;
        bool x92187457 = false;
        bool x768400a9 = false;
        bool xa28bbddc = false;
        bool x76e809b = false;
        bool x9b710bf6 = false;
        bool x68c9483d = false;
        bool xc779da22 = false;
        bool x9cfc57ba = false;
        bool xcd2f9591 = false;
        bool x85af0cb5 = false;
        bool x84fe7ccf = false;
        bool x90e08cc7 = false;
        bool x2f0e955a = false;
        bool xefe584bb = false;
        bool xc25a56fb = false;
    };

    class YORDLE_EXPORT GDSMapObjectExtraInfo : public bin_class { 
    public:
        explicit GDSMapObjectExtraInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1222455122 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT GDSMapObjectAnimationInfo : public GDSMapObjectExtraInfo { 
    public:
        explicit GDSMapObjectAnimationInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2301501426 || GDSMapObjectExtraInfo::is_type(type);
        }

        std::string defaultAnimation {};
        bool looping = false;
        bool destroyOnCompletion = false;
        float duration = 0.0;
    };

    class YORDLE_EXPORT GDSMapObjectLightingInfo : public GDSMapObjectExtraInfo { 
    public:
        explicit GDSMapObjectLightingInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 651368964 || GDSMapObjectExtraInfo::is_type(type);
        }

        std::set<std::array<float, 4>> colors {};
    };

    class YORDLE_EXPORT GDSMapObjectBannerInfo : public GDSMapObjectExtraInfo { 
    public:
        explicit GDSMapObjectBannerInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1777761610 || GDSMapObjectExtraInfo::is_type(type);
        }

        uint32_t BannerData = 0;
    };

    class YORDLE_EXPORT LootOutputBase : public bin_class { 
    public:
        explicit LootOutputBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2506702743 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT LootItemDetails : public bin_class { 
    public:
        explicit LootItemDetails(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1665937510 || bin_class::is_type(type);
        }

        uint32_t mStoreId = 0;
        uint32_t mRarity = 0;
        uint32_t mValue = 0;
    };

    class YORDLE_EXPORT LootStatus : public bin_class { 
    public:
        explicit LootStatus(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 685945729 || bin_class::is_type(type);
        }

        std::set<std::string> mTags {};
        std::string mImageTexturePath {};
        std::string mActiveDate {};
        std::string mInactiveDate {};
        int32_t mLifetimeMax = 0;
        bool mAutoRedeem = false;
        bool mActive = false;
    };

    class YORDLE_EXPORT LootItem : public LootOutputBase { 
    public:
        explicit LootItem(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1545315440 || LootOutputBase::is_type(type);
        }

        std::string mInternalName {};
        std::string mName {};
        std::string mHoverDescription {};
        std::string mAdminDescription {};
        std::shared_ptr<yordle::data::meta::LootStatus> mStatus {};
        std::shared_ptr<yordle::data::meta::LootItemDetails> mDetails {};
    };

    class YORDLE_EXPORT ClientStateCommonSettings : public bin_class { 
    public:
        explicit ClientStateCommonSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2643135015 || bin_class::is_type(type);
        }

        uint32_t x5b40f8fd = 0;
        uint32_t x6a9d87e7 = 0;
        uint32_t xefe9214c = 0;
    };

    class YORDLE_EXPORT IdentityInstance : public bin_class { 
    public:
        explicit IdentityInstance(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1790162312 || bin_class::is_type(type);
        }

        std::string mItemTexturePath {};
    };

    class YORDLE_EXPORT x4d31ed46 : public bin_class { 
    public:
        explicit x4d31ed46(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1295117638 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IdentityInstance> mIdentityInstance {};
        std::shared_ptr<yordle::data::meta::CatalogEntry> mCatalogEntry {};
    };

    class YORDLE_EXPORT x14aef50c : public bin_class { 
    public:
        explicit x14aef50c(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 347010316 || bin_class::is_type(type);
        }

        std::string mInventoryType {};
        uint8_t mOrder = 0;
        std::set<int32_t> mItemIDs {};
        std::set<std::shared_ptr<yordle::data::meta::x14aef50c>> mInventoryFilters {};
    };

    class YORDLE_EXPORT x9f59e92d : public bin_class { 
    public:
        explicit x9f59e92d(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2673469741 || bin_class::is_type(type);
        }

        std::string mName {};
        uint8_t mOrder = 0;
        bool mEnabled = false;
        std::set<std::shared_ptr<yordle::data::meta::x14aef50c>> mInventoryFilters {};
    };

    class YORDLE_EXPORT MapAction : public bin_class { 
    public:
        explicit MapAction(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3419333123 || bin_class::is_type(type);
        }

        float startTime = 0.0;
    };

    class YORDLE_EXPORT xaf23408c : public MapAction { 
    public:
        explicit xaf23408c(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2938323084 || MapAction::is_type(type);
        }

        std::set<std::string> x5c042946 {};
        std::string x15db0d85 {};
        float x29a7efc6 = 0.0;
        bool Shuffle = false;
    };

    class YORDLE_EXPORT x8c0d80f5 : public MapAction { 
    public:
        explicit x8c0d80f5(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2349695221 || MapAction::is_type(type);
        }

        std::set<std::string> MapParticleName {};
        bool Shuffle = false;
    };

    class YORDLE_EXPORT x6cdbb71d : public MapAction { 
    public:
        explicit x6cdbb71d(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1826338589 || MapAction::is_type(type);
        }

        std::string targetName {};
        std::string pathname {};
        float duration = 0.0;
        float velocity = 0.0;
        bool x3ade3a5d = false;
        bool xeefb990f = false;
    };

    class YORDLE_EXPORT MapActionPlayAnimation : public MapAction { 
    public:
        explicit MapActionPlayAnimation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3013740817 || MapAction::is_type(type);
        }

        std::string PropName {};
        std::string animationName {};
        bool looping = false;
    };

    class YORDLE_EXPORT MapActionPlaySoundAtLocation : public MapAction { 
    public:
        explicit MapActionPlaySoundAtLocation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2134659206 || MapAction::is_type(type);
        }

        std::string SoundEventName {};
        std::string LocationName {};
    };

    class YORDLE_EXPORT x49da656e : public MapAction { 
    public:
        explicit x49da656e(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1239049582 || MapAction::is_type(type);
        }

        std::string PropName {};
        std::string Key {};
        float value = 0.0;
    };

    class YORDLE_EXPORT xced6ab09 : public MapAction { 
    public:
        explicit xced6ab09(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3470174985 || MapAction::is_type(type);
        }

        std::set<std::string> MapParticleName {};
        bool shown = false;
    };

    class YORDLE_EXPORT xe1bb8efb : public MapAction { 
    public:
        explicit xe1bb8efb(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3787165435 || MapAction::is_type(type);
        }

    };

    class YORDLE_EXPORT MapAlternateAsset : public bin_class { 
    public:
        explicit MapAlternateAsset(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3846963535 || bin_class::is_type(type);
        }

        std::string mGrassTintTextureName {};
        std::string x603134b8 {};
        std::string x198716d9 {};
        uint32_t mParticleResourceResolver = 0;
        uint32_t x97472c4d = 0;
    };

    class YORDLE_EXPORT MapAlternateAssets : public bin_class { 
    public:
        explicit MapAlternateAssets(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 849736052 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::MapAlternateAsset>> mAlternateAssets {};
    };

    class YORDLE_EXPORT MapCharacterList : public bin_class { 
    public:
        explicit MapCharacterList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 199060396 || bin_class::is_type(type);
        }

        std::set<uint32_t> characters {};
    };

    class YORDLE_EXPORT MapLocatorArray : public bin_class { 
    public:
        explicit MapLocatorArray(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2902067178 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::bin_class>> locators {};
    };

    class YORDLE_EXPORT MapNavigationGridOverlays : public bin_class { 
    public:
        explicit MapNavigationGridOverlays(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3880372342 || bin_class::is_type(type);
        }

        std::map<std::string, uint32_t> overlays {};
    };

    class YORDLE_EXPORT MapNavigationGridOverlay : public bin_class { 
    public:
        explicit MapNavigationGridOverlay(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 953399041 || bin_class::is_type(type);
        }

        std::string navGridFileName {};
        std::string regionsFilename {};
    };

    class YORDLE_EXPORT MapSkinColorizationPostEffect : public bin_class { 
    public:
        explicit MapSkinColorizationPostEffect(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 955345470 || bin_class::is_type(type);
        }

        std::array<float, 3> mMultipliersRGB {};
        float mMultipliersSaturation = 0.0;
    };

    class YORDLE_EXPORT MapSkin : public bin_class { 
    public:
        explicit MapSkin(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3441028924 || bin_class::is_type(type);
        }

        std::string mMapContainerLink {};
        std::shared_ptr<yordle::data::meta::bin_class> mMinimapBackgroundConfig {};
        std::shared_ptr<yordle::data::meta::MapAlternateAssets> mAlternateAssets {};
        std::string mMapObjectsCFG {};
        std::string mNavigationMesh {};
        uint32_t x14f54bbd = 0;
        std::string mWorldGeometry {};
        std::string mWorldParticlesINI {};
        std::shared_ptr<yordle::data::meta::MapSkinColorizationPostEffect> mColorizationPostEffect {};
        std::string mGrassTintTexture {};
        std::string xb0e90e8e {};
        std::map<uint32_t, int32_t> mObjectSkinFallbacks {};
        std::set<uint32_t> mResourceResolvers {};
    };

    class YORDLE_EXPORT MapVisibilityFlagRange : public bin_class { 
    public:
        explicit MapVisibilityFlagRange(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 298132920 || bin_class::is_type(type);
        }

        uint8_t minIndex = 0;
        uint8_t maxIndex = 0;
    };

    class YORDLE_EXPORT MapVisibilityFlagDefinition : public bin_class { 
    public:
        explicit MapVisibilityFlagDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 730516414 || bin_class::is_type(type);
        }

        uint32_t name = 0;
        std::string PublicName {};
        uint8_t BitIndex = 0;
        float transitionTime = 0.0;
    };

    class YORDLE_EXPORT MapVisibilityFlagDefinitions : public bin_class { 
    public:
        explicit MapVisibilityFlagDefinitions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1484706743 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::MapVisibilityFlagDefinition>> FlagDefinitions {};
        std::shared_ptr<yordle::data::meta::MapVisibilityFlagRange> FlagRange {};
        bool x822356e3 = false;
        bool x5ffc00df = false;
    };

    class YORDLE_EXPORT MinimapBackground : public bin_class { 
    public:
        explicit MinimapBackground(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2712490432 || bin_class::is_type(type);
        }

        std::array<float, 2> mOrigin {};
        std::array<float, 2> mSize {};
        std::string mTextureName {};
    };

    class YORDLE_EXPORT MinimapBackgroundConfig : public bin_class { 
    public:
        explicit MinimapBackgroundConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 718267822 || bin_class::is_type(type);
        }

        std::string mDefaultTextureName {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::MinimapBackground>> mCustomMinimapBackgrounds {};
    };

    class YORDLE_EXPORT MissionAsset : public bin_class { 
    public:
        explicit MissionAsset(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1923729607 || bin_class::is_type(type);
        }

        std::string mInternalName {};
        std::string mIconTexturePath {};
        bool xf82efec6 = false;
    };

    class YORDLE_EXPORT CheatPage : public bin_class { 
    public:
        explicit CheatPage(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2577175271 || bin_class::is_type(type);
        }

        std::set<uint32_t> mCheats {};
    };

    class YORDLE_EXPORT CheatSet : public bin_class { 
    public:
        explicit CheatSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1165487172 || bin_class::is_type(type);
        }

        std::string mName {};
        bool mIsPlayerFacing = false;
        std::string mGameMutator {};
        uint32_t mGameModeName = 0;
        uint32_t mAssociatedChampion = 0;
        std::set<std::shared_ptr<yordle::data::meta::CheatPage>> mCheatPages {};
        bool mUseIconsForButtons = false;
        bool mIsUIAlwaysShown = false;
    };

    class YORDLE_EXPORT CheatMenuUIData : public bin_class { 
    public:
        explicit CheatMenuUIData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 337391297 || bin_class::is_type(type);
        }

        std::string mDisplayName {};
        std::string mFloatingTextDisplayName {};
        std::string mTooltipText {};
        std::string mDynamicTooltipText {};
        std::string mHotkey {};
        std::set<std::string> mHotkeys {};
        bool mIsToggleCheat = false;
    };

    class YORDLE_EXPORT Cheat : public bin_class { 
    public:
        explicit Cheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2490030924 || bin_class::is_type(type);
        }

        std::string mName {};
        bool mIsPlayerFacing = false;
        std::shared_ptr<yordle::data::meta::CheatMenuUIData> mCheatMenuUIData {};
        float mRecastFrequency = 0.0;
    };

    class YORDLE_EXPORT ScriptCheat : public Cheat { 
    public:
        explicit ScriptCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3690099329 || Cheat::is_type(type);
        }

        uint32_t mTarget = 0;
        uint32_t mScriptCallback = 0;
    };

    class YORDLE_EXPORT AddGoldCheat : public Cheat { 
    public:
        explicit AddGoldCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3317948433 || Cheat::is_type(type);
        }

        float mGoldAmount = 0.0;
        uint32_t mTarget = 0;
    };

    class YORDLE_EXPORT MaxAllSkillsCheat : public Cheat { 
    public:
        explicit MaxAllSkillsCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3590488641 || Cheat::is_type(type);
        }

        bool mOnlyOnePointEach = false;
        uint32_t mTarget = 0;
    };

    class YORDLE_EXPORT AddExperienceCheat : public Cheat { 
    public:
        explicit AddExperienceCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 947718767 || Cheat::is_type(type);
        }

        uint32_t mTarget = 0;
        bool mGiveMaxLevel = false;
    };

    class YORDLE_EXPORT ToggleBuffCheat : public Cheat { 
    public:
        explicit ToggleBuffCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2218753755 || Cheat::is_type(type);
        }

        uint32_t mTarget = 0;
        std::string mBuffName {};
        bool UseTargetAsCaster = false;
    };

    class YORDLE_EXPORT AddHealthCheat : public Cheat { 
    public:
        explicit AddHealthCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2639255897 || Cheat::is_type(type);
        }

        uint32_t mTarget = 0;
        float mAmount = 0.0;
    };

    class YORDLE_EXPORT AddPARCheat : public Cheat { 
    public:
        explicit AddPARCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 666034550 || Cheat::is_type(type);
        }

        uint32_t mTarget = 0;
        float mAmount = 0.0;
    };

    class YORDLE_EXPORT ToggleRegenCheat : public Cheat { 
    public:
        explicit ToggleRegenCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3048271729 || Cheat::is_type(type);
        }

        uint32_t mTarget = 0;
        bool mToggleHP = false;
        bool mTogglePAR = false;
    };

    class YORDLE_EXPORT ClearTargetCooldownCheat : public Cheat { 
    public:
        explicit ClearTargetCooldownCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1355264261 || Cheat::is_type(type);
        }

        uint32_t mTarget = 0;
    };

    class YORDLE_EXPORT TimeMultiplierCheat : public Cheat { 
    public:
        explicit TimeMultiplierCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 308619146 || Cheat::is_type(type);
        }

        bool mSpeedUp = false;
        bool mSpeedDown = false;
    };

    class YORDLE_EXPORT DamageUnitCheat : public Cheat { 
    public:
        explicit DamageUnitCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3963713437 || Cheat::is_type(type);
        }

        uint32_t mTarget = 0;
        uint32_t mDamageAmount = 0;
        float mPercentageOfAttack = 0.0;
        uint32_t mDamageType = 0;
        uint32_t mHitResult = 0;
    };

    class YORDLE_EXPORT ToggleBarracksCheat : public Cheat { 
    public:
        explicit ToggleBarracksCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2011491725 || Cheat::is_type(type);
        }

        bool mKillExistingMinions = false;
        bool mKillWards = false;
    };

    class YORDLE_EXPORT ToggleTeamCheat : public Cheat { 
    public:
        explicit ToggleTeamCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2796927515 || Cheat::is_type(type);
        }

        uint32_t mTarget = 0;
    };

    class YORDLE_EXPORT SetRespawnTimerCheat : public Cheat { 
    public:
        explicit SetRespawnTimerCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1050508117 || Cheat::is_type(type);
        }

        uint32_t mTarget = 0;
        float mTimerValue = 0.0;
    };

    class YORDLE_EXPORT ToggleInvulnerableCheat : public Cheat { 
    public:
        explicit ToggleInvulnerableCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3748300377 || Cheat::is_type(type);
        }

        uint32_t mTarget = 0;
    };

    class YORDLE_EXPORT KillAllTurretsCheat : public Cheat { 
    public:
        explicit KillAllTurretsCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 691714906 || Cheat::is_type(type);
        }

    };

    class YORDLE_EXPORT ForceSpawnNeutralCampsCheat : public Cheat { 
    public:
        explicit ForceSpawnNeutralCampsCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2240430239 || Cheat::is_type(type);
        }

        bool mSpawnBaron = false;
    };

    class YORDLE_EXPORT ResetGoldCheat : public Cheat { 
    public:
        explicit ResetGoldCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3658203397 || Cheat::is_type(type);
        }

        uint32_t mTarget = 0;
    };

    class YORDLE_EXPORT TogglePlantFastRespawnCheat : public Cheat { 
    public:
        explicit TogglePlantFastRespawnCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2818226507 || Cheat::is_type(type);
        }

    };

    class YORDLE_EXPORT SwapChampionCheat : public Cheat { 
    public:
        explicit SwapChampionCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1887008704 || Cheat::is_type(type);
        }

    };

    class YORDLE_EXPORT ToggleAfkDetectionCheat : public Cheat { 
    public:
        explicit ToggleAfkDetectionCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1458280349 || Cheat::is_type(type);
        }

    };

    class YORDLE_EXPORT PerkEffectAmountPerMode : public bin_class { 
    public:
        explicit PerkEffectAmountPerMode(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2971960800 || bin_class::is_type(type);
        }

        std::map<uint32_t, float> mEffectAmountPerMode {};
    };

    class YORDLE_EXPORT PerkScriptData : public bin_class { 
    public:
        explicit PerkScriptData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2766644386 || bin_class::is_type(type);
        }

        std::map<uint32_t, float> mEffectAmount {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::PerkEffectAmountPerMode>> mEffectAmountGameMode {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::IGameCalculation>> mCalculations {};
    };

    class YORDLE_EXPORT PerkScript : public bin_class { 
    public:
        explicit PerkScript(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 501137906 || bin_class::is_type(type);
        }

        std::string mSpellScriptName {};
        std::shared_ptr<yordle::data::meta::bin_class> mSpellScript {};
        std::shared_ptr<yordle::data::meta::PerkScriptData> mSpellScriptData {};
    };

    class YORDLE_EXPORT PerkBuff : public bin_class { 
    public:
        explicit PerkBuff(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1031283364 || bin_class::is_type(type);
        }

        std::string mBuffScriptName {};
        std::shared_ptr<yordle::data::meta::bin_class> mBuffSpellObject {};
    };

    class YORDLE_EXPORT BasePerk : public bin_class { 
    public:
        explicit BasePerk(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3196794540 || bin_class::is_type(type);
        }

        uint32_t mPerkId = 0;
        std::string mPerkName {};
        std::string mDisplayNameLocalizationKey {};
        std::string mTooltipNameLocalizationKey {};
        std::string mPingTextLocalizationKey {};
        std::string mShortDescLocalizationKey {};
        std::string mLongDescLocalizationKey {};
        std::set<std::string> mEndOfGameStatDescriptions {};
        std::string mDisplayStatLocalizationKey {};
        std::string mIconTextureName {};
        bool mEnabled = false;
        bool mStackable = false;
        std::shared_ptr<yordle::data::meta::PerkScript> mScript {};
        std::set<std::shared_ptr<yordle::data::meta::PerkBuff>> mBuffs {};
        std::shared_ptr<yordle::data::meta::bin_class> mVFXResourceResolver {};
        std::set<std::string> mCharacters {};
    };

    class YORDLE_EXPORT PerkStyle : public bin_class { 
    public:
        explicit PerkStyle(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 240569694 || bin_class::is_type(type);
        }

        uint32_t mPerkStyleId = 0;
        std::string mPerkStyleName {};
        std::string mDisplayNameLocalizationKey {};
        std::string mTooltipNameLocalizationKey {};
        std::string mDefaultPageLocalizationKey {};
        std::string mPingTextLocalizationKey {};
        std::string mIconTextureName {};
        bool mEnabled = false;
        bool mIsAdvancedStyle = false;
        std::set<uint32_t> mAllowedSubStyles {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mSubStyleBonus {};
        std::map<std::string, std::string> mLCUAssetFileMap {};
        std::shared_ptr<yordle::data::meta::bin_class> mDefaultSplash {};
        std::set<uint32_t> mDefaultPerksWhenSplashed {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> xfa4e9a2 {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mSlots {};
        std::set<uint32_t> mSlotlinks {};
        std::shared_ptr<yordle::data::meta::PerkScript> mScript {};
        std::shared_ptr<yordle::data::meta::PerkScript> mScriptAsSubStyle {};
        std::set<std::shared_ptr<yordle::data::meta::PerkBuff>> mBuffs {};
        std::shared_ptr<yordle::data::meta::bin_class> mStyleVFXResourceResolver {};
    };

    class YORDLE_EXPORT PerkSlot : public bin_class { 
    public:
        explicit PerkSlot(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 232419497 || bin_class::is_type(type);
        }

        std::string mSlotLabelKey {};
        uint32_t mType = 0;
        std::set<uint32_t> mPerks {};
    };

    class YORDLE_EXPORT DefaultSplashedPerkStyle : public bin_class { 
    public:
        explicit DefaultSplashedPerkStyle(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2405280373 || bin_class::is_type(type);
        }

        uint32_t mStyle = 0;
        uint32_t mPerk1 = 0;
        uint32_t mPerk2 = 0;
    };

    class YORDLE_EXPORT DefaultStatModPerkSet : public bin_class { 
    public:
        explicit DefaultStatModPerkSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3234822452 || bin_class::is_type(type);
        }

        uint32_t mStyleId = 0;
        std::set<uint32_t> mPerks {};
    };

    class YORDLE_EXPORT PerkSubStyleBonus : public bin_class { 
    public:
        explicit PerkSubStyleBonus(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3127434961 || bin_class::is_type(type);
        }

        uint32_t mStyleId = 0;
        uint32_t mPerk = 0;
    };

    class YORDLE_EXPORT SummonerSpellPerkReplacement : public bin_class { 
    public:
        explicit SummonerSpellPerkReplacement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4081542451 || bin_class::is_type(type);
        }

        uint32_t mSummonerSpellRequired = 0;
        uint32_t xd48a5ef1 = 0;
    };

    class YORDLE_EXPORT SummonerSpellPerkReplacementList : public bin_class { 
    public:
        explicit SummonerSpellPerkReplacementList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3014400443 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::SummonerSpellPerkReplacement>> mReplacements {};
    };

    class YORDLE_EXPORT Perk : public BasePerk { 
    public:
        explicit Perk(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3069197533 || BasePerk::is_type(type);
        }

        bool mDefault = false;
        std::string mMajorChangePatchVersion {};
        std::shared_ptr<yordle::data::meta::SummonerSpellPerkReplacementList> mSummonerPerkReplacements {};
    };

    class YORDLE_EXPORT PerkReplacement : public bin_class { 
    public:
        explicit PerkReplacement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1517326239 || bin_class::is_type(type);
        }

        uint32_t mReplaceTarget = 0;
        uint32_t mReplaceWith = 0;
    };

    class YORDLE_EXPORT PerkReplacementList : public bin_class { 
    public:
        explicit PerkReplacementList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2307915623 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::PerkReplacement>> mReplacements {};
    };

    class YORDLE_EXPORT PerkConfig : public bin_class { 
    public:
        explicit PerkConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1524731407 || bin_class::is_type(type);
        }

        uint32_t mBotOverrideSet = 0;
        std::shared_ptr<yordle::data::meta::PerkReplacementList> mPerkReplacements {};
        uint32_t x108e746d = 0;
    };

    class YORDLE_EXPORT OverridePerkSelectionSet : public bin_class { 
    public:
        explicit OverridePerkSelectionSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 890839731 || bin_class::is_type(type);
        }

        uint32_t mStyle = 0;
        uint32_t mSubStyle = 0;
        std::set<uint32_t> mPerks {};
    };

    class YORDLE_EXPORT ToonInkingFilterParams : public bin_class { 
    public:
        explicit ToonInkingFilterParams(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2533312697 || bin_class::is_type(type);
        }

        float mPixelSize = 0.0;
        float mMinVal = 0.0;
        float mMaxVal = 0.0;
        float mResultScale = 0.0;
    };

    class YORDLE_EXPORT RenderStyleData : public bin_class { 
    public:
        explicit RenderStyleData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4227680462 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ToonInkingFilterParams> mUnitFilterParamsInterior {};
        std::shared_ptr<yordle::data::meta::ToonInkingFilterParams> mUnitFilterParamsExterior {};
        bool mUnitStyleUseInking = false;
    };

    class YORDLE_EXPORT MaterialOverrideCallbackDynamicMaterial : public bin_class { 
    public:
        explicit MaterialOverrideCallbackDynamicMaterial(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1441690361 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT MouseOverEffectData : public bin_class { 
    public:
        explicit MouseOverEffectData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4069567955 || bin_class::is_type(type);
        }

        std::array<uint8_t, 4> mAllyColor {};
        std::array<uint8_t, 4> mEnemyColor {};
        std::array<uint8_t, 4> mNeutralColor {};
        std::array<uint8_t, 4> mSelfColor {};
        int32_t mMouseOverSize = 0;
        float mMouseOverColorFactor = 0.0;
        uint32_t mMouseOverBlurPassCount = 0;
        int32_t mSelectedSize = 0;
        float mSelectedColorFactor = 0.0;
        uint32_t mSelectedBlurPassCount = 0;
        int32_t mAvatarSize = 0;
        float mAvatarColorFactor = 0.0;
        std::array<uint8_t, 4> mAvatarColor {};
        uint32_t mAvatarBlurPassCount = 0;
        int32_t mKillerSize = 0;
        float mKillerColorFactor = 0.0;
        uint32_t mKillerBlurPassCount = 0;
        std::set<float> mInteractionTimes {};
        std::set<int32_t> mInteractionSizes {};
    };

    class YORDLE_EXPORT FxSequence : public bin_class { 
    public:
        explicit FxSequence(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 729255394 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::bin_class>> Actions {};
    };

    class YORDLE_EXPORT FxTableEntry : public bin_class { 
    public:
        explicit FxTableEntry(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 351234915 || bin_class::is_type(type);
        }

        std::string name {};
        uint32_t Sequence = 0;
    };

    class YORDLE_EXPORT FxTable : public bin_class { 
    public:
        explicit FxTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1638517141 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::FxTableEntry>> Entries {};
    };

    class YORDLE_EXPORT FxTarget : public bin_class { 
    public:
        explicit FxTarget(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 87271638 || bin_class::is_type(type);
        }

        uint32_t type = 0;
        int32_t Index = 0;
    };

    class YORDLE_EXPORT FxTiming : public bin_class { 
    public:
        explicit FxTiming(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3687298637 || bin_class::is_type(type);
        }

        uint32_t anchor = 0;
        uint32_t type = 0;
        float offset = 0.0;
    };

    class YORDLE_EXPORT FxTransform : public bin_class { 
    public:
        explicit FxTransform(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 754442341 || bin_class::is_type(type);
        }

        uint32_t type = 0;
        int32_t Index = 0;
        std::string AttachmentName {};
    };

    class YORDLE_EXPORT IFxAction : public bin_class { 
    public:
        explicit IFxAction(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3063177560 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::FxTiming> Start {};
        std::shared_ptr<yordle::data::meta::FxTiming> End {};
    };

    class YORDLE_EXPORT GameplayFeatureToggles : public bin_class { 
    public:
        explicit GameplayFeatureToggles(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3021260058 || bin_class::is_type(type);
        }

        bool NewActorStuckPathfinding = false;
        bool fowCastRayAccurate = false;
        bool disableSpellLevelMinimumProtections = false;
        bool IndividualItemVisibility = false;
        bool AFKDetection2 = false;
    };

    class YORDLE_EXPORT ScriptDataObject : public bin_class { 
    public:
        explicit ScriptDataObject(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1625294129 || bin_class::is_type(type);
        }

        std::string mName {};
        std::map<std::string, std::shared_ptr<yordle::data::meta::GameModeConstant>> mConstants {};
        uint32_t x9be36761 = 0;
    };

    class YORDLE_EXPORT ScriptDataObjectList : public bin_class { 
    public:
        explicit ScriptDataObjectList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3171701405 || bin_class::is_type(type);
        }

        std::string mName {};
        std::set<uint32_t> mScriptDataObjects {};
    };

    class YORDLE_EXPORT ICastRequirement : public bin_class { 
    public:
        explicit ICastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1550969638 || bin_class::is_type(type);
        }

        bool mInvertResult = false;
    };

    class YORDLE_EXPORT HasAllSubRequirementsCastRequirement : public ICastRequirement { 
    public:
        explicit HasAllSubRequirementsCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4155399702 || ICastRequirement::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::ICastRequirement>> mSubRequirements {};
    };

    class YORDLE_EXPORT HasNNearbyUnitsRequirement : public ICastRequirement { 
    public:
        explicit HasNNearbyUnitsRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1987560042 || ICastRequirement::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::ICastRequirement>> mUnitsRequirements {};
        uint32_t mUnitsRequired = 0;
        float mRange = 0.0;
        uint32_t mDistanceType = 0;
    };

    class YORDLE_EXPORT HasNNearbyVisibleUnitsRequirement : public ICastRequirement { 
    public:
        explicit HasNNearbyVisibleUnitsRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3970312064 || ICastRequirement::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::ICastRequirement>> mUnitsRequirements {};
        uint32_t mUnitsRequired = 0;
        float mRange = 0.0;
        uint32_t mDistanceType = 0;
    };

    class YORDLE_EXPORT HasTypeAndStatusFlags : public ICastRequirement { 
    public:
        explicit HasTypeAndStatusFlags(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4095662801 || ICastRequirement::is_type(type);
        }

        uint32_t mAffectsTypeFlags = 0;
        uint32_t mAffectsStatusFlags = 0;
    };

    class YORDLE_EXPORT HasAtleastNSubRequirementsCastRequirement : public ICastRequirement { 
    public:
        explicit HasAtleastNSubRequirementsCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 44654127 || ICastRequirement::is_type(type);
        }

        uint32_t mSuccessesRequired = 0;
        std::set<std::shared_ptr<yordle::data::meta::ICastRequirement>> mSubRequirements {};
    };

    class YORDLE_EXPORT HasUnitTagsCastRequirement : public ICastRequirement { 
    public:
        explicit HasUnitTagsCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1461533414 || ICastRequirement::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mUnitTags {};
    };

    class YORDLE_EXPORT SameTeamCastRequirement : public ICastRequirement { 
    public:
        explicit SameTeamCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1622554532 || ICastRequirement::is_type(type);
        }

    };

    class YORDLE_EXPORT HasBuffCastRequirement : public ICastRequirement { 
    public:
        explicit HasBuffCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1528795992 || ICastRequirement::is_type(type);
        }

        uint32_t mBuffName = 0;
        bool mFromAnyone = false;
    };

    class YORDLE_EXPORT AboveHealthPercentCastRequirement : public ICastRequirement { 
    public:
        explicit AboveHealthPercentCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 329280789 || ICastRequirement::is_type(type);
        }

        float mCurrentPercentHealth = 0.0;
    };

    class YORDLE_EXPORT AbovePARPercentCastRequirement : public ICastRequirement { 
    public:
        explicit AbovePARPercentCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 795738052 || ICastRequirement::is_type(type);
        }

        uint8_t mPARType = 0;
        float mCurrentPercentPAR = 0.0;
    };

    class YORDLE_EXPORT IsSpecifiedUnitCastRequirement : public ICastRequirement { 
    public:
        explicit IsSpecifiedUnitCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3745993663 || ICastRequirement::is_type(type);
        }

        uint32_t mUnit = 0;
    };

    class YORDLE_EXPORT x10f4d0bf : public ICastRequirement { 
    public:
        explicit x10f4d0bf(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 284479679 || ICastRequirement::is_type(type);
        }

    };

    class YORDLE_EXPORT xdc65ffe4 : public ICastRequirement { 
    public:
        explicit xdc65ffe4(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3697672164 || ICastRequirement::is_type(type);
        }

    };

    class YORDLE_EXPORT ItemSlotHasChargesCastRequirement : public ICastRequirement { 
    public:
        explicit ItemSlotHasChargesCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3151502687 || ICastRequirement::is_type(type);
        }

    };

    class YORDLE_EXPORT x2e7c5eda : public ICastRequirement { 
    public:
        explicit x2e7c5eda(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 779902682 || ICastRequirement::is_type(type);
        }

        uint32_t level = 0;
    };

    class YORDLE_EXPORT x48284759 : public ICastRequirement { 
    public:
        explicit x48284759(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1210599257 || ICastRequirement::is_type(type);
        }

        float Distance = 0.0;
    };

    class YORDLE_EXPORT CCScoreMultipliers : public bin_class { 
    public:
        explicit CCScoreMultipliers(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2006398389 || bin_class::is_type(type);
        }

        float stun = 0.0;
        float taunt = 0.0;
        float fear = 0.0;
        float flee = 0.0;
        float suppression = 0.0;
        float knockup = 0.0;
        float knockback = 0.0;
        float polymorph = 0.0;
        float root = 0.0;
        float silence = 0.0;
        float charm = 0.0;
        float slow = 0.0;
        float attackSpeedSlow = 0.0;
        float blind = 0.0;
        float disarm = 0.0;
        float grounded = 0.0;
        float nearsight = 0.0;
        float drowsy = 0.0;
        float asleep = 0.0;
    };

    class YORDLE_EXPORT BuffData : public bin_class { 
    public:
        explicit BuffData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1177802644 || bin_class::is_type(type);
        }

        std::string mDescription {};
        std::shared_ptr<yordle::data::meta::bin_class> mTooltipData {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mVfxSpawnConditions {};
        bool x62e282aa = false;
        bool mShowDuration = false;
        bool xd019c1 = false;
        std::set<int32_t> mFloatVarsDecimals {};
        uint8_t mBuffAttributeFlag = 0;
    };

    class YORDLE_EXPORT TeamBuffData : public bin_class { 
    public:
        explicit TeamBuffData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2090279541 || bin_class::is_type(type);
        }

        std::string mBuffName {};
        std::string mUiName {};
        bool x9a53f442 = false;
    };

    class YORDLE_EXPORT MissionBuffData : public bin_class { 
    public:
        explicit MissionBuffData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4073390176 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::TeamBuffData> dragon {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> fireDrake {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> airDrake {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> waterDrake {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> earthDrake {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> elderDrake {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> GameModeCustom1 {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> GameModeCustom2 {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> x8dea39f8 {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> x94ea44fd {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> x93ea436a {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> x92ea41d7 {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> x91ea4044 {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> x88ea3219 {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> x87ea3086 {};
        std::shared_ptr<yordle::data::meta::TeamBuffData> xbbbe4f6a {};
    };

    class YORDLE_EXPORT BuffStackingTemplate : public bin_class { 
    public:
        explicit BuffStackingTemplate(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 471801710 || bin_class::is_type(type);
        }

        std::string name {};
        int32_t maxStacks = 0;
        int32_t xb36eae8c = 0;
        bool StacksExclusive = false;
        uint32_t BuffAddType = 0;
    };

    class YORDLE_EXPORT BuffStackingSettings : public bin_class { 
    public:
        explicit BuffStackingSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1852984937 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::BuffStackingTemplate>> templateDefinition {};
    };

    class YORDLE_EXPORT VFXSpawnConditionData : public bin_class { 
    public:
        explicit VFXSpawnConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3390937687 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mPersistentVfxs {};
    };

    class YORDLE_EXPORT VFXDefaultSpawnConditionData : public VFXSpawnConditionData { 
    public:
        explicit VFXDefaultSpawnConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 922712184 || VFXSpawnConditionData::is_type(type);
        }

    };

    class YORDLE_EXPORT HasBuffData : public bin_class { 
    public:
        explicit HasBuffData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3836337806 || bin_class::is_type(type);
        }

        std::string mBuffName {};
        bool mFromAnyone = false;
        bool mFromOwner = false;
        bool mFromAttacker = false;
    };

    class YORDLE_EXPORT HasBuffComparisonData : public bin_class { 
    public:
        explicit HasBuffComparisonData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3686997399 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::HasBuffData>> mBuffs {};
        uint8_t mCompareOp = 0;
    };

    class YORDLE_EXPORT HasBuffSpawnConditionData : public VFXSpawnConditionData { 
    public:
        explicit HasBuffSpawnConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2412429686 || VFXSpawnConditionData::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::HasBuffComparisonData> mBuffComparisons {};
    };

    class YORDLE_EXPORT IsSkinSpawnConditionData : public VFXSpawnConditionData { 
    public:
        explicit IsSkinSpawnConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1323437592 || VFXSpawnConditionData::is_type(type);
        }

        uint32_t mSkinId = 0;
    };

    class YORDLE_EXPORT IsOwnerHeroConditionData : public VFXSpawnConditionData { 
    public:
        explicit IsOwnerHeroConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3706207649 || VFXSpawnConditionData::is_type(type);
        }

    };

    class YORDLE_EXPORT IsOwnerAliveConditionData : public VFXSpawnConditionData { 
    public:
        explicit IsOwnerAliveConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3575093694 || VFXSpawnConditionData::is_type(type);
        }

    };

    class YORDLE_EXPORT HasSpellRankSpawnConditionData : public VFXSpawnConditionData { 
    public:
        explicit HasSpellRankSpawnConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3181780357 || VFXSpawnConditionData::is_type(type);
        }

        uint32_t mSpellSlot = 0;
        int32_t mSpellLevel = 0;
    };

    class YORDLE_EXPORT VfxSpawnConditions : public bin_class { 
    public:
        explicit VfxSpawnConditions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2833994484 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::VFXSpawnConditionData>> mConditionalVfxData {};
        std::shared_ptr<yordle::data::meta::VFXDefaultSpawnConditionData> mDefaultVfxData {};
    };

    class YORDLE_EXPORT IVFXSpawnConditions : public bin_class { 
    public:
        explicit IVFXSpawnConditions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3813882857 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT AlwaysSpawnCondition : public IVFXSpawnConditions { 
    public:
        explicit AlwaysSpawnCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2968154316 || IVFXSpawnConditions::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::VFXDefaultSpawnConditionData> mDefaultVfxData {};
    };

    class YORDLE_EXPORT HasBuffNameSpawnConditions : public IVFXSpawnConditions { 
    public:
        explicit HasBuffNameSpawnConditions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1349646866 || IVFXSpawnConditions::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::HasBuffSpawnConditionData>> mConditions {};
        std::shared_ptr<yordle::data::meta::VFXDefaultSpawnConditionData> mDefaultVfxData {};
    };

    class YORDLE_EXPORT HasSkinIDSpawnConditions : public IVFXSpawnConditions { 
    public:
        explicit HasSkinIDSpawnConditions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3161555652 || IVFXSpawnConditions::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IsSkinSpawnConditionData>> mConditions {};
        std::shared_ptr<yordle::data::meta::VFXDefaultSpawnConditionData> mDefaultVfxData {};
    };

    class YORDLE_EXPORT IsOwnerHeroSpawnConditions : public IVFXSpawnConditions { 
    public:
        explicit IsOwnerHeroSpawnConditions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1556398653 || IVFXSpawnConditions::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IsOwnerHeroConditionData>> mConditions {};
        std::shared_ptr<yordle::data::meta::VFXDefaultSpawnConditionData> mDefaultVfxData {};
    };

    class YORDLE_EXPORT IsOwnerAliveSpawnConditions : public IVFXSpawnConditions { 
    public:
        explicit IsOwnerAliveSpawnConditions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 759657674 || IVFXSpawnConditions::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IsOwnerAliveConditionData>> mConditions {};
        std::shared_ptr<yordle::data::meta::VFXDefaultSpawnConditionData> mDefaultVfxData {};
    };

    class YORDLE_EXPORT EffectCreationData : public bin_class { 
    public:
        explicit EffectCreationData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2338173165 || bin_class::is_type(type);
        }

        std::string mBoneName {};
        std::string mTargetBoneName {};
        std::string mEffectName {};
        uint32_t mEffectKey = 0;
        std::string xfe758550 {};
        uint32_t xa03a9542 = 0;
        bool xc42cf88d = false;
        float mPlaySpeedModifier = 0.0;
        bool xa45eda7b = false;
        uint32_t x87596a93 = 0;
        bool x62f57c79 = false;
        bool mFaceTarget = false;
        bool xfd1e1bb4 = false;
        bool x453384e6 = false;
    };

    class YORDLE_EXPORT RatioConversion : public bin_class { 
    public:
        explicit RatioConversion(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3393100796 || bin_class::is_type(type);
        }

        uint8_t mSourceStatType = 0;
        uint8_t mSourceStatOutput = 0;
        uint8_t mResultingStatType = 0;
        uint8_t mResultingStatOutput = 0;
        float x9227ce44 = 0.0;
    };

    class YORDLE_EXPORT x4379a5b2 : public bin_class { 
    public:
        explicit x4379a5b2(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1132045746 || bin_class::is_type(type);
        }

        uint8_t x5c92b7f2 = 0;
        uint8_t xaca5b9b4 = 0;
        std::set<std::shared_ptr<yordle::data::meta::IGameCalculationPart>> x583da425 {};
    };

    class YORDLE_EXPORT SpellModifier : public bin_class { 
    public:
        explicit SpellModifier(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1983940620 || bin_class::is_type(type);
        }

        uint32_t mModifierID = 0;
        uint8_t xa9cc2bf6 = 0;
        uint8_t xa47f56d7 = 0;
        uint32_t x5b1192f5 = 0;
        std::set<std::shared_ptr<yordle::data::meta::RatioConversion>> x441a3020 {};
        std::set<std::shared_ptr<yordle::data::meta::x4379a5b2>> xddbea054 {};
    };

    class YORDLE_EXPORT AbilityObject : public bin_class { 
    public:
        explicit AbilityObject(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3696800942 || bin_class::is_type(type);
        }

        uint32_t mRootSpell = 0;
        std::set<uint32_t> mChildSpells {};
        bool x86ddaddb = false;
        std::string mName {};
        uint8_t mType = 0;
    };

    class YORDLE_EXPORT SpellObject : public bin_class { 
    public:
        explicit SpellObject(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1585338886 || bin_class::is_type(type);
        }

        std::string mScriptName {};
        std::shared_ptr<yordle::data::meta::bin_class> mScript {};
        std::shared_ptr<yordle::data::meta::bin_class> mSpell {};
        std::shared_ptr<yordle::data::meta::BuffData> mBuff {};
    };

    class YORDLE_EXPORT MissileSpecification : public bin_class { 
    public:
        explicit MissileSpecification(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3221008892 || bin_class::is_type(type);
        }

        float mMissileWidth = 0.0;
        std::shared_ptr<yordle::data::meta::bin_class> movementComponent {};
        std::shared_ptr<yordle::data::meta::bin_class> visibilityComponent {};
        std::shared_ptr<yordle::data::meta::bin_class> heightSolver {};
        std::shared_ptr<yordle::data::meta::bin_class> verticalFacing {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> missileGroupSpawners {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> behaviors {};
    };

    class YORDLE_EXPORT MissileBehaviorSpec : public bin_class { 
    public:
        explicit MissileBehaviorSpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 369826590 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT FixedDistanceIgnoringTerrain : public MissileBehaviorSpec { 
    public:
        explicit FixedDistanceIgnoringTerrain(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3184228220 || MissileBehaviorSpec::is_type(type);
        }

        float mMaximumDistance = 0.0;
        float mMinimumGapBetweenTerrainWalls = 0.0;
        std::optional<uint32_t> mMaximumTerrainWallsToSkip {};
        std::optional<float> scanWidthOverride {};
        std::shared_ptr<yordle::data::meta::bin_class> mTargeterDefinition {};
    };

    class YORDLE_EXPORT ScaleByScaleSkinCoef : public MissileBehaviorSpec { 
    public:
        explicit ScaleByScaleSkinCoef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 384088054 || MissileBehaviorSpec::is_type(type);
        }

    };

    class YORDLE_EXPORT WidthPerSecond : public MissileBehaviorSpec { 
    public:
        explicit WidthPerSecond(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 768590138 || MissileBehaviorSpec::is_type(type);
        }

        float mWidthPerSecond = 0.0;
    };

    class YORDLE_EXPORT MissileTriggerSpec : public MissileBehaviorSpec { 
    public:
        explicit MissileTriggerSpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3362386950 || MissileBehaviorSpec::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mActions {};
    };

    class YORDLE_EXPORT TriggerOnMovementComplete : public MissileTriggerSpec { 
    public:
        explicit TriggerOnMovementComplete(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3145117116 || MissileTriggerSpec::is_type(type);
        }

        int32_t mDelay = 0;
    };

    class YORDLE_EXPORT TriggerOnDelay : public MissileTriggerSpec { 
    public:
        explicit TriggerOnDelay(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3108709201 || MissileTriggerSpec::is_type(type);
        }

        float mDelay = 0.0;
    };

    class YORDLE_EXPORT DelayStart : public MissileBehaviorSpec { 
    public:
        explicit DelayStart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1863542244 || MissileBehaviorSpec::is_type(type);
        }

        float mDelayTime = 0.0;
    };

    class YORDLE_EXPORT x798277f : public MissileBehaviorSpec { 
    public:
        explicit x798277f(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 127412095 || MissileBehaviorSpec::is_type(type);
        }

        float x5e19cde2 = 0.0;
        uint32_t x6bfae91c = 0;
        uint32_t x754a85a6 = 0;
    };

    class YORDLE_EXPORT TriggerOnStart : public MissileTriggerSpec { 
    public:
        explicit TriggerOnStart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1023490542 || MissileTriggerSpec::is_type(type);
        }

    };

    class YORDLE_EXPORT TriggerOnHit : public MissileTriggerSpec { 
    public:
        explicit TriggerOnHit(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 447874143 || MissileTriggerSpec::is_type(type);
        }

    };

    class YORDLE_EXPORT TriggerOnDistanceFromCaster : public MissileTriggerSpec { 
    public:
        explicit TriggerOnDistanceFromCaster(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2746720777 || MissileTriggerSpec::is_type(type);
        }

        float mDistance = 0.0;
    };

    class YORDLE_EXPORT TriggerFromScript : public MissileTriggerSpec { 
    public:
        explicit TriggerFromScript(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4280641128 || MissileTriggerSpec::is_type(type);
        }

        uint32_t mTriggerName = 0;
        float mDelay = 0.0;
    };

    class YORDLE_EXPORT MissileTriggeredActionSpec : public bin_class { 
    public:
        explicit MissileTriggeredActionSpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1405067729 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT Cast : public MissileTriggeredActionSpec { 
    public:
        explicit Cast(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2854572110 || MissileTriggeredActionSpec::is_type(type);
        }

    };

    class YORDLE_EXPORT Destroy : public MissileTriggeredActionSpec { 
    public:
        explicit Destroy(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3294324549 || MissileTriggeredActionSpec::is_type(type);
        }

    };

    class YORDLE_EXPORT ReturnToCaster : public MissileTriggeredActionSpec { 
    public:
        explicit ReturnToCaster(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3563037474 || MissileTriggeredActionSpec::is_type(type);
        }

        bool mPreserveSpeed = false;
        std::shared_ptr<yordle::data::meta::bin_class> mOverrideSpec {};
    };

    class YORDLE_EXPORT ClearAlreadyHitTracking : public MissileTriggeredActionSpec { 
    public:
        explicit ClearAlreadyHitTracking(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2263200418 || MissileTriggeredActionSpec::is_type(type);
        }

    };

    class YORDLE_EXPORT CallOnMissileBounce : public MissileTriggeredActionSpec { 
    public:
        explicit CallOnMissileBounce(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2611874788 || MissileTriggeredActionSpec::is_type(type);
        }

    };

    class YORDLE_EXPORT ClearTargetAndKeepMoving : public MissileTriggeredActionSpec { 
    public:
        explicit ClearTargetAndKeepMoving(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3843873303 || MissileTriggeredActionSpec::is_type(type);
        }

        std::optional<float> mOverrideHeightAugment {};
        std::optional<float> mOverrideRange {};
        std::shared_ptr<yordle::data::meta::bin_class> mOverrideMovement {};
    };

    class YORDLE_EXPORT ChangeMissileSpeed : public MissileTriggeredActionSpec { 
    public:
        explicit ChangeMissileSpeed(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3645322198 || MissileTriggeredActionSpec::is_type(type);
        }

        uint32_t mSpeedChangeType = 0;
        float mSpeedValue = 0.0;
    };

    class YORDLE_EXPORT ChangeTurnRadius : public MissileTriggeredActionSpec { 
    public:
        explicit ChangeTurnRadius(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1722047856 || MissileTriggeredActionSpec::is_type(type);
        }

        std::set<float> x84bb076a {};
    };

    class YORDLE_EXPORT ChangeHeightSolver : public MissileTriggeredActionSpec { 
    public:
        explicit ChangeHeightSolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 934449797 || MissileTriggeredActionSpec::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mOverrideHeightSolver {};
    };

    class YORDLE_EXPORT DestroyOnHit : public MissileBehaviorSpec { 
    public:
        explicit DestroyOnHit(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 107695717 || MissileBehaviorSpec::is_type(type);
        }

    };

    class YORDLE_EXPORT DestroyOnMovementComplete : public MissileBehaviorSpec { 
    public:
        explicit DestroyOnMovementComplete(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4211998018 || MissileBehaviorSpec::is_type(type);
        }

        int32_t mDelay = 0;
    };

    class YORDLE_EXPORT xe357c116 : public MissileBehaviorSpec { 
    public:
        explicit xe357c116(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3814179094 || MissileBehaviorSpec::is_type(type);
        }

    };

    class YORDLE_EXPORT CastOnHit : public MissileBehaviorSpec { 
    public:
        explicit CastOnHit(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3656718200 || MissileBehaviorSpec::is_type(type);
        }

    };

    class YORDLE_EXPORT CastOnMovementComplete : public MissileBehaviorSpec { 
    public:
        explicit CastOnMovementComplete(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2645302597 || MissileBehaviorSpec::is_type(type);
        }

    };

    class YORDLE_EXPORT ReturnToCasterOnMovementComplete : public MissileBehaviorSpec { 
    public:
        explicit ReturnToCasterOnMovementComplete(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 545864281 || MissileBehaviorSpec::is_type(type);
        }

        bool mPreserveSpeed = false;
        std::shared_ptr<yordle::data::meta::bin_class> mOverrideSpec {};
    };

    class YORDLE_EXPORT MissileGroupSpawnerSpec : public bin_class { 
    public:
        explicit MissileGroupSpawnerSpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1040594301 || bin_class::is_type(type);
        }

        uint32_t mChildMissileSpell = 0;
    };

    class YORDLE_EXPORT HeightSolverType : public bin_class { 
    public:
        explicit HeightSolverType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 974318101 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT GravityHeightSolver : public HeightSolverType { 
    public:
        explicit GravityHeightSolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2530014013 || HeightSolverType::is_type(type);
        }

        float mGravity = 0.0;
    };

    class YORDLE_EXPORT FollowTerrainHeightSolver : public HeightSolverType { 
    public:
        explicit FollowTerrainHeightSolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1318474241 || HeightSolverType::is_type(type);
        }

        float mHeightOffset = 0.0;
        float mMaxSlope = 0.0;
    };

    class YORDLE_EXPORT BlendedLinearHeightSolver : public HeightSolverType { 
    public:
        explicit BlendedLinearHeightSolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 692892064 || HeightSolverType::is_type(type);
        }

    };

    class YORDLE_EXPORT SinusoidalHeightSolver : public HeightSolverType { 
    public:
        explicit SinusoidalHeightSolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4027168330 || HeightSolverType::is_type(type);
        }

        float mVerticalOffset = 0.0;
        float mAmplitude = 0.0;
        float mNumberOfPeriods = 0.0;
    };

    class YORDLE_EXPORT CurveTheDifferenceHeightSolver : public HeightSolverType { 
    public:
        explicit CurveTheDifferenceHeightSolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3920264276 || HeightSolverType::is_type(type);
        }

        float mInitialTargetHeightOffset = 0.0;
    };

    class YORDLE_EXPORT MissileMovementSpec : public bin_class { 
    public:
        explicit MissileMovementSpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1798110077 || bin_class::is_type(type);
        }

        bool mUseHeightOffsetAtEnd = false;
        bool mTracksTarget = false;
        bool xaa44f99e = false;
        float mTargetHeightAugment = 0.0;
        float mOffsetInitialTargetHeight = 0.0;
        std::string mStartBoneName {};
        std::map<uint32_t, std::string> xa6cb1fa4 {};
        std::string mTargetBoneName {};
        float mStartDelay = 0.0;
    };

    class YORDLE_EXPORT CircleMovement : public MissileMovementSpec { 
    public:
        explicit CircleMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 60513980 || MissileMovementSpec::is_type(type);
        }

        float mRadialVelocity = 0.0;
        float mAngularVelocity = 0.0;
        float mLinearVelocity = 0.0;
        float mLifetime = 0.0;
    };

    class YORDLE_EXPORT SyncCircleMovement : public MissileMovementSpec { 
    public:
        explicit SyncCircleMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 479174419 || MissileMovementSpec::is_type(type);
        }

        float mAngularVelocity = 0.0;
        float mLifetime = 0.0;
        uint8_t x2630302a = 0;
        bool x16d0a895 = false;
    };

    class YORDLE_EXPORT NullMovement : public MissileMovementSpec { 
    public:
        explicit NullMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2051207289 || MissileMovementSpec::is_type(type);
        }

        bool mWaitForChildren = false;
        float mDelayTime = 0.0;
    };

    class YORDLE_EXPORT AcceleratingMovement : public MissileMovementSpec { 
    public:
        explicit AcceleratingMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2945473954 || MissileMovementSpec::is_type(type);
        }

        bool mInferDirectionFromFacingIfNeeded = false;
        bool mProjectTargetToCastRange = false;
        bool mUseGroundHeightAtTarget = false;
        float mAcceleration = 0.0;
        float mMinSpeed = 0.0;
        float mMaxSpeed = 0.0;
        float mInitialSpeed = 0.0;
    };

    class YORDLE_EXPORT DecelToLocationMovement : public AcceleratingMovement { 
    public:
        explicit DecelToLocationMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2993585533 || AcceleratingMovement::is_type(type);
        }

    };

    class YORDLE_EXPORT FixedTimeMovement : public MissileMovementSpec { 
    public:
        explicit FixedTimeMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4147218533 || MissileMovementSpec::is_type(type);
        }

        bool mInferDirectionFromFacingIfNeeded = false;
        bool mProjectTargetToCastRange = false;
        bool mUseGroundHeightAtTarget = false;
        float mTravelTime = 0.0;
    };

    class YORDLE_EXPORT FixedSpeedMovement : public MissileMovementSpec { 
    public:
        explicit FixedSpeedMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 103819417 || MissileMovementSpec::is_type(type);
        }

        bool mInferDirectionFromFacingIfNeeded = false;
        bool mProjectTargetToCastRange = false;
        bool mUseGroundHeightAtTarget = false;
        float mSpeed = 0.0;
    };

    class YORDLE_EXPORT PhysicsMovement : public MissileMovementSpec { 
    public:
        explicit PhysicsMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 470290435 || MissileMovementSpec::is_type(type);
        }

        float mLifetime = 0.0;
        float mInitialSpeed = 0.0;
        float mDrag = 0.0;
        bool mWallSliding = false;
        float xca771747 = 0.0;
    };

    class YORDLE_EXPORT TrackMouseMovement : public MissileMovementSpec { 
    public:
        explicit TrackMouseMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1415088838 || MissileMovementSpec::is_type(type);
        }

        std::set<float> x84bb076a {};
        bool mInferDirectionFromFacingIfNeeded = false;
        bool mProjectTargetToCastRange = false;
        bool mUseGroundHeightAtTarget = false;
        float mAcceleration = 0.0;
        float mMinSpeed = 0.0;
        float mMaxSpeed = 0.0;
        float mInitialSpeed = 0.0;
        float x604989cf = 0.0;
    };

    class YORDLE_EXPORT GenericSplineMovementSpec : public MissileMovementSpec { 
    public:
        explicit GenericSplineMovementSpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1659331669 || MissileMovementSpec::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mSplineInfo {};
        bool mUseMissilePositionAsOrigin = false;
    };

    class YORDLE_EXPORT FixedTimeSplineMovement : public GenericSplineMovementSpec { 
    public:
        explicit FixedTimeSplineMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3401906356 || GenericSplineMovementSpec::is_type(type);
        }

        float mTravelTime = 0.0;
    };

    class YORDLE_EXPORT FixedSpeedSplineMovement : public GenericSplineMovementSpec { 
    public:
        explicit FixedSpeedSplineMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2002648336 || GenericSplineMovementSpec::is_type(type);
        }

        float mSpeed = 0.0;
    };

    class YORDLE_EXPORT WallFollowMovement : public MissileMovementSpec { 
    public:
        explicit WallFollowMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2409973973 || MissileMovementSpec::is_type(type);
        }

        bool mInferDirectionFromFacingIfNeeded = false;
        bool mProjectTargetToCastRange = false;
        bool mUseGroundHeightAtTarget = false;
        float mSpeed = 0.0;
        bool mCounterClockwise = false;
        float mWallOffset = 0.0;
        float mWallLength = 0.0;
        float mWallSearchRadius = 0.0;
        bool xbcff2ee1 = false;
        bool x38872364 = false;
    };

    class YORDLE_EXPORT VerticalFacingType : public bin_class { 
    public:
        explicit VerticalFacingType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3891808829 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT VeritcalFacingMatchVelocity : public VerticalFacingType { 
    public:
        explicit VeritcalFacingMatchVelocity(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3974501911 || VerticalFacingType::is_type(type);
        }

    };

    class YORDLE_EXPORT VerticalFacingFaceTarget : public VerticalFacingType { 
    public:
        explicit VerticalFacingFaceTarget(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 577189237 || VerticalFacingType::is_type(type);
        }

    };

    class YORDLE_EXPORT MissileVisibilitySpec : public bin_class { 
    public:
        explicit MissileVisibilitySpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1749521072 || bin_class::is_type(type);
        }

        bool mTargetControlsVisibility = false;
        bool mVisibleToOwnerTeamOnly = false;
        float mPerceptionBubbleRadius = 0.0;
        float xbb639057 = 0.0;
    };

    class YORDLE_EXPORT Defaultvisibility : public MissileVisibilitySpec { 
    public:
        explicit Defaultvisibility(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3535923758 || MissileVisibilitySpec::is_type(type);
        }

    };

    class YORDLE_EXPORT EnterFOWVisibility : public MissileVisibilitySpec { 
    public:
        explicit EnterFOWVisibility(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2461751699 || MissileVisibilitySpec::is_type(type);
        }

        bool mMissileClientExitFOWPrediction = false;
        bool mMissileClientWaitForTargetUpdateBeforeMissileShow = false;
    };

    class YORDLE_EXPORT MissileAttachedTargetingDefinition : public bin_class { 
    public:
        explicit MissileAttachedTargetingDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3701578183 || bin_class::is_type(type);
        }

        uint8_t mEndPositionType = 0;
        std::string mLineTextureName {};
        float mLineTextureWidth = 0.0;
        std::string mLineEndTextureName {};
        float mLineEndTextureWidth = 0.0;
        float mLineEndTextureHeight = 0.0;
    };

    class YORDLE_EXPORT AISpellData : public bin_class { 
    public:
        explicit AISpellData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4010062211 || bin_class::is_type(type);
        }

        bool mSendAIEvent = false;
        float mRadius = 0.0;
        float mLifetime = 0.0;
        float mRange = 0.0;
        float mSpeed = 0.0;
        bool mEndOnly = false;
        uint8_t mBlockLevel = 0;
    };

    class YORDLE_EXPORT SpellEffectAmount : public bin_class { 
    public:
        explicit SpellEffectAmount(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2463406204 || bin_class::is_type(type);
        }

        std::set<float> value {};
    };

    class YORDLE_EXPORT SpellDataValue : public bin_class { 
    public:
        explicit SpellDataValue(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 5245094 || bin_class::is_type(type);
        }

        std::string mName {};
        std::set<float> mValues {};
    };

    class YORDLE_EXPORT SpellDataValueVector : public bin_class { 
    public:
        explicit SpellDataValueVector(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1798273677 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::SpellDataValue>> SpellDataValues {};
    };

    class YORDLE_EXPORT PlatformSpellInfo : public bin_class { 
    public:
        explicit PlatformSpellInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1523572560 || bin_class::is_type(type);
        }

        int32_t mAvatarLevelRequired = 0;
        int32_t mSpellID = 0;
        bool mPlatformEnabled = false;
        std::set<std::string> mGameModes {};
    };

    class YORDLE_EXPORT ISplineInfo : public bin_class { 
    public:
        explicit ISplineInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 771419981 || bin_class::is_type(type);
        }

        std::array<float, 3> mStartPositionOffset {};
        bool mUseMissilePositionAsOrigin = false;
    };

    class YORDLE_EXPORT HermiteSplineInfo : public ISplineInfo { 
    public:
        explicit HermiteSplineInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1365802124 || ISplineInfo::is_type(type);
        }

        std::array<float, 3> mControlPoint1 {};
        std::array<float, 3> mControlPoint2 {};
    };

    class YORDLE_EXPORT OverrideAttackTimeData : public bin_class { 
    public:
        explicit OverrideAttackTimeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1471545228 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IGameCalculation> x20991541 {};
        float mCastTimePercent = 0.0;
    };

    class YORDLE_EXPORT UseAutoattackCastTimeData : public bin_class { 
    public:
        explicit UseAutoattackCastTimeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 868276581 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IGameCalculation> mAutoattackCastTimeCalculation {};
        bool x862fbe94 = false;
    };

    class YORDLE_EXPORT SpellLockDeltaTimeData : public bin_class { 
    public:
        explicit SpellLockDeltaTimeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3565606633 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IGameCalculation> mSpellLockDeltaTimeCalculation {};
    };

    class YORDLE_EXPORT x7a9e7d89 : public bin_class { 
    public:
        explicit x7a9e7d89(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2057207177 || bin_class::is_type(type);
        }

        float x55205acb = 0.0;
        std::set<std::shared_ptr<yordle::data::meta::ICastRequirement>> x166d5141 {};
        std::set<std::shared_ptr<yordle::data::meta::ICastRequirement>> x175e6650 {};
        bool xda83e690 = false;
        uint32_t mAffectsTypeOverride = 0;
        uint32_t mAffectsStatusOverride = 0;
    };

    class YORDLE_EXPORT AlternateSpellAssets : public bin_class { 
    public:
        explicit AlternateSpellAssets(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 609301268 || bin_class::is_type(type);
        }

        std::string mAnimationName {};
        std::string mAnimationLoopName {};
        std::string mAnimationWinddownName {};
        std::string mAnimationLeadOutName {};
        bool mUseAnimatorFramerate = false;
        uint32_t mHitEffectOrientType = 0;
        bool mHaveHitEffect = false;
        bool mHaveHitBone = false;
        std::string mHitBoneName {};
        uint32_t mHitEffectKey = 0;
        std::string mHitEffectName {};
        uint32_t mHitEffectPlayerKey = 0;
        std::string mHitEffectPlayerName {};
        uint32_t mAfterEffectKey = 0;
        std::string mAfterEffectName {};
    };

    class YORDLE_EXPORT SpellDataResource : public bin_class { 
    public:
        explicit SpellDataResource(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1127646569 || bin_class::is_type(type);
        }

        uint32_t flags = 0;
        uint32_t mAffectsTypeFlags = 0;
        uint32_t mAffectsStatusFlags = 0;
        std::shared_ptr<yordle::data::meta::bin_class> mRequiredUnitTags {};
        std::shared_ptr<yordle::data::meta::bin_class> mExcludedUnitTags {};
        std::set<std::shared_ptr<yordle::data::meta::ICastRequirement>> mCastRequirementsCaster {};
        std::set<std::shared_ptr<yordle::data::meta::ICastRequirement>> mCastRequirementsTarget {};
        std::shared_ptr<yordle::data::meta::PlatformSpellInfo> mPlatformSpellInfo {};
        std::string mAlternateName {};
        std::set<std::string> mSpellTags {};
        std::set<std::shared_ptr<yordle::data::meta::SpellEffectAmount>> mEffectAmount {};
        std::set<std::shared_ptr<yordle::data::meta::SpellDataValue>> mDataValues {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::SpellDataValueVector>> xfb56608c {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::IGameCalculation>> mSpellCalculations {};
        float mCoefficient = 0.0;
        float mCoefficient2 = 0.0;
        std::set<std::shared_ptr<yordle::data::meta::AlternateSpellAssets>> mAlternateSpellAssets {};
        std::string mAnimationName {};
        std::string mAnimationLoopName {};
        std::string mAnimationWinddownName {};
        std::string mAnimationLeadOutName {};
        std::set<std::string> mImgIconName {};
        std::string mMinimapIconName {};
        std::string mKeywordWhenAcquired {};
        float mCastTime = 0.0;
        std::set<float> mChannelDuration {};
        std::set<float> cooldownTime {};
        float delayCastOffsetPercent = 0.0;
        float delayTotalTimePercent = 0.0;
        float mPreCastLockoutDeltaTime = 0.0;
        std::shared_ptr<yordle::data::meta::SpellLockDeltaTimeData> mPreCastLockoutDeltaTimeData {};
        float mPostCastLockoutDeltaTime = 0.0;
        std::shared_ptr<yordle::data::meta::SpellLockDeltaTimeData> mPostCastLockoutDeltaTimeData {};
        bool mIsDelayedByCastLocked = false;
        float mStartCooldown = 0.0;
        std::set<float> mCastRangeGrowthMax {};
        std::set<float> mCastRangeGrowthStartTime {};
        std::set<float> mCastRangeGrowthDuration {};
        float mChargeUpdateInterval = 0.0;
        float mCancelChargeOnRecastTime = 0.0;
        uint8_t x3d746f1f = 0;
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> x1632f6fc {};
        std::set<std::shared_ptr<yordle::data::meta::CharacterPassiveData>> mCharacterPassiveBuffs {};
        std::set<int32_t> mMaxAmmo {};
        std::set<int32_t> mAmmoUsed {};
        std::set<float> mAmmoRechargeTime {};
        bool mAmmoNotAffectedByCDR = false;
        bool mCooldownNotAffectedByCDR = false;
        bool mAmmoCountHiddenInUI = false;
        bool mCostAlwaysShownInUI = false;
        bool x9fb86dc4 = false;
        bool cannotBeSuppressed = false;
        bool canCastWhileDisabled = false;
        bool mCanTriggerChargeSpellWhileDisabled = false;
        bool canCastOrQueueWhileCasting = false;
        bool canOnlyCastWhileDisabled = false;
        bool mCantCancelWhileWindingUp = false;
        bool x7e3432a0 = false;
        bool mCantCancelWhileChanneling = false;
        bool cantCastWhileRooted = false;
        bool mChannelIsInterruptedByDisables = false;
        bool mChannelIsInterruptedByAttacking = false;
        bool mApplyAttackDamage = false;
        bool mApplyAttackEffect = false;
        bool mApplyMaterialOnHitSound = false;
        bool mDoesntBreakChannels = false;
        bool mBelongsToAvatar = false;
        bool mIsDisabledWhileDead = false;
        bool canOnlyCastWhileDead = false;
        bool mCursorChangesInGrass = false;
        bool mCursorChangesInTerrain = false;
        bool mProjectTargetToCastRange = false;
        bool mSpellRevealsChampion = false;
        bool mUseMinimapTargeting = false;
        bool castRangeUseBoundingBoxes = false;
        bool mMinimapIconRotation = false;
        bool mUseChargeChanneling = false;
        bool mCanMoveWhileChanneling = false;
        bool mDisableCastBar = false;
        bool mShowChannelBar = false;
        bool alwaysSnapFacing = false;
        bool useAnimatorFramerate = false;
        bool bHaveHitEffect = false;
        bool bIsToggleSpell = false;
        bool mDoNotNeedToFaceTarget = false;
        float mTurnSpeedScalar = 0.0;
        bool mNoWinddownIfCancelled = false;
        bool mIgnoreRangeCheck = false;
        bool mOrientRadiusTextureFromPlayer = false;
        std::shared_ptr<yordle::data::meta::OverrideAttackTimeData> mOverrideAttackTime {};
        std::shared_ptr<yordle::data::meta::UseAutoattackCastTimeData> mUseAutoattackCastTimeData {};
        bool mIgnoreAnimContinueUntilCastFrame = false;
        bool mHideRangeIndicatorWhenCasting = false;
        bool mUpdateRotationWhenCasting = false;
        bool mPingableWhileDisabled = false;
        bool mConsideredAsAutoAttack = false;
        bool mDoesNotConsumeMana = false;
        bool mDoesNotConsumeCooldown = false;
        bool mLockedSpellOriginationCastID = false;
        bool x898fbad4 = false;
        uint16_t mMinimapIconDisplayFlag = 0;
        std::set<float> castRange {};
        std::set<float> castRangeDisplayOverride {};
        std::set<float> castRadius {};
        std::set<float> castRadiusSecondary {};
        float castConeAngle = 0.0;
        float castConeDistance = 0.0;
        float castTargetAdditionalUnitsRadius = 0.0;
        float luaOnMissileUpdateDistanceInterval = 0.0;
        std::shared_ptr<yordle::data::meta::MissileSpecification> mMissileSpec {};
        uint32_t mCastType = 0;
        float castFrame = 0.0;
        float missileSpeed = 0.0;
        uint32_t mMissileEffectKey = 0;
        std::string mMissileEffectName {};
        uint32_t mMissileEffectPlayerKey = 0;
        std::string mMissileEffectPlayerName {};
        uint32_t mMissileEffectEnemyKey = 0;
        std::string mMissileEffectEnemyName {};
        float mLineWidth = 0.0;
        float mLineDragLength = 0.0;
        uint32_t mLookAtPolicy = 0;
        uint32_t mHitEffectOrientType = 0;
        std::set<uint32_t> mResourceResolvers {};
        uint32_t mHitEffectKey = 0;
        std::string mHitEffectName {};
        uint32_t mHitEffectPlayerKey = 0;
        std::string mHitEffectPlayerName {};
        uint32_t mAfterEffectKey = 0;
        std::string mAfterEffectName {};
        bool bHaveHitBone = false;
        std::string mHitBoneName {};
        std::array<float, 3> mParticleStartOffset {};
        std::set<int32_t> mFloatVarsDecimals {};
        std::set<float> mana {};
        std::set<float> manaUiOverride {};
        uint32_t selectionPriority = 0;
        std::shared_ptr<yordle::data::meta::bin_class> mTargetingTypeData {};
        std::set<std::shared_ptr<yordle::data::meta::x7a9e7d89>> x7a9e7d89 {};
        std::string mVOEventCategory {};
        std::shared_ptr<yordle::data::meta::AISpellData> mAIData {};
        std::optional<float> mSpellCooldownOrSealedQueueThreshold {};
        uint8_t x3f432a6 = 0;
        bool xf7e5bc = false;
        bool x39381720 = false;
        bool xa8eb09d1 = false;
        bool x24b763c2 = false;
        std::shared_ptr<yordle::data::meta::bin_class> mClientData {};
    };

    class YORDLE_EXPORT SpellPassiveData : public bin_class { 
    public:
        explicit SpellPassiveData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3562978890 || bin_class::is_type(type);
        }

        uint32_t mBuff = 0;
        uint32_t x8692e24a = 0;
        bool x76b67bcc = false;
        bool xcbdf3af2 = false;
        bool xf862632b = false;
        bool x7aa0fed6 = false;
        uint8_t mDisplayFlags = 0;
    };

    class YORDLE_EXPORT CustomTargeterDefinitions : public bin_class { 
    public:
        explicit CustomTargeterDefinitions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3174223914 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mTargeterDefinitions {};
    };

    class YORDLE_EXPORT SpellDataResourceClient : public bin_class { 
    public:
        explicit SpellDataResourceClient(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2110892290 || bin_class::is_type(type);
        }

        uint32_t x375656dd = 0;
        uint32_t x7d4a0e6e = 0;
        std::shared_ptr<yordle::data::meta::bin_class> mTooltipData {};
        std::shared_ptr<yordle::data::meta::bin_class> mSpawningUIDefinition {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mTargeterDefinitions {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::CustomTargeterDefinitions>> mCustomTargeterDefinitions {};
        std::set<std::shared_ptr<yordle::data::meta::MissileAttachedTargetingDefinition>> mMissileTargeterDefinitions {};
        uint32_t mLeftClickSpellAction = 0;
        uint32_t mRightClickSpellAction = 0;
    };

    class YORDLE_EXPORT SpawningUIDefinition : public bin_class { 
    public:
        explicit SpawningUIDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1607774867 || bin_class::is_type(type);
        }

        std::string buffNameFilter {};
        int32_t maxNumberOfUnits = 0;
    };

    class YORDLE_EXPORT IScriptPreload : public bin_class { 
    public:
        explicit IScriptPreload(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3560905284 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT ScriptPreloadCharacter : public bin_class { 
    public:
        explicit ScriptPreloadCharacter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 796426082 || bin_class::is_type(type);
        }

        std::string PreloadResourceName {};
    };

    class YORDLE_EXPORT ScriptPreloadSpell : public bin_class { 
    public:
        explicit ScriptPreloadSpell(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2709224959 || bin_class::is_type(type);
        }

        std::string PreloadResourceName {};
    };

    class YORDLE_EXPORT ScriptPreloadModule : public bin_class { 
    public:
        explicit ScriptPreloadModule(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1322354127 || bin_class::is_type(type);
        }

        std::string PreloadResourceName {};
    };

    class YORDLE_EXPORT ScriptPreloadParticle : public bin_class { 
    public:
        explicit ScriptPreloadParticle(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3450289597 || bin_class::is_type(type);
        }

        std::string PreloadResourceName {};
    };

    class YORDLE_EXPORT LoLSpellPreloadData : public bin_class { 
    public:
        explicit LoLSpellPreloadData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3712288203 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::ScriptPreloadCharacter>> CharacterPreloads {};
        std::set<std::shared_ptr<yordle::data::meta::ScriptPreloadSpell>> SpellPreloads {};
        std::set<std::shared_ptr<yordle::data::meta::ScriptPreloadModule>> ModulePreloads {};
        std::set<std::shared_ptr<yordle::data::meta::ScriptPreloadParticle>> ParticlePreloads {};
    };

    class YORDLE_EXPORT ScriptGlobalProperties : public bin_class { 
    public:
        explicit ScriptGlobalProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3193997900 || bin_class::is_type(type);
        }

        bool PersistsThroughDeath = false;
        bool NonDispellable = false;
        int32_t OnPreDamagePriority = 0;
        uint32_t DeathEventType = 0;
        float CastTime = 0.0;
        float ChannelDuration = 0.0;
        std::string buffName {};
        std::string buffTextureName {};
        std::string displayName {};
        std::set<std::string> AutoBuffActivateEffects {};
        std::set<std::string> AutoBuffActivateAttachBoneNames {};
        bool IsDeathRecapSource = false;
        uint32_t SpellToggleSlot = 0;
        bool IsItemToggled = false;
        std::set<std::string> SpellFXOverrideSkins {};
        std::set<std::string> SpellVOOverrideSkins {};
        std::set<std::string> PopupMessages {};
    };

    class YORDLE_EXPORT ILineIndicatorType : public bin_class { 
    public:
        explicit ILineIndicatorType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4153143643 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT IndicatorTypeLocal : public ILineIndicatorType { 
    public:
        explicit IndicatorTypeLocal(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1062280453 || ILineIndicatorType::is_type(type);
        }

    };

    class YORDLE_EXPORT IndicatorTypeGlobal : public ILineIndicatorType { 
    public:
        explicit IndicatorTypeGlobal(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2357149705 || ILineIndicatorType::is_type(type);
        }

        bool mIsFloating = false;
    };

    class YORDLE_EXPORT ITargeterFadeBehavior : public bin_class { 
    public:
        explicit ITargeterFadeBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1348413282 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT FadeOverTimeBehavior : public ITargeterFadeBehavior { 
    public:
        explicit FadeOverTimeBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2433758018 || ITargeterFadeBehavior::is_type(type);
        }

        float mTimeStart = 0.0;
        float mTimeEnd = 0.0;
        float mStartAlpha = 0.0;
        float mEndAlpha = 0.0;
    };

    class YORDLE_EXPORT FadeByMouseRangeBehavior : public ITargeterFadeBehavior { 
    public:
        explicit FadeByMouseRangeBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3193505140 || ITargeterFadeBehavior::is_type(type);
        }

        float x76a72ad1 = 0.0;
        float x65183440 = 0.0;
        float mStartAlpha = 0.0;
        float mEndAlpha = 0.0;
    };

    class YORDLE_EXPORT FadeToExplicitValueBehavior : public ITargeterFadeBehavior { 
    public:
        explicit FadeToExplicitValueBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2832031521 || ITargeterFadeBehavior::is_type(type);
        }

        float mAlpha = 0.0;
    };

    class YORDLE_EXPORT x29dfd7ad : public bin_class { 
    public:
        explicit x29dfd7ad(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 702535597 || bin_class::is_type(type);
        }

        float xaeebcbdd = 0.0;
        float xa8a2f6c7 = 0.0;
        float x64e4f9f9 = 0.0;
    };

    class YORDLE_EXPORT FloatPerSpellLevel : public bin_class { 
    public:
        explicit FloatPerSpellLevel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 508250748 || bin_class::is_type(type);
        }

        std::set<float> mPerLevelValues {};
        uint32_t mValueType = 0;
    };

    class YORDLE_EXPORT DrawablePositionLocator : public bin_class { 
    public:
        explicit DrawablePositionLocator(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3451066870 || bin_class::is_type(type);
        }

        uint32_t basePosition = 0;
        float distanceOffset = 0.0;
        float angleOffsetRadian = 0.0;
        uint32_t orientationType = 0;
    };

    class YORDLE_EXPORT TargeterDefinition : public bin_class { 
    public:
        explicit TargeterDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1278600786 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ITargeterFadeBehavior> mFadeBehavior {};
    };

    class YORDLE_EXPORT TargeterDefinitionAoe : public TargeterDefinition { 
    public:
        explicit TargeterDefinitionAoe(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3795530517 || TargeterDefinition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> centerLocator {};
        uint32_t textureOrientation = 0;
        bool isConstrainedToRange = false;
        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> constraintPosLocator {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> constraintRange {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> overrideRadius {};
        std::shared_ptr<yordle::data::meta::x29dfd7ad> x2acbb00b {};
        std::string textureRadiusOverrideName {};
    };

    class YORDLE_EXPORT TargeterDefinitionArc : public TargeterDefinition { 
    public:
        explicit TargeterDefinitionArc(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3161379494 || TargeterDefinition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> startLocator {};
        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> endLocator {};
        bool isClockwiseArc = false;
        bool isConstrainedToRange = false;
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> constraintRange {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> overrideRadius {};
        std::string textureArcOverrideName {};
        float thicknessOffset = 0.0;
    };

    class YORDLE_EXPORT TargeterDefinitionCone : public TargeterDefinition { 
    public:
        explicit TargeterDefinitionCone(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2281086721 || TargeterDefinition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> startLocator {};
        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> endLocator {};
        uint32_t fallbackDirection = 0;
        bool hasMaxGrowRange = false;
        bool coneFollowsEnd = false;
        std::optional<float> coneAngleDegrees {};
        std::optional<float> coneRange {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> rangeGrowthStartTime {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> rangeGrowthDuration {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> rangeGrowthMax {};
        std::string textureConeOverrideName {};
        std::string textureConeMaxGrowName {};
    };

    class YORDLE_EXPORT TargeterDefinitionLine : public TargeterDefinition { 
    public:
        explicit TargeterDefinitionLine(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 872611392 || TargeterDefinition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ILineIndicatorType> indicatorType {};
        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> startLocator {};
        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> endLocator {};
        uint32_t fallbackDirection = 0;
        bool alwaysDraw = false;
        bool hasMaxGrowRange = false;
        bool useGlobalLineIndicator = false;
        std::optional<bool> lineStopsAtEndPosition {};
        float minimumDisplayedRange = 0.0;
        float arrowSize = 0.0;
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> lineWidth {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> overrideBaseRange {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> rangeGrowthStartTime {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> rangeGrowthDuration {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> rangeGrowthMax {};
        std::string textureBaseOverrideName {};
        std::string textureTargetOverrideName {};
        std::string textureBaseMaxGrowName {};
        std::string textureTargetMaxGrowName {};
        bool mAngleLineToEndpointHeight = false;
        bool mCenterArrowToEndPoint = false;
        bool facingLine = false;
        float minAngle = 0.0;
        float maxAngle = 0.0;
        float minAngleRangeFactor = 0.0;
        float maxAngleRangeFactor = 0.0;
        bool fade = false;
        float fadeAngle = 0.0;
    };

    class YORDLE_EXPORT TargeterDefinitionMinimap : public TargeterDefinition { 
    public:
        explicit TargeterDefinitionMinimap(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 411843849 || TargeterDefinition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> centerLocator {};
        std::optional<bool> useCasterBoundingBox {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> overrideBaseRange {};
    };

    class YORDLE_EXPORT TargeterDefinitionRange : public TargeterDefinition { 
    public:
        explicit TargeterDefinitionRange(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 75156191 || TargeterDefinition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> centerLocator {};
        uint32_t textureOrientation = 0;
        bool hideWithLineIndicator = false;
        bool hasMaxGrowRange = false;
        std::optional<bool> useCasterBoundingBox {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> overrideBaseRange {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> rangeGrowthStartTime {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> rangeGrowthDuration {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> rangeGrowthMax {};
        std::string textureOverrideName {};
        std::string textureMaxGrowName {};
    };

    class YORDLE_EXPORT TargeterDefinitionWall : public TargeterDefinition { 
    public:
        explicit TargeterDefinitionWall(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1653312970 || TargeterDefinition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> centerLocator {};
        uint32_t wallOrientation = 0;
        float wallRotation = 0.0;
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> thickness {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> length {};
        std::string textureWallOverrideName {};
    };

    class YORDLE_EXPORT TargeterDefinitionMultiAOE : public TargeterDefinition { 
    public:
        explicit TargeterDefinitionMultiAOE(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 120327418 || TargeterDefinition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> centerLocator {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> overrideAOERadius {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> overrideMinCastRange {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> overrideMaxCastRange {};
        float angelOffsetRadian = 0.0;
        uint32_t numOfInnerAOE = 0;
        std::string leftTextureName {};
        std::string rightTextureName {};
        std::string innerTextureName {};
    };

    class YORDLE_EXPORT TargeterDefinitionSpline : public TargeterDefinition { 
    public:
        explicit TargeterDefinitionSpline(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 669603267 || TargeterDefinition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> startLocator {};
        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> endLocator {};
        std::string baseTextureName {};
        std::string frontTextureName {};
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> splineWidth {};
        std::shared_ptr<yordle::data::meta::ISplineInfo> overrideSpline {};
        uint32_t minSegmentCount = 0;
        float maxSegmentLength = 0.0;
        bool isConstrainedToRange = false;
        std::shared_ptr<yordle::data::meta::FloatPerSpellLevel> constraintRange {};
    };

    class YORDLE_EXPORT TargeterDefinitionSkipTerrain : public TargeterDefinition { 
    public:
        explicit TargeterDefinitionSkipTerrain(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3994921506 || TargeterDefinition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> mStartLocator {};
        std::shared_ptr<yordle::data::meta::DrawablePositionLocator> mEndLocator {};
        std::string mBaseTextureName {};
        std::string mTerrainTextureName {};
        std::string mTargetTextureName {};
        float mTargetTextureRadius = 0.0;
        uint32_t mFallbackDirection = 0;
    };

    class YORDLE_EXPORT TargetingTypeData : public bin_class { 
    public:
        explicit TargetingTypeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2144288560 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT Self : public TargetingTypeData { 
    public:
        explicit Self(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1683726967 || TargetingTypeData::is_type(type);
        }

    };

    class YORDLE_EXPORT Target : public TargetingTypeData { 
    public:
        explicit Target(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 845187144 || TargetingTypeData::is_type(type);
        }

        bool x6f92d6b3 = false;
    };

    class YORDLE_EXPORT Area : public TargetingTypeData { 
    public:
        explicit Area(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2601460036 || TargetingTypeData::is_type(type);
        }

    };

    class YORDLE_EXPORT Cone : public TargetingTypeData { 
    public:
        explicit Cone(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3711978346 || TargetingTypeData::is_type(type);
        }

    };

    class YORDLE_EXPORT SelfAoe : public TargetingTypeData { 
    public:
        explicit SelfAoe(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3931936918 || TargetingTypeData::is_type(type);
        }

    };

    class YORDLE_EXPORT TargetOrLocation : public TargetingTypeData { 
    public:
        explicit TargetOrLocation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 530745462 || TargetingTypeData::is_type(type);
        }

    };

    class YORDLE_EXPORT Location : public TargetingTypeData { 
    public:
        explicit Location(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 200649126 || TargetingTypeData::is_type(type);
        }

    };

    class YORDLE_EXPORT Direction : public TargetingTypeData { 
    public:
        explicit Direction(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3748513642 || TargetingTypeData::is_type(type);
        }

    };

    class YORDLE_EXPORT DragDirection : public TargetingTypeData { 
    public:
        explicit DragDirection(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 183658092 || TargetingTypeData::is_type(type);
        }

    };

    class YORDLE_EXPORT LineTargetToCaster : public TargetingTypeData { 
    public:
        explicit LineTargetToCaster(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 752642599 || TargetingTypeData::is_type(type);
        }

    };

    class YORDLE_EXPORT AreaClamped : public TargetingTypeData { 
    public:
        explicit AreaClamped(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 808547418 || TargetingTypeData::is_type(type);
        }

    };

    class YORDLE_EXPORT LocationClamped : public TargetingTypeData { 
    public:
        explicit LocationClamped(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1986849908 || TargetingTypeData::is_type(type);
        }

    };

    class YORDLE_EXPORT TerrainLocation : public TargetingTypeData { 
    public:
        explicit TerrainLocation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2104163269 || TargetingTypeData::is_type(type);
        }

    };

    class YORDLE_EXPORT TerrainType : public TargetingTypeData { 
    public:
        explicit TerrainType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 890181294 || TargetingTypeData::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mBrushCursor {};
        std::shared_ptr<yordle::data::meta::bin_class> mRiverCursor {};
        std::shared_ptr<yordle::data::meta::bin_class> mWallCursor {};
    };

    class YORDLE_EXPORT StatFormulaData : public bin_class { 
    public:
        explicit StatFormulaData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3086678927 || bin_class::is_type(type);
        }

        std::map<uint8_t, float> StatComponents {};
    };

    class YORDLE_EXPORT StatFormulaDataList : public bin_class { 
    public:
        explicit StatFormulaDataList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1250314967 || bin_class::is_type(type);
        }

        std::map<uint32_t, std::shared_ptr<yordle::data::meta::StatFormulaData>> StatFormulas {};
    };

    class YORDLE_EXPORT GameModeDefaultStats : public bin_class { 
    public:
        explicit GameModeDefaultStats(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2299573588 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::StatFormulaDataList> DefaultCharacterStats {};
    };

    class YORDLE_EXPORT TftSurrenderCheat : public Cheat { 
    public:
        explicit TftSurrenderCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1005214616 || Cheat::is_type(type);
        }

    };

    class YORDLE_EXPORT TftChangeDamageSkinCheat : public Cheat { 
    public:
        explicit TftChangeDamageSkinCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3415378836 || Cheat::is_type(type);
        }

    };

    class YORDLE_EXPORT TftMapCharacterRecordData : public bin_class { 
    public:
        explicit TftMapCharacterRecordData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 229654189 || bin_class::is_type(type);
        }

        uint8_t tier = 0;
    };

    class YORDLE_EXPORT TftMapCharacterSkinData : public bin_class { 
    public:
        explicit TftMapCharacterSkinData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2653184481 || bin_class::is_type(type);
        }

        std::string SquareIconTexturePath {};
    };

    class YORDLE_EXPORT TftMapCharacterData : public bin_class { 
    public:
        explicit TftMapCharacterData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2155905376 || bin_class::is_type(type);
        }

        std::string name {};
        std::set<std::shared_ptr<yordle::data::meta::TftMapCharacterSkinData>> SkinData {};
        std::set<std::shared_ptr<yordle::data::meta::TftMapCharacterRecordData>> charData {};
    };

    class YORDLE_EXPORT TftMapCharacterList : public bin_class { 
    public:
        explicit TftMapCharacterList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2927874496 || bin_class::is_type(type);
        }

        std::string ListName {};
        std::set<std::shared_ptr<yordle::data::meta::TftMapCharacterData>> characters {};
    };

    class YORDLE_EXPORT TFTMapCharacterLists : public bin_class { 
    public:
        explicit TFTMapCharacterLists(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1820531913 || bin_class::is_type(type);
        }

        std::string MapName {};
        std::set<std::shared_ptr<yordle::data::meta::TftMapCharacterList>> characterLists {};
    };

    class YORDLE_EXPORT TFTAnnouncementData : public bin_class { 
    public:
        explicit TFTAnnouncementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3519409590 || bin_class::is_type(type);
        }

        std::string mIconPath {};
        std::string mTitleTra {};
        float mDuration = 0.0;
        float mDelay = 0.0;
    };

    class YORDLE_EXPORT TFTAttachmentSlotStyleData : public bin_class { 
    public:
        explicit TFTAttachmentSlotStyleData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3726789741 || bin_class::is_type(type);
        }

        std::string mName {};
        std::string mOverlayIconPath {};
        std::string mSubtextTra {};
    };

    class YORDLE_EXPORT TFTCharacterRecord : public CharacterRecord { 
    public:
        explicit TFTCharacterRecord(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 809801457 || CharacterRecord::is_type(type);
        }

        std::string PortraitIcon {};
        uint8_t tier = 0;
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mLinkedTraits {};
        float mMoveInterval = 0.0;
        float mMoveProximity = 0.0;
        float mMoveRange = 0.0;
        float mMoveHeight = 0.0;
        float mInitialMana = 0.0;
        uint32_t mShopData = 0;
        std::string x4e28a666 {};
        std::array<float, 3> xd9439003 {};
        bool x4a52410b = false;
        bool xef57098f = false;
        bool xbb71cb89 = false;
        float x7cbc4762 = 0.0;
    };

    class YORDLE_EXPORT TFTDragData : public bin_class { 
    public:
        explicit TFTDragData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1414729207 || bin_class::is_type(type);
        }

        bool mHoldToHover = false;
        bool mHoldToDrag = false;
        bool x44ab329e = false;
        float xd1296e95 = 0.0;
        float x6d90172b = 0.0;
        float x59129cbe = 0.0;
        float xe2567252 = 0.0;
        float mDragBlendTime = 0.0;
        float mDragPickupHeight = 0.0;
        float mDragPickupDuration = 0.0;
        float mDragReleaseDuration = 0.0;
        float mDragOvershootDuration = 0.0;
        float mDragOvershootHeight = 0.0;
        std::string mDragSoundEvent {};
        std::string mDropSoundEvent {};
    };

    class YORDLE_EXPORT TftDropRates : public bin_class { 
    public:
        explicit TftDropRates(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4070851979 || bin_class::is_type(type);
        }

        std::set<float> mDropRatesByTier {};
    };

    class YORDLE_EXPORT xf260c3ae : public bin_class { 
    public:
        explicit xf260c3ae(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4066427822 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::TftDropRates>> mDropRatesByLevel {};
    };

    class YORDLE_EXPORT TftEffectAmount : public bin_class { 
    public:
        explicit TftEffectAmount(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1660895988 || bin_class::is_type(type);
        }

        uint32_t name = 0;
        float value = 0.0;
        std::string formatString {};
    };

    class YORDLE_EXPORT TftItemComposition : public bin_class { 
    public:
        explicit TftItemComposition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1707263328 || bin_class::is_type(type);
        }

        std::set<uint32_t> mComponents {};
    };

    class YORDLE_EXPORT TftItemData : public bin_class { 
    public:
        explicit TftItemData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3515269914 || bin_class::is_type(type);
        }

        int32_t mId = 0;
        std::string mName {};
        std::string mBuffName {};
        bool mIsUnique = false;
        std::set<uint32_t> mComposition {};
        std::set<std::shared_ptr<yordle::data::meta::TftItemComposition>> xa3ac84d8 {};
        std::set<uint32_t> x6752c795 {};
        std::set<std::shared_ptr<yordle::data::meta::TftEffectAmount>> effectAmounts {};
        std::set<uint32_t> ItemTags {};
        std::string mDisplayNameTra {};
        std::string mDescriptionNameTra {};
        std::string mIconPath {};
        std::optional<std::array<uint8_t, 4>> mColor {};
        std::array<float, 2> x91d75dff {};
        uint32_t mVfxSystem = 0;
        int32_t x6d8fceed = 0;
    };

    class YORDLE_EXPORT TFTItemList : public bin_class { 
    public:
        explicit TFTItemList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2541164198 || bin_class::is_type(type);
        }

        std::set<uint32_t> mItems {};
        uint32_t VfxResourceResolver = 0;
    };

    class YORDLE_EXPORT x3604b3e3 : public bin_class { 
    public:
        explicit x3604b3e3(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 906277859 || bin_class::is_type(type);
        }

        uint32_t x79dafa57 = 0;
        float xae9687e = 0.0;
    };

    class YORDLE_EXPORT TFTModeData : public bin_class { 
    public:
        explicit TFTModeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 30889102 || bin_class::is_type(type);
        }

        uint32_t mDefaultSetData = 0;
        std::shared_ptr<yordle::data::meta::TFTDragData> mDragData {};
        std::shared_ptr<yordle::data::meta::TFTDragData> mMobileDragData {};
        float x3caeb7b4 = 0.0;
        uint32_t x4a191241 = 0;
        uint32_t mTftMapSkinDefault = 0;
        uint32_t mTftDamageSkinDefault = 0;
        uint32_t mDefaultTftCompanion = 0;
        uint32_t mTutorialTftCompanion = 0;
        float xb75a7951 = 0.0;
        std::set<std::shared_ptr<yordle::data::meta::x3604b3e3>> xe13c7aa {};
        std::set<uint32_t> x12aaf1d8 {};
    };

    class YORDLE_EXPORT TFTGameVariationData : public bin_class { 
    public:
        explicit TFTGameVariationData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 53563192 || bin_class::is_type(type);
        }

        std::string mName {};
        std::string mStageIconPath {};
        std::string mTooltipIconPath {};
        std::string mTooltipDescriptionTra {};
        std::string mTooltipTitleTra {};
        uint32_t mAnnouncementData = 0;
    };

    class YORDLE_EXPORT TFTNotificationData : public bin_class { 
    public:
        explicit TFTNotificationData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2099815050 || bin_class::is_type(type);
        }

        std::string mName {};
        float mDurationSeconds = 0.0;
        std::string mToplineTra {};
        std::string mBottomlineTra {};
        std::string mIconPath {};
        std::string x1e7fffb0 {};
        std::string xde5be189 {};
        std::string xa6874a6e {};
    };

    class YORDLE_EXPORT TFTPhaseData : public bin_class { 
    public:
        explicit TFTPhaseData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 634061068 || bin_class::is_type(type);
        }

        bool mEnabled = false;
        float mDuration = 0.0;
        uint32_t mDisplay = 0;
        std::string mLabel {};
        uint32_t mAnnouncementData = 0;
    };

    class YORDLE_EXPORT TFTRoundData : public bin_class { 
    public:
        explicit TFTRoundData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4104567591 || bin_class::is_type(type);
        }

        std::string mName {};
        std::string mIconPath {};
        std::string mDisplayNameTra {};
        std::string mDescriptionTra {};
        std::string mDefaultTooltipTra {};
        std::map<uint32_t, std::string> mStateTooltipsTra {};
        std::string xd20054c0 {};
        std::string x304b0330 {};
        std::string xf862cc05 {};
        std::string xcb830e67 {};
        std::string mTftDamageSidewall {};
        std::string x4cb318cd {};
        std::shared_ptr<yordle::data::meta::TFTPhaseData> mDraftArrival {};
        std::shared_ptr<yordle::data::meta::TFTPhaseData> mDraft {};
        std::shared_ptr<yordle::data::meta::TFTPhaseData> mDraftDeparture {};
        std::shared_ptr<yordle::data::meta::TFTPhaseData> mPlanningArrival {};
        std::shared_ptr<yordle::data::meta::TFTPhaseData> mPlanning {};
        std::shared_ptr<yordle::data::meta::TFTPhaseData> mPlanningDeparture {};
        std::shared_ptr<yordle::data::meta::TFTPhaseData> mCombatArrival {};
        std::shared_ptr<yordle::data::meta::TFTPhaseData> mCombat {};
        std::shared_ptr<yordle::data::meta::TFTPhaseData> mCombatDeparture {};
        std::map<std::string, std::shared_ptr<yordle::data::meta::GameModeConstant>> mScriptData {};
    };

    class YORDLE_EXPORT TFTStageData : public bin_class { 
    public:
        explicit TFTStageData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4147633913 || bin_class::is_type(type);
        }

        std::set<uint32_t> mRounds {};
    };

    class YORDLE_EXPORT TFTSetData : public bin_class { 
    public:
        explicit TFTSetData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1133007103 || bin_class::is_type(type);
        }

        uint32_t TftGameType = 0;
        uint32_t number = 0;
        std::string Mutator {};
        std::set<uint32_t> DebugCharacterLists {};
        std::set<uint32_t> characterLists {};
        std::set<uint32_t> itemLists {};
        uint32_t traitList = 0;
        std::set<uint32_t> traits {};
        std::map<std::string, uint32_t> DropRateTables {};
        std::map<std::string, std::shared_ptr<yordle::data::meta::GameModeConstant>> ScriptData {};
        std::set<std::shared_ptr<yordle::data::meta::TFTStageData>> stages {};
        std::set<uint32_t> UnitUpgrades {};
        std::set<uint32_t> ScriptDataObjectLists {};
        uint32_t VfxResourceResolver = 0;
    };

    class YORDLE_EXPORT TftShopData : public bin_class { 
    public:
        explicit TftShopData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3844837213 || bin_class::is_type(type);
        }

        std::string mName {};
        uint8_t mRarity = 0;
        std::string mPortraitIconPath {};
        std::string mIconPath {};
        std::string mMobileIconPath {};
        std::string mMobileSmallIconPath {};
        std::string mDisplayNameTra {};
        std::string mAbilityNameTra {};
        std::string mDescriptionTra {};
    };

    class YORDLE_EXPORT TFTStatData : public bin_class { 
    public:
        explicit TFTStatData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2098479675 || bin_class::is_type(type);
        }

        std::string mName {};
        uint32_t mType = 0;
        uint32_t mContext = 0;
        uint32_t mLifetime = 0;
        int32_t xf3a339c = 0;
    };

    class YORDLE_EXPORT TFTStreak : public bin_class { 
    public:
        explicit TFTStreak(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 646351631 || bin_class::is_type(type);
        }

        std::optional<uint32_t> mMinimumStreakLength {};
        std::optional<uint32_t> mMaximumStreakLength {};
        uint32_t mGoldRewardAmount = 0;
        std::string mStreakFormat {};
    };

    class YORDLE_EXPORT TFTStreakData : public bin_class { 
    public:
        explicit TFTStreakData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2506805399 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::TFTStreak>> xc3f540ed {};
        std::set<std::shared_ptr<yordle::data::meta::TFTStreak>> mLossStreaks {};
    };

    class YORDLE_EXPORT TFTTraitContributionData : public bin_class { 
    public:
        explicit TFTTraitContributionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3758614261 || bin_class::is_type(type);
        }

        uint32_t TraitData = 0;
        int32_t Amount = 0;
        bool xa91037f5 = false;
    };

    class YORDLE_EXPORT TFTTraitSetData : public bin_class { 
    public:
        explicit TFTTraitSetData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3241198053 || bin_class::is_type(type);
        }

        uint32_t mMinUnits = 0;
        std::optional<uint32_t> mMaxUnits {};
        uint8_t mTeamToBuff = 0;
        uint8_t mTargetStrategy = 0;
        std::optional<uint32_t> xa8c51db0 {};
        uint8_t mStyle = 0;
        std::string mBuffName {};
        std::string mActivatedBuffName {};
        std::set<std::shared_ptr<yordle::data::meta::TftEffectAmount>> effectAmounts {};
    };

    class YORDLE_EXPORT TftTraitData : public bin_class { 
    public:
        explicit TftTraitData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1871118919 || bin_class::is_type(type);
        }

        std::string mName {};
        std::string mDisplayNameTra {};
        std::string mUnitSectionTra {};
        std::string mDescriptionNameTra {};
        std::string mDisplayNameIcon {};
        std::string mIconPath {};
        std::set<std::shared_ptr<yordle::data::meta::TFTTraitSetData>> mTraitSets {};
    };

    class YORDLE_EXPORT TftTraitList : public bin_class { 
    public:
        explicit TftTraitList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1539106983 || bin_class::is_type(type);
        }

        std::set<uint32_t> mTraits {};
        uint32_t VfxResourceResolver = 0;
    };

    class YORDLE_EXPORT TFTUnitUpgradeData : public bin_class { 
    public:
        explicit TFTUnitUpgradeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1963259073 || bin_class::is_type(type);
        }

        std::string name {};
        uint8_t xd6debdbe = 0;
    };

    class YORDLE_EXPORT TFTHudAnnouncementData : public bin_class { 
    public:
        explicit TFTHudAnnouncementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 305388529 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mSceneTransitionIn {};
        std::shared_ptr<yordle::data::meta::bin_class> mSceneTransitionOut {};
    };

    class YORDLE_EXPORT TFTHudCombatRecapData : public bin_class { 
    public:
        explicit TFTHudCombatRecapData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1573027425 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mPanelTransition {};
        float x4544719b = 0.0;
    };

    class YORDLE_EXPORT TFTHudNotificationsData : public bin_class { 
    public:
        explicit TFTHudNotificationsData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2068371646 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mSceneTransitionIn {};
        std::shared_ptr<yordle::data::meta::bin_class> mSceneTransitionOut {};
    };

    class YORDLE_EXPORT xda3c6dc6 : public bin_class { 
    public:
        explicit xda3c6dc6(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3661393350 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mSceneTransitionIn {};
        std::shared_ptr<yordle::data::meta::bin_class> mSceneTransitionOut {};
    };

    class YORDLE_EXPORT TFTHudScoreboardData : public bin_class { 
    public:
        explicit TFTHudScoreboardData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1850343160 || bin_class::is_type(type);
        }

        float x840f5062 = 0.0;
        float x254c8137 = 0.0;
        float xf504817a = 0.0;
    };

    class YORDLE_EXPORT TFTHudStageData : public bin_class { 
    public:
        explicit TFTHudStageData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1839038444 || bin_class::is_type(type);
        }

        float xa11246b8 = 0.0;
    };

    class YORDLE_EXPORT TFTHudUnitShopData : public bin_class { 
    public:
        explicit TFTHudUnitShopData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 924097896 || bin_class::is_type(type);
        }

        float x88606883 = 0.0;
        float xc38c6ba9 = 0.0;
    };

    class YORDLE_EXPORT TFTHudMobileDownscaleData : public bin_class { 
    public:
        explicit TFTHudMobileDownscaleData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3672021242 || bin_class::is_type(type);
        }

        float xd4d2ea52 = 0.0;
        float mDownscale = 0.0;
    };

    class YORDLE_EXPORT TFTHudTunables : public bin_class { 
    public:
        explicit TFTHudTunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1340671070 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::TFTHudAnnouncementData> mAnnouncementData {};
        std::shared_ptr<yordle::data::meta::TFTHudCombatRecapData> mCombatRecapData {};
        std::shared_ptr<yordle::data::meta::TFTHudNotificationsData> mNotificationsData {};
        std::shared_ptr<yordle::data::meta::xda3c6dc6> mZoomTransitionData {};
        std::shared_ptr<yordle::data::meta::TFTHudScoreboardData> mScoreboardData {};
        std::shared_ptr<yordle::data::meta::TFTHudStageData> mStageData {};
        std::shared_ptr<yordle::data::meta::bin_class> x249fe588 {};
        std::shared_ptr<yordle::data::meta::TFTHudMobileDownscaleData> mMobileDownscaleData {};
        std::shared_ptr<yordle::data::meta::TFTHudUnitShopData> mUnitShopData {};
    };

    class YORDLE_EXPORT x2610e5a7 : public bin_class { 
    public:
        explicit x2610e5a7(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 638641575 || bin_class::is_type(type);
        }

        uint32_t xfa144e3e = 0;
        uint32_t ItemIcon = 0;
        uint32_t xbdcceafd = 0;
        uint32_t x7af87ddd = 0;
        uint32_t x791b47a2 = 0;
        uint32_t x30145a7e = 0;
    };

    class YORDLE_EXPORT x2781ed6b : public bin_class { 
    public:
        explicit x2781ed6b(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 662826347 || bin_class::is_type(type);
        }

        std::string TitleKey {};
        std::string BodyKey {};
    };

    class YORDLE_EXPORT ObjectTags : public bin_class { 
    public:
        explicit ObjectTags(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 622921539 || bin_class::is_type(type);
        }

        std::string mTagList {};
    };

    class YORDLE_EXPORT NumberFormattingBehavior : public bin_class { 
    public:
        explicit NumberFormattingBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 410617757 || bin_class::is_type(type);
        }

        uint32_t x6a015824 = 0;
        bool x9892a348 = false;
        bool x35feae85 = false;
    };

    class YORDLE_EXPORT NumberFormattingData : public bin_class { 
    public:
        explicit NumberFormattingData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2581062515 || bin_class::is_type(type);
        }

        std::string x5b862d47 {};
        std::string xd183213b {};
        std::string xb995fb1f {};
        std::string x40f5bd16 {};
        std::string xedd8ea83 {};
        std::string x31169dff {};
        std::string xe4f5bdce {};
        std::string x12de6ec {};
        std::string x70177bf1 {};
        std::string xb0c63265 {};
        std::string x89a709fb {};
        std::string xf3ee8811 {};
        std::string xef853971 {};
        std::string xfd7c73b7 {};
        std::string xdd2fcd42 {};
        std::string xc3310cda {};
        std::map<uint32_t, uint32_t> x7a4d89bb {};
    };

    class YORDLE_EXPORT AnnouncementDefinitionData : public bin_class { 
    public:
        explicit AnnouncementDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 502828211 || bin_class::is_type(type);
        }

        uint16_t priority = 0;
        bool CanBeMadeObsolete = false;
        bool MakeLowerPriorityEventsObsolete = false;
        uint32_t Style = 0;
        std::string TextKey {};
        std::string ChatMessageKey {};
        std::string SoundKey {};
        std::string SpectatorSoundKey {};
        uint32_t CommonElements = 0;
        uint32_t AlliedElements = 0;
        uint32_t EnemyElements = 0;
    };

    class YORDLE_EXPORT AnnouncementDefinition : public bin_class { 
    public:
        explicit AnnouncementDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 94368299 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::AnnouncementDefinitionData> DefaultData {};
        std::map<std::string, std::shared_ptr<yordle::data::meta::AnnouncementDefinitionData>> MutatorOverrides {};
    };

    class YORDLE_EXPORT x78387eb5 : public AnnouncementDefinition { 
    public:
        explicit x78387eb5(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2016968373 || AnnouncementDefinition::is_type(type);
        }

    };

    class YORDLE_EXPORT AnnouncementStyleBasic : public bin_class { 
    public:
        explicit AnnouncementStyleBasic(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3731372071 || bin_class::is_type(type);
        }

        uint32_t TextField = 0;
        float MinAnnouncementDuration = 0.0;
        std::shared_ptr<yordle::data::meta::bin_class> x3f43172e {};
        std::shared_ptr<yordle::data::meta::bin_class> xcc99a2db {};
    };

    class YORDLE_EXPORT x48c9ff38 : public AnnouncementStyleBasic { 
    public:
        explicit x48c9ff38(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1221197624 || AnnouncementStyleBasic::is_type(type);
        }

        uint32_t SourceIcon = 0;
    };

    class YORDLE_EXPORT xaa95a271 : public AnnouncementStyleBasic { 
    public:
        explicit xaa95a271(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2861933169 || AnnouncementStyleBasic::is_type(type);
        }

        uint32_t LeftIcon = 0;
        uint32_t RightIcon = 0;
    };

    class YORDLE_EXPORT AnnouncementIcon : public bin_class { 
    public:
        explicit AnnouncementIcon(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 728839351 || bin_class::is_type(type);
        }

        uint32_t x108e8710 = 0;
        uint32_t xc2e2a2df = 0;
        uint32_t x3e37c63b = 0;
        uint32_t AlliedElementGroup = 0;
        uint32_t EnemyElementGroup = 0;
        uint32_t xdd749512 = 0;
        uint32_t xde7496a5 = 0;
        uint32_t xdb7491ec = 0;
        uint32_t xdc74937f = 0;
    };

    class YORDLE_EXPORT AnnouncementMap : public bin_class { 
    public:
        explicit AnnouncementMap(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 224929220 || bin_class::is_type(type);
        }

        uint32_t ParentList = 0;
        std::string x81082e4b {};
        uint32_t x79175e85 = 0;
        uint32_t xcf8c591b = 0;
        std::map<std::string, uint32_t> Announcements {};
    };

    class YORDLE_EXPORT CursorData : public bin_class { 
    public:
        explicit CursorData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 187557783 || bin_class::is_type(type);
        }

        std::array<float, 2> mHotSpot {};
        std::string mTextureName {};
        std::string mColorblindTextureName {};
        std::string xd240ce4f {};
        std::string xf6536c51 {};
    };

    class YORDLE_EXPORT CursorDataTeamContext : public bin_class { 
    public:
        explicit CursorDataTeamContext(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4014870449 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::CursorData>> mData {};
    };

    class YORDLE_EXPORT CursorDataCaptureCooldownContext : public bin_class { 
    public:
        explicit CursorDataCaptureCooldownContext(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3454621813 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::CursorData>> mData {};
    };

    class YORDLE_EXPORT CursorConfig : public bin_class { 
    public:
        explicit CursorConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3994575677 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::CursorData>> mSingleContextCursors {};
        std::set<std::shared_ptr<yordle::data::meta::CursorDataTeamContext>> mTeamContextCursors {};
        std::shared_ptr<yordle::data::meta::CursorDataCaptureCooldownContext> mHoverNotUseableCursor {};
    };

    class YORDLE_EXPORT HealthbarImageInfo : public bin_class { 
    public:
        explicit HealthbarImageInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1743182461 || bin_class::is_type(type);
        }

        std::string mTextureName {};
        std::array<float, 2> mOffset {};
        std::array<float, 4> mTextureUvs {};
    };

    class YORDLE_EXPORT UnitStatusData : public bin_class { 
    public:
        explicit UnitStatusData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1273755329 || bin_class::is_type(type);
        }

        uint32_t locType = 0;
        uint32_t attackableUnitStatusType = 0;
        std::string statusName {};
        std::optional<std::array<uint8_t, 4>> textColor {};
        std::shared_ptr<yordle::data::meta::HealthbarImageInfo> imageInfo {};
    };

    class YORDLE_EXPORT UnitStatusPriorityList : public bin_class { 
    public:
        explicit UnitStatusPriorityList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3886968817 || bin_class::is_type(type);
        }

        float mMinimumDisplayTime = 0.0;
        std::set<std::shared_ptr<yordle::data::meta::UnitStatusData>> mPrioritizedUnitStatusData {};
    };

    class YORDLE_EXPORT FloatTextIconData : public bin_class { 
    public:
        explicit FloatTextIconData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 383291203 || bin_class::is_type(type);
        }

        std::string mIconFileName {};
        std::array<uint8_t, 4> mColor {};
        std::array<float, 2> mDisplaySize {};
        std::array<float, 2> mOffset {};
        uint32_t mAlignment = 0;
    };

    class YORDLE_EXPORT FloatTextDisplayOverrides : public bin_class { 
    public:
        explicit FloatTextDisplayOverrides(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 267762117 || bin_class::is_type(type);
        }

        std::optional<int32_t> priority {};
        std::optional<int32_t> maxInstances {};
        std::optional<bool> isAnimated {};
        std::optional<bool> disableHorizontalReverse {};
        std::optional<bool> disableVerticalReverse {};
        std::optional<bool> momentumFromHit {};
        std::optional<bool> followSource {};
        std::optional<bool> ignoreCombineRules {};
        std::optional<bool> ignoreQueue {};
        std::optional<bool> alternateRightLeft {};
        std::optional<bool> combinableCounterDisplay {};
        std::optional<int32_t> combinableCounterCategory {};
        std::optional<bool> overwritePreviousNumber {};
        std::optional<float> extendTimeOnNewDamage {};
        std::optional<float> maxLifeTime {};
        std::optional<int32_t> colorOffsetR {};
        std::optional<int32_t> colorOffsetG {};
        std::optional<int32_t> colorOffsetB {};
        std::optional<float> scale {};
        std::optional<float> decay {};
        std::optional<float> decayDelay {};
        std::optional<float> shrinkTime {};
        std::optional<float> shrinkScale {};
        std::optional<float> hangTime {};
        std::optional<float> randomOffsetMinX {};
        std::optional<float> randomOffsetMaxX {};
        std::optional<float> randomOffsetMinY {};
        std::optional<float> randomOffsetMaxY {};
        std::optional<float> startOffsetX {};
        std::optional<float> startOffsetY {};
        std::optional<float> relativeOffsetMin {};
        std::optional<float> relativeOffsetMax {};
        std::optional<float> minXVelocity {};
        std::optional<float> maxXVelocity {};
        std::optional<float> minYVelocity {};
        std::optional<float> maxYVelocity {};
        std::optional<float> continualForceX {};
        std::optional<float> continualForceY {};
        std::optional<float> growthXScalar {};
        std::optional<float> growthYScalar {};
    };

    class YORDLE_EXPORT FloatingTextTunables : public bin_class { 
    public:
        explicit FloatingTextTunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 395898060 || bin_class::is_type(type);
        }

        uint32_t mMaxFloatingTextItems = 0;
        float mIntervalInPix = 0.0;
        float mScrollSpeed = 0.0;
        float mAnimatedTextQueueDelay = 0.0;
        float mYResolutionBaseline = 0.0;
        float mMinimumDynamicScale = 0.0;
        float mMaximumDynamicScale = 0.0;
        float xccf713a7 = 0.0;
        float xf56f095c = 0.0;
        float mMinionComparisonMultiplier = 0.0;
        float mLocalPlayerHealthComparison = 0.0;
        std::set<float> mComparisonByLevel {};
    };

    class YORDLE_EXPORT FloatingTextDamageDisplayTypeList : public bin_class { 
    public:
        explicit FloatingTextDamageDisplayTypeList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3119478897 || bin_class::is_type(type);
        }

        uint32_t Default = 0;
        uint32_t Impact = 0;
        uint32_t Zone = 0;
        uint32_t Ult = 0;
        uint32_t DotNoCombine = 0;
        uint32_t Dot = 0;
        uint32_t DotSlow = 0;
        uint32_t Multistrike = 0;
        uint32_t MultistrikeFast = 0;
        uint32_t MultistrikeSlow = 0;
        uint32_t PlayerMinion = 0;
        uint32_t BarrackMinion = 0;
        uint32_t Mini = 0;
        uint32_t SelfTrueDamageCounter = 0;
        uint32_t SelfPhysicalDamageCounter = 0;
        uint32_t SelfMagicalDamageCounter = 0;
    };

    class YORDLE_EXPORT FloatTextFormattingData : public bin_class { 
    public:
        explicit FloatTextFormattingData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 585161597 || bin_class::is_type(type);
        }

        uint32_t mTypeName = 0;
        int32_t colorOffsetR = 0;
        int32_t colorOffsetG = 0;
        int32_t colorOffsetB = 0;
        uint32_t mFontDescription = 0;
        bool ignoreCombineRules = false;
        std::string combinableNumberFormat {};
        std::string combinableNegativeNumberFormat {};
        int32_t priority = 0;
        float height = 0.0;
        float decay = 0.0;
        float decayDelay = 0.0;
        bool disabled = false;
        bool isAnimated = false;
        bool momentumFromHit = false;
        bool followSource = false;
        bool disableHorizontalReverse = false;
        bool disableVerticalReverse = false;
        bool combinableCounterDisplay = false;
        int32_t combinableCounterCategory = 0;
        bool overwritePreviousNumber = false;
        float minXVelocity = 0.0;
        float maxXVelocity = 0.0;
        float minYVelocity = 0.0;
        float maxYVelocity = 0.0;
        float startOffsetX = 0.0;
        float startOffsetY = 0.0;
        float hangTime = 0.0;
        float randomStartOffsetMinX = 0.0;
        float randomStartOffsetMaxX = 0.0;
        float randomStartOffsetMinY = 0.0;
        float randomStartOffsetMaxY = 0.0;
        float growthYScalar = 0.0;
        float growthXScalar = 0.0;
        float relativeOffsetMin = 0.0;
        float relativeOffsetMax = 0.0;
        float continualForceX = 0.0;
        float continualForceY = 0.0;
        float continualForceXBase = 0.0;
        float continualForceYBase = 0.0;
        float shrinkTime = 0.0;
        float scale = 0.0;
        float extendTimeOnNewDamage = 0.0;
        float maxLifeTime = 0.0;
        bool ignoreQueue = false;
        bool alternateRightLeft = false;
        int32_t maxInstances = 0;
        float shrinkScale = 0.0;
        bool refreshExisting = false;
        bool attachToHealthBar = false;
        bool offsetByBoundingBox = false;
        uint8_t horizontalAlignment = 0;
        uint8_t verticalAlignment = 0;
        std::set<std::shared_ptr<yordle::data::meta::FloatTextIconData>> icons {};
    };

    class YORDLE_EXPORT FloatingTextTypeList : public bin_class { 
    public:
        explicit FloatingTextTypeList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 46628140 || bin_class::is_type(type);
        }

        uint32_t Invulnerable = 0;
        uint32_t Special = 0;
        uint32_t Heal = 0;
        uint32_t ManaHeal = 0;
        uint32_t ManaDamage = 0;
        uint32_t Dodge = 0;
        uint32_t PhysicalDamageCritical = 0;
        uint32_t MagicalDamageCritical = 0;
        uint32_t TrueDamageCritical = 0;
        uint32_t Experience = 0;
        uint32_t Gold = 0;
        uint32_t level = 0;
        uint32_t Disable = 0;
        uint32_t QuestReceived = 0;
        uint32_t QuestComplete = 0;
        uint32_t Score = 0;
        uint32_t PhysicalDamage = 0;
        uint32_t MagicalDamage = 0;
        uint32_t TrueDamage = 0;
        uint32_t EnemyPhysicalDamage = 0;
        uint32_t EnemyMagicalDamage = 0;
        uint32_t EnemyTrueDamage = 0;
        uint32_t EnemyPhysicalDamageCritical = 0;
        uint32_t EnemyMagicalDamageCritical = 0;
        uint32_t EnemyTrueDamageCritical = 0;
        uint32_t Countdown = 0;
        uint32_t OMW = 0;
        uint32_t Absorbed = 0;
        uint32_t Debug = 0;
        uint32_t PracticeToolTotal = 0;
        uint32_t PracticeToolLastHit = 0;
        uint32_t PracticeToolDPS = 0;
        uint32_t ScoreDarkStar = 0;
        uint32_t ScoreProject0 = 0;
        uint32_t ScoreProject1 = 0;
        uint32_t ShieldBonusDamage = 0;
        uint32_t TFTUnitLabel = 0;
    };

    class YORDLE_EXPORT FloatingTextGlobalConfig : public bin_class { 
    public:
        explicit FloatingTextGlobalConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2165648641 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::FloatingTextTunables> mTunables {};
        std::shared_ptr<yordle::data::meta::FloatingTextDamageDisplayTypeList> mDamageDisplayTypes {};
        std::shared_ptr<yordle::data::meta::FloatingTextTypeList> mFloatingTextTypes {};
    };

    class YORDLE_EXPORT FloatingTextOverride : public bin_class { 
    public:
        explicit FloatingTextOverride(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1059987028 || bin_class::is_type(type);
        }

        std::map<uint32_t, bool> OverriddenFloatingTextTypes {};
    };

    class YORDLE_EXPORT HudColorData : public bin_class { 
    public:
        explicit HudColorData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3892017401 || bin_class::is_type(type);
        }

        std::array<uint8_t, 4> mSelfColor {};
        std::array<uint8_t, 4> mFriendlyColor {};
        std::array<uint8_t, 4> mEnemyColor {};
        std::array<uint8_t, 4> mNeutralColor {};
        std::array<uint8_t, 4> mOrderColor {};
        std::array<uint8_t, 4> mChaosColor {};
        std::array<uint8_t, 4> mJunglePlantColor {};
        std::array<uint8_t, 4> mFriendlyLaneMinionBarColor {};
        std::array<uint8_t, 4> mEnemyLaneMinionBarColor {};
        std::array<uint8_t, 4> mDeathFriendlyTeamColor {};
        std::array<uint8_t, 4> mDeathEnemyTeamColor {};
        std::array<uint8_t, 4> mDeathOrderColor {};
        std::array<uint8_t, 4> mDeathChaosColor {};
        std::array<uint8_t, 4> mInputChatColor {};
        std::array<uint8_t, 4> mShadowChatColor {};
        std::array<uint8_t, 4> mFriendlyChatColor {};
        std::array<uint8_t, 4> mAllChatColor {};
        std::array<uint8_t, 4> mEnemyChatColor {};
        std::array<uint8_t, 4> mNeutralChatColor {};
        std::array<uint8_t, 4> mPingChatColor {};
        std::array<uint8_t, 4> mTeamChatColor {};
        std::array<uint8_t, 4> mNetworkChatColor {};
        std::array<uint8_t, 4> mOrderChatColor {};
        std::array<uint8_t, 4> mChaosChatColor {};
        std::array<uint8_t, 4> mGoldChatColor {};
        std::array<uint8_t, 4> mTimestampChatColor {};
        std::array<uint8_t, 4> mWhisperColor {};
        std::array<uint8_t, 4> mPartyChatColor {};
        std::array<uint8_t, 4> mPlatformChatColor {};
        std::array<uint8_t, 4> mFeedbackChatColor {};
        std::array<uint8_t, 4> mItemCalloutBodyColor {};
        std::array<uint8_t, 4> mItemCalloutItemColor {};
        std::array<uint8_t, 4> mMarkedIndicatorColor {};
        std::array<uint8_t, 4> mSelectedIndicatorColor {};
        std::array<uint8_t, 4> mHighlightedIndicatorColor {};
        std::array<uint8_t, 4> mItemHotKeyEnabledColor {};
        std::array<uint8_t, 4> mItemHotKeyDisabledColor {};
        std::array<uint8_t, 4> mSpellHotKeyEnabledColor {};
        std::array<uint8_t, 4> mSpellHotKeyDisabledColor {};
        std::array<uint8_t, 4> mStatNormalColor {};
        std::array<uint8_t, 4> mStatBoostedColor {};
        std::array<uint8_t, 4> mLevelUpColor {};
        std::array<uint8_t, 4> mEvolutionColor {};
        std::array<uint8_t, 4> mSummonerNameDeadColor {};
        std::array<uint8_t, 4> mSummonerNameDefaultColor {};
        std::array<uint8_t, 4> mSummonerNameSelfColor {};
        std::array<uint8_t, 4> mClubTagFriendlyChatColor {};
        std::array<uint8_t, 4> mClubTagEnemyChatColor {};
        std::array<uint8_t, 4> mClubTagNeutralChatColor {};
        std::array<uint8_t, 4> mClubTagOrderChatColor {};
        std::array<uint8_t, 4> mClubTagChaosChatColor {};
        std::array<uint8_t, 4> mVoiceChatDefaultTextColor {};
        std::array<uint8_t, 4> mVoiceChatHoverTextColor {};
        std::array<uint8_t, 4> mVoiceChatHaloTextureColor {};
        std::array<uint8_t, 4> x3ca4e54 {};
        std::array<uint8_t, 4> xdfd9f7a0 {};
        std::array<uint8_t, 4> xd614aa57 {};
        std::array<uint8_t, 4> VoteEmptyColor {};
        std::array<uint8_t, 4> x51c13ad7 {};
        std::array<uint8_t, 4> VoteNocolor {};
        std::array<uint8_t, 4> xc14d71dc {};
        std::array<uint8_t, 4> xcd9cb6c5 {};
        std::array<uint8_t, 4> x3f68efb8 {};
        std::array<uint8_t, 4> x9487808b {};
        std::array<uint8_t, 4> xfc46842 {};
        std::array<uint8_t, 4> x3b64dfe3 {};
        std::array<uint8_t, 4> x672ccd56 {};
        std::set<std::array<uint8_t, 4>> x9316f661 {};
        std::array<uint8_t, 4> x30c22182 {};
        std::array<uint8_t, 4> xee9a2886 {};
        std::array<uint8_t, 4> xc09ccdd8 {};
        std::array<uint8_t, 4> x24eb55a3 {};
        std::array<uint8_t, 4> x2f02af61 {};
        std::array<uint8_t, 4> xca1d9872 {};
    };

    class YORDLE_EXPORT HudFeedbackDamageData : public bin_class { 
    public:
        explicit HudFeedbackDamageData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3939670256 || bin_class::is_type(type);
        }

        float mPercentageDamageForFlash = 0.0;
        float mOverTimeForFlashSeconds = 0.0;
        float mMaxPercentageForMostReadHealth = 0.0;
        float mFlashDuration = 0.0;
        float mStartFlashAlpha = 0.0;
        float mLowHealthFlashThresholdPercentage = 0.0;
        float mLowHealthFlashDuration = 0.0;
        float mLowHealthFlashOpacityStrength = 0.0;
    };

    class YORDLE_EXPORT TeamScoreMeterUITunables : public bin_class { 
    public:
        explicit TeamScoreMeterUITunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4180972365 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mSceneTransition {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mTeamScoreMeterProperties {};
        uint32_t mTeamScoreMeterMaxRoundsPerTeam = 0;
        bool mAllowDynamicVisibility = false;
        bool mCountdownTimer = false;
        uint8_t xdff2794f = 0;
    };

    class YORDLE_EXPORT HudTeamScoreMeterProperties : public bin_class { 
    public:
        explicit HudTeamScoreMeterProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3303051661 || bin_class::is_type(type);
        }

        uint8_t mTeamScoreMeterType = 0;
        bool mShowScoreText = false;
        std::string x86864fbc {};
        std::string x6044a790 {};
    };

    class YORDLE_EXPORT EncounterUITunables : public bin_class { 
    public:
        explicit EncounterUITunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 60771964 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mSceneTransition {};
        float mProgressBarEaseRate = 0.0;
        std::string mProgressMeterSuffix {};
        std::string mTimerMeterSuffix {};
        float mUnitBarFadeSpeed = 0.0;
        bool x3fc8ecec = false;
        std::string mProgressMeterHoverText {};
        std::string mProgressMeterPingText {};
        std::string mPipsHoverText {};
    };

    class YORDLE_EXPORT QuestUITunables : public bin_class { 
    public:
        explicit QuestUITunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3365626407 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mSceneTransition {};
    };

    class YORDLE_EXPORT DragonUITunables : public bin_class { 
    public:
        explicit DragonUITunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3440211024 || bin_class::is_type(type);
        }

        uint8_t mSlots = 0;
        std::set<std::string> mDragonBaseNames {};
    };

    class YORDLE_EXPORT HudGameModeScoreData : public bin_class { 
    public:
        explicit HudGameModeScoreData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3557256043 || bin_class::is_type(type);
        }

        std::set<uint8_t> mTeamScoreElementTypes {};
        std::set<uint8_t> mIndividualScoreElementTypes {};
        std::string mModeKeyName {};
        std::string mTeamGameScorePingMessage {};
        std::shared_ptr<yordle::data::meta::TeamScoreMeterUITunables> mTeamScoreMeterUi {};
        std::shared_ptr<yordle::data::meta::EncounterUITunables> mEncounterUi {};
        std::shared_ptr<yordle::data::meta::bin_class> mTeamFightUi {};
        std::shared_ptr<yordle::data::meta::QuestUITunables> mQuestUi {};
        std::shared_ptr<yordle::data::meta::DragonUITunables> mDragonUi {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mOptionalBins {};
    };

    class YORDLE_EXPORT MinimapIconTextureData : public bin_class { 
    public:
        explicit MinimapIconTextureData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3732824828 || bin_class::is_type(type);
        }

        std::string mBase {};
        std::optional<std::string> mColorblind {};
    };

    class YORDLE_EXPORT MinimapIconColorData : public bin_class { 
    public:
        explicit MinimapIconColorData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 59888480 || bin_class::is_type(type);
        }

        std::array<uint8_t, 4> mBase {};
        std::optional<std::array<uint8_t, 4>> mColorblind {};
    };

    class YORDLE_EXPORT MinimapIcon : public bin_class { 
    public:
        explicit MinimapIcon(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 525225061 || bin_class::is_type(type);
        }

        bool mRelativeTeams = false;
        std::array<float, 2> mSize {};
        float mMinScale = 0.0;
        float mMaxScale = 0.0;
        std::shared_ptr<yordle::data::meta::MinimapIconTextureData> mBaseTexture {};
        std::map<uint8_t, std::shared_ptr<yordle::data::meta::MinimapIconTextureData>> mTeamTextures {};
        std::shared_ptr<yordle::data::meta::MinimapIconColorData> mBaseColor {};
        std::map<uint8_t, std::shared_ptr<yordle::data::meta::MinimapIconColorData>> mTeamColors {};
    };

    class YORDLE_EXPORT MinimapData : public bin_class { 
    public:
        explicit MinimapData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 523452044 || bin_class::is_type(type);
        }

        std::map<uint8_t, std::shared_ptr<yordle::data::meta::MinimapIcon>> mIcons {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::MinimapIcon>> mCustomIcons {};
    };

    class YORDLE_EXPORT HudOptionalBinData : public bin_class { 
    public:
        explicit HudOptionalBinData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3920544379 || bin_class::is_type(type);
        }

        std::string mName {};
        uint32_t mPriority = 0;
    };

    class YORDLE_EXPORT HudTunables : public bin_class { 
    public:
        explicit HudTunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2058949250 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mScaleSettings {};
        std::shared_ptr<yordle::data::meta::bin_class> mLevelUpTransitionData {};
        std::shared_ptr<yordle::data::meta::bin_class> mGameScoreboardTransitionData {};
        std::shared_ptr<yordle::data::meta::bin_class> mReplayScoreboardTransitionData {};
        std::shared_ptr<yordle::data::meta::bin_class> mReplayGameStatsTransitionData {};
        std::shared_ptr<yordle::data::meta::bin_class> x9cec9ff0 {};
        std::shared_ptr<yordle::data::meta::bin_class> x4e7d3049 {};
        std::shared_ptr<yordle::data::meta::bin_class> mElementalSelectionAnimationData {};
        std::shared_ptr<yordle::data::meta::bin_class> mEmotePopupData {};
        std::shared_ptr<yordle::data::meta::bin_class> mGearSelectionData {};
        std::shared_ptr<yordle::data::meta::bin_class> mRadailWheelData {};
        std::shared_ptr<yordle::data::meta::bin_class> mReplayData {};
        std::shared_ptr<yordle::data::meta::bin_class> mCheatMenuData {};
        std::shared_ptr<yordle::data::meta::bin_class> mPingData {};
        std::shared_ptr<yordle::data::meta::bin_class> mVoiceChatData {};
        std::shared_ptr<yordle::data::meta::bin_class> mInputBoxData {};
        std::shared_ptr<yordle::data::meta::bin_class> mHealthBarData {};
        std::shared_ptr<yordle::data::meta::bin_class> mHudSpellSlotResetFeedbackData {};
        std::shared_ptr<yordle::data::meta::bin_class> mLoadingScreenData {};
        std::shared_ptr<yordle::data::meta::bin_class> mStatPanelStatStoneData {};
        std::shared_ptr<yordle::data::meta::bin_class> mStatStoneData {};
        std::shared_ptr<yordle::data::meta::bin_class> mStatStoneDeathRecapData {};
        std::shared_ptr<yordle::data::meta::bin_class> StatStoneMilestoneData {};
        std::shared_ptr<yordle::data::meta::bin_class> mEndOfGameData {};
        std::shared_ptr<yordle::data::meta::bin_class> x86402adf {};
        std::shared_ptr<yordle::data::meta::bin_class> x48c75042 {};
        std::shared_ptr<yordle::data::meta::bin_class> DamageDisplayData {};
        std::shared_ptr<yordle::data::meta::bin_class> FightRecapUiData {};
    };

    class YORDLE_EXPORT HudScaleSettingsData : public bin_class { 
    public:
        explicit HudScaleSettingsData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2979455577 || bin_class::is_type(type);
        }

        float maximumGlobalScale = 0.0;
        float minimumGlobalScale = 0.0;
        float maximumMinimapScale = 0.0;
        float minimumMinimapScale = 0.0;
        float x6b8896b6 = 0.0;
        float xb565cf40 = 0.0;
        float maximumPracticeToolScale = 0.0;
        float minimumPracticeToolScale = 0.0;
        float maximumChatScale = 0.0;
        float minimumChatScale = 0.0;
    };

    class YORDLE_EXPORT HudLevelUpData : public bin_class { 
    public:
        explicit HudLevelUpData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2124320233 || bin_class::is_type(type);
        }

        uint8_t minAlpha = 0;
        uint8_t maxAlpha = 0;
        float maxOffset = 0.0;
        float animTime = 0.0;
        float delay = 0.0;
        float overshoot = 0.0;
        float inertia = 0.0;
        float playerBuffsOffset = 0.0;
        float idleSheenInterval = 0.0;
    };

    class YORDLE_EXPORT HudBannerData : public bin_class { 
    public:
        explicit HudBannerData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2731869740 || bin_class::is_type(type);
        }

        float transitionTime = 0.0;
        uint8_t TransitionMinAlpha = 0;
        uint8_t TransitionMaxAlpha = 0;
        std::array<float, 2> transitionOffset {};
        std::array<float, 2> pulseOffset {};
        float pulseTime = 0.0;
        float pulseDuration = 0.0;
        float pulseInterval = 0.0;
    };

    class YORDLE_EXPORT HudAbilityPromptData : public bin_class { 
    public:
        explicit HudAbilityPromptData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4291825122 || bin_class::is_type(type);
        }

        std::array<uint8_t, 4> PulseStartColor {};
        std::array<uint8_t, 4> PulseEndColor {};
        std::array<float, 2> pulseOffset {};
        float pulseTime = 0.0;
        float pulseInterval = 0.0;
    };

    class YORDLE_EXPORT HudMenuTransitionData : public bin_class { 
    public:
        explicit HudMenuTransitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3273533950 || bin_class::is_type(type);
        }

        float transitionTime = 0.0;
        uint8_t minAlpha = 0;
        uint8_t maxAlpha = 0;
        uint8_t EasingType = 0;
    };

    class YORDLE_EXPORT HudElementalSectionUIData : public bin_class { 
    public:
        explicit HudElementalSectionUIData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3553075624 || bin_class::is_type(type);
        }

        std::array<uint8_t, 4> airColoration {};
        std::array<uint8_t, 4> fireColoration {};
        std::array<uint8_t, 4> earthColoration {};
        std::array<uint8_t, 4> waterColoration {};
        std::array<uint8_t, 4> darkColoration {};
        std::array<uint8_t, 4> fairyColoration {};
        std::array<uint8_t, 4> iceColoration {};
        std::array<uint8_t, 4> lightColoration {};
        std::array<uint8_t, 4> magmaColoration {};
        std::array<uint8_t, 4> stormColoration {};
        float meterFilledButtonFadeInDelay = 0.0;
        float firstSelectionAnimationDelay = 0.0;
        float secondSelectionAnimationDelay = 0.0;
        float glowingRingCycleTime = 0.0;
    };

    class YORDLE_EXPORT HudEmotePopupData : public bin_class { 
    public:
        explicit HudEmotePopupData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 440468936 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> mEmotePopupTransitionIntro {};
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> mEmotePopupTransitionOutro {};
        std::string mUiSound {};
        float mEmotePopupDisplayTime = 0.0;
        float x728d935f = 0.0;
        float x7cd0d83 = 0.0;
        float x75d54c28 = 0.0;
        float xf680b7d9 = 0.0;
        float x6bd76883 = 0.0;
        bool mEmoteFloatEnabled = false;
    };

    class YORDLE_EXPORT HudGearSelectionUIData : public bin_class { 
    public:
        explicit HudGearSelectionUIData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1288133231 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> mGearSelectionTransitionIntro {};
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> mGearSelectionTransitionOutro {};
        float selectionButtonDelayTime = 0.0;
        bool timerEnabled = false;
        float timerCountdownDuration = 0.0;
        float timerCountdownWarningStart = 0.0;
    };

    class YORDLE_EXPORT HudRadialWheelData : public bin_class { 
    public:
        explicit HudRadialWheelData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1493463692 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> mRadialWheelUITransitionData {};
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> mRadialWheelButtonTransitionIntro {};
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> mRadialWheelButtonTransitionOutro {};
        float activateWheelDelayTime = 0.0;
    };

    class YORDLE_EXPORT HudTeamFightOffScreenDifferentiationData : public bin_class { 
    public:
        explicit HudTeamFightOffScreenDifferentiationData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4224366477 || bin_class::is_type(type);
        }

        float x40e3864f = 0.0;
        float x3f035ddd = 0.0;
        uint8_t x23086737 = 0;
    };

    class YORDLE_EXPORT HudTeamFightData : public bin_class { 
    public:
        explicit HudTeamFightData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3784622423 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> mSceneTransition {};
        uint32_t mStyleFlags = 0;
        std::shared_ptr<yordle::data::meta::HudTeamFightOffScreenDifferentiationData> xa7620c86 {};
    };

    class YORDLE_EXPORT HudReplayData : public bin_class { 
    public:
        explicit HudReplayData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2809029825 || bin_class::is_type(type);
        }

        float messageVisibleTime = 0.0;
        std::shared_ptr<yordle::data::meta::HudTeamFightData> TeamFightData {};
    };

    class YORDLE_EXPORT HudCheatMenuData : public bin_class { 
    public:
        explicit HudCheatMenuData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2036195162 || bin_class::is_type(type);
        }

        float tooltipDelay = 0.0;
        float groupDividerGapSize = 0.0;
        uint8_t groupDividerIndex = 0;
    };

    class YORDLE_EXPORT HudPingData : public bin_class { 
    public:
        explicit HudPingData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3598370238 || bin_class::is_type(type);
        }

        float distanceToNotTrollPingCorpses = 0.0;
        float timeToNotTrollPingCorpses = 0.0;
    };

    class YORDLE_EXPORT HudVoiceChatData : public bin_class { 
    public:
        explicit HudVoiceChatData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 929479566 || bin_class::is_type(type);
        }

        float highlightTimeoutSeconds = 0.0;
    };

    class YORDLE_EXPORT HudInputBoxData : public bin_class { 
    public:
        explicit HudInputBoxData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4284799695 || bin_class::is_type(type);
        }

        uint8_t inputTextLengthMax = 0;
        float caretAlphaMax = 0.0;
        float caretBlinkTime = 0.0;
        float markedOffsetY = 0.0;
        float markedLineSizePx = 0.0;
        float selectedOffsetY = 0.0;
        float selectedLineSizePx = 0.0;
        float xbeabf2d8 = 0.0;
    };

    class YORDLE_EXPORT HudHealthBarBurstData : public bin_class { 
    public:
        explicit HudHealthBarBurstData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 234651109 || bin_class::is_type(type);
        }

        float burstTimeWindow = 0.0;
        float burstTriggerPercent = 0.0;
        float flashTriggerPercent = 0.0;
        float flashDuration = 0.0;
        float shakeDuration = 0.0;
        std::array<float, 2> shakeBox {};
        std::array<float, 2> shakeReferenceResolution {};
        float shakeTriggerPercent = 0.0;
        float shakeFrequency = 0.0;
        float fadeSpeed = 0.0;
        float fadeAcceleration = 0.0;
        float fadeHoldTime = 0.0;
    };

    class YORDLE_EXPORT HudHealthBarFadeData : public bin_class { 
    public:
        explicit HudHealthBarFadeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1035555423 || bin_class::is_type(type);
        }

        float fadeSpeed = 0.0;
        float fadeAcceleration = 0.0;
        float fadeHoldTime = 0.0;
    };

    class YORDLE_EXPORT HudHealthBarDefenseModifierData : public bin_class { 
    public:
        explicit HudHealthBarDefenseModifierData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 749793326 || bin_class::is_type(type);
        }

        float defenseUpPercent = 0.0;
        float defenseDownL1Percent = 0.0;
        float defenseDownL2Percent = 0.0;
        float defenseDownL3Percent = 0.0;
    };

    class YORDLE_EXPORT HudHealthBarBurstHealData : public bin_class { 
    public:
        explicit HudHealthBarBurstHealData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4246198531 || bin_class::is_type(type);
        }

        float healTimeWindow = 0.0;
        float healTriggerPercent = 0.0;
        float healFadeDuration = 0.0;
    };

    class YORDLE_EXPORT HudHealthBarDefenseIconData : public bin_class { 
    public:
        explicit HudHealthBarDefenseIconData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 937928230 || bin_class::is_type(type);
        }

        float enlargeTime = 0.0;
        float enlargeSize = 0.0;
        float settleTime = 0.0;
    };

    class YORDLE_EXPORT MicroTicksPerTickData : public bin_class { 
    public:
        explicit MicroTicksPerTickData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 105644319 || bin_class::is_type(type);
        }

        float minHealth = 0.0;
        uint32_t microTicksBetween = 0;
    };

    class YORDLE_EXPORT HudHealthBarProgressiveTickData : public bin_class { 
    public:
        explicit HudHealthBarProgressiveTickData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 503820853 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::MicroTicksPerTickData>> microTickPerTickData {};
        float healthPerTick = 0.0;
    };

    class YORDLE_EXPORT HudHealthBarData : public bin_class { 
    public:
        explicit HudHealthBarData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 85573057 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::HudHealthBarBurstData> burstData {};
        std::shared_ptr<yordle::data::meta::HudHealthBarBurstData> towerBurstData {};
        std::shared_ptr<yordle::data::meta::HudHealthBarBurstHealData> burstHealData {};
        std::shared_ptr<yordle::data::meta::HudHealthBarProgressiveTickData> championProgressiveTickData {};
        std::shared_ptr<yordle::data::meta::HudHealthBarFadeData> fadeData {};
        std::shared_ptr<yordle::data::meta::HudHealthBarDefenseModifierData> defenseModifierData {};
        std::shared_ptr<yordle::data::meta::HudHealthBarDefenseIconData> defenseIconData {};
        float untargetableAlpha = 0.0;
        float resurrectingAlpha = 0.0;
    };

    class YORDLE_EXPORT HudSpellSlotResetFeedbackData : public bin_class { 
    public:
        explicit HudSpellSlotResetFeedbackData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1323252584 || bin_class::is_type(type);
        }

        float spellResetFlashFadeDuration = 0.0;
        float spellResetFlashScaleDownDuration = 0.0;
        float spellResetScaleMultiplier = 0.0;
    };

    class YORDLE_EXPORT HudLoadingScreenProgressBarData : public bin_class { 
    public:
        explicit HudLoadingScreenProgressBarData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 464608054 || bin_class::is_type(type);
        }

        float xe4a8e1a9 = 0.0;
        float xd69543e7 = 0.0;
        float x9f3d3433 = 0.0;
        float xb550de8d = 0.0;
    };

    class YORDLE_EXPORT HudLoadingScreenData : public bin_class { 
    public:
        explicit HudLoadingScreenData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4205759190 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::HudLoadingScreenProgressBarData> mProgressBarData {};
        bool x9d17e9e3 = false;
        float mLoadingSpinnerSpeed = 0.0;
        uint8_t mLoadingSpinnerFrames = 0;
        uint8_t mLoadingSpinnerRows = 0;
    };

    class YORDLE_EXPORT HudStatPanelStatStoneData : public bin_class { 
    public:
        explicit HudStatPanelStatStoneData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2341739189 || bin_class::is_type(type);
        }

        float xca84776a = 0.0;
        float xf675a6b7 = 0.0;
        float mAnimationDelayTime = 0.0;
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> x77d83159 {};
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> x4ae65dfa {};
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> mSlideTransitionIn {};
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> mSlideTransitionOut {};
    };

    class YORDLE_EXPORT HudStatStoneData : public bin_class { 
    public:
        explicit HudStatStoneData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2137884073 || bin_class::is_type(type);
        }

        std::string x2dd6b42e {};
        std::string x3c8fa9e9 {};
    };

    class YORDLE_EXPORT HudStatStoneDeathRecapData : public bin_class { 
    public:
        explicit HudStatStoneDeathRecapData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1887734700 || bin_class::is_type(type);
        }

        float MinDisplayTime = 0.0;
        float MaxDisplayTime = 0.0;
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> DetailsTransitionData {};
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> DeathRecapTransitionIn {};
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> DeathRecapTransitionOut {};
    };

    class YORDLE_EXPORT HudStatStoneMilestoneData : public bin_class { 
    public:
        explicit HudStatStoneMilestoneData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4122721905 || bin_class::is_type(type);
        }

        std::string UiSound {};
        std::string xedf950c1 {};
        std::string x4f7fe3a3 {};
        std::string xbb713ae8 {};
        float MilestoneDisplayTime = 0.0;
        float xdd1c30ab = 0.0;
        float MilestoneSelfIntroTime = 0.0;
        float MilestoneOtherIntroTime = 0.0;
        float PersonalBestIntroTime = 0.0;
        float x39fecf93 = 0.0;
        uint32_t xdb4c4cf = 0;
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> xa6d1b459 {};
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> MilestoneTransitionIn {};
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> MilestoneTransitionOut {};
        bool x4ea59d14 = false;
    };

    class YORDLE_EXPORT HudEndOfGameData : public bin_class { 
    public:
        explicit HudEndOfGameData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3009378484 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> mVictoryTransitionIn {};
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> mDefeatTransitionIn {};
    };

    class YORDLE_EXPORT HudMessageDisplayData : public bin_class { 
    public:
        explicit HudMessageDisplayData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1269294773 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> TransitionIn {};
        float MessageDuration = 0.0;
        uint32_t messageCount = 0;
    };

    class YORDLE_EXPORT HudDamageDisplayData : public bin_class { 
    public:
        explicit HudDamageDisplayData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1645499771 || bin_class::is_type(type);
        }

        float xdfcea7db = 0.0;
    };

    class YORDLE_EXPORT HudFightRecapUIData : public bin_class { 
    public:
        explicit HudFightRecapUIData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3305259773 || bin_class::is_type(type);
        }

        std::string mBasicAttackIconTextureName {};
        std::string mUnknownDamageIconTextureName {};
        std::string mItemDamageIconTextureName {};
        std::string mRuneDamageIconTextureName {};
    };

    class YORDLE_EXPORT MinimapPingEffectDefinition : public bin_class { 
    public:
        explicit MinimapPingEffectDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1803253536 || bin_class::is_type(type);
        }

        uint32_t alphaStart = 0;
        float alphaFadeSpeed = 0.0;
        float scaleStart = 0.0;
        float scaleSpeed = 0.0;
        float startDelay = 0.0;
        float life = 0.0;
        float onDeathFadeSpeed = 0.0;
        uint32_t repeatCount = 0;
        bool blendWithAlpha = false;
    };

    class YORDLE_EXPORT TextureAndColorData : public bin_class { 
    public:
        explicit TextureAndColorData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4009176784 || bin_class::is_type(type);
        }

        std::string textureFile {};
        std::array<uint8_t, 4> color {};
        std::string colorblindTextureFile {};
        std::optional<std::array<uint8_t, 4>> colorblindColor {};
    };

    class YORDLE_EXPORT MinimapPingEffectAndTextureData : public bin_class { 
    public:
        explicit MinimapPingEffectAndTextureData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2136503545 || bin_class::is_type(type);
        }

        bool mEnabled = false;
        std::shared_ptr<yordle::data::meta::MinimapPingEffectDefinition> mEffect {};
        std::shared_ptr<yordle::data::meta::TextureAndColorData> mDefault {};
        std::shared_ptr<yordle::data::meta::TextureAndColorData> mOrder {};
        std::shared_ptr<yordle::data::meta::TextureAndColorData> mChaos {};
    };

    class YORDLE_EXPORT MinimapPingTypeContainer : public bin_class { 
    public:
        explicit MinimapPingTypeContainer(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3823129339 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::MinimapPingEffectAndTextureData>> pingEffectList {};
    };

    class YORDLE_EXPORT MinimapPingData : public bin_class { 
    public:
        explicit MinimapPingData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2062125700 || bin_class::is_type(type);
        }

        std::map<uint8_t, float> mOMWPingRangeCutoffs {};
        std::set<std::shared_ptr<yordle::data::meta::MinimapPingTypeContainer>> mPings {};
    };

    class YORDLE_EXPORT ISecondaryResourceDisplayData : public bin_class { 
    public:
        explicit ISecondaryResourceDisplayData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1239842284 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT SecondaryResourceDisplayFractional : public ISecondaryResourceDisplayData { 
    public:
        explicit SecondaryResourceDisplayFractional(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2725259578 || ISecondaryResourceDisplayData::is_type(type);
        }

    };

    class YORDLE_EXPORT LoadingScreenRankedProperties : public bin_class { 
    public:
        explicit LoadingScreenRankedProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1700895677 || bin_class::is_type(type);
        }

        std::string mDescriptor {};
        uint8_t mDivision = 0;
    };

    class YORDLE_EXPORT LoadingScreenRankedData : public bin_class { 
    public:
        explicit LoadingScreenRankedData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2115654752 || bin_class::is_type(type);
        }

        std::map<std::string, std::shared_ptr<yordle::data::meta::LoadingScreenRankedProperties>> mRankedData {};
    };

    class YORDLE_EXPORT QualitySetting : public bin_class { 
    public:
        explicit QualitySetting(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1198542322 || bin_class::is_type(type);
        }

        std::string mName {};
        float x33eb38d = 0.0;
        uint32_t mFrameCap = 0;
        uint32_t mEnvironmentQuality = 0;
        uint32_t xa8d99737 = 0;
        uint32_t mEffectsQuality = 0;
        uint32_t mShadowQuality = 0;
        bool mFxAa = false;
    };

    class YORDLE_EXPORT IOptionItem : public bin_class { 
    public:
        explicit IOptionItem(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2037513198 || bin_class::is_type(type);
        }

        bool LiveUpdate = false;
        uint8_t ShowOnPlatform = 0;
        std::shared_ptr<yordle::data::meta::bin_class> Filter {};
    };

    class YORDLE_EXPORT IOptionTemplate : public bin_class { 
    public:
        explicit IOptionTemplate(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3154887987 || bin_class::is_type(type);
        }

        uint32_t boundsElement = 0;
    };

    class YORDLE_EXPORT OptionItemBorder : public IOptionItem { 
    public:
        explicit OptionItemBorder(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4083351021 || IOptionItem::is_type(type);
        }

        uint32_t _template = 0;
        std::set<std::shared_ptr<yordle::data::meta::IOptionItem>> items {};
    };

    class YORDLE_EXPORT OptionItemCheckbox : public IOptionItem { 
    public:
        explicit OptionItemCheckbox(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2624893466 || IOptionItem::is_type(type);
        }

        uint16_t option = 0;
        bool Negate = false;
        uint32_t _template = 0;
        std::string LabelTraKey {};
        std::string TooltipTraKey {};
    };

    class YORDLE_EXPORT OptionItemColumns : public IOptionItem { 
    public:
        explicit OptionItemColumns(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3265939366 || IOptionItem::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IOptionItem>> ItemsEither {};
        std::set<std::shared_ptr<yordle::data::meta::IOptionItem>> itemsLeft {};
        std::set<std::shared_ptr<yordle::data::meta::IOptionItem>> itemsRight {};
    };

    class YORDLE_EXPORT OptionItemDropdownItem : public bin_class { 
    public:
        explicit OptionItemDropdownItem(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1128087393 || bin_class::is_type(type);
        }

        std::string TraKey {};
        int32_t value = 0;
    };

    class YORDLE_EXPORT OptionItemDropdown : public IOptionItem { 
    public:
        explicit OptionItemDropdown(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2993708970 || IOptionItem::is_type(type);
        }

        uint16_t option = 0;
        uint32_t _template = 0;
        std::string LabelTraKey {};
        std::string TooltipTraKey {};
        std::set<std::shared_ptr<yordle::data::meta::OptionItemDropdownItem>> items {};
    };

    class YORDLE_EXPORT IOptionItemFilter : public bin_class { 
    public:
        explicit IOptionItemFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3415079880 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT xa6743a7 : public IOptionItemFilter { 
    public:
        explicit xa6743a7(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 174539687 || IOptionItemFilter::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IOptionItemFilter>> Filters {};
    };

    class YORDLE_EXPORT xcd391c99 : public IOptionItemFilter { 
    public:
        explicit xcd391c99(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3443072153 || IOptionItemFilter::is_type(type);
        }

        bool ShowInLolGame = false;
        bool ShowInLolReplay = false;
        bool ShowInTftGame = false;
        bool ShowInTftReplay = false;
    };

    class YORDLE_EXPORT x3e59e2ca : public IOptionItemFilter { 
    public:
        explicit x3e59e2ca(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1046078154 || IOptionItemFilter::is_type(type);
        }

        bool x7b98ffdd = false;
        bool x812748a2 = false;
        bool x37985b59 = false;
    };

    class YORDLE_EXPORT xd90e7018 : public IOptionItemFilter { 
    public:
        explicit xd90e7018(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3641602072 || IOptionItemFilter::is_type(type);
        }

        uint32_t Map = 0;
    };

    class YORDLE_EXPORT xee4d1304 : public IOptionItemFilter { 
    public:
        explicit xee4d1304(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3998028548 || IOptionItemFilter::is_type(type);
        }

        std::string Mutator {};
    };

    class YORDLE_EXPORT xf8026218 : public IOptionItemFilter { 
    public:
        explicit xf8026218(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4160905752 || IOptionItemFilter::is_type(type);
        }

    };

    class YORDLE_EXPORT xa4941383 : public IOptionItemFilter { 
    public:
        explicit xa4941383(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2761167747 || IOptionItemFilter::is_type(type);
        }

    };

    class YORDLE_EXPORT xc58386 : public IOptionItemFilter { 
    public:
        explicit xc58386(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 12944262 || IOptionItemFilter::is_type(type);
        }

        bool xc77c4866 = false;
    };

    class YORDLE_EXPORT xa6a54243 : public IOptionItemFilter { 
    public:
        explicit xa6a54243(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2795848259 || IOptionItemFilter::is_type(type);
        }

    };

    class YORDLE_EXPORT OptionItemGroup : public IOptionItem { 
    public:
        explicit OptionItemGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3617299650 || IOptionItem::is_type(type);
        }

        uint32_t _template = 0;
        std::string LabelTraKey {};
        bool ExpandedByDefault = false;
        std::set<std::shared_ptr<yordle::data::meta::IOptionItem>> items {};
    };

    class YORDLE_EXPORT OptionItemHotkeys : public IOptionItem { 
    public:
        explicit OptionItemHotkeys(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2450342190 || IOptionItem::is_type(type);
        }

        uint32_t _template = 0;
    };

    class YORDLE_EXPORT OptionItemLabel : public IOptionItem { 
    public:
        explicit OptionItemLabel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1981427363 || IOptionItem::is_type(type);
        }

        uint32_t _template = 0;
        std::string Label1TraKey {};
        std::string Label2TraKey {};
    };

    class YORDLE_EXPORT OptionItemResolutionDropdown : public OptionItemDropdown { 
    public:
        explicit OptionItemResolutionDropdown(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1259449812 || OptionItemDropdown::is_type(type);
        }

    };

    class YORDLE_EXPORT x55212361 : public bin_class { 
    public:
        explicit x55212361(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1428235105 || bin_class::is_type(type);
        }

        std::string Column0LabelTraKey {};
        std::string Column1LabelTraKey {};
    };

    class YORDLE_EXPORT x518d5fc0 : public bin_class { 
    public:
        explicit x518d5fc0(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1368219584 || bin_class::is_type(type);
        }

        std::string LabelTraKey {};
        std::string EventName {};
    };

    class YORDLE_EXPORT OptionItemSecondaryHotkeys1Column : public IOptionItem { 
    public:
        explicit OptionItemSecondaryHotkeys1Column(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3144650323 || IOptionItem::is_type(type);
        }

        uint32_t _template = 0;
        std::shared_ptr<yordle::data::meta::x55212361> Header {};
        std::set<std::shared_ptr<yordle::data::meta::x518d5fc0>> Rows {};
    };

    class YORDLE_EXPORT xea321356 : public bin_class { 
    public:
        explicit xea321356(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3929150294 || bin_class::is_type(type);
        }

        std::string Column0LabelTraKey {};
        std::string Column1LabelTraKey {};
        std::string Column2LabelTraKey {};
    };

    class YORDLE_EXPORT x430dd10d : public bin_class { 
    public:
        explicit x430dd10d(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1124978957 || bin_class::is_type(type);
        }

        std::string LabelTraKey {};
        std::string EventName {};
        std::shared_ptr<yordle::data::meta::IOptionItemFilter> Filter {};
    };

    class YORDLE_EXPORT OptionItemSecondaryHotkeys2Column : public IOptionItem { 
    public:
        explicit OptionItemSecondaryHotkeys2Column(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1788849882 || IOptionItem::is_type(type);
        }

        uint32_t _template = 0;
        std::shared_ptr<yordle::data::meta::xea321356> Header {};
        std::set<std::shared_ptr<yordle::data::meta::x430dd10d>> Rows {};
    };

    class YORDLE_EXPORT OptionItemSlider : public IOptionItem { 
    public:
        explicit OptionItemSlider(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1991153274 || IOptionItem::is_type(type);
        }

        uint32_t _template = 0;
        std::string LabelTraKey {};
        std::string TooltipTraKey {};
    };

    class YORDLE_EXPORT OptionItemSliderFloat : public OptionItemSlider { 
    public:
        explicit OptionItemSliderFloat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2846603080 || OptionItemSlider::is_type(type);
        }

        uint16_t option = 0;
        bool UpdateOnDrag = false;
        float scale = 0.0;
    };

    class YORDLE_EXPORT OptionItemSliderGraphicsQuality : public OptionItemSlider { 
    public:
        explicit OptionItemSliderGraphicsQuality(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1524323892 || OptionItemSlider::is_type(type);
        }

    };

    class YORDLE_EXPORT OptionItemSliderInt : public OptionItemSlider { 
    public:
        explicit OptionItemSliderInt(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 641011299 || OptionItemSlider::is_type(type);
        }

        uint16_t option = 0;
        uint32_t optionScale = 0;
    };

    class YORDLE_EXPORT OptionItemSliderVolume : public OptionItemSliderFloat { 
    public:
        explicit OptionItemSliderVolume(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3682643564 || OptionItemSliderFloat::is_type(type);
        }

        uint32_t MuteButtonTemplate = 0;
        uint16_t MuteOption = 0;
    };

    class YORDLE_EXPORT xf5324e2a : public OptionItemDropdown { 
    public:
        explicit xf5324e2a(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4113714730 || OptionItemDropdown::is_type(type);
        }

    };

    class YORDLE_EXPORT OptionsTab : public bin_class { 
    public:
        explicit OptionsTab(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2946448300 || bin_class::is_type(type);
        }

        std::string TabNameTraKey {};
        uint8_t ShowOn = 0;
        bool x9255c052 = false;
        std::shared_ptr<yordle::data::meta::IOptionItemFilter> Filter {};
        std::set<std::shared_ptr<yordle::data::meta::IOptionItem>> items {};
    };

    class YORDLE_EXPORT OptionTemplateBorder : public IOptionTemplate { 
    public:
        explicit OptionTemplateBorder(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3405043372 || IOptionTemplate::is_type(type);
        }

        uint32_t border = 0;
    };

    class YORDLE_EXPORT OptionTemplateCheckbox : public IOptionTemplate { 
    public:
        explicit OptionTemplateCheckbox(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2855504619 || IOptionTemplate::is_type(type);
        }

        uint32_t buttonDefinition = 0;
        uint32_t labelElement = 0;
    };

    class YORDLE_EXPORT OptionTemplateDropdown : public IOptionTemplate { 
    public:
        explicit OptionTemplateDropdown(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2120591967 || IOptionTemplate::is_type(type);
        }

        uint32_t labelElement = 0;
        uint32_t ComboBoxDefinition = 0;
    };

    class YORDLE_EXPORT OptionTemplateGroup : public IOptionTemplate { 
    public:
        explicit OptionTemplateGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1734681201 || IOptionTemplate::is_type(type);
        }

        uint32_t ExpandButtonDefinition = 0;
        uint32_t labelElement = 0;
        uint32_t xe76606d7 = 0;
        float x999669b3 = 0.0;
    };

    class YORDLE_EXPORT OptionTemplateHotkeysLabel : public bin_class { 
    public:
        explicit OptionTemplateHotkeysLabel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1432209297 || bin_class::is_type(type);
        }

        uint32_t Label = 0;
    };

    class YORDLE_EXPORT OptionTemplateHotkeysKey : public bin_class { 
    public:
        explicit OptionTemplateHotkeysKey(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3163647920 || bin_class::is_type(type);
        }

        std::string EventName {};
        std::string EventNameTraKey {};
        uint32_t position = 0;
    };

    class YORDLE_EXPORT OptionTemplateHotkeys : public IOptionTemplate { 
    public:
        explicit OptionTemplateHotkeys(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 704287001 || IOptionTemplate::is_type(type);
        }

        uint32_t HotkeyButtonDefinition = 0;
        uint32_t HotkeyButtonTextSmall = 0;
        uint32_t hotkeyModifierText = 0;
        uint32_t HotkeyQuickCastButtonDefinition = 0;
        uint32_t CastAllButtonDefinition = 0;
        uint32_t x2f11f1cb = 0;
        uint32_t xa8e4f979 = 0;
        std::set<std::shared_ptr<yordle::data::meta::OptionTemplateHotkeysLabel>> Labels {};
        std::set<std::shared_ptr<yordle::data::meta::OptionTemplateHotkeysKey>> keys {};
    };

    class YORDLE_EXPORT OptionTemplateLabel : public IOptionTemplate { 
    public:
        explicit OptionTemplateLabel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 313035124 || IOptionTemplate::is_type(type);
        }

        uint32_t Label1 = 0;
        uint32_t Label2 = 0;
    };

    class YORDLE_EXPORT OptionTemplateMuteButton : public IOptionTemplate { 
    public:
        explicit OptionTemplateMuteButton(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4250471695 || IOptionTemplate::is_type(type);
        }

        uint32_t buttonDefinition = 0;
    };

    class YORDLE_EXPORT xceb70e5a : public bin_class { 
    public:
        explicit xceb70e5a(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3468103258 || bin_class::is_type(type);
        }

        uint32_t backgroundElement = 0;
        uint32_t TextElement = 0;
    };

    class YORDLE_EXPORT x354988a8 : public bin_class { 
    public:
        explicit x354988a8(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 894011560 || bin_class::is_type(type);
        }

        uint32_t buttonDefinition = 0;
    };

    class YORDLE_EXPORT OptionTemplateSecondaryHotkeys1Column : public IOptionTemplate { 
    public:
        explicit OptionTemplateSecondaryHotkeys1Column(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3369934580 || IOptionTemplate::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::xceb70e5a> x5b59b589 {};
        std::shared_ptr<yordle::data::meta::xceb70e5a> x5a59b3f6 {};
        std::shared_ptr<yordle::data::meta::xceb70e5a> xfd31cbcb {};
        std::shared_ptr<yordle::data::meta::x354988a8> x545758a8 {};
    };

    class YORDLE_EXPORT OptionTemplateSecondaryHotkeys2Column : public IOptionTemplate { 
    public:
        explicit OptionTemplateSecondaryHotkeys2Column(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 258305809 || IOptionTemplate::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::xceb70e5a> x5b59b589 {};
        std::shared_ptr<yordle::data::meta::xceb70e5a> x5a59b3f6 {};
        std::shared_ptr<yordle::data::meta::xceb70e5a> x5959b263 {};
        std::shared_ptr<yordle::data::meta::xceb70e5a> xfd31cbcb {};
        std::shared_ptr<yordle::data::meta::x354988a8> x545758a8 {};
        std::shared_ptr<yordle::data::meta::x354988a8> x57575d61 {};
    };

    class YORDLE_EXPORT OptionTemplateSlider : public IOptionTemplate { 
    public:
        explicit OptionTemplateSlider(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 517015619 || IOptionTemplate::is_type(type);
        }

        uint32_t labelElement = 0;
        uint32_t valueElement = 0;
        uint32_t x6a05258c = 0;
    };

    class YORDLE_EXPORT NamedIconData : public bin_class { 
    public:
        explicit NamedIconData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2945891227 || bin_class::is_type(type);
        }

        std::string name {};
        uint32_t Icon = 0;
    };

    class YORDLE_EXPORT ModeSelectButtonData : public bin_class { 
    public:
        explicit ModeSelectButtonData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3056512770 || bin_class::is_type(type);
        }

        int64_t queueId = 0;
        uint32_t buttonDefinition = 0;
    };

    class YORDLE_EXPORT ILoadoutFeatureDataBehavior : public bin_class { 
    public:
        explicit ILoadoutFeatureDataBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2293774348 || bin_class::is_type(type);
        }

        std::string DisplayNameTraKey {};
        uint32_t LoadoutType = 0;
        uint32_t x4e2c59d6 = 0;
        uint32_t IllustrationIcon = 0;
        uint32_t Region = 0;
        uint32_t buttonDefinition = 0;
    };

    class YORDLE_EXPORT QueueDisplayData : public bin_class { 
    public:
        explicit QueueDisplayData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1532902214 || bin_class::is_type(type);
        }

        int64_t queueId = 0;
        uint32_t xce96bffc = 0;
        uint32_t xf221c7d2 = 0;
        uint32_t x21eaf8b = 0;
        uint32_t IllustrationIconElement = 0;
        std::string DisplayNameTraKey {};
    };

    class YORDLE_EXPORT xfbd72d16 : public bin_class { 
    public:
        explicit xfbd72d16(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4225182998 || bin_class::is_type(type);
        }

        uint32_t x4d31ed46 = 0;
    };

    class YORDLE_EXPORT StoreCategoryButtonDefinition : public bin_class { 
    public:
        explicit StoreCategoryButtonDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4069990911 || bin_class::is_type(type);
        }

        uint32_t category = 0;
        uint32_t buttonDefinition = 0;
    };

    class YORDLE_EXPORT ILoadoutInfoPanel : public bin_class { 
    public:
        explicit ILoadoutInfoPanel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2136477118 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> ViewPaneDefinition {};
    };

    class YORDLE_EXPORT NotificationSettings : public bin_class { 
    public:
        explicit NotificationSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2610640435 || bin_class::is_type(type);
        }

        std::string defaultSound {};
        std::map<uint8_t, std::string> x89667868 {};
    };

    class YORDLE_EXPORT QuestDefinition : public bin_class { 
    public:
        explicit QuestDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2873675736 || bin_class::is_type(type);
        }

        std::string categoryTitleText {};
        uint32_t maxViewableQuests = 0;
        std::string recievedSoundPath {};
        std::string completedSoundPath {};
        std::string failedSoundPath {};
    };

    class YORDLE_EXPORT x46533086 : public bin_class { 
    public:
        explicit x46533086(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1179857030 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::QuestDefinition> primaryQuest {};
        std::shared_ptr<yordle::data::meta::QuestDefinition> secondaryQuest {};
        std::shared_ptr<yordle::data::meta::QuestDefinition> objectiveQuest {};
        std::shared_ptr<yordle::data::meta::QuestDefinition> x56647830 {};
        std::shared_ptr<yordle::data::meta::QuestDefinition> x6cee1705 {};
        std::shared_ptr<yordle::data::meta::QuestDefinition> scoreDisplayQuest {};
    };

    class YORDLE_EXPORT GeneralSettingsGroup : public bin_class { 
    public:
        explicit GeneralSettingsGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4110481513 || bin_class::is_type(type);
        }

        uint32_t PromoteAccountButton = 0;
        uint32_t SignOutButton = 0;
        uint32_t restorePurchaseButton = 0;
    };

    class YORDLE_EXPORT SurrenderTypeData : public bin_class { 
    public:
        explicit SurrenderTypeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 740737797 || bin_class::is_type(type);
        }

        float VoteTimeout = 0.0;
        float windowLength = 0.0;
        float startTime = 0.0;
        float percentageRequired = 0.0;
        float x3f72f07a = 0.0;
    };

    class YORDLE_EXPORT SurrenderData : public bin_class { 
    public:
        explicit SurrenderData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2687760845 || bin_class::is_type(type);
        }

        float x43f7599b = 0.0;
        float xe98993c = 0.0;
        float xcc805103 = 0.0;
        float x3afeacf3 = 0.0;
        std::map<uint8_t, std::shared_ptr<yordle::data::meta::SurrenderTypeData>> mTypeData {};
    };

    class YORDLE_EXPORT LoadScreenTip : public bin_class { 
    public:
        explicit LoadScreenTip(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1116466002 || bin_class::is_type(type);
        }

        uint16_t mId = 0;
        std::string mHeaderLocalizationKey {};
        std::optional<uint32_t> mMinimumSummonerLevel {};
        std::optional<uint32_t> mMaximumSummonerLevel {};
        std::string mLocalizationKey {};
    };

    class YORDLE_EXPORT LoadScreenTipSet : public bin_class { 
    public:
        explicit LoadScreenTipSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4146450274 || bin_class::is_type(type);
        }

        uint32_t mName = 0;
        std::set<uint32_t> mTips {};
    };

    class YORDLE_EXPORT LoadScreenTipConfiguration : public bin_class { 
    public:
        explicit LoadScreenTipConfiguration(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3188575920 || bin_class::is_type(type);
        }

        bool mShowInCustomGames = false;
        bool mShowPBITipsOnLoadingScreen = false;
        float mPBITipDurationOnLoadingScreen = 0.0;
        float mDurationInGame = 0.0;
    };

    class YORDLE_EXPORT x9e5aed77 : public bin_class { 
    public:
        explicit x9e5aed77(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2656759159 || bin_class::is_type(type);
        }

        int32_t x571a97a3 = 0;
        int32_t x88a45101 = 0;
        int32_t x1a8b3cc8 = 0;
        int32_t xbb9129ab = 0;
        int32_t xe2e4f9c2 = 0;
        int32_t x47bdbbe9 = 0;
    };

    class YORDLE_EXPORT ViewController : public bin_class { 
    public:
        explicit ViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3981513104 || bin_class::is_type(type);
        }

        uint32_t xb79c86ae = 0;
    };

    class YORDLE_EXPORT VoiceChatViewController : public ViewController { 
    public:
        explicit VoiceChatViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 917336570 || ViewController::is_type(type);
        }

        uint32_t PanelSceneHandle = 0;
        uint32_t Backdrop = 0;
        uint32_t errorText = 0;
        uint32_t x8c45eb46 = 0;
        uint32_t x788862bd = 0;
        std::shared_ptr<yordle::data::meta::bin_class> SelfSlot {};
        uint32_t PlayerGrid = 0;
        std::shared_ptr<yordle::data::meta::bin_class> PlayerSlotData {};
    };

    class YORDLE_EXPORT x86504cef : public bin_class { 
    public:
        explicit x86504cef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2253409519 || bin_class::is_type(type);
        }

        uint32_t Group = 0;
        uint32_t Portrait = 0;
        uint32_t Halo = 0;
        uint32_t NameText = 0;
        uint32_t VolumeText = 0;
        uint32_t VolumeSliderBar = 0;
        uint32_t MuteButton = 0;
    };

    class YORDLE_EXPORT VoiceChatViewSelfSlot : public bin_class { 
    public:
        explicit VoiceChatViewSelfSlot(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2730017800 || bin_class::is_type(type);
        }

        uint32_t Portrait = 0;
        uint32_t Halo = 0;
        uint32_t NameText = 0;
        uint32_t MicVolumeText = 0;
        uint32_t MicVolumeSliderBar = 0;
        uint32_t MuteButton = 0;
        uint32_t ConnectionButton = 0;
    };

    class YORDLE_EXPORT NeutralTimerSourceIconData : public bin_class { 
    public:
        explicit NeutralTimerSourceIconData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 230608261 || bin_class::is_type(type);
        }

        std::string mTooltipName {};
        std::string mIconName {};
    };

    class YORDLE_EXPORT NeutralTimerData : public bin_class { 
    public:
        explicit NeutralTimerData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 964506025 || bin_class::is_type(type);
        }

        std::string mTimerKeyName {};
        std::string mTooltip {};
        std::string mTooltipCampName {};
        std::string mTooltipRespawn {};
        std::string mTooltipChatNameOrder {};
        std::string mTooltipChatNameChaos {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::NeutralTimerSourceIconData>> mSourceIcons {};
    };

    class YORDLE_EXPORT NeutralTimers : public bin_class { 
    public:
        explicit NeutralTimers(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1283176254 || bin_class::is_type(type);
        }

        std::string mSceneName {};
        std::string xee974cae {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::NeutralTimerData>> mTimers {};
    };

    class YORDLE_EXPORT CommonUiTunables : public bin_class { 
    public:
        explicit CommonUiTunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2733481098 || bin_class::is_type(type);
        }

        float x472b866d = 0.0;
        uint8_t xb3f4a621 = 0;
    };

    class YORDLE_EXPORT ViewPaneDefinition : public bin_class { 
    public:
        explicit ViewPaneDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2330109623 || bin_class::is_type(type);
        }

        uint32_t x6a05258c = 0;
        uint32_t dragRegionElement = 0;
        uint32_t scrollRegionElement = 0;
        uint32_t scissorRegionElement = 0;
        uint32_t scrollingScene = 0;
        uint8_t scrollDirection = 0;
        uint32_t objectPath = 0;
    };

    class YORDLE_EXPORT UIButtonState : public bin_class { 
    public:
        explicit UIButtonState(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2794431892 || bin_class::is_type(type);
        }

        std::set<uint32_t> displayElements {};
        uint32_t TextElement = 0;
    };

    class YORDLE_EXPORT UIButtonDefinition : public bin_class { 
    public:
        explicit UIButtonDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1818785118 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::UIButtonState> defaultStateElements {};
        std::shared_ptr<yordle::data::meta::UIButtonState> InactiveStateElements {};
        std::shared_ptr<yordle::data::meta::UIButtonState> hoverStateElements {};
        std::shared_ptr<yordle::data::meta::UIButtonState> xad0f8882 {};
        std::shared_ptr<yordle::data::meta::UIButtonState> selectedStateElements {};
        std::shared_ptr<yordle::data::meta::UIButtonState> SelectedHoverStateElements {};
        std::shared_ptr<yordle::data::meta::UIButtonState> SelectedClickedStateElements {};
        uint32_t hitRegionElement = 0;
        uint32_t ClickReleaseParticleElement = 0;
        std::shared_ptr<yordle::data::meta::bin_class> soundEvents {};
        std::string ActiveTooltipTraKey {};
        std::string InactiveTooltipTraKey {};
        uint32_t objectPath = 0;
    };

    class YORDLE_EXPORT UIButtonAdditionalState : public bin_class { 
    public:
        explicit UIButtonAdditionalState(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1814739591 || bin_class::is_type(type);
        }

        std::set<uint32_t> displayElements {};
    };

    class YORDLE_EXPORT UIButtonAdditionalElements : public bin_class { 
    public:
        explicit UIButtonAdditionalElements(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2087717867 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::UIButtonAdditionalState> defaultStateElements {};
        std::shared_ptr<yordle::data::meta::UIButtonAdditionalState> InactiveStateElements {};
        std::shared_ptr<yordle::data::meta::UIButtonAdditionalState> hoverStateElements {};
        std::shared_ptr<yordle::data::meta::UIButtonAdditionalState> xad0f8882 {};
        std::shared_ptr<yordle::data::meta::UIButtonAdditionalState> selectedStateElements {};
        std::shared_ptr<yordle::data::meta::UIButtonAdditionalState> SelectedHoverStateElements {};
        std::shared_ptr<yordle::data::meta::UIButtonAdditionalState> SelectedClickedStateElements {};
    };

    class YORDLE_EXPORT x209b0277 : public bin_class { 
    public:
        explicit x209b0277(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 547029623 || bin_class::is_type(type);
        }

        std::string RolloverEvent {};
        std::string x210ea29e {};
        std::string MouseDownEvent {};
        std::string x452034c {};
        std::string MouseUpEvent {};
        std::string xb49ca145 {};
    };

    class YORDLE_EXPORT xe262e6be : public bin_class { 
    public:
        explicit xe262e6be(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3798132414 || bin_class::is_type(type);
        }

        std::string OnSelectionEvent {};
    };

    class YORDLE_EXPORT UiComboBoxDefinition : public bin_class { 
    public:
        explicit UiComboBoxDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3941835837 || bin_class::is_type(type);
        }

        uint32_t buttonDefinition = 0;
        uint32_t xb2a3be3c = 0;
        uint32_t x3487222 = 0;
        uint32_t x9c4781a2 = 0;
        uint32_t x21c9d879 = 0;
        uint32_t x337b72d4 = 0;
        uint8_t xeb2b67e = 0;
        std::shared_ptr<yordle::data::meta::xe262e6be> soundEvents {};
        uint32_t objectPath = 0;
    };

    class YORDLE_EXPORT x2da50c9f : public bin_class { 
    public:
        explicit x2da50c9f(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 765791391 || bin_class::is_type(type);
        }

        std::string xd8073196 {};
        std::string x8f1a336d {};
        std::string x73dbef7a {};
    };

    class YORDLE_EXPORT xf2cfc48c : public bin_class { 
    public:
        explicit xf2cfc48c(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4073702540 || bin_class::is_type(type);
        }

        uint32_t BarBackdrop = 0;
        uint32_t BarFill = 0;
        uint32_t sliderIcon = 0;
    };

    class YORDLE_EXPORT x9d8138a6 : public bin_class { 
    public:
        explicit x9d8138a6(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2642491558 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::xf2cfc48c> DefaultState {};
        std::shared_ptr<yordle::data::meta::xf2cfc48c> SliderClickedState {};
        std::shared_ptr<yordle::data::meta::xf2cfc48c> x5b9cbd0 {};
        std::shared_ptr<yordle::data::meta::xf2cfc48c> xb4f0cbde {};
        uint32_t BarHitRegion = 0;
        uint32_t SliderHitRegion = 0;
        uint8_t direction = 0;
        std::shared_ptr<yordle::data::meta::x2da50c9f> soundEvents {};
        uint32_t objectPath = 0;
    };

    class YORDLE_EXPORT xd149dd3f : public bin_class { 
    public:
        explicit xd149dd3f(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3511278911 || bin_class::is_type(type);
        }

        int32_t FromSlotId = 0;
        int32_t ToSlotId = 0;
    };

    class YORDLE_EXPORT xb35ad9d8 : public bin_class { 
    public:
        explicit xb35ad9d8(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3009075672 || bin_class::is_type(type);
        }

        std::set<uint32_t> items {};
        uint32_t ItemsPerRow = 0;
        bool xd8bea346 = false;
        int32_t defaultIndex = 0;
        std::shared_ptr<yordle::data::meta::xd149dd3f> SwapData {};
    };

    class YORDLE_EXPORT xd20000f6 : public bin_class { 
    public:
        explicit xd20000f6(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3523215606 || bin_class::is_type(type);
        }

        uint32_t SceneData = 0;
        uint32_t PinButton = 0;
        std::shared_ptr<yordle::data::meta::xb35ad9d8> x434952b4 {};
    };

    class YORDLE_EXPORT xef05ba42 : public bin_class { 
    public:
        explicit xef05ba42(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4010129986 || bin_class::is_type(type);
        }

        uint32_t ItemIcon = 0;
        uint32_t FrameIcon = 0;
        uint32_t MythicFrameIcon = 0;
        uint32_t HoverFrameIcon = 0;
        uint32_t x5b96b3bd = 0;
        uint32_t HoverIcon = 0;
        uint32_t SelectedIcon = 0;
        uint32_t UnpurchaseableOverlay = 0;
        uint32_t PurchasedOverlay = 0;
        uint32_t LockedIcon = 0;
        uint32_t LockedHoverIcon = 0;
        uint32_t RecentlyChangedIcon = 0;
        uint32_t PopularIcon = 0;
        uint32_t CostText = 0;
        uint32_t CostTextUnpurchaseable = 0;
        uint32_t CostTextSelected = 0;
        uint32_t NameText = 0;
        uint32_t HitRegion = 0;
        uint32_t OffsetRegion = 0;
        uint32_t SelectedVfx = 0;
        uint32_t x987dd59e = 0;
        uint32_t MythicPurchaseableVfx = 0;
        uint32_t MythicPurchasedVfx = 0;
    };

    class YORDLE_EXPORT x9205b275 : public xef05ba42 { 
    public:
        explicit x9205b275(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2449846901 || xef05ba42::is_type(type);
        }

        uint32_t CardDefault = 0;
        uint32_t CardHoverMythic = 0;
        uint32_t CardHoverNonMythic = 0;
        uint32_t CardSelectedMythic = 0;
        uint32_t CardSelectedNonMythic = 0;
        uint32_t BriefText = 0;
        uint32_t BriefTextBackdrop = 0;
        uint32_t AdviceIconDefault = 0;
        uint32_t x9c2a9d4 = 0;
        uint32_t xc68c22cf = 0;
        uint32_t AdviceLabel = 0;
        uint32_t AdviceCharIcon0 = 0;
        uint32_t AdviceCharIcon1 = 0;
        uint32_t CardHoverMythicVfx = 0;
        uint32_t CardHoverNonMythicVfx = 0;
        uint32_t CardRefreshMythicVfx = 0;
        uint32_t CardRefreshNonMythicVfx = 0;
        uint32_t CardSelectedMythicVfx = 0;
        uint32_t CardSelectedNonMythicVfx = 0;
        uint32_t AdviceEmptyIconDefault = 0;
        uint32_t x59fbbd19 = 0;
        uint32_t x9566584e = 0;
        uint32_t AdviceEmptyText = 0;
        uint32_t AdviceEmptyTextHover = 0;
        uint32_t AdviceCharBorder0 = 0;
        uint32_t AdviceCharBorderHover0 = 0;
        uint32_t AdviceCharBorder1 = 0;
        uint32_t AdviceCharBorderHover1 = 0;
        uint32_t PlusIcon = 0;
        uint32_t BundleItemIcon = 0;
        uint32_t BundleStackText = 0;
        uint32_t BundleItemFrameIcon = 0;
        uint32_t BundleItemFrameHoverIcon = 0;
    };

    class YORDLE_EXPORT x38691790 : public bin_class { 
    public:
        explicit x38691790(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 946411408 || bin_class::is_type(type);
        }

        std::set<uint8_t> x837fcf93 {};
        std::string groupName {};
    };

    class YORDLE_EXPORT StatFilterDefinition : public bin_class { 
    public:
        explicit StatFilterDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1403141140 || bin_class::is_type(type);
        }

        uint32_t buttonDefinition = 0;
        std::set<uint32_t> MatchingCategories {};
    };

    class YORDLE_EXPORT x77595aa9 : public bin_class { 
    public:
        explicit x77595aa9(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2002344617 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::StatFilterDefinition> PhysicalDamage {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> CriticalStrike {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> attackSpeed {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> OnHit {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> ArmorPenetration {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> abilityPower {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> mana {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> MagicPenetration {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> Health {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> Armor {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> MagicResist {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> abilityHaste {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> MoveSpeed {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> xd628825f {};
        std::shared_ptr<yordle::data::meta::StatFilterDefinition> DisableStatFilters {};
    };

    class YORDLE_EXPORT HudItemShopData : public bin_class { 
    public:
        explicit HudItemShopData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2696268697 || bin_class::is_type(type);
        }

        uint32_t TabButtonDefinition = 0;
        uint32_t CloseButtonDefinition = 0;
        uint32_t PurchaseButtonDefinition = 0;
        uint32_t SellButtonDefinition = 0;
        uint32_t UndoButtonDefinition = 0;
        uint32_t x616b3a84 = 0;
        uint32_t x1ee195a0 = 0;
        uint32_t xdcf2bbe3 = 0;
        uint32_t xaa05f252 = 0;
        uint32_t x6d532c7a = 0;
        uint32_t x655c70a4 = 0;
        uint32_t xf1b77de6 = 0;
        uint32_t xd2202861 = 0;
        uint32_t x6ff1fabe = 0;
        uint32_t xa1f85097 = 0;
        uint32_t x77595aa9 = 0;
        std::shared_ptr<yordle::data::meta::ViewPaneDefinition> x71d17542 {};
        std::shared_ptr<yordle::data::meta::ViewPaneDefinition> xce14c25 {};
        std::shared_ptr<yordle::data::meta::ViewPaneDefinition> xb3e9d346 {};
        std::shared_ptr<yordle::data::meta::ViewPaneDefinition> SearchViewPaneDefinition {};
        uint32_t AllItemsHeaderRegion = 0;
        uint32_t AllItemsItemRegion = 0;
        uint32_t ItemSetsHeaderRegion = 0;
        uint32_t ItemSetsItemRegion = 0;
        uint32_t AllItemsHeaderText = 0;
        uint32_t xf481f566 = 0;
        uint32_t x4823f71d = 0;
        std::set<std::shared_ptr<yordle::data::meta::x38691790>> x79a37750 {};
        std::shared_ptr<yordle::data::meta::xd20000f6> BootsPanelDefinition {};
        std::shared_ptr<yordle::data::meta::xd20000f6> ConsumablesPanelDefinition {};
        std::shared_ptr<yordle::data::meta::xd20000f6> InventoryPanelDefinition {};
        std::set<uint32_t> xe00be811 {};
        float xf8310aa = 0.0;
        uint32_t BuildsIntoIconDefinition = 0;
        uint32_t BuildTreeIconDefinition = 0;
        uint32_t QuickBuyIconDefinition = 0;
        uint32_t InventoryIconDefinition = 0;
        uint32_t AllItemsIconDefinition = 0;
        uint32_t ItemSetsIconDefinition = 0;
        uint32_t SearchIconDefinition = 0;
        uint32_t x494a4b42 = 0;
        uint32_t CommonlyBuiltIconDefinition = 0;
        uint32_t x5ab9b659 = 0;
        uint32_t xf8e1342c = 0;
        uint32_t x69988db6 = 0;
        uint32_t ItemDetailsScene = 0;
        uint32_t xaa352f81 = 0;
        std::string xd6f8b1fa {};
    };

    class YORDLE_EXPORT IHudLoadingScreenWidget : public bin_class { 
    public:
        explicit IHudLoadingScreenWidget(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1936278667 || bin_class::is_type(type);
        }

        std::string mSceneName {};
    };

    class YORDLE_EXPORT HudLoadingScreenCarouselData : public bin_class { 
    public:
        explicit HudLoadingScreenCarouselData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 470840304 || bin_class::is_type(type);
        }

        std::string image {};
        uint8_t mTipType = 0;
    };

    class YORDLE_EXPORT HudLoadingScreenWidgetCarousel : public IHudLoadingScreenWidget { 
    public:
        explicit HudLoadingScreenWidgetCarousel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2709250460 || IHudLoadingScreenWidget::is_type(type);
        }

        uint8_t x7b1f4fc8 = 0;
        uint32_t mCarouselData = 0;
    };

    class YORDLE_EXPORT HudLoadingScreenWidgetClash : public IHudLoadingScreenWidget { 
    public:
        explicit HudLoadingScreenWidgetClash(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1107815263 || IHudLoadingScreenWidget::is_type(type);
        }

    };

    class YORDLE_EXPORT HudLoadingScreenWidgetPing : public IHudLoadingScreenWidget { 
    public:
        explicit HudLoadingScreenWidgetPing(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3421140098 || IHudLoadingScreenWidget::is_type(type);
        }

        uint32_t mDebugPing = 0;
        uint32_t mPingThresholdGreen = 0;
        uint32_t mPingThresholdYellow = 0;
        uint32_t mPingThresholdOrange = 0;
        uint32_t mPingThresholdRed = 0;
    };

    class YORDLE_EXPORT HudLoadingScreenWidgetPlayers : public IHudLoadingScreenWidget { 
    public:
        explicit HudLoadingScreenWidgetPlayers(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3666540112 || IHudLoadingScreenWidget::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mCardConfig {};
    };

    class YORDLE_EXPORT HudLoadingScreenWidgetProgressBar : public IHudLoadingScreenWidget { 
    public:
        explicit HudLoadingScreenWidgetProgressBar(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 428271402 || IHudLoadingScreenWidget::is_type(type);
        }

    };

    class YORDLE_EXPORT HudLoadingScreenWidgetTutorial : public IHudLoadingScreenWidget { 
    public:
        explicit HudLoadingScreenWidgetTutorial(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4123015996 || IHudLoadingScreenWidget::is_type(type);
        }

    };

    class YORDLE_EXPORT PlayerCardWidgetConfig : public bin_class { 
    public:
        explicit PlayerCardWidgetConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1376467180 || bin_class::is_type(type);
        }

        bool mTeamBased = false;
        uint8_t mCardType = 0;
        uint32_t x7b9b52c3 = 0;
    };

    class YORDLE_EXPORT x97599ad3 : public bin_class { 
    public:
        explicit x97599ad3(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2539231955 || bin_class::is_type(type);
        }

        uint32_t x634c549e = 0;
        uint32_t x299164e2 = 0;
    };

    class YORDLE_EXPORT HudReplaySliderIconData : public bin_class { 
    public:
        explicit HudReplaySliderIconData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3703833425 || bin_class::is_type(type);
        }

        uint32_t mType = 0;
        uint8_t mTooltipStyle = 0;
        std::string mElementName {};
        float mElementSpacer = 0.0;
        float mElementAlphaDefault = 0.0;
        float mElementAlphaSelected = 0.0;
        float mElementAlphaUnselected = 0.0;
        std::set<std::string> mTooltipIconNames {};
    };

    class YORDLE_EXPORT HudReplaySliderData : public bin_class { 
    public:
        explicit HudReplaySliderData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 220532968 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::HudReplaySliderIconData>> mIconDataPriorityList {};
        float mTooltipEventWindow = 0.0;
    };

    class YORDLE_EXPORT WadFileDescriptor : public bin_class { 
    public:
        explicit WadFileDescriptor(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2741896024 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT BaseRigPoseModifierData : public bin_class { 
    public:
        explicit BaseRigPoseModifierData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3000850570 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT ConformToPathRigPoseModifierData : public BaseRigPoseModifierData { 
    public:
        explicit ConformToPathRigPoseModifierData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3456866963 || BaseRigPoseModifierData::is_type(type);
        }

        uint32_t mStartingJointName = 0;
        uint32_t mEndingJointName = 0;
        uint32_t mDefaultMaskName = 0;
        float mMaxBoneAngle = 0.0;
        float mDampingValue = 0.0;
        float mVelMultiplier = 0.0;
        float mFrequency = 0.0;
    };

    class YORDLE_EXPORT JointSnapRigPoseModifilerData : public BaseRigPoseModifierData { 
    public:
        explicit JointSnapRigPoseModifilerData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3010810975 || BaseRigPoseModifierData::is_type(type);
        }

    };

    class YORDLE_EXPORT LockRootOrientationRigPoseModifierData : public BaseRigPoseModifierData { 
    public:
        explicit LockRootOrientationRigPoseModifierData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 847419898 || BaseRigPoseModifierData::is_type(type);
        }

    };

    class YORDLE_EXPORT SyncedAnimationRigPoseModifierData : public BaseRigPoseModifierData { 
    public:
        explicit SyncedAnimationRigPoseModifierData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1085106335 || BaseRigPoseModifierData::is_type(type);
        }

    };

    class YORDLE_EXPORT VertexAnimationRigPoseModifierData : public BaseRigPoseModifierData { 
    public:
        explicit VertexAnimationRigPoseModifierData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3410773763 || BaseRigPoseModifierData::is_type(type);
        }

        float mMaxSpeed = 0.0;
        float mStiffness = 0.0;
        float mMass = 0.0;
        float mDamping = 0.0;
    };

    class YORDLE_EXPORT AnimationGraphData : public bin_class { 
    public:
        explicit AnimationGraphData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4126869447 || bin_class::is_type(type);
        }

        bool mUseCascadeBlend = false;
        float mCascadeBlendValue = 0.0;
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::bin_class>> mClipDataMap {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::bin_class>> mMaskDataMap {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::bin_class>> mTrackDataMap {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::bin_class>> mSyncGroupDataMap {};
        std::map<uint64_t, std::shared_ptr<yordle::data::meta::bin_class>> mBlendDataTable {};
    };

    class YORDLE_EXPORT AnimationResourceData : public bin_class { 
    public:
        explicit AnimationResourceData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2588617117 || bin_class::is_type(type);
        }

        std::string mAnimationFilePath {};
    };

    class YORDLE_EXPORT MaskData : public bin_class { 
    public:
        explicit MaskData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 725360953 || bin_class::is_type(type);
        }

        uint32_t mId = 0;
        std::set<float> mWeightList {};
    };

    class YORDLE_EXPORT Joint : public bin_class { 
    public:
        explicit Joint(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2930641015 || bin_class::is_type(type);
        }

        uint16_t mIndex = 0;
        std::string mName {};
        uint32_t mNameHash = 0;
        uint16_t mFlags = 0;
        float mRadius = 0.0;
        int16_t mParentIndex = 0;
    };

    class YORDLE_EXPORT RigResource : public bin_class { 
    public:
        explicit RigResource(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1426469241 || bin_class::is_type(type);
        }

        std::string mName {};
        std::string mAssetName {};
        uint16_t mFlags = 0;
        std::set<std::shared_ptr<yordle::data::meta::Joint>> mJointList {};
        std::set<uint16_t> mShaderJointList {};
    };

    class YORDLE_EXPORT SyncGroupData : public bin_class { 
    public:
        explicit SyncGroupData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1718266157 || bin_class::is_type(type);
        }

        uint32_t mType = 0;
    };

    class YORDLE_EXPORT TrackData : public bin_class { 
    public:
        explicit TrackData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2552904996 || bin_class::is_type(type);
        }

        uint32_t mPriority = 0;
        float mBlendWeight = 0.0;
        uint32_t mBlendMode = 0;
    };

    class YORDLE_EXPORT UpdaterData : public bin_class { 
    public:
        explicit UpdaterData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3953106978 || bin_class::is_type(type);
        }

        uint32_t mInputType = 0;
        uint32_t mOutputType = 0;
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> mValueProcessorDataList {};
    };

    class YORDLE_EXPORT UpdaterResourceData : public bin_class { 
    public:
        explicit UpdaterResourceData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1426466346 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::UpdaterData>> mUpdaterDataList {};
    };

    class YORDLE_EXPORT ConditionFloatPairData : public bin_class { 
    public:
        explicit ConditionFloatPairData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1675919456 || bin_class::is_type(type);
        }

        uint32_t mClipName = 0;
        float mValue = 0.0;
        float mHoldAnimationToHigher = 0.0;
        float mHoldAnimationToLower = 0.0;
    };

    class YORDLE_EXPORT ParametricPairData : public bin_class { 
    public:
        explicit ParametricPairData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3371956895 || bin_class::is_type(type);
        }

        uint32_t mClipName = 0;
        float mValue = 0.0;
    };

    class YORDLE_EXPORT SelectorPairData : public bin_class { 
    public:
        explicit SelectorPairData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1837663416 || bin_class::is_type(type);
        }

        uint32_t mClipName = 0;
        float mProbability = 0.0;
    };

    class YORDLE_EXPORT BaseBlendData : public bin_class { 
    public:
        explicit BaseBlendData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3172694155 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT BaseEventData : public bin_class { 
    public:
        explicit BaseEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2039250216 || bin_class::is_type(type);
        }

        uint32_t mName = 0;
        float mStartFrame = 0.0;
        float mEndFrame = 0.0;
        bool mIsSelfOnly = false;
        bool mFireIfAnimationEndsEarly = false;
    };

    class YORDLE_EXPORT ClipBaseData : public bin_class { 
    public:
        explicit ClipBaseData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3917866950 || bin_class::is_type(type);
        }

        uint32_t mFlags = 0;
        std::set<uint32_t> mAnimationInterruptionGroupNames {};
    };

    class YORDLE_EXPORT ConformToPathEventData : public BaseEventData { 
    public:
        explicit ConformToPathEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2184673821 || BaseEventData::is_type(type);
        }

        uint32_t mMaskDataName = 0;
        float mBlendInTime = 0.0;
        float mBlendOutTime = 0.0;
    };

    class YORDLE_EXPORT EnableLookAtEventData : public BaseEventData { 
    public:
        explicit EnableLookAtEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 126228632 || BaseEventData::is_type(type);
        }

        bool mEnableLookAt = false;
        bool mLockCurrentValues = false;
    };

    class YORDLE_EXPORT FaceCameraEventData : public BaseEventData { 
    public:
        explicit FaceCameraEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1991855177 || BaseEventData::is_type(type);
        }

        float xb9cfc1ab = 0.0;
        float BlendInTime = 0.0;
        float BlendOutTime = 0.0;
    };

    class YORDLE_EXPORT FadeEventData : public BaseEventData { 
    public:
        explicit FadeEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1280605585 || BaseEventData::is_type(type);
        }

        float mTimeToFade = 0.0;
        float mTargetAlpha = 0.0;
    };

    class YORDLE_EXPORT IdleParticlesVisibilityEventData : public BaseEventData { 
    public:
        explicit IdleParticlesVisibilityEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2009563166 || BaseEventData::is_type(type);
        }

        bool mShow = false;
    };

    class YORDLE_EXPORT JointSnapEventData : public BaseEventData { 
    public:
        explicit JointSnapEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3049371309 || BaseEventData::is_type(type);
        }

        uint32_t mJointNameToOverride = 0;
        uint32_t mJointNameToSnapTo = 0;
    };

    class YORDLE_EXPORT LockRootOrientationEventData : public BaseEventData { 
    public:
        explicit LockRootOrientationEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3239264152 || BaseEventData::is_type(type);
        }

    };

    class YORDLE_EXPORT ParticleEventDataPair : public bin_class { 
    public:
        explicit ParticleEventDataPair(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1574343673 || bin_class::is_type(type);
        }

        uint32_t mBoneName = 0;
        uint32_t mTargetBoneName = 0;
    };

    class YORDLE_EXPORT ParticleEventData : public BaseEventData { 
    public:
        explicit ParticleEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 88265757 || BaseEventData::is_type(type);
        }

        uint32_t mEffectKey = 0;
        uint32_t mEnemyEffectKey = 0;
        std::string mEffectName {};
        std::set<std::shared_ptr<yordle::data::meta::ParticleEventDataPair>> mParticleEventDataPairList {};
        bool mIsLoop = false;
        bool mIsKillEvent = false;
        bool mIsDetachable = false;
        bool mScalePlaySpeedWithAnimation = false;
        bool xa3826203 = false;
    };

    class YORDLE_EXPORT SoundEventData : public BaseEventData { 
    public:
        explicit SoundEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2622906420 || BaseEventData::is_type(type);
        }

        std::string mSoundName {};
        bool mIsLoop = false;
        bool mIsKillEvent = false;
        bool x67227d6 = false;
    };

    class YORDLE_EXPORT StopAnimationEventData : public BaseEventData { 
    public:
        explicit StopAnimationEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4107335487 || BaseEventData::is_type(type);
        }

        uint32_t mStopAnimationName = 0;
    };

    class YORDLE_EXPORT SubmeshVisibilityEventData : public BaseEventData { 
    public:
        explicit SubmeshVisibilityEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3170201200 || BaseEventData::is_type(type);
        }

        std::set<uint32_t> mShowSubmeshList {};
        std::set<uint32_t> mHideSubmeshList {};
    };

    class YORDLE_EXPORT SyncedAnimationEventData : public BaseEventData { 
    public:
        explicit SyncedAnimationEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2141811217 || BaseEventData::is_type(type);
        }

        float mLerpTime = 0.0;
    };

    class YORDLE_EXPORT TimeBlendData : public BaseBlendData { 
    public:
        explicit TimeBlendData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1031735279 || BaseBlendData::is_type(type);
        }

        float mTime = 0.0;
    };

    class YORDLE_EXPORT TransitionClipBlendData : public BaseBlendData { 
    public:
        explicit TransitionClipBlendData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 371240319 || BaseBlendData::is_type(type);
        }

        uint32_t mClipName = 0;
    };

    class YORDLE_EXPORT ValueProcessorData : public bin_class { 
    public:
        explicit ValueProcessorData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3487022 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT EngineFeatureToggles : public bin_class { 
    public:
        explicit EngineFeatureToggles(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2790085136 || bin_class::is_type(type);
        }

        bool x5fe6e49 = false;
        bool xcdbbc6e1 = false;
    };

    class YORDLE_EXPORT MapComponent : public bin_class { 
    public:
        explicit MapComponent(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 72326764 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT MapContainer : public bin_class { 
    public:
        explicit MapContainer(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3723018516 || bin_class::is_type(type);
        }

        std::string mapPath {};
        std::set<std::shared_ptr<yordle::data::meta::MapComponent>> components {};
        std::array<float, 2> boundsMin {};
        std::array<float, 2> boundsMax {};
        float lowestWalkableHeight = 0.0;
        float xf010defb = 0.0;
        std::map<uint32_t, uint32_t> chunks {};
    };

    class YORDLE_EXPORT MapContainsOtherMaps : public MapComponent { 
    public:
        explicit MapContainsOtherMaps(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1681734441 || MapComponent::is_type(type);
        }

        uint32_t MapContainerLocations = 0;
    };

    class YORDLE_EXPORT LaneData : public bin_class { 
    public:
        explicit LaneData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 243000503 || bin_class::is_type(type);
        }

        std::set<std::string> mNavigationPoints {};
        std::set<std::string> mContainedRegions {};
    };

    class YORDLE_EXPORT MapLaneComponent : public MapComponent { 
    public:
        explicit MapLaneComponent(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2774165054 || MapComponent::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::LaneData>> mLanes {};
    };

    class YORDLE_EXPORT MapPathSegment : public bin_class { 
    public:
        explicit MapPathSegment(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2603925163 || bin_class::is_type(type);
        }

        std::array<float, 3> EndPosition {};
    };

    class YORDLE_EXPORT MapPathLineSegment : public MapPathSegment { 
    public:
        explicit MapPathLineSegment(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2574492633 || MapPathSegment::is_type(type);
        }

    };

    class YORDLE_EXPORT MapPathCurveSegment : public MapPathSegment { 
    public:
        explicit MapPathCurveSegment(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1861095566 || MapPathSegment::is_type(type);
        }

        std::array<float, 3> ControlPoint1 {};
        std::array<float, 3> ControlPoint2 {};
    };

    class YORDLE_EXPORT MapNavGrid : public MapComponent { 
    public:
        explicit MapNavGrid(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 477805166 || MapComponent::is_type(type);
        }

        std::string NavGridPath {};
    };

    class YORDLE_EXPORT MapPlaceable : public bin_class { 
    public:
        explicit MapPlaceable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1502315240 || bin_class::is_type(type);
        }

        std::array<float, 16> transform {};
        std::string name {};
        uint8_t mVisibilityFlags = 0;
    };

    class YORDLE_EXPORT GenericMapPlaceable : public MapPlaceable { 
    public:
        explicit GenericMapPlaceable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2347595275 || MapPlaceable::is_type(type);
        }

    };

    class YORDLE_EXPORT MapPlaceableContainer : public bin_class { 
    public:
        explicit MapPlaceableContainer(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2992376383 || bin_class::is_type(type);
        }

        std::map<uint32_t, std::shared_ptr<yordle::data::meta::MapPlaceable>> items {};
    };

    class YORDLE_EXPORT MapPrefabInstance : public MapPlaceable { 
    public:
        explicit MapPrefabInstance(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1173599148 || MapPlaceable::is_type(type);
        }

        uint32_t prefabDefinition = 0;
    };

    class YORDLE_EXPORT MapThemeMusic : public MapComponent { 
    public:
        explicit MapThemeMusic(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3750744125 || MapComponent::is_type(type);
        }

        std::string LocalThemeMusic {};
        std::string ThemeMusicTransitionEvent {};
    };

    class YORDLE_EXPORT RegionsThatAllowContent : public bin_class { 
    public:
        explicit RegionsThatAllowContent(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2486262273 || bin_class::is_type(type);
        }

        std::set<uint32_t> mRegionList {};
    };

    class YORDLE_EXPORT RegionSettings : public bin_class { 
    public:
        explicit RegionSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 585068320 || bin_class::is_type(type);
        }

        std::map<uint32_t, std::shared_ptr<yordle::data::meta::RegionsThatAllowContent>> mContentTypeAllowedSettings {};
    };

    class YORDLE_EXPORT FontLocaleType : public bin_class { 
    public:
        explicit FontLocaleType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2600090346 || bin_class::is_type(type);
        }

        std::string localeName {};
        std::string mFontFilePath {};
        std::string FontFilePathBold {};
        std::string FontFilePathItalics {};
    };

    class YORDLE_EXPORT FontResolution : public bin_class { 
    public:
        explicit FontResolution(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3120352850 || bin_class::is_type(type);
        }

        uint32_t screenHeight = 0;
        uint32_t fontSize = 0;
        uint32_t outlineSize = 0;
        int32_t shadowDepthX = 0;
        int32_t shadowDepthY = 0;
    };

    class YORDLE_EXPORT FontLocaleResolutions : public bin_class { 
    public:
        explicit FontLocaleResolutions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3919875225 || bin_class::is_type(type);
        }

        std::string localeName {};
        std::set<std::shared_ptr<yordle::data::meta::FontResolution>> resolutions {};
    };

    class YORDLE_EXPORT FontType : public bin_class { 
    public:
        explicit FontType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 766729624 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::FontLocaleType>> localeTypes {};
    };

    class YORDLE_EXPORT FontResolutionData : public bin_class { 
    public:
        explicit FontResolutionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 231582978 || bin_class::is_type(type);
        }

        bool autoScale = false;
        std::set<std::shared_ptr<yordle::data::meta::FontLocaleResolutions>> localeResolutions {};
    };

    class YORDLE_EXPORT GameFontDescription : public bin_class { 
    public:
        explicit GameFontDescription(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3812866480 || bin_class::is_type(type);
        }

        std::string name {};
        uint32_t typeData = 0;
        uint32_t resolutionData = 0;
        std::array<uint8_t, 4> color {};
        std::array<uint8_t, 4> outlineColor {};
        std::array<uint8_t, 4> shadowColor {};
        std::array<uint8_t, 4> glowColor {};
        std::array<uint8_t, 4> x3cc9ac15 {};
        std::optional<std::array<uint8_t, 4>> colorblindColor {};
        std::optional<std::array<uint8_t, 4>> colorblindOutlineColor {};
        std::optional<std::array<uint8_t, 4>> colorblindShadowColor {};
        std::optional<std::array<uint8_t, 4>> colorblindGlowColor {};
        std::optional<std::array<uint8_t, 4>> xc2008b7b {};
        std::string fillTextureName {};
    };

    class YORDLE_EXPORT CSSStyle : public bin_class { 
    public:
        explicit CSSStyle(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1461391717 || bin_class::is_type(type);
        }

        std::optional<std::array<uint8_t, 4>> color {};
        std::optional<bool> bold {};
        std::optional<bool> italics {};
        std::optional<bool> underline {};
    };

    class YORDLE_EXPORT CSSIcon : public bin_class { 
    public:
        explicit CSSIcon(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3991255873 || bin_class::is_type(type);
        }

        std::array<float, 2> xy {};
        std::array<float, 2> wh {};
        float x81e208ef = 0.0;
    };

    class YORDLE_EXPORT CSSSheet : public bin_class { 
    public:
        explicit CSSSheet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3173404643 || bin_class::is_type(type);
        }

        std::map<std::string, std::shared_ptr<yordle::data::meta::CSSStyle>> styles {};
        std::string iconTexture {};
        std::map<std::string, std::shared_ptr<yordle::data::meta::CSSIcon>> icons {};
    };

    class YORDLE_EXPORT TooltipFormat : public bin_class { 
    public:
        explicit TooltipFormat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2994559891 || bin_class::is_type(type);
        }

        std::string mObjectName {};
        std::map<std::string, std::string> mInputLocKeysWithDefaults {};
        std::set<std::string> mListNames {};
        std::map<std::string, std::string> mListTypeChoices {};
        std::map<uint32_t, std::string> mListStyles {};
        bool mUsesListValues = false;
        std::string mListValueSeparator {};
        std::string mListGridPrefix {};
        std::string mListGridPostfix {};
        std::string mListGridSeparator {};
        std::map<std::string, std::string> mOutputStrings {};
    };

    class YORDLE_EXPORT TooltipInstanceListElement : public bin_class { 
    public:
        explicit TooltipInstanceListElement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2585474309 || bin_class::is_type(type);
        }

        std::string type {};
        int32_t typeIndex = 0;
        float multiplier = 0.0;
        std::string nameOverride {};
        uint32_t Style = 0;
    };

    class YORDLE_EXPORT TooltipInstanceList : public bin_class { 
    public:
        explicit TooltipInstanceList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4214485747 || bin_class::is_type(type);
        }

        uint32_t levelCount = 0;
        std::set<std::shared_ptr<yordle::data::meta::TooltipInstanceListElement>> elements {};
    };

    class YORDLE_EXPORT TooltipInstance : public bin_class { 
    public:
        explicit TooltipInstance(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2250161003 || bin_class::is_type(type);
        }

        std::string mObjectName {};
        uint32_t mFormat = 0;
        std::map<std::string, std::string> mLocKeys {};
        std::map<std::string, std::shared_ptr<yordle::data::meta::TooltipInstanceList>> mLists {};
    };

    class YORDLE_EXPORT ValueFloat : public bin_class { 
    public:
        explicit ValueFloat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 70254680 || bin_class::is_type(type);
        }

        float constantValue = 0.0;
        std::shared_ptr<yordle::data::meta::bin_class> dynamics {};
    };

    class YORDLE_EXPORT IntegratedValueFloat : public ValueFloat { 
    public:
        explicit IntegratedValueFloat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3515916773 || ValueFloat::is_type(type);
        }

    };

    class YORDLE_EXPORT ValueVector2 : public bin_class { 
    public:
        explicit ValueVector2(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1776038985 || bin_class::is_type(type);
        }

        std::array<float, 2> constantValue {};
        std::shared_ptr<yordle::data::meta::bin_class> dynamics {};
    };

    class YORDLE_EXPORT IntegratedValueVector2 : public ValueVector2 { 
    public:
        explicit IntegratedValueVector2(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1808563568 || ValueVector2::is_type(type);
        }

    };

    class YORDLE_EXPORT ValueVector3 : public bin_class { 
    public:
        explicit ValueVector3(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1759261366 || bin_class::is_type(type);
        }

        std::array<float, 3> constantValue {};
        std::shared_ptr<yordle::data::meta::bin_class> dynamics {};
    };

    class YORDLE_EXPORT IntegratedValueVector3 : public ValueVector3 { 
    public:
        explicit IntegratedValueVector3(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1825341187 || ValueVector3::is_type(type);
        }

    };

    class YORDLE_EXPORT ValueColor : public bin_class { 
    public:
        explicit ValueColor(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 122655197 || bin_class::is_type(type);
        }

        std::array<float, 4> constantValue {};
        std::shared_ptr<yordle::data::meta::bin_class> dynamics {};
    };

    class YORDLE_EXPORT VfxAnimatedFloatVariableData : public bin_class { 
    public:
        explicit VfxAnimatedFloatVariableData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4261825672 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::bin_class>> probabilityTables {};
        std::set<float> times {};
        std::set<float> values {};
    };

    class YORDLE_EXPORT VfxAnimatedVector2fVariableData : public bin_class { 
    public:
        explicit VfxAnimatedVector2fVariableData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 772710981 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::bin_class>> probabilityTables {};
        std::set<float> times {};
        std::set<std::array<float, 2>> values {};
    };

    class YORDLE_EXPORT VfxAnimatedVector3fVariableData : public bin_class { 
    public:
        explicit VfxAnimatedVector3fVariableData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2899841408 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::bin_class>> probabilityTables {};
        std::set<float> times {};
        std::set<std::array<float, 3>> values {};
    };

    class YORDLE_EXPORT VfxAnimatedColorVariableData : public bin_class { 
    public:
        explicit VfxAnimatedColorVariableData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1128908277 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::bin_class>> probabilityTables {};
        std::set<float> times {};
        std::set<std::array<float, 4>> values {};
    };

    class YORDLE_EXPORT VfxSoftParticleDefinitionData : public bin_class { 
    public:
        explicit VfxSoftParticleDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 497696688 || bin_class::is_type(type);
        }

        float beginIn = 0.0;
        float beginOut = 0.0;
        float deltaIn = 0.0;
        float deltaOut = 0.0;
    };

    class YORDLE_EXPORT FlexValueVector3 : public bin_class { 
    public:
        explicit FlexValueVector3(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1113621825 || bin_class::is_type(type);
        }

        uint32_t mFlexID = 0;
        std::shared_ptr<yordle::data::meta::ValueVector3> mValue {};
    };

    class YORDLE_EXPORT FlexValueVector2 : public bin_class { 
    public:
        explicit FlexValueVector2(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1096844206 || bin_class::is_type(type);
        }

        uint32_t mFlexID = 0;
        std::shared_ptr<yordle::data::meta::ValueVector2> mValue {};
    };

    class YORDLE_EXPORT FlexValueFloat : public bin_class { 
    public:
        explicit FlexValueFloat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1370198255 || bin_class::is_type(type);
        }

        uint32_t mFlexID = 0;
        std::shared_ptr<yordle::data::meta::ValueFloat> mValue {};
    };

    class YORDLE_EXPORT FlexTypeFloat : public bin_class { 
    public:
        explicit FlexTypeFloat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 796686208 || bin_class::is_type(type);
        }

        uint32_t mFlexID = 0;
        float mValue = 0.0;
    };

    class YORDLE_EXPORT VfxFieldAccelerationDefinitionData : public bin_class { 
    public:
        explicit VfxFieldAccelerationDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 177533908 || bin_class::is_type(type);
        }

        bool isLocalSpace = false;
        std::shared_ptr<yordle::data::meta::ValueVector3> acceleration {};
    };

    class YORDLE_EXPORT VfxFieldAttractionDefinitionData : public bin_class { 
    public:
        explicit VfxFieldAttractionDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 443947005 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ValueVector3> position {};
        std::shared_ptr<yordle::data::meta::ValueFloat> radius {};
        std::shared_ptr<yordle::data::meta::ValueFloat> acceleration {};
    };

    class YORDLE_EXPORT VfxFieldCollectionDefinitionData : public bin_class { 
    public:
        explicit VfxFieldCollectionDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3149931448 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::VfxFieldAccelerationDefinitionData>> fieldAccelerationDefinitions {};
        std::set<std::shared_ptr<yordle::data::meta::VfxFieldAttractionDefinitionData>> fieldAttractionDefinitions {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> fieldDragDefinitions {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> fieldNoiseDefinitions {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> fieldOrbitalDefinitions {};
    };

    class YORDLE_EXPORT VfxFieldDragDefinitionData : public bin_class { 
    public:
        explicit VfxFieldDragDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3880844002 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ValueVector3> position {};
        std::shared_ptr<yordle::data::meta::ValueFloat> radius {};
        std::shared_ptr<yordle::data::meta::ValueFloat> strength {};
    };

    class YORDLE_EXPORT VfxFieldNoiseDefinitionData : public bin_class { 
    public:
        explicit VfxFieldNoiseDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1666037840 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ValueVector3> position {};
        std::shared_ptr<yordle::data::meta::ValueFloat> radius {};
        std::shared_ptr<yordle::data::meta::ValueFloat> frequency {};
        std::shared_ptr<yordle::data::meta::ValueFloat> velocityDelta {};
        std::array<float, 3> axisFraction {};
    };

    class YORDLE_EXPORT VfxFieldOrbitalDefinitionData : public bin_class { 
    public:
        explicit VfxFieldOrbitalDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3061509743 || bin_class::is_type(type);
        }

        bool isLocalSpace = false;
        std::shared_ptr<yordle::data::meta::ValueVector3> direction {};
    };

    class YORDLE_EXPORT IVfxMaterialDriver : public bin_class { 
    public:
        explicit IVfxMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 37724083 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT VfxMaterialOverrideDefinitionData : public bin_class { 
    public:
        explicit VfxMaterialOverrideDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3652726407 || bin_class::is_type(type);
        }

        int32_t priority = 0;
        std::optional<std::string> subMeshName {};
        uint32_t overrideBlendMode = 0;
        std::string baseTexture {};
        std::string glossTexture {};
        std::string transitionTexture {};
        float transitionSample = 0.0;
        uint32_t transitionSource = 0;
        uint32_t material = 0;
    };

    class YORDLE_EXPORT VfxProbabilityTableData : public bin_class { 
    public:
        explicit VfxProbabilityTableData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1403439486 || bin_class::is_type(type);
        }

        std::set<float> keyTimes {};
        std::set<float> keyValues {};
        float singleValue = 0.0;
    };

    class YORDLE_EXPORT VfxMigrationResources : public bin_class { 
    public:
        explicit VfxMigrationResources(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2184800742 || bin_class::is_type(type);
        }

        std::map<uint32_t, uint32_t> resourceMap {};
    };

    class YORDLE_EXPORT VfxAssetRemap : public bin_class { 
    public:
        explicit VfxAssetRemap(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4129808802 || bin_class::is_type(type);
        }

        uint32_t type = 0;
        uint32_t oldAsset = 0;
        std::string newAsset {};
    };

    class YORDLE_EXPORT VfxColorOverLifeMaterialDriver : public IVfxMaterialDriver { 
    public:
        explicit VfxColorOverLifeMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 737679281 || IVfxMaterialDriver::is_type(type);
        }

        uint8_t frequency = 0;
        std::shared_ptr<yordle::data::meta::VfxAnimatedColorVariableData> colors {};
    };

    class YORDLE_EXPORT VfxShape : public bin_class { 
    public:
        explicit VfxShape(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2010092456 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ValueVector3> birthTranslation {};
        std::shared_ptr<yordle::data::meta::ValueVector3> emitOffset {};
        std::set<std::shared_ptr<yordle::data::meta::ValueFloat>> emitRotationAngles {};
        std::set<std::array<float, 3>> emitRotationAxes {};
    };

    class YORDLE_EXPORT VfxEmitterDefinitionData : public bin_class { 
    public:
        explicit VfxEmitterDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 164488258 || bin_class::is_type(type);
        }

        std::string soundOnCreateName {};
        std::string soundPersistentName {};
        std::string voiceOverOnCreateName {};
        std::string voiceOverPersistentName {};
        float timeBeforeFirstEmission = 0.0;
        float xcef2ba70 = 0.0;
        std::shared_ptr<yordle::data::meta::ValueFloat> rate {};
        bool x538effa4 = false;
        std::shared_ptr<yordle::data::meta::ValueFloat> particleLifetime {};
        uint8_t particleLingerType = 0;
        std::optional<float> particleLinger {};
        std::optional<float> lifetime {};
        bool isSingleParticle = false;
        std::optional<float> emitterLinger {};
        std::set<std::string> excludedAttachmentTypes {};
        std::optional<float> period {};
        std::optional<float> timeActiveDuringPeriod {};
        std::shared_ptr<yordle::data::meta::ValueVector2> rateByVelocityFunction {};
        std::optional<float> MaximumRateByVelocity {};
        std::array<float, 3> offsetLifetimeScaling {};
        uint8_t offsetLifeScalingSymmetryMode = 0;
        bool doesLifetimeScale = false;
        std::shared_ptr<yordle::data::meta::FlexValueFloat> flexRate {};
        std::shared_ptr<yordle::data::meta::FlexValueFloat> flexParticleLifetime {};
        bool doesParticleLifetimeScale = false;
        std::shared_ptr<yordle::data::meta::bin_class> emissionSurfaceDefinition {};
        std::shared_ptr<yordle::data::meta::bin_class> childParticleSetDefinition {};
        std::shared_ptr<yordle::data::meta::VfxFieldCollectionDefinitionData> fieldCollectionDefinition {};
        std::string emitterName {};
        bool disabled = false;
        uint8_t importance = 0;
        uint8_t colorblindVisibility = 0;
        std::set<std::string> keywordsRequired {};
        std::set<std::string> keywordsExcluded {};
        std::set<std::string> keywordsIncluded {};
        uint8_t spectatorPolicy = 0;
        uint8_t censorPolicy = 0;
        std::array<float, 3> translationOverride {};
        std::array<float, 3> rotationOverride {};
        std::shared_ptr<yordle::data::meta::ValueVector3> birthOrbitalVelocity {};
        std::shared_ptr<yordle::data::meta::ValueVector3> birthVelocity {};
        std::shared_ptr<yordle::data::meta::ValueVector3> birthDrag {};
        std::shared_ptr<yordle::data::meta::ValueVector3> birthAcceleration {};
        std::shared_ptr<yordle::data::meta::ValueVector3> velocity {};
        std::shared_ptr<yordle::data::meta::ValueVector3> drag {};
        std::shared_ptr<yordle::data::meta::ValueVector3> acceleration {};
        bool UseLingerVelocity = false;
        std::shared_ptr<yordle::data::meta::ValueVector3> lingerVelocity {};
        bool UseLingerDrag = false;
        std::shared_ptr<yordle::data::meta::ValueVector3> lingerDrag {};
        bool UseLingerAcceleration = false;
        std::shared_ptr<yordle::data::meta::ValueVector3> lingerAcceleration {};
        std::shared_ptr<yordle::data::meta::FlexValueVector3> flexBirthVelocity {};
        std::shared_ptr<yordle::data::meta::IntegratedValueVector3> worldAcceleration {};
        std::shared_ptr<yordle::data::meta::VfxShape> shape {};
        std::shared_ptr<yordle::data::meta::ValueFloat> bindWeight {};
        float scaleEmitOffsetByBoundObjectSize = 0.0;
        float emissionMeshScale = 0.0;
        std::string emissionMeshName {};
        float scaleEmitOffsetByBoundObjectHeight = 0.0;
        float scaleEmitOffsetByBoundObjectRadius = 0.0;
        std::shared_ptr<yordle::data::meta::FlexValueVector3> flexOffset {};
        std::shared_ptr<yordle::data::meta::FlexValueVector3> flexBirthTranslation {};
        uint32_t material = 0;
        std::map<std::string, std::shared_ptr<yordle::data::meta::IVfxMaterialDriver>> materialDrivers {};
        uint8_t renderPhaseOverride = 0;
        std::shared_ptr<yordle::data::meta::bin_class> primitive {};
        std::string falloffTexture {};
        std::string particleColorTexture {};
        uint8_t blendMode = 0;
        std::shared_ptr<yordle::data::meta::ValueColor> birthColor {};
        std::shared_ptr<yordle::data::meta::ValueColor> color {};
        bool useLingerColor = false;
        std::shared_ptr<yordle::data::meta::ValueColor> lingerColor {};
        int16_t pass = 0;
        uint8_t meshRenderFlags = 0;
        uint8_t colorLookUpTypeX = 0;
        uint8_t colorLookUpTypeY = 0;
        std::array<float, 2> colorLookUpScales {};
        uint8_t alphaRef = 0;
        std::array<float, 2> colorLookUpOffsets {};
        std::shared_ptr<yordle::data::meta::VfxSoftParticleDefinitionData> softParticleParams {};
        uint8_t colorRenderFlags = 0;
        std::array<float, 4> censorModulateValue {};
        float sliceTechniqueRange = 0.0;
        std::array<float, 4> modulationFactor {};
        std::shared_ptr<yordle::data::meta::bin_class> alphaErosionDefinition {};
        std::shared_ptr<yordle::data::meta::bin_class> reflectionDefinition {};
        std::shared_ptr<yordle::data::meta::bin_class> distortionDefinition {};
        bool isTexturePixelated = false;
        float uvParallaxScale = 0.0;
        std::array<float, 2> depthBiasFactors {};
        bool disableBackfaceCull = false;
        uint8_t miscRenderFlags = 0;
        uint8_t stencilMode = 0;
        uint8_t stencilRef = 0;
        bool uvScrollAlphaMult = false;
        bool particleIsLocalOrientation = false;
        bool isDirectionOriented = false;
        bool isUniformScale = false;
        bool hasPostRotateOrientation = false;
        bool isRandomStartFrame = false;
        bool isRandomStartFrameMult = false;
        bool doesCastShadow = false;
        bool isRotationEnabled = false;
        bool uvScrollClamp = false;
        bool uvScrollClampMult = false;
        bool isFollowingTerrain = false;
        bool isGroundLayer = false;
        bool useEmissionMeshNormalForBirth = false;
        bool useNavmeshMask = false;
        bool x676949a1 = false;
        bool xbd9b83c7 = false;
        std::shared_ptr<yordle::data::meta::ValueVector3> birthRotation0 {};
        std::shared_ptr<yordle::data::meta::ValueVector3> birthRotationalVelocity0 {};
        bool UseLingerRotation = false;
        std::shared_ptr<yordle::data::meta::ValueVector3> LingerRotation0 {};
        bool isLocalOrientation = false;
        float directionVelocityScale = 0.0;
        float directionVelocityMinScale = 0.0;
        std::array<float, 3> postRotateOrientationAxis {};
        std::shared_ptr<yordle::data::meta::ValueVector3> birthRotationalAcceleration {};
        std::shared_ptr<yordle::data::meta::FlexValueVector3> flexBirthRotationalVelocity0 {};
        std::shared_ptr<yordle::data::meta::IntegratedValueVector3> rotation0 {};
        std::shared_ptr<yordle::data::meta::ValueVector3> birthScale0 {};
        std::shared_ptr<yordle::data::meta::ValueVector3> scale0 {};
        bool UseLingerScale = false;
        std::shared_ptr<yordle::data::meta::ValueVector3> LingerScale0 {};
        float scaleBirthScaleByBoundObjectSize = 0.0;
        float scaleBirthScaleByBoundObjectRadius = 0.0;
        std::shared_ptr<yordle::data::meta::FlexTypeFloat> flexScaleBirthScale {};
        std::shared_ptr<yordle::data::meta::FlexTypeFloat> flexScaleEmitOffset {};
        std::shared_ptr<yordle::data::meta::FlexTypeFloat> FlexInstanceScale {};
        float scaleBirthScaleByBoundObjectHeight = 0.0;
        std::string texture {};
        float frameRate = 0.0;
        std::shared_ptr<yordle::data::meta::ValueFloat> birthFrameRate {};
        uint16_t numFrames = 0;
        uint16_t startFrame = 0;
        uint8_t uvMode = 0;
        std::shared_ptr<yordle::data::meta::bin_class> paletteDefinition {};
        std::set<std::shared_ptr<yordle::data::meta::VfxMaterialOverrideDefinitionData>> materialOverrideDefinitions {};
        std::shared_ptr<yordle::data::meta::ValueVector2> birthUvScrollRate {};
        std::shared_ptr<yordle::data::meta::FlexValueVector2> flexBirthUVScrollRate {};
        std::shared_ptr<yordle::data::meta::ValueVector2> birthUVOffset {};
        uint8_t texAddressModeBase = 0;
        std::array<float, 2> texDiv {};
        std::shared_ptr<yordle::data::meta::IntegratedValueVector2> particleUVScrollRate {};
        std::array<float, 2> emitterUvScrollRate {};
        std::shared_ptr<yordle::data::meta::FlexValueVector2> flexBirthUVOffset {};
        std::shared_ptr<yordle::data::meta::ValueVector2> uvScale {};
        std::shared_ptr<yordle::data::meta::ValueFloat> uvRotation {};
        std::shared_ptr<yordle::data::meta::ValueFloat> birthUvRotateRate {};
        std::shared_ptr<yordle::data::meta::IntegratedValueFloat> particleUVRotateRate {};
        std::array<float, 2> uvTransformCenter {};
        std::string textureMult {};
        std::shared_ptr<yordle::data::meta::ValueVector2> birthUvScrollRateMult {};
        std::shared_ptr<yordle::data::meta::ValueVector2> birthUVOffsetMult {};
        uint8_t texAddressModeMult = 0;
        std::array<float, 2> texDivMult {};
        std::shared_ptr<yordle::data::meta::ValueVector2> uvScaleMult {};
        std::shared_ptr<yordle::data::meta::ValueFloat> birthUvRotateRateMult {};
        std::shared_ptr<yordle::data::meta::IntegratedValueFloat> particleUVRotateRateMult {};
        std::array<float, 2> uvTransformCenterMult {};
        std::shared_ptr<yordle::data::meta::IntegratedValueVector2> particleUVScrollRateMult {};
        std::array<float, 2> emitterUvScrollRateMult {};
        std::shared_ptr<yordle::data::meta::FlexValueVector2> flexBirthUVScrollRateMult {};
        std::array<float, 3> scaleOverride {};
        std::shared_ptr<yordle::data::meta::ValueFloat> birthScale1 {};
        std::shared_ptr<yordle::data::meta::ValueFloat> scale1 {};
        std::shared_ptr<yordle::data::meta::ValueFloat> birthRotation1 {};
        std::array<float, 2> particleBind {};
        std::shared_ptr<yordle::data::meta::ValueFloat> birthRotationalVelocity1 {};
        uint8_t orientation = 0;
        std::shared_ptr<yordle::data::meta::ValueFloat> rotation1 {};
        std::array<float, 2> scaleBias {};
        std::array<float, 2> uvScrollRate1 {};
        bool hasFixedOrbit = false;
        uint8_t fixedOrbitType = 0;
        bool scaleUpFromOrigin = false;
        bool lockedToEmitter = false;
        std::shared_ptr<yordle::data::meta::FlexValueFloat> flexBirthRotationalVelocity1 {};
    };

    class YORDLE_EXPORT VfxChildIdentifier : public bin_class { 
    public:
        explicit VfxChildIdentifier(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2526736020 || bin_class::is_type(type);
        }

        uint32_t effectKey = 0;
        uint32_t effect = 0;
        std::string effectName {};
    };

    class YORDLE_EXPORT VfxChildParticleSetDefinitionData : public bin_class { 
    public:
        explicit VfxChildParticleSetDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3038774362 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::VfxChildIdentifier>> childrenIdentifiers {};
        std::set<std::string> boneToSpawnAt {};
        std::shared_ptr<yordle::data::meta::ValueFloat> childrenProbability {};
        bool childEmitOnDeath = false;
    };

    class YORDLE_EXPORT VfxAlphaErosionDefinitionData : public bin_class { 
    public:
        explicit VfxAlphaErosionDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1585720219 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ValueFloat> erosionDriveCurve {};
        uint32_t erosionDriveSource = 0;
        bool UseLingerErosionDriveCurve = false;
        std::shared_ptr<yordle::data::meta::ValueFloat> LingerErosionDriveCurve {};
        float erosionFeatherIn = 0.0;
        float erosionFeatherOut = 0.0;
        float erosionSliceWidth = 0.0;
        std::string erosionMapName {};
        std::shared_ptr<yordle::data::meta::ValueColor> erosionMapChannelMixer {};
        uint8_t erosionMapAddressMode = 0;
    };

    class YORDLE_EXPORT VfxPaletteDefinitionData : public bin_class { 
    public:
        explicit VfxPaletteDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2829943575 || bin_class::is_type(type);
        }

        std::string paletteTexture {};
        uint8_t PaletteTextureAddressMode = 0;
        std::shared_ptr<yordle::data::meta::ValueColor> palleteSrcMixColor {};
        std::shared_ptr<yordle::data::meta::ValueVector3> paletteSelector {};
        std::shared_ptr<yordle::data::meta::ValueFloat> x34d8fac6 {};
        std::shared_ptr<yordle::data::meta::ValueFloat> x44fd44cb {};
        int32_t paletteCount = 0;
    };

    class YORDLE_EXPORT VfxReflectionDefinitionData : public bin_class { 
    public:
        explicit VfxReflectionDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1091758723 || bin_class::is_type(type);
        }

        std::string reflectionMapTexture {};
        float reflectionOpacityDirect = 0.0;
        float reflectionOpacityGlancing = 0.0;
        float reflectionFresnel = 0.0;
        std::array<float, 4> reflectionFresnelColor {};
        float fresnel = 0.0;
        std::array<float, 4> fresnelColor {};
    };

    class YORDLE_EXPORT VfxDistortionDefinitionData : public bin_class { 
    public:
        explicit VfxDistortionDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1238702953 || bin_class::is_type(type);
        }

        float distortion = 0.0;
        uint8_t distortionMode = 0;
        std::string normalMapTexture {};
    };

    class YORDLE_EXPORT VfxProjectionDefinitionData : public bin_class { 
    public:
        explicit VfxProjectionDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 259276035 || bin_class::is_type(type);
        }

        float mYRange = 0.0;
        float mFading = 0.0;
    };

    class YORDLE_EXPORT VfxTrailDefinitionData : public bin_class { 
    public:
        explicit VfxTrailDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 12755856 || bin_class::is_type(type);
        }

        uint8_t mMode = 0;
        float mCutoff = 0.0;
        std::shared_ptr<yordle::data::meta::ValueVector3> mBirthTilingSize {};
        uint8_t mSmoothingMode = 0;
        int32_t mMaxAddedPerFrame = 0;
    };

    class YORDLE_EXPORT VfxBeamDefinitionData : public bin_class { 
    public:
        explicit VfxBeamDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 532209417 || bin_class::is_type(type);
        }

        int32_t mSegments = 0;
        std::shared_ptr<yordle::data::meta::ValueVector3> mBirthTilingSize {};
        bool mIsColorBindedWithDistance = false;
        std::shared_ptr<yordle::data::meta::ValueColor> mAnimatedColorWithDistance {};
        std::array<float, 3> mLocalSpaceSourceOffset {};
        std::array<float, 3> mLocalSpaceTargetOffset {};
        uint8_t mTrailMode = 0;
        uint8_t mMode = 0;
    };

    class YORDLE_EXPORT VfxEmissionSurfaceData : public bin_class { 
    public:
        explicit VfxEmissionSurfaceData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3217219891 || bin_class::is_type(type);
        }

        std::string meshName {};
        std::string skeletonName {};
        std::string animationName {};
        float meshScale = 0.0;
        uint16_t maxJointWeights = 0;
        bool useAvatarPose = false;
        bool useSurfaceNormalForBirthPhysics = false;
    };

    class YORDLE_EXPORT VfxMeshDefinitionData : public bin_class { 
    public:
        explicit VfxMeshDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1787328523 || bin_class::is_type(type);
        }

        std::string mSimpleMeshName {};
        std::string mMeshName {};
        std::string mMeshSkeletonName {};
        std::string mAnimationName {};
        std::set<std::string> mAnimationVariants {};
        std::set<uint32_t> mSubmeshesToDraw {};
        std::set<uint32_t> mSubmeshesToDrawAlways {};
        bool mLockMeshToAttachment = false;
    };

    class YORDLE_EXPORT VfxPrimitiveBase : public bin_class { 
    public:
        explicit VfxPrimitiveBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3801322209 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT VfxPrimitiveCameraQuad : public VfxPrimitiveBase { 
    public:
        explicit VfxPrimitiveCameraQuad(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2531114100 || VfxPrimitiveBase::is_type(type);
        }

    };

    class YORDLE_EXPORT VfxPrimitiveArbitraryQuad : public VfxPrimitiveBase { 
    public:
        explicit VfxPrimitiveArbitraryQuad(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1273725437 || VfxPrimitiveBase::is_type(type);
        }

    };

    class YORDLE_EXPORT VfxPrimitiveRay : public VfxPrimitiveBase { 
    public:
        explicit VfxPrimitiveRay(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2706101456 || VfxPrimitiveBase::is_type(type);
        }

    };

    class YORDLE_EXPORT VfxPrimitiveProjectionBase : public VfxPrimitiveBase { 
    public:
        explicit VfxPrimitiveProjectionBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3832843140 || VfxPrimitiveBase::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::VfxProjectionDefinitionData> mProjection {};
    };

    class YORDLE_EXPORT VfxPrimitivePlanarProjection : public VfxPrimitiveProjectionBase { 
    public:
        explicit VfxPrimitivePlanarProjection(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3918814637 || VfxPrimitiveProjectionBase::is_type(type);
        }

    };

    class YORDLE_EXPORT VfxPrimitiveTrailBase : public VfxPrimitiveBase { 
    public:
        explicit VfxPrimitiveTrailBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 562397581 || VfxPrimitiveBase::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::VfxTrailDefinitionData> mTrail {};
    };

    class YORDLE_EXPORT VfxPrimitiveCameraTrail : public VfxPrimitiveTrailBase { 
    public:
        explicit VfxPrimitiveCameraTrail(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 678973881 || VfxPrimitiveTrailBase::is_type(type);
        }

    };

    class YORDLE_EXPORT VfxPrimitiveArbitraryTrail : public VfxPrimitiveTrailBase { 
    public:
        explicit VfxPrimitiveArbitraryTrail(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1459970650 || VfxPrimitiveTrailBase::is_type(type);
        }

    };

    class YORDLE_EXPORT VfxPrimitiveBeamBase : public VfxPrimitiveBase { 
    public:
        explicit VfxPrimitiveBeamBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3713591166 || VfxPrimitiveBase::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::VfxBeamDefinitionData> mBeam {};
    };

    class YORDLE_EXPORT VfxPrimitiveCameraSegmentBeam : public VfxPrimitiveBeamBase { 
    public:
        explicit VfxPrimitiveCameraSegmentBeam(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4048547755 || VfxPrimitiveBeamBase::is_type(type);
        }

    };

    class YORDLE_EXPORT VfxPrimitiveArbitrarySegmentBeam : public VfxPrimitiveBeamBase { 
    public:
        explicit VfxPrimitiveArbitrarySegmentBeam(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 668179872 || VfxPrimitiveBeamBase::is_type(type);
        }

    };

    class YORDLE_EXPORT VfxPrimitiveMeshBase : public VfxPrimitiveBase { 
    public:
        explicit VfxPrimitiveMeshBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4231615076 || VfxPrimitiveBase::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::VfxMeshDefinitionData> mMesh {};
        bool xfbf6793f = false;
        bool xea861daa = false;
    };

    class YORDLE_EXPORT VfxPrimitiveMesh : public VfxPrimitiveMeshBase { 
    public:
        explicit VfxPrimitiveMesh(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2241128505 || VfxPrimitiveMeshBase::is_type(type);
        }

    };

    class YORDLE_EXPORT VfxPrimitiveAttachedMesh : public VfxPrimitiveMeshBase { 
    public:
        explicit VfxPrimitiveAttachedMesh(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2762908325 || VfxPrimitiveMeshBase::is_type(type);
        }

    };

    class YORDLE_EXPORT VfxPrimitiveBeam : public VfxPrimitiveBase { 
    public:
        explicit VfxPrimitiveBeam(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1752512115 || VfxPrimitiveBase::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::VfxMeshDefinitionData> mMesh {};
        std::shared_ptr<yordle::data::meta::VfxBeamDefinitionData> mBeam {};
    };

    class YORDLE_EXPORT VfxFloatOverLifeMaterialDriver : public IVfxMaterialDriver { 
    public:
        explicit VfxFloatOverLifeMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1372839132 || IVfxMaterialDriver::is_type(type);
        }

        uint8_t frequency = 0;
        std::shared_ptr<yordle::data::meta::VfxAnimatedFloatVariableData> graph {};
    };

    class YORDLE_EXPORT VfxSineMaterialDriver : public IVfxMaterialDriver { 
    public:
        explicit VfxSineMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 719276917 || IVfxMaterialDriver::is_type(type);
        }

        float mFrequency = 0.0;
        float mScale = 0.0;
        float mBias = 0.0;
    };

    class YORDLE_EXPORT MapParticle : public MapPlaceable { 
    public:
        explicit MapParticle(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1496250051 || MapPlaceable::is_type(type);
        }

        uint32_t system = 0;
        bool eyeCandy = false;
        bool Transitional = false;
        int32_t quality = 0;
        uint32_t visibilityMode = 0;
        std::array<float, 4> colorModulate {};
        std::string groupName {};
        bool startDisabled = false;
    };

    class YORDLE_EXPORT MapParticleGroups : public bin_class { 
    public:
        explicit MapParticleGroups(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1221817611 || bin_class::is_type(type);
        }

        std::set<std::string> groups {};
    };

    class YORDLE_EXPORT DynamicMaterialParameterDef : public bin_class { 
    public:
        explicit DynamicMaterialParameterDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 121596497 || bin_class::is_type(type);
        }

        std::string name {};
        bool enabled = false;
        std::shared_ptr<yordle::data::meta::bin_class> driver {};
    };

    class YORDLE_EXPORT DynamicMaterialTextureSwapOption : public bin_class { 
    public:
        explicit DynamicMaterialTextureSwapOption(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 567330916 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> driver {};
        std::string textureName {};
    };

    class YORDLE_EXPORT DynamicMaterialTextureSwapDef : public bin_class { 
    public:
        explicit DynamicMaterialTextureSwapDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1303930364 || bin_class::is_type(type);
        }

        std::string name {};
        bool enabled = false;
        std::set<std::shared_ptr<yordle::data::meta::DynamicMaterialTextureSwapOption>> options {};
    };

    class YORDLE_EXPORT DynamicMaterialStaticSwitch : public bin_class { 
    public:
        explicit DynamicMaterialStaticSwitch(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4013554309 || bin_class::is_type(type);
        }

        std::string name {};
        bool enabled = false;
        std::shared_ptr<yordle::data::meta::bin_class> driver {};
    };

    class YORDLE_EXPORT DynamicMaterialDef : public bin_class { 
    public:
        explicit DynamicMaterialDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 762048930 || bin_class::is_type(type);
        }

        bool x5ed2db8d = false;
        std::set<std::shared_ptr<yordle::data::meta::DynamicMaterialParameterDef>> parameters {};
        std::set<std::shared_ptr<yordle::data::meta::DynamicMaterialTextureSwapDef>> textures {};
        std::shared_ptr<yordle::data::meta::DynamicMaterialStaticSwitch> staticSwitch {};
    };

    class YORDLE_EXPORT IDynamicMaterialDriver : public bin_class { 
    public:
        explicit IDynamicMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1009087838 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT IDynamicMaterialFloatDriver : public IDynamicMaterialDriver { 
    public:
        explicit IDynamicMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1090223300 || IDynamicMaterialDriver::is_type(type);
        }

    };

    class YORDLE_EXPORT LerpMaterialDriver : public IDynamicMaterialFloatDriver { 
    public:
        explicit LerpMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3032802403 || IDynamicMaterialFloatDriver::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mBoolDriver {};
        float mOnValue = 0.0;
        float mOffValue = 0.0;
        float mTurnOnTimeSec = 0.0;
        float mTurnOffTimeSec = 0.0;
        bool xa452be9f = false;
    };

    class YORDLE_EXPORT MaxMaterialDriver : public IDynamicMaterialDriver { 
    public:
        explicit MaxMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 414058 || IDynamicMaterialDriver::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IDynamicMaterialDriver>> mDrivers {};
    };

    class YORDLE_EXPORT MinMaterialDriver : public IDynamicMaterialDriver { 
    public:
        explicit MinMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 906481424 || IDynamicMaterialDriver::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IDynamicMaterialDriver>> mDrivers {};
    };

    class YORDLE_EXPORT RemapFloatMaterialDriver : public IDynamicMaterialFloatDriver { 
    public:
        explicit RemapFloatMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2851587231 || IDynamicMaterialFloatDriver::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IDynamicMaterialFloatDriver> mDriver {};
        float mMinValue = 0.0;
        float mMaxValue = 0.0;
        float mOutputMinValue = 0.0;
        float mOutputMaxValue = 0.0;
    };

    class YORDLE_EXPORT SineMaterialDriver : public IDynamicMaterialFloatDriver { 
    public:
        explicit SineMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 824881043 || IDynamicMaterialFloatDriver::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IDynamicMaterialFloatDriver> mDriver {};
        float mFrequency = 0.0;
        float mScale = 0.0;
        float mBias = 0.0;
    };

    class YORDLE_EXPORT SpecificColorMaterialDriver : public IDynamicMaterialDriver { 
    public:
        explicit SpecificColorMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1181419247 || IDynamicMaterialDriver::is_type(type);
        }

        std::array<float, 4> mColor {};
    };

    class YORDLE_EXPORT SwitchMaterialDriverElement : public bin_class { 
    public:
        explicit SwitchMaterialDriverElement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1173409658 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mCondition {};
        std::shared_ptr<yordle::data::meta::IDynamicMaterialDriver> mValue {};
    };

    class YORDLE_EXPORT SwitchMaterialDriver : public IDynamicMaterialDriver { 
    public:
        explicit SwitchMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2878204994 || IDynamicMaterialDriver::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::SwitchMaterialDriverElement>> mElements {};
        std::shared_ptr<yordle::data::meta::IDynamicMaterialDriver> mDefaultValue {};
    };

    class YORDLE_EXPORT BlendingSwitchMaterialDriver : public SwitchMaterialDriver { 
    public:
        explicit BlendingSwitchMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1459861871 || SwitchMaterialDriver::is_type(type);
        }

        float mBlendTime = 0.0;
        std::set<float> mOverrideBlendTimes {};
    };

    class YORDLE_EXPORT TimeMaterialDriver : public IDynamicMaterialFloatDriver { 
    public:
        explicit TimeMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4084077559 || IDynamicMaterialFloatDriver::is_type(type);
        }

    };

    class YORDLE_EXPORT IdMappingEntry : public bin_class { 
    public:
        explicit IdMappingEntry(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 176045846 || bin_class::is_type(type);
        }

        uint16_t ID = 0;
        uint16_t Count = 0;
    };

    class YORDLE_EXPORT HybridMaterialDefPreset : public bin_class { 
    public:
        explicit HybridMaterialDefPreset(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1659255250 || bin_class::is_type(type);
        }

        std::map<std::string, std::string> shaderMacros {};
        bool depthEnable = false;
        bool stencilEnable = false;
        bool blendEnable = false;
        bool cullEnable = false;
        bool xaab4104c = false;
        uint8_t depthCompareFunc = 0;
        uint8_t stencilCompareFunc = 0;
        uint32_t stencilReferenceVal = 0;
        uint32_t stencilMask = 0;
        uint8_t stencilFailOp = 0;
        uint8_t stencilPassDepthFailOp = 0;
        uint8_t stencilPassDepthPassOp = 0;
        uint8_t srcColorBlendFactor = 0;
        uint8_t srcAlphaBlendFactor = 0;
        uint8_t dstColorBlendFactor = 0;
        uint8_t dstAlphaBlendFactor = 0;
        uint8_t blendEquation = 0;
        uint8_t windingToCull = 0;
        uint8_t writeMask = 0;
        float depthOffsetSlope = 0.0;
        float depthOffsetBias = 0.0;
    };

    class YORDLE_EXPORT IMaterialDef : public bin_class { 
    public:
        explicit IMaterialDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3975636772 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT ShaderLogicalParameter : public bin_class { 
    public:
        explicit ShaderLogicalParameter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 346210042 || bin_class::is_type(type);
        }

        std::string name {};
        uint32_t fields = 0;
    };

    class YORDLE_EXPORT ShaderPhysicalParameter : public bin_class { 
    public:
        explicit ShaderPhysicalParameter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2171032536 || bin_class::is_type(type);
        }

        std::string name {};
        std::array<float, 4> data {};
        std::set<std::shared_ptr<yordle::data::meta::ShaderLogicalParameter>> logicalParameters {};
    };

    class YORDLE_EXPORT ShaderStaticSwitch : public bin_class { 
    public:
        explicit ShaderStaticSwitch(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1621267174 || bin_class::is_type(type);
        }

        std::string name {};
        bool onByDefault = false;
    };

    class YORDLE_EXPORT ShaderTexture : public bin_class { 
    public:
        explicit ShaderTexture(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 835838499 || bin_class::is_type(type);
        }

        std::string name {};
        std::string defaultTexturePath {};
    };

    class YORDLE_EXPORT IShaderDef : public bin_class { 
    public:
        explicit IShaderDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 196890972 || bin_class::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::ShaderPhysicalParameter>> parameters {};
        std::set<std::shared_ptr<yordle::data::meta::ShaderStaticSwitch>> staticSwitches {};
        std::set<std::shared_ptr<yordle::data::meta::ShaderTexture>> textures {};
        std::map<std::string, std::string> featureDefines {};
        uint32_t featureMask = 0;
        uint32_t x9bfe7d81 = 0;
    };

    class YORDLE_EXPORT MaterialParameterData : public bin_class { 
    public:
        explicit MaterialParameterData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1407148951 || bin_class::is_type(type);
        }

        uint8_t type = 0;
        std::array<float, 4> DefaultValue {};
    };

    class YORDLE_EXPORT MaterialTextureData : public bin_class { 
    public:
        explicit MaterialTextureData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3791453475 || bin_class::is_type(type);
        }

        std::string defaultTexturePath {};
        uint8_t addressU = 0;
        uint8_t addressV = 0;
        uint8_t addressW = 0;
        uint8_t filterMin = 0;
        uint8_t filterMip = 0;
        uint8_t filterMag = 0;
    };

    class YORDLE_EXPORT MaterialSwitchData : public bin_class { 
    public:
        explicit MaterialSwitchData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1327860340 || bin_class::is_type(type);
        }

        bool on = false;
    };

    class YORDLE_EXPORT MaterialParameterDataCollection : public bin_class { 
    public:
        explicit MaterialParameterDataCollection(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3921803671 || bin_class::is_type(type);
        }

        uint16_t nextID = 0;
        std::map<std::string, std::shared_ptr<yordle::data::meta::IdMappingEntry>> Entries {};
        std::string xea57bf12 {};
        std::map<uint16_t, std::shared_ptr<yordle::data::meta::MaterialParameterData>> data {};
    };

    class YORDLE_EXPORT MaterialTextureDataCollection : public bin_class { 
    public:
        explicit MaterialTextureDataCollection(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1749974331 || bin_class::is_type(type);
        }

        uint16_t nextID = 0;
        std::map<std::string, std::shared_ptr<yordle::data::meta::IdMappingEntry>> Entries {};
        std::string xea57bf12 {};
        std::map<uint16_t, std::shared_ptr<yordle::data::meta::MaterialTextureData>> data {};
    };

    class YORDLE_EXPORT MaterialSwitchDataCollection : public bin_class { 
    public:
        explicit MaterialSwitchDataCollection(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3078356408 || bin_class::is_type(type);
        }

        uint16_t nextID = 0;
        std::map<std::string, std::shared_ptr<yordle::data::meta::IdMappingEntry>> Entries {};
        std::string xea57bf12 {};
        std::map<uint16_t, std::shared_ptr<yordle::data::meta::MaterialSwitchData>> data {};
    };

    class YORDLE_EXPORT MaterialDataCollections : public bin_class { 
    public:
        explicit MaterialDataCollections(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1874373301 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::MaterialParameterDataCollection> ParameterData {};
        std::shared_ptr<yordle::data::meta::MaterialTextureDataCollection> TextureData {};
        std::shared_ptr<yordle::data::meta::MaterialSwitchDataCollection> switchData {};
    };

    class YORDLE_EXPORT MaterialInstanceParamDef : public bin_class { 
    public:
        explicit MaterialInstanceParamDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1496596895 || bin_class::is_type(type);
        }

        std::array<float, 4> value {};
    };

    class YORDLE_EXPORT MaterialInstanceSwitchDef : public bin_class { 
    public:
        explicit MaterialInstanceSwitchDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2719807978 || bin_class::is_type(type);
        }

        bool on = false;
    };

    class YORDLE_EXPORT MaterialInstanceTextureDef : public bin_class { 
    public:
        explicit MaterialInstanceTextureDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1305331905 || bin_class::is_type(type);
        }

        std::string texturePath {};
        std::map<uint32_t, std::string> uncensoredTextures {};
    };

    class YORDLE_EXPORT xf7084b4a : public bin_class { 
    public:
        explicit xf7084b4a(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4144515914 || bin_class::is_type(type);
        }

        std::string name {};
        std::map<std::string, std::string> shaderMacros {};
    };

    class YORDLE_EXPORT MaterialInstanceDynamicParam : public bin_class { 
    public:
        explicit MaterialInstanceDynamicParam(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1964830497 || bin_class::is_type(type);
        }

        bool enabled = false;
        std::shared_ptr<yordle::data::meta::IDynamicMaterialDriver> driver {};
    };

    class YORDLE_EXPORT MaterialInstanceDynamicSwitch : public bin_class { 
    public:
        explicit MaterialInstanceDynamicSwitch(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1171267580 || bin_class::is_type(type);
        }

        bool enabled = false;
        std::shared_ptr<yordle::data::meta::bin_class> driver {};
    };

    class YORDLE_EXPORT MaterialInstanceDynamicTexture : public bin_class { 
    public:
        explicit MaterialInstanceDynamicTexture(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1083476907 || bin_class::is_type(type);
        }

        bool enabled = false;
        std::set<std::shared_ptr<yordle::data::meta::DynamicMaterialTextureSwapOption>> options {};
    };

    class YORDLE_EXPORT StaticMaterialShaderParamDef : public bin_class { 
    public:
        explicit StaticMaterialShaderParamDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3729264367 || bin_class::is_type(type);
        }

        std::string name {};
        std::array<float, 4> value {};
    };

    class YORDLE_EXPORT StaticMaterialSwitchDef : public bin_class { 
    public:
        explicit StaticMaterialSwitchDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 237114017 || bin_class::is_type(type);
        }

        std::string name {};
        bool on = false;
    };

    class YORDLE_EXPORT StaticMaterialShaderSamplerDef : public bin_class { 
    public:
        explicit StaticMaterialShaderSamplerDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 151302480 || bin_class::is_type(type);
        }

        std::string samplerName {};
        std::string textureName {};
        std::map<uint32_t, std::string> uncensoredTextures {};
        uint32_t addressU = 0;
        uint32_t addressV = 0;
        uint32_t addressW = 0;
        uint32_t filterMin = 0;
        uint32_t filterMip = 0;
        uint32_t filterMag = 0;
    };

    class YORDLE_EXPORT StaticMaterialPassDef : public bin_class { 
    public:
        explicit StaticMaterialPassDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2235027650 || bin_class::is_type(type);
        }

        uint32_t shader = 0;
        std::map<std::string, std::string> shaderMacros {};
        std::set<std::shared_ptr<yordle::data::meta::StaticMaterialShaderParamDef>> paramValues {};
        bool depthEnable = false;
        bool stencilEnable = false;
        bool blendEnable = false;
        bool cullEnable = false;
        bool xaab4104c = false;
        uint32_t depthCompareFunc = 0;
        uint32_t stencilCompareFunc = 0;
        uint32_t stencilReferenceVal = 0;
        uint32_t stencilMask = 0;
        uint32_t stencilFailOp = 0;
        uint32_t stencilPassDepthFailOp = 0;
        uint32_t stencilPassDepthPassOp = 0;
        uint32_t srcColorBlendFactor = 0;
        uint32_t srcAlphaBlendFactor = 0;
        uint32_t dstColorBlendFactor = 0;
        uint32_t dstAlphaBlendFactor = 0;
        uint32_t blendEquation = 0;
        uint32_t windingToCull = 0;
        uint32_t writeMask = 0;
        float depthOffsetSlope = 0.0;
        float depthOffsetBias = 0.0;
    };

    class YORDLE_EXPORT StaticMaterialTechniqueDef : public bin_class { 
    public:
        explicit StaticMaterialTechniqueDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 101336083 || bin_class::is_type(type);
        }

        std::string name {};
        std::set<std::shared_ptr<yordle::data::meta::StaticMaterialPassDef>> passes {};
    };

    class YORDLE_EXPORT StaticMaterialChildTechniqueDef : public bin_class { 
    public:
        explicit StaticMaterialChildTechniqueDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1935363221 || bin_class::is_type(type);
        }

        std::string name {};
        std::string parentName {};
        std::map<std::string, std::string> shaderMacros {};
    };

    class YORDLE_EXPORT MapPerInstanceInfo : public bin_class { 
    public:
        explicit MapPerInstanceInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 573833423 || bin_class::is_type(type);
        }

        std::string shadowMapPath {};
        std::array<float, 4> shadowMapUVScaleAndBias {};
    };

    class YORDLE_EXPORT MapBakeProperties : public MapComponent { 
    public:
        explicit MapBakeProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1783247881 || MapComponent::is_type(type);
        }

        uint32_t lightGridSize = 0;
        float x22d24a9a = 0.0;
        float lightGridCharacterFullBrightIntensity = 0.0;
        float xea4e5cc8 = 0.0;
        float x2f3b5471 = 0.0;
        std::string lightGridFileName {};
    };

    class YORDLE_EXPORT MapCloudsLayer : public bin_class { 
    public:
        explicit MapCloudsLayer(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 769601740 || bin_class::is_type(type);
        }

        float scale = 0.0;
        float speed = 0.0;
        std::array<float, 2> direction {};
    };

    class YORDLE_EXPORT MapGraphicsFeature : public MapComponent { 
    public:
        explicit MapGraphicsFeature(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 66354938 || MapComponent::is_type(type);
        }

    };

    class YORDLE_EXPORT MapLightingV2 : public MapGraphicsFeature { 
    public:
        explicit MapLightingV2(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3701691417 || MapGraphicsFeature::is_type(type);
        }

        float xee91017d = 0.0;
        float xc916a9fc = 0.0;
    };

    class YORDLE_EXPORT MapLightingVolume : public MapPlaceable { 
    public:
        explicit MapLightingVolume(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2319232567 || MapPlaceable::is_type(type);
        }

        std::array<float, 4> sunColor {};
        std::array<float, 3> sunDirection {};
        std::optional<std::array<float, 3>> xa04bd9bf {};
        float xd8851203 = 0.0;
        float xba02f116 = 0.0;
        std::array<float, 4> skyLightColor {};
        std::array<float, 4> horizonColor {};
        std::array<float, 4> groundColor {};
        float skyLightScale = 0.0;
        float lightMapColorScale = 0.0;
        bool fogEnabled = false;
        std::array<float, 4> fogColor {};
        std::array<float, 4> fogAlternateColor {};
        std::array<float, 2> fogStartAndEnd {};
        float fogEmissiveRemap = 0.0;
        float fogLowQualityModeEmissiveRemap = 0.0;
    };

    class YORDLE_EXPORT MapPointLight : public MapPlaceable { 
    public:
        explicit MapPointLight(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 36597367 || MapPlaceable::is_type(type);
        }

        uint32_t type = 0;
        float radiusScale = 0.0;
        float intensityScale = 0.0;
        std::optional<bool> overrideCastStaticShadows {};
        std::optional<bool> overrideUseSpecular {};
    };

    class YORDLE_EXPORT MapPointLightType : public bin_class { 
    public:
        explicit MapPointLightType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 668199599 || bin_class::is_type(type);
        }

        std::array<float, 4> lightColor {};
        std::array<float, 4> falloffColor {};
        float radius = 0.0;
        bool castStaticShadows = false;
        bool specular = false;
        int32_t Impact = 0;
    };

    class YORDLE_EXPORT MapSunProperties : public MapComponent { 
    public:
        explicit MapSunProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 379203484 || MapComponent::is_type(type);
        }

        std::array<float, 4> sunColor {};
        std::array<float, 3> sunDirection {};
        std::optional<std::array<float, 3>> xa04bd9bf {};
        float xd8851203 = 0.0;
        float xba02f116 = 0.0;
        std::array<float, 4> skyLightColor {};
        std::array<float, 4> horizonColor {};
        std::array<float, 4> groundColor {};
        float skyLightScale = 0.0;
        float lightMapColorScale = 0.0;
        bool fogEnabled = false;
        std::array<float, 4> fogColor {};
        std::array<float, 4> fogAlternateColor {};
        std::array<float, 2> fogStartAndEnd {};
        float fogEmissiveRemap = 0.0;
        float fogLowQualityModeEmissiveRemap = 0.0;
        bool useBloom = false;
        float surfaceAreaToShadowMapScale = 0.0;
    };

    class YORDLE_EXPORT MapTerrainPaint : public MapGraphicsFeature { 
    public:
        explicit MapTerrainPaint(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3554680230 || MapGraphicsFeature::is_type(type);
        }

        std::string TerrainPaintTexturePath {};
    };

    class YORDLE_EXPORT SHData : public bin_class { 
    public:
        explicit SHData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1813728254 || bin_class::is_type(type);
        }

        std::set<std::array<float, 3>> bandData {};
    };

    class YORDLE_EXPORT SkinMeshDataProperties_MaterialOverride : public bin_class { 
    public:
        explicit SkinMeshDataProperties_MaterialOverride(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2340045716 || bin_class::is_type(type);
        }

        uint32_t material = 0;
        std::string texture {};
        std::string glossTexture {};
        std::string submesh {};
    };

    class YORDLE_EXPORT SkinnedMeshDataMaterialController : public bin_class { 
    public:
        explicit SkinnedMeshDataMaterialController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3460011047 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT SkinMeshDataProperties : public bin_class { 
    public:
        explicit SkinMeshDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1628559524 || bin_class::is_type(type);
        }

        std::string skeleton {};
        std::string simpleSkin {};
        bool xd62df07c = false;
        std::string texture {};
        std::string emissiveTexture {};
        std::string glossTexture {};
        float skinScale = 0.0;
        float selfIllumination = 0.0;
        float brushAlphaOverride = 0.0;
        std::optional<std::array<float, 3>> overrideBoundingBox {};
        uint32_t material = 0;
        float boundingCylinderRadius = 0.0;
        float boundingCylinderHeight = 0.0;
        std::optional<float> boundingSphereRadius {};
        std::array<uint8_t, 4> fresnelColor {};
        float fresnel = 0.0;
        bool usesSkinVO = false;
        bool castShadows = false;
        bool allowCharacterInking = false;
        std::string reflectionMap {};
        float reflectionOpacityDirect = 0.0;
        float reflectionOpacityGlancing = 0.0;
        float reflectionFresnel = 0.0;
        std::array<uint8_t, 4> reflectionFresnelColor {};
        std::string initialSubmeshToHide {};
        std::string initialSubmeshShadowsToHide {};
        std::string initialSubmeshMouseOversToHide {};
        std::string submeshRenderOrder {};
        bool x2543480a = false;
        std::set<std::shared_ptr<yordle::data::meta::SkinMeshDataProperties_MaterialOverride>> materialOverride {};
        std::shared_ptr<yordle::data::meta::SkinnedMeshDataMaterialController> materialController {};
        std::set<std::shared_ptr<yordle::data::meta::BaseRigPoseModifierData>> rigPoseModifierData {};
    };

    class YORDLE_EXPORT IResource : public bin_class { 
    public:
        explicit IResource(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 547453112 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT IResourceResolver : public bin_class { 
    public:
        explicit IResourceResolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3911265650 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT FunctionDefinition : public bin_class { 
    public:
        explicit FunctionDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3984358668 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> Sequence {};
        std::set<uint32_t> InputParameters {};
        std::set<uint32_t> OutputParameters {};
    };

    class YORDLE_EXPORT IScriptBlock : public bin_class { 
    public:
        explicit IScriptBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1009431984 || bin_class::is_type(type);
        }

        bool IsDisabled = false;
    };

    class YORDLE_EXPORT SwitchCase : public bin_class { 
    public:
        explicit SwitchCase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3460129365 || bin_class::is_type(type);
        }

        bool IsDisabled = false;
        std::shared_ptr<yordle::data::meta::bin_class> Condition {};
        std::shared_ptr<yordle::data::meta::bin_class> Sequence {};
    };

    class YORDLE_EXPORT SwitchScriptBlock : public IScriptBlock { 
    public:
        explicit SwitchScriptBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3828703835 || IScriptBlock::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::SwitchCase>> Cases {};
    };

    class YORDLE_EXPORT IScriptCondition : public bin_class { 
    public:
        explicit IScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3324095080 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT TableValueExistsScriptCondition : public IScriptCondition { 
    public:
        explicit TableValueExistsScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1889908488 || IScriptCondition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> TableValue {};
    };

    class YORDLE_EXPORT RandomChanceScriptCondition : public IScriptCondition { 
    public:
        explicit RandomChanceScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4133732978 || IScriptCondition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> Chance {};
    };

    class YORDLE_EXPORT AndScriptCondition : public IScriptCondition { 
    public:
        explicit AndScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1796410142 || IScriptCondition::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IScriptCondition>> Conditions {};
    };

    class YORDLE_EXPORT OrScriptCondition : public IScriptCondition { 
    public:
        explicit OrScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 419340840 || IScriptCondition::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IScriptCondition>> Conditions {};
    };

    class YORDLE_EXPORT NotScriptCondition : public IScriptCondition { 
    public:
        explicit NotScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2824201906 || IScriptCondition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IScriptCondition> Condition {};
    };

    class YORDLE_EXPORT ComparisonScriptCondition : public IScriptCondition { 
    public:
        explicit ComparisonScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 824983528 || IScriptCondition::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> Value1 {};
        uint32_t Operation = 0;
        std::shared_ptr<yordle::data::meta::bin_class> Value2 {};
    };

    class YORDLE_EXPORT RScript : public bin_class { 
    public:
        explicit RScript(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3134806650 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT ScriptTable : public bin_class { 
    public:
        explicit ScriptTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 619916734 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT PassThroughParamsTable : public ScriptTable { 
    public:
        explicit PassThroughParamsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1411410857 || ScriptTable::is_type(type);
        }

    };

    class YORDLE_EXPORT ScriptTableSet : public bin_class { 
    public:
        explicit ScriptTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4139131590 || bin_class::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ScriptTable> Table {};
        uint32_t Var = 0;
    };

    class YORDLE_EXPORT IntTableSet : public ScriptTableSet { 
    public:
        explicit IntTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 663538050 || ScriptTableSet::is_type(type);
        }

    };

    class YORDLE_EXPORT BoolTableSet : public ScriptTableSet { 
    public:
        explicit BoolTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2728914349 || ScriptTableSet::is_type(type);
        }

    };

    class YORDLE_EXPORT FloatTableSet : public ScriptTableSet { 
    public:
        explicit FloatTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3570109893 || ScriptTableSet::is_type(type);
        }

    };

    class YORDLE_EXPORT StringTableSet : public ScriptTableSet { 
    public:
        explicit StringTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3580363220 || ScriptTableSet::is_type(type);
        }

    };

    class YORDLE_EXPORT VectorTableSet : public ScriptTableSet { 
    public:
        explicit VectorTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2465524974 || ScriptTableSet::is_type(type);
        }

    };

    class YORDLE_EXPORT FunctionTableSet : public ScriptTableSet { 
    public:
        explicit FunctionTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1262223041 || ScriptTableSet::is_type(type);
        }

    };

    class YORDLE_EXPORT CustomTableSet : public ScriptTableSet { 
    public:
        explicit CustomTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2864404146 || ScriptTableSet::is_type(type);
        }

    };

    class YORDLE_EXPORT IScriptValueGet : public bin_class { 
    public:
        explicit IScriptValueGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4142338480 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT IStringGet : public IScriptValueGet { 
    public:
        explicit IStringGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1166962967 || IScriptValueGet::is_type(type);
        }

    };

    class YORDLE_EXPORT StringGet : public IStringGet { 
    public:
        explicit StringGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3687170724 || IStringGet::is_type(type);
        }

        std::string value {};
    };

    class YORDLE_EXPORT StringTableGet : public IStringGet { 
    public:
        explicit StringTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4031524872 || IStringGet::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ScriptTable> Table {};
        uint32_t Var = 0;
        std::optional<std::string> Default {};
    };

    class YORDLE_EXPORT IVectorGet : public IScriptValueGet { 
    public:
        explicit IVectorGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3682319469 || IScriptValueGet::is_type(type);
        }

    };

    class YORDLE_EXPORT VectorGet : public IVectorGet { 
    public:
        explicit VectorGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1755899118 || IVectorGet::is_type(type);
        }

        std::array<float, 3> value {};
    };

    class YORDLE_EXPORT VectorTableGet : public IVectorGet { 
    public:
        explicit VectorTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2648244722 || IVectorGet::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ScriptTable> Table {};
        uint32_t Var = 0;
        std::optional<std::array<float, 3>> Default {};
    };

    class YORDLE_EXPORT xd1951f45 : public bin_class { 
    public:
        explicit xd1951f45(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3516211013 || bin_class::is_type(type);
        }

        float transitionTime = 0.0;
        uint8_t EasingType = 0;
        uint8_t startAlpha = 0;
        uint8_t endAlpha = 0;
    };

    class YORDLE_EXPORT x8f1e6a22 : public xd1951f45 { 
    public:
        explicit x8f1e6a22(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2401135138 || xd1951f45::is_type(type);
        }

    };

    class YORDLE_EXPORT x6ce97639 : public xd1951f45 { 
    public:
        explicit x6ce97639(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1827239481 || xd1951f45::is_type(type);
        }

        uint8_t Edge = 0;
    };

    class YORDLE_EXPORT SceneData : public bin_class { 
    public:
        explicit SceneData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2867346523 || bin_class::is_type(type);
        }

        std::string mName {};
        bool mEnabled = false;
        uint32_t mLayer = 0;
        bool mHealthBar = false;
        bool x22413173 = false;
        uint32_t mParentScene = 0;
        std::shared_ptr<yordle::data::meta::xd1951f45> SceneTransitionIn {};
        std::shared_ptr<yordle::data::meta::xd1951f45> SceneTransitionOut {};
        bool xf80397ee = false;
    };

    class YORDLE_EXPORT AnchorBase : public bin_class { 
    public:
        explicit AnchorBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2131369601 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT AnchorSingle : public AnchorBase { 
    public:
        explicit AnchorSingle(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1396238320 || AnchorBase::is_type(type);
        }

        std::array<float, 2> anchor {};
    };

    class YORDLE_EXPORT AnchorDouble : public AnchorBase { 
    public:
        explicit AnchorDouble(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3742500809 || AnchorBase::is_type(type);
        }

        std::array<float, 2> anchorLeft {};
        std::array<float, 2> anchorRight {};
    };

    class YORDLE_EXPORT AtlasDataBase : public bin_class { 
    public:
        explicit AtlasDataBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2069111393 || bin_class::is_type(type);
        }

        std::string mTextureName {};
        uint32_t mTextureSourceResolutionWidth = 0;
        uint32_t mTextureSourceResolutionHeight = 0;
    };

    class YORDLE_EXPORT AtlasData : public AtlasDataBase { 
    public:
        explicit AtlasData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1906252436 || AtlasDataBase::is_type(type);
        }

        std::array<float, 4> mTextureUV {};
    };

    class YORDLE_EXPORT xb5d136db : public AtlasDataBase { 
    public:
        explicit xb5d136db(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3050387163 || AtlasDataBase::is_type(type);
        }

        std::array<float, 4> TextureUs {};
        std::array<float, 2> TextureVs {};
        std::array<float, 2> x1b57cc27 {};
    };

    class YORDLE_EXPORT xa3d11a85 : public AtlasDataBase { 
    public:
        explicit xa3d11a85(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2748390021 || AtlasDataBase::is_type(type);
        }

        std::array<float, 2> TextureUs {};
        std::array<float, 4> TextureVs {};
        std::array<float, 2> x15ec9181 {};
    };

    class YORDLE_EXPORT xab3d1567 : public AtlasDataBase { 
    public:
        explicit xab3d1567(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2872907111 || AtlasDataBase::is_type(type);
        }

        std::array<float, 4> TextureUs {};
        std::array<float, 4> TextureVs {};
        std::array<float, 2> x15ec9181 {};
        std::array<float, 2> x1b57cc27 {};
    };

    class YORDLE_EXPORT x231dd1a2 : public bin_class { 
    public:
        explicit x231dd1a2(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 589156770 || bin_class::is_type(type);
        }

        std::string mName {};
        uint32_t mScene = 0;
    };

    class YORDLE_EXPORT ElementSoundEvents : public bin_class { 
    public:
        explicit ElementSoundEvents(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2222311051 || bin_class::is_type(type);
        }

        std::string RolloverEvent {};
        std::string x210ea29e {};
        std::string MouseDownEvent {};
        std::string x452034c {};
        std::string MouseUpEvent {};
        std::string xb49ca145 {};
    };

    class YORDLE_EXPORT ElementGroupButtonState : public bin_class { 
    public:
        explicit ElementGroupButtonState(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3456684995 || bin_class::is_type(type);
        }

        std::set<uint32_t> displayElements {};
        uint32_t TextElement = 0;
    };

    class YORDLE_EXPORT ElementGroupData : public x231dd1a2 { 
    public:
        explicit ElementGroupData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4099288798 || x231dd1a2::is_type(type);
        }

        std::set<uint32_t> elements {};
    };

    class YORDLE_EXPORT x20d0e681 : public ElementGroupData { 
    public:
        explicit x20d0e681(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 550561409 || ElementGroupData::is_type(type);
        }

        uint32_t x76ef64de = 0;
    };

    class YORDLE_EXPORT ElementGroupGridData : public ElementGroupData { 
    public:
        explicit ElementGroupGridData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 761542854 || ElementGroupData::is_type(type);
        }

        uint32_t GridRegion = 0;
        uint32_t LayoutType = 0;
    };

    class YORDLE_EXPORT xaf7ac937 : public bin_class { 
    public:
        explicit xaf7ac937(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2944059703 || bin_class::is_type(type);
        }

        std::string xd8073196 {};
        std::string x8f1a336d {};
        std::string x73dbef7a {};
    };

    class YORDLE_EXPORT ElementGroupSliderState : public bin_class { 
    public:
        explicit ElementGroupSliderState(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2718727252 || bin_class::is_type(type);
        }

        uint32_t BarBackdrop = 0;
        uint32_t BarFill = 0;
        uint32_t sliderIcon = 0;
    };

    class YORDLE_EXPORT ElementGroupSliderData : public ElementGroupData { 
    public:
        explicit ElementGroupSliderData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 47538795 || ElementGroupData::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ElementGroupSliderState> DefaultState {};
        std::shared_ptr<yordle::data::meta::ElementGroupSliderState> SliderClickedState {};
        std::shared_ptr<yordle::data::meta::ElementGroupSliderState> x5b9cbd0 {};
        std::shared_ptr<yordle::data::meta::ElementGroupSliderState> xb4f0cbde {};
        uint32_t BarHitRegion = 0;
        uint32_t SliderHitRegion = 0;
        uint8_t direction = 0;
        std::shared_ptr<yordle::data::meta::xaf7ac937> soundEvents {};
    };

    class YORDLE_EXPORT IconElementDataExtension : public bin_class { 
    public:
        explicit IconElementDataExtension(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3681459597 || bin_class::is_type(type);
        }

    };

    class YORDLE_EXPORT IconElementGradientExtension : public IconElementDataExtension { 
    public:
        explicit IconElementGradientExtension(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3561233493 || IconElementDataExtension::is_type(type);
        }

        std::array<float, 4> mStartColor {};
        std::array<float, 4> mEndColor {};
        uint32_t mGradientDirection = 0;
        std::array<float, 4> x4dff519d {};
        std::string mAlphaTexture {};
    };

    class YORDLE_EXPORT X3DSharedConstantDef : public bin_class { 
    public:
        explicit X3DSharedConstantDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 19256412 || bin_class::is_type(type);
        }

        std::string name {};
        uint32_t type = 0;
        uint32_t Count = 0;
        int32_t _register = 0;
        bool SetManually = false;
        uint32_t PlatformMask = 0;
    };

    class YORDLE_EXPORT X3DSharedConstantBufferDef : public bin_class { 
    public:
        explicit X3DSharedConstantBufferDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2515485450 || bin_class::is_type(type);
        }

        std::string name {};
        uint32_t type = 0;
        uint32_t frequency = 0;
        std::set<std::shared_ptr<yordle::data::meta::X3DSharedConstantDef>> constants {};
        bool xa87049bc = false;
        int32_t _register = 0;
        uint32_t PlatformMask = 0;
    };

    class YORDLE_EXPORT X3DSharedData : public bin_class { 
    public:
        explicit X3DSharedData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 877304437 || bin_class::is_type(type);
        }

        std::set<uint32_t> xe595dd78 {};
        std::set<std::shared_ptr<yordle::data::meta::bin_class>> textures {};
    };

    class YORDLE_EXPORT X3DSharedTextureDef : public bin_class { 
    public:
        explicit X3DSharedTextureDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 927275163 || bin_class::is_type(type);
        }

        std::string name {};
        uint32_t type = 0;
        int32_t _register = 0;
        uint32_t PlatformMask = 0;
    };

    class YORDLE_EXPORT ContextualActionData : public IResource { 
    public:
        explicit ContextualActionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3476110372 || IResource::is_type(type);
        }

        float mCooldown = 0.0;
        float x9fd838b2 = 0.0;
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::ContextualSituation>> mSituations {};
        std::string mObjectPath {};
    };

    class YORDLE_EXPORT Champion : public WadFileDescriptor { 
    public:
        explicit Champion(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3931724966 || WadFileDescriptor::is_type(type);
        }

        std::string name {};
        std::set<uint32_t> statStoneSets {};
        std::shared_ptr<yordle::data::meta::ChampionItemRecommendations> mChampionItemRecommendations {};
        std::set<uint32_t> additionalCharacters {};
        int8_t fixedLoadScreenPosition = 0;
        uint32_t xc7d8a053 = 0;
    };

    class YORDLE_EXPORT AbilityResourceDynamicMaterialFloatDriver : public IDynamicMaterialFloatDriver { 
    public:
        explicit AbilityResourceDynamicMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3549389049 || IDynamicMaterialFloatDriver::is_type(type);
        }

        uint8_t slot = 0;
    };

    class YORDLE_EXPORT AnimationFractionDynamicMaterialFloatDriver : public IDynamicMaterialFloatDriver { 
    public:
        explicit AnimationFractionDynamicMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2143410291 || IDynamicMaterialFloatDriver::is_type(type);
        }

        uint32_t mAnimationName = 0;
    };

    class YORDLE_EXPORT BuffCounterDynamicMaterialFloatDriver : public IDynamicMaterialFloatDriver { 
    public:
        explicit BuffCounterDynamicMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1465311360 || IDynamicMaterialFloatDriver::is_type(type);
        }

        std::string mScriptName {};
    };

    class YORDLE_EXPORT DistanceToPlayerMaterialFloatDriver : public IDynamicMaterialFloatDriver { 
    public:
        explicit DistanceToPlayerMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2437143893 || IDynamicMaterialFloatDriver::is_type(type);
        }

        float minDistance = 0.0;
        float maxDistance = 0.0;
    };

    class YORDLE_EXPORT x1e6c47fe : public IDynamicMaterialFloatDriver { 
    public:
        explicit x1e6c47fe(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 510412798 || IDynamicMaterialFloatDriver::is_type(type);
        }

        std::string mKeyName {};
    };

    class YORDLE_EXPORT xe856a498 : public IDynamicMaterialFloatDriver { 
    public:
        explicit xe856a498(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3897992344 || IDynamicMaterialFloatDriver::is_type(type);
        }

        std::string mKeyName {};
    };

    class YORDLE_EXPORT HealthDynamicMaterialFloatDriver : public IDynamicMaterialFloatDriver { 
    public:
        explicit HealthDynamicMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3630502631 || IDynamicMaterialFloatDriver::is_type(type);
        }

    };

    class YORDLE_EXPORT x1fbea063 : public IDynamicMaterialDriver { 
    public:
        explicit x1fbea063(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 532586595 || IDynamicMaterialDriver::is_type(type);
        }

    };

    class YORDLE_EXPORT UVScaleBiasFromAnimationDynamicMaterialDriver : public IDynamicMaterialDriver { 
    public:
        explicit UVScaleBiasFromAnimationDynamicMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3997290289 || IDynamicMaterialDriver::is_type(type);
        }

        std::string mSubMeshName {};
        uint32_t xdbad132e = 0;
    };

    class YORDLE_EXPORT VelocityDynamicMaterialFloatDriver : public IDynamicMaterialFloatDriver { 
    public:
        explicit VelocityDynamicMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2561383746 || IDynamicMaterialFloatDriver::is_type(type);
        }

    };

    class YORDLE_EXPORT ParticleWadFileDescriptor : public WadFileDescriptor { 
    public:
        explicit ParticleWadFileDescriptor(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3162079434 || WadFileDescriptor::is_type(type);
        }

    };

    class YORDLE_EXPORT GdsMapObject : public GenericMapPlaceable { 
    public:
        explicit GdsMapObject(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3667811340 || GenericMapPlaceable::is_type(type);
        }

        uint8_t type = 0;
        bool ignoreCollisionOnPlacement = false;
        bool eyeCandy = false;
        std::array<float, 3> boxMin {};
        std::array<float, 3> boxMax {};
        uint32_t mapObjectSkinID = 0;
        std::set<std::shared_ptr<yordle::data::meta::GDSMapObjectExtraInfo>> extraInfo {};
    };

    class YORDLE_EXPORT Map : public WadFileDescriptor { 
    public:
        explicit Map(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3751997361 || WadFileDescriptor::is_type(type);
        }

        std::string mapStringId {};
        uint32_t BasedOnMap = 0;
        std::set<uint32_t> characterLists {};
        uint8_t x6744e6e3 = 0;
        std::shared_ptr<yordle::data::meta::MapVisibilityFlagDefinitions> x9e019715 {};
        std::shared_ptr<yordle::data::meta::MapNavigationGridOverlays> NavigationGridOverlays {};
    };

    class YORDLE_EXPORT MapBehavior : public GenericMapPlaceable { 
    public:
        explicit MapBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1013623483 || GenericMapPlaceable::is_type(type);
        }

        std::string Cue {};
        std::set<std::shared_ptr<yordle::data::meta::MapAction>> Actions {};
    };

    class YORDLE_EXPORT FxActionAnimate : public IFxAction { 
    public:
        explicit FxActionAnimate(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 132387460 || IFxAction::is_type(type);
        }

        std::string animName {};
        std::shared_ptr<yordle::data::meta::FxTarget> TargetObject {};
        bool xee7cd89a = false;
        bool Loop = false;
        bool PauseOnEnd = false;
    };

    class YORDLE_EXPORT x55d03617 : public IFxAction { 
    public:
        explicit x55d03617(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1439708695 || IFxAction::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::FxTransform> position {};
    };

    class YORDLE_EXPORT xda3ab4c4 : public IFxAction { 
    public:
        explicit xda3ab4c4(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3661280452 || IFxAction::is_type(type);
        }

        float Magnitude = 0.0;
        float xc4afd6f9 = 0.0;
        float FalloffRate = 0.0;
        std::array<float, 3> direction {};
    };

    class YORDLE_EXPORT xd082b191 : public IFxAction { 
    public:
        explicit xd082b191(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3498226065 || IFxAction::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::FxTransform> position {};
        float fov = 0.0;
        float yaw = 0.0;
        float pitch = 0.0;
        float x5a439ba5 = 0.0;
        float ZoomInTime = 0.0;
        float ZoomOutTime = 0.0;
        uint8_t ZoomInEase = 0;
        uint8_t ZoomOutEase = 0;
    };

    class YORDLE_EXPORT xa05a9472 : public IFxAction { 
    public:
        explicit xa05a9472(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2690290802 || IFxAction::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::FxTransform> position {};
        float fov = 0.0;
        float yaw = 0.0;
        float pitch = 0.0;
        float x5a439ba5 = 0.0;
        bool follow = false;
        uint8_t ZoomEase = 0;
    };

    class YORDLE_EXPORT x99cce3c : public IFxAction { 
    public:
        explicit x99cce3c(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 161271356 || IFxAction::is_type(type);
        }

        uint8_t ZoomEase = 0;
    };

    class YORDLE_EXPORT FxActionContinue : public IFxAction { 
    public:
        explicit FxActionContinue(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 554443936 || IFxAction::is_type(type);
        }

    };

    class YORDLE_EXPORT FxActionMove : public IFxAction { 
    public:
        explicit FxActionMove(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4118721504 || IFxAction::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::FxTarget> TargetObject {};
        std::shared_ptr<yordle::data::meta::FxTransform> Destination {};
        uint8_t EasingType = 0;
        float OvershootDistance = 0.0;
        bool FaceVelocity = false;
        bool xd935fe42 = false;
    };

    class YORDLE_EXPORT FxActionMoveBase : public IFxAction { 
    public:
        explicit FxActionMoveBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1015511333 || IFxAction::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::FxTarget> TargetObject {};
        uint8_t EasingType = 0;
        float OvershootDistance = 0.0;
        bool FaceVelocity = false;
    };

    class YORDLE_EXPORT FxActionMoveTo : public FxActionMoveBase { 
    public:
        explicit FxActionMoveTo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 145984105 || FxActionMoveBase::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::FxTransform> Destination {};
    };

    class YORDLE_EXPORT FxActionMoveReset : public FxActionMoveBase { 
    public:
        explicit FxActionMoveReset(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1873184927 || FxActionMoveBase::is_type(type);
        }

    };

    class YORDLE_EXPORT FxActionSfx : public IFxAction { 
    public:
        explicit FxActionSfx(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3588503832 || IFxAction::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::FxTransform> position {};
        std::string EventName {};
    };

    class YORDLE_EXPORT FxActionTimeDilate : public IFxAction { 
    public:
        explicit FxActionTimeDilate(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2735193483 || IFxAction::is_type(type);
        }

        float TimeDilation = 0.0;
        float intime = 0.0;
        uint8_t InEase = 0;
        float OutTime = 0.0;
        uint8_t OutEase = 0;
    };

    class YORDLE_EXPORT FxActionVfx : public IFxAction { 
    public:
        explicit FxActionVfx(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4178543843 || IFxAction::is_type(type);
        }

        bool follow = false;
        std::shared_ptr<yordle::data::meta::FxTransform> position {};
        std::shared_ptr<yordle::data::meta::FxTransform> TargetPosition {};
        float scale = 0.0;
        uint32_t Particle = 0;
        float x39d6e480 = 0.0;
        bool FollowPath = false;
        std::shared_ptr<yordle::data::meta::FxTransform> PathTargetPosition {};
        std::shared_ptr<yordle::data::meta::ISplineInfo> SplineInfo {};
    };

    class YORDLE_EXPORT LolSpellScript : public RScript { 
    public:
        explicit LolSpellScript(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1775952673 || RScript::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ScriptGlobalProperties> globalProperties {};
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::bin_class>> sequences {};
        std::map<std::string, std::shared_ptr<yordle::data::meta::bin_class>> CustomSequences {};
        std::shared_ptr<yordle::data::meta::LoLSpellPreloadData> PreloadData {};
    };

    class YORDLE_EXPORT InstanceVarsTable : public ScriptTable { 
    public:
        explicit InstanceVarsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4055000216 || ScriptTable::is_type(type);
        }

    };

    class YORDLE_EXPORT CharacterVarsTable : public ScriptTable { 
    public:
        explicit CharacterVarsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1154861162 || ScriptTable::is_type(type);
        }

    };

    class YORDLE_EXPORT NextBuffVarsTable : public ScriptTable { 
    public:
        explicit NextBuffVarsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 840789541 || ScriptTable::is_type(type);
        }

    };

    class YORDLE_EXPORT WorldVarsTable : public ScriptTable { 
    public:
        explicit WorldVarsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1416785227 || ScriptTable::is_type(type);
        }

    };

    class YORDLE_EXPORT AvatarVarsTable : public ScriptTable { 
    public:
        explicit AvatarVarsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 500954198 || ScriptTable::is_type(type);
        }

    };

    class YORDLE_EXPORT NextSpellVarsTable : public ScriptTable { 
    public:
        explicit NextSpellVarsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2012327816 || ScriptTable::is_type(type);
        }

    };

    class YORDLE_EXPORT TempTable1Table : public ScriptTable { 
    public:
        explicit TempTable1Table(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1745220956 || ScriptTable::is_type(type);
        }

    };

    class YORDLE_EXPORT TempTable2Table : public ScriptTable { 
    public:
        explicit TempTable2Table(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 285936043 || ScriptTable::is_type(type);
        }

    };

    class YORDLE_EXPORT TempTable3Table : public ScriptTable { 
    public:
        explicit TempTable3Table(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1662218770 || ScriptTable::is_type(type);
        }

    };

    class YORDLE_EXPORT TFTItemMaterialController : public SkinnedMeshDataMaterialController { 
    public:
        explicit TFTItemMaterialController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2243645043 || SkinnedMeshDataMaterialController::is_type(type);
        }

    };

    class YORDLE_EXPORT x9e2b8a86 : public ViewController { 
    public:
        explicit x9e2b8a86(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2653653638 || ViewController::is_type(type);
        }

        uint32_t x41aa9616 = 0;
        uint32_t x143e4d96 = 0;
        std::string xeac10e8a {};
        std::string x8b76c33f {};
        std::string x73ce2a6 {};
        std::string x3ad4379e {};
        std::string x8ff1b151 {};
        std::string xf7ee4522 {};
        uint32_t x4babd89d = 0;
        uint32_t xf5b8026a = 0;
        uint32_t xc5c5ca0 = 0;
        std::shared_ptr<yordle::data::meta::x2610e5a7> xf2024d92 {};
        uint32_t Scene = 0;
        uint32_t x9dcf971d = 0;
        float xba1d038c = 0.0;
        uint32_t x75f9cc79 = 0;
    };

    class YORDLE_EXPORT TftGameStartViewController : public ViewController { 
    public:
        explicit TftGameStartViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 334936068 || ViewController::is_type(type);
        }

        uint32_t x81317ee6 = 0;
        uint32_t xfc59b058 = 0;
        uint32_t xf6a44ab6 = 0;
        float x56b85896 = 0.0;
        float x14713b68 = 0.0;
        float x87f66219 = 0.0;
    };

    class YORDLE_EXPORT TftUnitShopViewController : public ViewController { 
    public:
        explicit TftUnitShopViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2934583178 || ViewController::is_type(type);
        }

        uint32_t ToggleShopButton = 0;
        uint32_t LockButton = 0;
        uint32_t BuyExpButton = 0;
        uint32_t RerollButton = 0;
        uint32_t InfoButton = 0;
        uint32_t xa0ae7cfa = 0;
        float xc43a3d1f = 0.0;
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::x2781ed6b>> x2781ed6b {};
    };

    class YORDLE_EXPORT AnnouncementsViewController : public ViewController { 
    public:
        explicit AnnouncementsViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1353487870 || ViewController::is_type(type);
        }

        uint32_t x34b17566 = 0;
    };

    class YORDLE_EXPORT InvalidDeviceViewController : public ViewController { 
    public:
        explicit InvalidDeviceViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1813912031 || ViewController::is_type(type);
        }

    };

    class YORDLE_EXPORT LoginViewController : public ViewController { 
    public:
        explicit LoginViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1830754775 || ViewController::is_type(type);
        }

    };

    class YORDLE_EXPORT PatchingViewController : public ViewController { 
    public:
        explicit PatchingViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 161679594 || ViewController::is_type(type);
        }

        uint32_t BeginPatchingButtonDefinition = 0;
        uint32_t OpenTeamPlannerButtonDefinition = 0;
    };

    class YORDLE_EXPORT SummonerNameCreateViewController : public ViewController { 
    public:
        explicit SummonerNameCreateViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3950575855 || ViewController::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> x2992fe27 {};
        uint32_t SubmitButtonDefinition = 0;
    };

    class YORDLE_EXPORT TftTeamPlannerViewController : public ViewController { 
    public:
        explicit TftTeamPlannerViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3963535729 || ViewController::is_type(type);
        }

        float x6ee3bd2e = 0.0;
        std::shared_ptr<yordle::data::meta::ViewPaneDefinition> ViewPaneDefinition {};
        uint32_t ChampionButtonTemplate = 0;
        uint32_t xa88951d0 = 0;
        uint32_t ActiveTraitButtonTemplate = 0;
        uint32_t PaginateTraitButtonTemplate = 0;
        uint32_t CloseButtonTemplate = 0;
        uint32_t ClearButtonTemplate = 0;
        uint8_t ChampionsPerRow = 0;
        uint8_t TraitsPerRow = 0;
    };

    class YORDLE_EXPORT ChatViewController : public ViewController { 
    public:
        explicit ChatViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2038992222 || ViewController::is_type(type);
        }

        uint8_t defaultWordWrapMargin = 0;
        float hideAfterSeconds = 0.0;
        std::shared_ptr<yordle::data::meta::ViewPaneDefinition> ViewPaneDefinition {};
        uint32_t SceneChat = 0;
        uint32_t x8284ebb3 = 0;
        uint32_t xbc8c4eed = 0;
    };

    class YORDLE_EXPORT VfxProbabilityTableDataGrande : public ViewController { 
    public:
        explicit VfxProbabilityTableDataGrande(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2261862267 || ViewController::is_type(type);
        }

        uint32_t Scene = 0;
        uint32_t Backdrop = 0;
        float authoredWidth = 0.0;
        float SourceResolutionWidth = 0.0;
    };

    class YORDLE_EXPORT x75259ad3 : public ViewController { 
    public:
        explicit x75259ad3(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1965398739 || ViewController::is_type(type);
        }

        uint32_t CloseButtonDefinition = 0;
        uint32_t ConfirmButtonDefinition = 0;
        uint32_t CancelButtonDefinition = 0;
        uint32_t ContentScene = 0;
        std::shared_ptr<yordle::data::meta::ViewPaneDefinition> ViewPaneDefinition {};
    };

    class YORDLE_EXPORT ItemShopViewController : public ViewController { 
    public:
        explicit ItemShopViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3842081615 || ViewController::is_type(type);
        }

        float MaximumShopScale = 0.0;
        float MinimumShopScale = 0.0;
        uint32_t DragRegion = 0;
        uint32_t ResizeDragRegion = 0;
    };

    class YORDLE_EXPORT xe0e70cfc : public ViewController { 
    public:
        explicit xe0e70cfc(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3773238524 || ViewController::is_type(type);
        }

    };

    class YORDLE_EXPORT x4e4bbc2b : public ViewController { 
    public:
        explicit x4e4bbc2b(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1313586219 || ViewController::is_type(type);
        }

    };

    class YORDLE_EXPORT NavHeaderViewController : public ViewController { 
    public:
        explicit NavHeaderViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2972878046 || ViewController::is_type(type);
        }

        uint32_t backButton = 0;
        uint32_t socialButton = 0;
        uint32_t notificationsButton = 0;
        uint32_t settingsButton = 0;
        uint32_t MissionsButton = 0;
        uint32_t StarShardsButton = 0;
        uint32_t x93a118fb = 0;
        uint32_t x7b8e8695 = 0;
    };

    class YORDLE_EXPORT OptionsViewController : public ViewController { 
    public:
        explicit OptionsViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3154693744 || ViewController::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ViewPaneDefinition> ViewPaneDefinition {};
        uint32_t CloseButtonDefinition = 0;
        uint32_t TabButtonDefinition = 0;
        uint32_t Button1Definition = 0;
        uint32_t Button2Definition = 0;
        std::set<uint32_t> Tabs {};
        uint32_t x5a46f90c = 0;
        uint32_t LastItemPadding = 0;
    };

    class YORDLE_EXPORT PostGameViewController : public ViewController { 
    public:
        explicit PostGameViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3721213560 || ViewController::is_type(type);
        }

        uint32_t PlayAgainButtonDefinition = 0;
        uint32_t QuitButtonDefinition = 0;
        std::set<std::shared_ptr<yordle::data::meta::NamedIconData>> RankIconData {};
        uint32_t RankText = 0;
        uint32_t CurrentExpText = 0;
        uint32_t GainedExpText = 0;
        uint32_t LostExpText = 0;
        uint32_t PlacementTextRight = 0;
        uint32_t ProvisionalTextRight = 0;
        uint32_t BackgroundTexture = 0;
        uint32_t CurrentPlayerHighlight = 0;
        uint32_t GainedRatingText = 0;
        uint32_t LostRatingText = 0;
        uint32_t CurrentRatingText = 0;
        uint32_t x1abf4b19 = 0;
        std::set<std::shared_ptr<yordle::data::meta::NamedIconData>> RatedIconData {};
        uint32_t x8ecd9248 = 0;
    };

    class YORDLE_EXPORT CelebrationViewController : public ViewController { 
    public:
        explicit CelebrationViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2069136914 || ViewController::is_type(type);
        }

        float x615c3c29 = 0.0;
        std::string x4fe75004 {};
        std::map<std::string, std::string> xc4ecb642 {};
    };

    class YORDLE_EXPORT HomeViewController : public ViewController { 
    public:
        explicit HomeViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2222497939 || ViewController::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::ModeSelectButtonData>> ModeSelectCustomButtonData {};
        uint32_t ModeSelectDefaultButtonData = 0;
        uint32_t PlayGameButtonDefinition = 0;
        uint32_t BattlepassButtonDefinition = 0;
        uint32_t StoreButtonDefinition = 0;
        uint32_t TeamPlannerButtonDefinition = 0;
        uint32_t SpecialOfferButtonDefinition = 0;
        std::shared_ptr<yordle::data::meta::xfbd72d16> SpecialOfferController {};
        std::string ThemeMusicStateGroup {};
        std::string ThemeMusicState {};
        float xdc1d621e = 0.0;
        uint8_t x86a69e37 = 0;
    };

    class YORDLE_EXPORT LoadoutSelectViewController : public ViewController { 
    public:
        explicit LoadoutSelectViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2838012998 || ViewController::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::ILoadoutFeatureDataBehavior>> LoadoutsButtonData {};
    };

    class YORDLE_EXPORT LoadoutViewController : public ViewController { 
    public:
        explicit LoadoutViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 11657974 || ViewController::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> CompanionInfoPanel {};
        std::shared_ptr<yordle::data::meta::bin_class> ArenaInfoPanel {};
        std::shared_ptr<yordle::data::meta::bin_class> EmoteInfoPanel {};
        std::shared_ptr<yordle::data::meta::bin_class> DamageSkinInfoPanel {};
        uint32_t equipButton = 0;
        uint32_t gridItemButton = 0;
        uint32_t closeButton = 0;
        uint32_t upgradeButton = 0;
        uint32_t x91672418 = 0;
        uint32_t xd1abeb9d = 0;
        std::string SoundOnActivate {};
        std::string SoundOnDeActivate {};
    };

    class YORDLE_EXPORT LobbyViewController : public ViewController { 
    public:
        explicit LobbyViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 144791174 || ViewController::is_type(type);
        }

        uint32_t ReadyCheckAcceptButton = 0;
        uint32_t ReadyCheckDeclineButton = 0;
        uint32_t xd5989aae = 0;
        uint32_t LobbyCloseButton = 0;
        uint32_t FriendInviteButton = 0;
        uint32_t FriendEditButton = 0;
        uint32_t loadoutsButton = 0;
        std::string ThemeMusicStateGroup {};
        std::string LobbyMusicState {};
        std::string InQueueMusicState {};
        std::string x1a361782 {};
        std::map<int64_t, std::string> xbd29d956 {};
        std::string xa38f5021 {};
        std::string x72c4914b {};
        std::string xbf51f61a {};
        uint32_t x671c34c8 = 0;
        uint32_t xb3e2f60e = 0;
    };

    class YORDLE_EXPORT LootTableDialogViewController : public x75259ad3 { 
    public:
        explicit LootTableDialogViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1013446472 || x75259ad3::is_type(type);
        }

    };

    class YORDLE_EXPORT MissionsPanelViewController : public ViewController { 
    public:
        explicit MissionsPanelViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 162987137 || ViewController::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ViewPaneDefinition> ViewPaneDefinition {};
        float xfa7c8443 = 0.0;
        uint8_t xec740d9e = 0;
    };

    class YORDLE_EXPORT ModeSelectViewController : public ViewController { 
    public:
        explicit ModeSelectViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2036227663 || ViewController::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::QueueDisplayData>> queueDisplayData {};
        uint32_t x9e4be5ed = 0;
        uint32_t PageLeftButtonDefinition = 0;
        uint32_t PageRightButtonDefinition = 0;
        std::string SoundOnActivate {};
        std::string SoundOnDeActivate {};
        std::set<uint32_t> x71378d8b {};
    };

    class YORDLE_EXPORT NotificationsPanelViewController : public ViewController { 
    public:
        explicit NotificationsPanelViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 379849898 || ViewController::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ViewPaneDefinition> ViewPaneDefinition {};
        uint32_t ClearAllButtonDefinition = 0;
    };

    class YORDLE_EXPORT PurchaseDialog : public x75259ad3 { 
    public:
        explicit PurchaseDialog(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3947823298 || x75259ad3::is_type(type);
        }

        uint32_t purchaseButton = 0;
        uint32_t moreInfoButton = 0;
        uint32_t x88f6a038 = 0;
    };

    class YORDLE_EXPORT x39bbca88 : public x75259ad3 { 
    public:
        explicit x39bbca88(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 968608392 || x75259ad3::is_type(type);
        }

        uint32_t ActionButtonDefinition = 0;
    };

    class YORDLE_EXPORT SocialPanelViewController : public ViewController { 
    public:
        explicit SocialPanelViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4191775141 || ViewController::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ViewPaneDefinition> ViewPaneDefinition {};
        uint32_t AddFriendButtonDefinition = 0;
        uint32_t InviteButtonDefinition = 0;
        uint32_t FriendButtonDefinition = 0;
    };

    class YORDLE_EXPORT StoreViewController : public ViewController { 
    public:
        explicit StoreViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1146372659 || ViewController::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ViewPaneDefinition> MainViewPaneDefinition {};
        uint32_t x9eae8cc2 = 0;
        uint32_t xd2cc0cdf = 0;
        std::set<std::shared_ptr<yordle::data::meta::StoreCategoryButtonDefinition>> StoreCategoryButtonDefinitions {};
    };

    class YORDLE_EXPORT TFTBattlepassViewController : public ViewController { 
    public:
        explicit TFTBattlepassViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3603985163 || ViewController::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ViewPaneDefinition> ViewPaneDefinition {};
        uint32_t upgradePassButton = 0;
        uint32_t lootTableButton = 0;
        float xc034af02 = 0.0;
        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> x650b36b5 {};
        uint32_t x56f22512 = 0;
    };

    class YORDLE_EXPORT LoadoutArenaSkinInfoPanel : public ILoadoutInfoPanel { 
    public:
        explicit LoadoutArenaSkinInfoPanel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2807723955 || ILoadoutInfoPanel::is_type(type);
        }

    };

    class YORDLE_EXPORT LoadoutCompanionInfoPanel : public ILoadoutInfoPanel { 
    public:
        explicit LoadoutCompanionInfoPanel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 172106287 || ILoadoutInfoPanel::is_type(type);
        }

        std::set<uint32_t> tierButton {};
        std::set<uint32_t> upgradeTierButton {};
        uint32_t upgradeInfoText = 0;
        uint32_t upgradeErrorText = 0;
        uint32_t x6a5635f2 = 0;
        uint32_t x90dd73ef = 0;
    };

    class YORDLE_EXPORT LoadoutDamageSkinInfoPanel : public ILoadoutInfoPanel { 
    public:
        explicit LoadoutDamageSkinInfoPanel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 845574667 || ILoadoutInfoPanel::is_type(type);
        }

        std::set<uint32_t> tierButton {};
    };

    class YORDLE_EXPORT LoadoutEmoteInfoPanel : public ILoadoutInfoPanel { 
    public:
        explicit LoadoutEmoteInfoPanel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4100634241 || ILoadoutInfoPanel::is_type(type);
        }

        uint32_t EmoteWheelUpperButton = 0;
        uint32_t EmoteWheelLeftButton = 0;
        uint32_t EmoteWheelLowerButton = 0;
        uint32_t EmoteWheelRightButton = 0;
        uint32_t EmoteWheelCenterButton = 0;
        uint32_t emoteStartButton = 0;
        uint32_t emoteVictoryButton = 0;
    };

    class YORDLE_EXPORT x759a8c58 : public x75259ad3 { 
    public:
        explicit x759a8c58(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1973062744 || x75259ad3::is_type(type);
        }

        uint32_t upgradeText = 0;
        uint32_t errorText = 0;
        uint32_t ItemIcon = 0;
        uint32_t ItemFrame = 0;
        uint32_t RarityFrameCommon = 0;
        uint32_t RarityFrameEpic = 0;
        uint32_t RarityFrameLegendary = 0;
        uint32_t xda8bcd33 = 0;
        uint32_t x41ed38a6 = 0;
    };

    class YORDLE_EXPORT QuestTrackerViewController : public ViewController { 
    public:
        explicit QuestTrackerViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1257187638 || ViewController::is_type(type);
        }

        uint32_t x62eab0b = 0;
        std::shared_ptr<yordle::data::meta::HudMessageDisplayData> MessageDisplayData {};
        float xdba6febb = 0.0;
        float x18bae045 = 0.0;
        float x9fa3719e = 0.0;
        float x28f5e138 = 0.0;
        float xa0ae36a8 = 0.0;
        float xc67a95a4 = 0.0;
    };

    class YORDLE_EXPORT xe20be0be : public ViewController { 
    public:
        explicit xe20be0be(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3792429246 || ViewController::is_type(type);
        }

    };

    class YORDLE_EXPORT SettingsViewController : public ViewController { 
    public:
        explicit SettingsViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 172306941 || ViewController::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::GeneralSettingsGroup> GeneralSettings {};
        uint32_t closeButton = 0;
        uint32_t tabButton = 0;
        std::string SoundOnActivate {};
        std::string SoundOnDeActivate {};
    };

    class YORDLE_EXPORT TooltipInstanceSpell : public TooltipInstance { 
    public:
        explicit TooltipInstanceSpell(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2766224215 || TooltipInstance::is_type(type);
        }

        bool EnableExtendedTooltip = false;
    };

    class YORDLE_EXPORT TooltipInstanceBuff : public TooltipInstance { 
    public:
        explicit TooltipInstanceBuff(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1588263926 || TooltipInstance::is_type(type);
        }

        bool mEnableExtendedTooltip = false;
    };

    class YORDLE_EXPORT TooltipInstanceItem : public TooltipInstance { 
    public:
        explicit TooltipInstanceItem(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 905298284 || TooltipInstance::is_type(type);
        }

    };

    class YORDLE_EXPORT TooltipViewController : public ViewController { 
    public:
        explicit TooltipViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3013700229 || ViewController::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::x9e5aed77> DefaultAdjustments {};
        std::map<std::string, std::shared_ptr<yordle::data::meta::x9e5aed77>> xf5fc1d3a {};
        float x9e2fcad4 = 0.0;
        float x750ad235 = 0.0;
    };

    class YORDLE_EXPORT EsportsBannerMaterialController : public SkinnedMeshDataMaterialController { 
    public:
        explicit EsportsBannerMaterialController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4231349552 || SkinnedMeshDataMaterialController::is_type(type);
        }

    };

    class YORDLE_EXPORT BlendableClipData : public ClipBaseData { 
    public:
        explicit BlendableClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1348327734 || ClipBaseData::is_type(type);
        }

        uint32_t mMaskDataName = 0;
        uint32_t mTrackDataName = 0;
        uint32_t mSyncGroupDataName = 0;
        std::map<uint32_t, std::shared_ptr<yordle::data::meta::BaseEventData>> mEventDataMap {};
    };

    class YORDLE_EXPORT ConditionBoolClipData : public ClipBaseData { 
    public:
        explicit ConditionBoolClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 358669516 || ClipBaseData::is_type(type);
        }

        uint32_t mUpdaterType = 0;
        bool mChangeAnimationMidPlay = false;
        bool x31db4e6a = false;
        bool x92213dee = false;
        uint32_t mTrueConditionClipName = 0;
        uint32_t mFalseConditionClipName = 0;
        float mChildAnimDelaySwitchTime = 0.0;
    };

    class YORDLE_EXPORT ConditionFloatClipData : public ClipBaseData { 
    public:
        explicit ConditionFloatClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2394679778 || ClipBaseData::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::ConditionFloatPairData>> mConditionFloatPairDataList {};
        uint32_t mUpdaterType = 0;
        bool mChangeAnimationMidPlay = false;
        bool x31db4e6a = false;
        bool x92213dee = false;
        float mChildAnimDelaySwitchTime = 0.0;
    };

    class YORDLE_EXPORT ParallelClipData : public ClipBaseData { 
    public:
        explicit ParallelClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 559985644 || ClipBaseData::is_type(type);
        }

        std::set<uint32_t> mClipNameList {};
    };

    class YORDLE_EXPORT ParametricClipData : public BlendableClipData { 
    public:
        explicit ParametricClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4071811009 || BlendableClipData::is_type(type);
        }

        uint32_t mUpdaterType = 0;
        std::set<std::shared_ptr<yordle::data::meta::ParametricPairData>> mParametricPairDataList {};
    };

    class YORDLE_EXPORT SelectorClipData : public ClipBaseData { 
    public:
        explicit SelectorClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1240774858 || ClipBaseData::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::SelectorPairData>> mSelectorPairDataList {};
    };

    class YORDLE_EXPORT SequencerClipData : public ClipBaseData { 
    public:
        explicit SequencerClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2368776128 || ClipBaseData::is_type(type);
        }

        std::set<uint32_t> mClipNameList {};
    };

    class YORDLE_EXPORT LinearTransformProcessorData : public ValueProcessorData { 
    public:
        explicit LinearTransformProcessorData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1133034384 || ValueProcessorData::is_type(type);
        }

        float mMultiplier = 0.0;
        float mIncrement = 0.0;
    };

    class YORDLE_EXPORT xc0c056f1 : public GenericMapPlaceable { 
    public:
        explicit xc0c056f1(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3233830641 || GenericMapPlaceable::is_type(type);
        }

        std::string PropName {};
        bool PlayIdleAnimation = false;
        std::string IdleAnimationName {};
        bool eyeCandy = false;
        uint32_t SkinID = 0;
        int32_t quality = 0;
        bool isClickable = false;
    };

    class YORDLE_EXPORT MapAudio : public GenericMapPlaceable { 
    public:
        explicit MapAudio(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2810433493 || GenericMapPlaceable::is_type(type);
        }

        std::string EventName {};
        uint32_t AudioType = 0;
        float startTime = 0.0;
        float xdf1b8a47 = 0.0;
        float x518f49b9 = 0.0;
    };

    class YORDLE_EXPORT MapCamera : public MapPlaceable { 
    public:
        explicit MapCamera(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1316167258 || MapPlaceable::is_type(type);
        }

        float x6f3e4327 = 0.0;
        float x563a1941 = 0.0;
        float pitch = 0.0;
        float yaw = 0.0;
        float FieldOfView = 0.0;
    };

    class YORDLE_EXPORT MapLocator : public GenericMapPlaceable { 
    public:
        explicit MapLocator(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2823085921 || GenericMapPlaceable::is_type(type);
        }

    };

    class YORDLE_EXPORT MapMotionPath : public MapPlaceable { 
    public:
        explicit MapMotionPath(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2059187804 || MapPlaceable::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::MapPathSegment>> Segments {};
    };

    class YORDLE_EXPORT ColorGraphMaterialDriver : public IDynamicMaterialDriver { 
    public:
        explicit ColorGraphMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 235706735 || IDynamicMaterialDriver::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IDynamicMaterialFloatDriver> driver {};
        std::shared_ptr<yordle::data::meta::VfxAnimatedColorVariableData> colors {};
    };

    class YORDLE_EXPORT FloatGraphMaterialDriver : public IDynamicMaterialDriver { 
    public:
        explicit FloatGraphMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3495696672 || IDynamicMaterialDriver::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IDynamicMaterialFloatDriver> driver {};
        std::shared_ptr<yordle::data::meta::VfxAnimatedFloatVariableData> graph {};
    };

    class YORDLE_EXPORT VfxSystemDefinitionData : public IResource { 
    public:
        explicit VfxSystemDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1171098015 || IResource::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::VfxMaterialOverrideDefinitionData>> materialOverrideDefinitions {};
        std::set<std::shared_ptr<yordle::data::meta::VfxEmitterDefinitionData>> complexEmitterDefinitionData {};
        std::set<std::shared_ptr<yordle::data::meta::VfxEmitterDefinitionData>> simpleEmitterDefinitionData {};
        float visibilityRadius = 0.0;
        std::string particleName {};
        std::string particlePath {};
        std::optional<float> overrideScaleCap {};
        std::string soundOnCreateDefault {};
        std::string voiceOverOnCreateDefault {};
        std::string soundPersistentDefault {};
        std::string voiceOverPersistentDefault {};
        std::string assetCategory {};
        int32_t audioParameterFlexID = 0;
        float audioParameterTimeScaledDuration = 0.0;
        uint8_t flags = 0;
        float buildUpTime = 0.0;
        float selfIllumination = 0.0;
        std::set<std::shared_ptr<yordle::data::meta::VfxAssetRemap>> assetRemappingTable {};
        std::array<float, 3> systemTranslation {};
        std::array<float, 3> systemScale {};
        uint8_t drawingLayer = 0;
        float hudLayerDimension = 0.0;
        float HudLayerAspect = 0.0;
        bool hudAnchorPositionFromWorldProjection = false;
        bool scaleDynamicallyWithAttachedBone = false;
        bool mEyeCandy = false;
        bool xcf08f8e6 = false;
    };

    class YORDLE_EXPORT ColorChooserMaterialDriver : public IDynamicMaterialDriver { 
    public:
        explicit ColorChooserMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1258254170 || IDynamicMaterialDriver::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> mBoolDriver {};
        std::array<float, 4> mColorOn {};
        std::array<float, 4> mColorOff {};
    };

    class YORDLE_EXPORT FloatLiteralMaterialDriver : public IDynamicMaterialFloatDriver { 
    public:
        explicit FloatLiteralMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1895822007 || IDynamicMaterialFloatDriver::is_type(type);
        }

        float mValue = 0.0;
    };

    class YORDLE_EXPORT FloorFloatMaterialDriver : public IDynamicMaterialFloatDriver { 
    public:
        explicit FloorFloatMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2417503366 || IDynamicMaterialFloatDriver::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IDynamicMaterialFloatDriver> mDriver {};
    };

    class YORDLE_EXPORT IDynamicMaterialBoolDriver : public IDynamicMaterialFloatDriver { 
    public:
        explicit IDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3663840478 || IDynamicMaterialFloatDriver::is_type(type);
        }

    };

    class YORDLE_EXPORT AllTrueMaterialDriver : public IDynamicMaterialBoolDriver { 
    public:
        explicit AllTrueMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2452878935 || IDynamicMaterialBoolDriver::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IDynamicMaterialBoolDriver>> mDrivers {};
    };

    class YORDLE_EXPORT OneTrueMaterialDriver : public IDynamicMaterialBoolDriver { 
    public:
        explicit OneTrueMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3364456740 || IDynamicMaterialBoolDriver::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IDynamicMaterialBoolDriver>> mDrivers {};
    };

    class YORDLE_EXPORT NotMaterialDriver : public IDynamicMaterialBoolDriver { 
    public:
        explicit NotMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3584469797 || IDynamicMaterialBoolDriver::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IDynamicMaterialBoolDriver> mDriver {};
    };

    class YORDLE_EXPORT CustomShaderDef : public IShaderDef { 
    public:
        explicit CustomShaderDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 542266838 || IShaderDef::is_type(type);
        }

        std::string objectPath {};
    };

    class YORDLE_EXPORT FixedShaderDef : public IShaderDef { 
    public:
        explicit FixedShaderDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4078053219 || IShaderDef::is_type(type);
        }

        std::string vertexShader {};
        std::string pixelShader {};
    };

    class YORDLE_EXPORT HybridMaterialDef : public CustomShaderDef { 
    public:
        explicit HybridMaterialDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3114171249 || CustomShaderDef::is_type(type);
        }

        std::string name {};
        uint32_t type = 0;
        uint32_t preset = 0;
        std::map<std::string, std::string> shaderMacros {};
        std::shared_ptr<yordle::data::meta::MaterialDataCollections> DataCollections {};
    };

    class YORDLE_EXPORT MaterialInstanceDef : public IResource { 
    public:
        explicit MaterialInstanceDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3883795674 || IResource::is_type(type);
        }

        std::string name {};
        uint32_t BaseMaterial = 0;
        std::set<std::shared_ptr<yordle::data::meta::xf7084b4a>> childTechniques {};
        std::map<std::string, std::string> shaderMacros {};
        std::map<uint16_t, std::shared_ptr<yordle::data::meta::MaterialInstanceParamDef>> params {};
        std::map<uint16_t, std::shared_ptr<yordle::data::meta::MaterialInstanceTextureDef>> textures {};
        std::map<uint16_t, std::shared_ptr<yordle::data::meta::MaterialInstanceSwitchDef>> switches {};
        std::map<uint16_t, std::shared_ptr<yordle::data::meta::MaterialInstanceDynamicParam>> DynamicParams {};
        std::map<uint16_t, std::shared_ptr<yordle::data::meta::MaterialInstanceDynamicTexture>> DynamicTextures {};
        std::shared_ptr<yordle::data::meta::MaterialInstanceDynamicSwitch> DynamicSwitch {};
        uint16_t DynamicSwitchId = 0;
    };

    class YORDLE_EXPORT StaticMaterialDef : public IResource { 
    public:
        explicit StaticMaterialDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4288492553 || IResource::is_type(type);
        }

        std::string name {};
        uint32_t type = 0;
        std::string defaultTechnique {};
        std::set<std::shared_ptr<yordle::data::meta::StaticMaterialShaderSamplerDef>> samplerValues {};
        std::set<std::shared_ptr<yordle::data::meta::StaticMaterialShaderParamDef>> paramValues {};
        std::set<std::shared_ptr<yordle::data::meta::StaticMaterialSwitchDef>> switches {};
        std::map<std::string, std::string> shaderMacros {};
        std::set<std::shared_ptr<yordle::data::meta::StaticMaterialTechniqueDef>> techniques {};
        std::set<std::shared_ptr<yordle::data::meta::StaticMaterialChildTechniqueDef>> childTechniques {};
        std::shared_ptr<yordle::data::meta::DynamicMaterialDef> dynamicMaterial {};
    };

    class YORDLE_EXPORT MapClouds : public MapGraphicsFeature { 
    public:
        explicit MapClouds(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1572954563 || MapGraphicsFeature::is_type(type);
        }

        std::string CloudsTexturePath {};
        std::array<float, 4> x64847953 {};
        std::set<std::shared_ptr<yordle::data::meta::MapCloudsLayer>> Layers {};
        bool IsEyeCandy = false;
    };

    class YORDLE_EXPORT BaseResourceResolver : public IResourceResolver { 
    public:
        explicit BaseResourceResolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1923179998 || IResourceResolver::is_type(type);
        }

        std::map<uint32_t, uint32_t> resourceMap {};
    };

    class YORDLE_EXPORT GlobalResourceResolver : public BaseResourceResolver { 
    public:
        explicit GlobalResourceResolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 199624956 || BaseResourceResolver::is_type(type);
        }

    };

    class YORDLE_EXPORT ResourceResolver : public BaseResourceResolver { 
    public:
        explicit ResourceResolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4013559603 || BaseResourceResolver::is_type(type);
        }

    };

    class YORDLE_EXPORT SetVarInTableBlock : public IScriptBlock { 
    public:
        explicit SetVarInTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3160901390 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IScriptValueGet> value {};
        std::shared_ptr<yordle::data::meta::ScriptTableSet> Dest {};
    };

    class YORDLE_EXPORT ScriptCommentBlock : public IScriptBlock { 
    public:
        explicit ScriptCommentBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 720031464 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> Sequence {};
    };

    class YORDLE_EXPORT ConcatenateStringsBlock : public IScriptBlock { 
    public:
        explicit ConcatenateStringsBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3143453189 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IStringGet> String1 {};
        std::shared_ptr<yordle::data::meta::IStringGet> String2 {};
        std::shared_ptr<yordle::data::meta::StringTableSet> Result {};
    };

    class YORDLE_EXPORT CreateCustomTableBlock : public IScriptBlock { 
    public:
        explicit CreateCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3938181471 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::CustomTableSet> CustomTable {};
    };

    class YORDLE_EXPORT DestroyCustomTableBlock : public IScriptBlock { 
    public:
        explicit DestroyCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3424357223 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::CustomTableSet> CustomTable {};
    };

    class YORDLE_EXPORT SetKeyValueInCustomTableBlock : public IScriptBlock { 
    public:
        explicit SetKeyValueInCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2263334442 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> CustomTable {};
        std::shared_ptr<yordle::data::meta::IScriptValueGet> Key {};
        std::shared_ptr<yordle::data::meta::IScriptValueGet> value {};
    };

    class YORDLE_EXPORT GetKeyValueInCustomTableBlock : public IScriptBlock { 
    public:
        explicit GetKeyValueInCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1569214838 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> CustomTable {};
        std::shared_ptr<yordle::data::meta::IScriptValueGet> Key {};
        std::shared_ptr<yordle::data::meta::ScriptTableSet> OutValue {};
    };

    class YORDLE_EXPORT InsertIntoCustomTableBlock : public IScriptBlock { 
    public:
        explicit InsertIntoCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3439760492 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> CustomTable {};
        std::shared_ptr<yordle::data::meta::bin_class> Index {};
        std::shared_ptr<yordle::data::meta::IScriptValueGet> value {};
        std::shared_ptr<yordle::data::meta::IntTableSet> OutIndex {};
    };

    class YORDLE_EXPORT RemoveFromCustomTableBlock : public IScriptBlock { 
    public:
        explicit RemoveFromCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2835506159 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> CustomTable {};
        std::shared_ptr<yordle::data::meta::IScriptValueGet> Key {};
        std::shared_ptr<yordle::data::meta::bin_class> Index {};
    };

    class YORDLE_EXPORT GetSizeOfCustomTableBlock : public IScriptBlock { 
    public:
        explicit GetSizeOfCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 947658273 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> CustomTable {};
        std::shared_ptr<yordle::data::meta::ScriptTableSet> OutSize {};
    };

    class YORDLE_EXPORT ForEachInCustomTableBlock : public IScriptBlock { 
    public:
        explicit ForEachInCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 31607380 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> CustomTable {};
        bool SortedByKeys = false;
        std::shared_ptr<yordle::data::meta::ScriptTableSet> OutKey {};
        std::shared_ptr<yordle::data::meta::ScriptTableSet> OutValue {};
        std::shared_ptr<yordle::data::meta::bin_class> Sequence {};
    };

    class YORDLE_EXPORT CustomTableContainsValueBlock : public IScriptBlock { 
    public:
        explicit CustomTableContainsValueBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 476310893 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> CustomTable {};
        std::shared_ptr<yordle::data::meta::IScriptValueGet> value {};
        std::shared_ptr<yordle::data::meta::ScriptTableSet> OutKey {};
        std::shared_ptr<yordle::data::meta::BoolTableSet> OutWasFound {};
    };

    class YORDLE_EXPORT CreateFunctionBlock : public IScriptBlock { 
    public:
        explicit CreateFunctionBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2568619062 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::FunctionTableSet> Function {};
        std::shared_ptr<yordle::data::meta::FunctionDefinition> FunctionDefinition {};
    };

    class YORDLE_EXPORT IRunFunctionBlock : public IScriptBlock { 
    public:
        explicit IRunFunctionBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 607501250 || IScriptBlock::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::bin_class> Function {};
        std::set<std::shared_ptr<yordle::data::meta::IScriptValueGet>> InputParameters {};
        std::set<std::shared_ptr<yordle::data::meta::ScriptTableSet>> OutputParameters {};
    };

    class YORDLE_EXPORT IScriptSequence : public RScript { 
    public:
        explicit IScriptSequence(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 903266502 || RScript::is_type(type);
        }

    };

    class YORDLE_EXPORT ScriptSequence : public IScriptSequence { 
    public:
        explicit ScriptSequence(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2793907875 || IScriptSequence::is_type(type);
        }

        std::set<std::shared_ptr<yordle::data::meta::IScriptBlock>> blocks {};
    };

    class YORDLE_EXPORT IBoolGet : public IScriptValueGet { 
    public:
        explicit IBoolGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2922520200 || IScriptValueGet::is_type(type);
        }

    };

    class YORDLE_EXPORT BoolGet : public IBoolGet { 
    public:
        explicit BoolGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1159336319 || IBoolGet::is_type(type);
        }

        bool value = false;
    };

    class YORDLE_EXPORT BoolTableGet : public IBoolGet { 
    public:
        explicit BoolTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3148945057 || IBoolGet::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ScriptTable> Table {};
        uint32_t Var = 0;
        std::optional<bool> Default {};
    };

    class YORDLE_EXPORT CustomTableGet : public IScriptValueGet { 
    public:
        explicit CustomTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2681684398 || IScriptValueGet::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ScriptTable> Table {};
        uint32_t Var = 0;
    };

    class YORDLE_EXPORT IFloatGet : public IScriptValueGet { 
    public:
        explicit IFloatGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2798892082 || IScriptValueGet::is_type(type);
        }

    };

    class YORDLE_EXPORT FloatGet : public IFloatGet { 
    public:
        explicit FloatGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1608666903 || IFloatGet::is_type(type);
        }

        float value = 0.0;
    };

    class YORDLE_EXPORT FloatTableGet : public IFloatGet { 
    public:
        explicit FloatTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3990037433 || IFloatGet::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ScriptTable> Table {};
        uint32_t Var = 0;
        std::optional<float> Default {};
    };

    class YORDLE_EXPORT FloatOffsetTableGet : public IFloatGet { 
    public:
        explicit FloatOffsetTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 317190090 || IFloatGet::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ScriptTable> Table {};
        uint32_t Var = 0;
        float offset = 0.0;
    };

    class YORDLE_EXPORT IFunctionGet : public IScriptValueGet { 
    public:
        explicit IFunctionGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4245932760 || IScriptValueGet::is_type(type);
        }

    };

    class YORDLE_EXPORT FunctionTableGet : public IFunctionGet { 
    public:
        explicit FunctionTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 800615629 || IFunctionGet::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ScriptTable> Table {};
        uint32_t Var = 0;
    };

    class YORDLE_EXPORT IIntGet : public IScriptValueGet { 
    public:
        explicit IIntGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3256124575 || IScriptValueGet::is_type(type);
        }

    };

    class YORDLE_EXPORT IntGet : public IIntGet { 
    public:
        explicit IntGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 708175882 || IIntGet::is_type(type);
        }

        int32_t value = 0;
    };

    class YORDLE_EXPORT IntTableGet : public IIntGet { 
    public:
        explicit IntTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3112089886 || IIntGet::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ScriptTable> Table {};
        uint32_t Var = 0;
        std::optional<int32_t> Default {};
    };

    class YORDLE_EXPORT IntOffsetTableGet : public IIntGet { 
    public:
        explicit IntOffsetTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1534915661 || IIntGet::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ScriptTable> Table {};
        uint32_t Var = 0;
        int32_t offset = 0;
    };

    class YORDLE_EXPORT ScriptTableGet : public IScriptValueGet { 
    public:
        explicit ScriptTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 574110442 || IScriptValueGet::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ScriptTable> Table {};
        uint32_t Var = 0;
    };

    class YORDLE_EXPORT BaseElementData : public x231dd1a2 { 
    public:
        explicit BaseElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3202633864 || x231dd1a2::is_type(type);
        }

        bool mEnabled = false;
        uint32_t mDraggable = 0;
        bool StickyDrag = false;
        uint32_t mLayer = 0;
        std::shared_ptr<yordle::data::meta::AnchorBase> mAnchors {};
        bool mNoPixelSnappingX = false;
        bool mNoPixelSnappingY = false;
        std::array<float, 4> mRect {};
        bool mUseRectSourceResolutionAsFloor = false;
        uint16_t mRectSourceResolutionWidth = 0;
        uint16_t mRectSourceResolutionHeight = 0;
        bool mKeepMaxScale = false;
        bool mFullscreen = false;
        std::set<std::array<float, 2>> mHitTestPolygon {};
        bool x258bae9a = false;
    };

    class YORDLE_EXPORT EffectElementData : public BaseElementData { 
    public:
        explicit EffectElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2739628964 || BaseElementData::is_type(type);
        }

    };

    class YORDLE_EXPORT EffectCooldownElementData : public EffectElementData { 
    public:
        explicit EffectCooldownElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3191832311 || EffectElementData::is_type(type);
        }

        std::array<uint8_t, 4> mEffectColor0 {};
        std::array<uint8_t, 4> mEffectColor1 {};
    };

    class YORDLE_EXPORT EffectCircleMaskCooldownElementData : public EffectElementData { 
    public:
        explicit EffectCircleMaskCooldownElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4086628699 || EffectElementData::is_type(type);
        }

        std::array<uint8_t, 4> mEffectColor0 {};
        std::array<uint8_t, 4> mEffectColor1 {};
    };

    class YORDLE_EXPORT EffectCooldownRadialElementData : public EffectElementData { 
    public:
        explicit EffectCooldownRadialElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2174290526 || EffectElementData::is_type(type);
        }

        bool mIsFill = false;
        bool mFlipX = false;
        bool mFlipY = false;
        bool mPerPixelUvsX = false;
        std::shared_ptr<yordle::data::meta::AtlasData> mAtlas {};
    };

    class YORDLE_EXPORT EffectArcFillElementData : public EffectElementData { 
    public:
        explicit EffectArcFillElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2608359503 || EffectElementData::is_type(type);
        }

        bool mFlipX = false;
        bool mFlipY = false;
        bool mPerPixelUvsX = false;
        std::shared_ptr<yordle::data::meta::AtlasData> mAtlas {};
    };

    class YORDLE_EXPORT EffectAmmoElementData : public EffectElementData { 
    public:
        explicit EffectAmmoElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3262156994 || EffectElementData::is_type(type);
        }

        std::array<uint8_t, 4> mEffectColor0 {};
        std::array<uint8_t, 4> mEffectColor1 {};
    };

    class YORDLE_EXPORT EffectGlowElementData : public EffectElementData { 
    public:
        explicit EffectGlowElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3998066495 || EffectElementData::is_type(type);
        }

        bool mFlipX = false;
        bool mFlipY = false;
        bool mPerPixelUvsX = false;
        std::shared_ptr<yordle::data::meta::AtlasData> mAtlas {};
        float CycleTime = 0.0;
        float BaseScale = 0.0;
        float CycleBasedScaleAddition = 0.0;
        float MinimumAlpha = 0.0;
    };

    class YORDLE_EXPORT EffectAnimationElementData : public EffectElementData { 
    public:
        explicit EffectAnimationElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1913369002 || EffectElementData::is_type(type);
        }

        bool mFlipX = false;
        bool mFlipY = false;
        bool mPerPixelUvsX = false;
        std::shared_ptr<yordle::data::meta::AtlasData> mAtlas {};
        float FramesPerSecond = 0.0;
        float TotalNumberOfFrames = 0.0;
        float NumberOfFramesPerRowInAtlas = 0.0;
        bool mLooping = false;
        uint8_t mFinishBehavior = 0;
    };

    class YORDLE_EXPORT EffectFillPercentageElementData : public EffectElementData { 
    public:
        explicit EffectFillPercentageElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 220339975 || EffectElementData::is_type(type);
        }

        bool mFlipX = false;
        bool mFlipY = false;
        bool mPerPixelUvsX = false;
        std::shared_ptr<yordle::data::meta::AtlasData> mAtlas {};
    };

    class YORDLE_EXPORT EffectDesaturateElementData : public EffectElementData { 
    public:
        explicit EffectDesaturateElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1335813830 || EffectElementData::is_type(type);
        }

        bool mFlipX = false;
        bool mFlipY = false;
        bool mPerPixelUvsX = false;
        std::shared_ptr<yordle::data::meta::AtlasData> mAtlas {};
        float MinimumSaturation = 0.0;
        float MaximumSaturation = 0.0;
    };

    class YORDLE_EXPORT EffectRotatingIconElementData : public EffectElementData { 
    public:
        explicit EffectRotatingIconElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2820872175 || EffectElementData::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::AtlasData> mAtlas {};
    };

    class YORDLE_EXPORT EffectGlowingRotatingIconElementData : public EffectRotatingIconElementData { 
    public:
        explicit EffectGlowingRotatingIconElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 178804058 || EffectRotatingIconElementData::is_type(type);
        }

        float CycleTime = 0.0;
        float x54c178e = 0.0;
    };

    class YORDLE_EXPORT EffectAnimatedRotatingIconElementData : public EffectAnimationElementData { 
    public:
        explicit EffectAnimatedRotatingIconElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2170661496 || EffectAnimationElementData::is_type(type);
        }

    };

    class YORDLE_EXPORT EffectLineElementData : public EffectElementData { 
    public:
        explicit EffectLineElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1581670814 || EffectElementData::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::AtlasData> mAtlas {};
        float mThickness = 0.0;
        float mRightSlicePercentage = 0.0;
    };

    class YORDLE_EXPORT EffectInstancedElementData : public EffectElementData { 
    public:
        explicit EffectInstancedElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2901870171 || EffectElementData::is_type(type);
        }

        bool mFlipX = false;
        bool mFlipY = false;
        bool mPerPixelUvsX = false;
        std::shared_ptr<yordle::data::meta::AtlasData> mAtlas {};
        std::set<std::array<float, 2>> mAdditionalOffsets {};
    };

    class YORDLE_EXPORT EffectCircleMaskDesaturateElementData : public EffectDesaturateElementData { 
    public:
        explicit EffectCircleMaskDesaturateElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3706969042 || EffectDesaturateElementData::is_type(type);
        }

    };

    class YORDLE_EXPORT xf6fd1c96 : public EffectElementData { 
    public:
        explicit xf6fd1c96(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4143783062 || EffectElementData::is_type(type);
        }

        uint32_t mMaterial = 0;
    };

    class YORDLE_EXPORT ElementGroupButtonData : public ElementGroupData { 
    public:
        explicit ElementGroupButtonData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3590855006 || ElementGroupData::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::ElementGroupButtonState> defaultStateElements {};
        std::shared_ptr<yordle::data::meta::ElementGroupButtonState> InactiveStateElements {};
        std::shared_ptr<yordle::data::meta::ElementGroupButtonState> hoverStateElements {};
        std::shared_ptr<yordle::data::meta::ElementGroupButtonState> xad0f8882 {};
        std::shared_ptr<yordle::data::meta::ElementGroupButtonState> selectedStateElements {};
        std::shared_ptr<yordle::data::meta::ElementGroupButtonState> SelectedHoverStateElements {};
        std::shared_ptr<yordle::data::meta::ElementGroupButtonState> SelectedClickedStateElements {};
        uint32_t hitRegionElement = 0;
        uint32_t ClickReleaseParticleElement = 0;
        std::shared_ptr<yordle::data::meta::ElementSoundEvents> soundEvents {};
        std::string ActiveTooltipTraKey {};
        std::string InactiveTooltipTraKey {};
        bool IsActive = false;
        bool IsEnabled = false;
        bool IsSelected = false;
    };

    class YORDLE_EXPORT IconElementData : public BaseElementData { 
    public:
        explicit IconElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1005588128 || BaseElementData::is_type(type);
        }

        std::array<uint8_t, 4> mColor {};
        bool mUseAlpha = false;
        bool mPerPixelUvsX = false;
        bool mFlipX = false;
        bool mFlipY = false;
        std::shared_ptr<yordle::data::meta::AtlasDataBase> mAtlas {};
        uint32_t mMaterial = 0;
        std::shared_ptr<yordle::data::meta::IconElementDataExtension> mExtension {};
    };

    class YORDLE_EXPORT ParticleSystemElementData : public BaseElementData { 
    public:
        explicit ParticleSystemElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3716126038 || BaseElementData::is_type(type);
        }

        uint32_t mVfxSystem = 0;
        uint32_t xc47cf6c7 = 0;
        bool x2824440 = false;
        bool x94b088ea = false;
        bool x8ef629c9 = false;
    };

    class YORDLE_EXPORT RegionElementData : public BaseElementData { 
    public:
        explicit RegionElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1859523703 || BaseElementData::is_type(type);
        }

    };

    class YORDLE_EXPORT ScissorRegionElementData : public BaseElementData { 
    public:
        explicit ScissorRegionElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3070309571 || BaseElementData::is_type(type);
        }

        uint32_t xaccc80b5 = 0;
    };

    class YORDLE_EXPORT TextElementData : public BaseElementData { 
    public:
        explicit TextElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2622984950 || BaseElementData::is_type(type);
        }

        std::string TraKey {};
        uint32_t mFontDescription = 0;
        uint8_t mTextAlignmentHorizontal = 0;
        uint8_t mTextAlignmentVertical = 0;
        uint32_t x7c0a8359 = 0;
        uint8_t WrappingMode = 0;
        float iconScale = 0.0;
    };

    class YORDLE_EXPORT x9bd21f30 : public IDynamicMaterialBoolDriver { 
    public:
        explicit x9bd21f30(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2614239024 || IDynamicMaterialBoolDriver::is_type(type);
        }

        std::string mKeyName {};
    };

    class YORDLE_EXPORT xd0116dc8 : public IDynamicMaterialBoolDriver { 
    public:
        explicit xd0116dc8(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3490803144 || IDynamicMaterialBoolDriver::is_type(type);
        }

        std::string mKeyName {};
    };

    class YORDLE_EXPORT HasBuffDynamicMaterialBoolDriver : public IDynamicMaterialBoolDriver { 
    public:
        explicit HasBuffDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2331705440 || IDynamicMaterialBoolDriver::is_type(type);
        }

        std::string mScriptName {};
        float xff80df7a = 0.0;
    };

    class YORDLE_EXPORT HasGearDynamicMaterialBoolDriver : public IDynamicMaterialBoolDriver { 
    public:
        explicit HasGearDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1914613726 || IDynamicMaterialBoolDriver::is_type(type);
        }

        uint8_t mGearIndex = 0;
    };

    class YORDLE_EXPORT IsAnimationPlayingDynamicMaterialBoolDriver : public IDynamicMaterialBoolDriver { 
    public:
        explicit IsAnimationPlayingDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 141658293 || IDynamicMaterialBoolDriver::is_type(type);
        }

        std::set<uint32_t> mAnimationNames {};
    };

    class YORDLE_EXPORT IsDeadDynamicMaterialBoolDriver : public IDynamicMaterialBoolDriver { 
    public:
        explicit IsDeadDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 4199153591 || IDynamicMaterialBoolDriver::is_type(type);
        }

    };

    class YORDLE_EXPORT IsEnemyDynamicMaterialBoolDriver : public IDynamicMaterialBoolDriver { 
    public:
        explicit IsEnemyDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3177246235 || IDynamicMaterialBoolDriver::is_type(type);
        }

    };

    class YORDLE_EXPORT IsInGrassDynamicMaterialBoolDriver : public IDynamicMaterialBoolDriver { 
    public:
        explicit IsInGrassDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3727041878 || IDynamicMaterialBoolDriver::is_type(type);
        }

    };

    class YORDLE_EXPORT LearnedSpellDynamicMaterialBoolDriver : public IDynamicMaterialBoolDriver { 
    public:
        explicit LearnedSpellDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 820959864 || IDynamicMaterialBoolDriver::is_type(type);
        }

        uint8_t mSlot = 0;
    };

    class YORDLE_EXPORT MessageBoxDialog : public x75259ad3 { 
    public:
        explicit MessageBoxDialog(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 3766132529 || x75259ad3::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::HudMenuTransitionData> x806ad11a {};
        uint32_t ConfirmButtonIcons = 0;
        uint32_t CancelButtonIcons = 0;
    };

    class YORDLE_EXPORT AtomicClipData : public BlendableClipData { 
    public:
        explicit AtomicClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 1540989414 || BlendableClipData::is_type(type);
        }

        float mTickDuration = 0.0;
        std::shared_ptr<yordle::data::meta::AnimationResourceData> mAnimationResourceData {};
        std::shared_ptr<yordle::data::meta::UpdaterResourceData> mUpdaterResourceData {};
    };

    class YORDLE_EXPORT DelayedBoolMaterialDriver : public IDynamicMaterialBoolDriver { 
    public:
        explicit DelayedBoolMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 347152410 || IDynamicMaterialBoolDriver::is_type(type);
        }

        std::shared_ptr<yordle::data::meta::IDynamicMaterialBoolDriver> mBoolDriver {};
        float mDelayOn = 0.0;
        float mDelayOff = 0.0;
    };

    class YORDLE_EXPORT FixedDurationTriggeredBoolDriver : public IDynamicMaterialBoolDriver { 
    public:
        explicit FixedDurationTriggeredBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 62039180 || IDynamicMaterialBoolDriver::is_type(type);
        }

        float mCustomDuration = 0.0;
        std::shared_ptr<yordle::data::meta::IDynamicMaterialBoolDriver> mBoolDriver {};
    };

    class YORDLE_EXPORT FloatComparisonMaterialDriver : public IDynamicMaterialBoolDriver { 
    public:
        explicit FloatComparisonMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop);

        bool is_type(uint32_t type) override {
            return type == 2428279575 || IDynamicMaterialBoolDriver::is_type(type);
        }

        uint32_t mOperator = 0;
        std::shared_ptr<yordle::data::meta::IDynamicMaterialFloatDriver> mValueA {};
        std::shared_ptr<yordle::data::meta::IDynamicMaterialFloatDriver> mValueB {};
    };

}

yordle::data::meta::WardSkinDisabler::WardSkinDisabler(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_DisableAllSkins = prop->cast_prop<yordle::data::prop::bool_prop>(1271103232u);
    if (ptr_DisableAllSkins != nullptr) {
        DisableAllSkins = ptr_DisableAllSkins->value;
    }

    auto ptr_DisabledIds = prop->cast_prop<yordle::data::prop::set_prop>(2384885417u);
    if (ptr_DisabledIds != nullptr) {
        for (const auto &entry : ptr_DisabledIds->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(entry);
            if (ptr_entry != nullptr) {
                DisabledIds.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::IContextualAction::IContextualAction(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mHashedSituationTrigger = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2637908125u);
    if (ptr_mHashedSituationTrigger != nullptr) {
        mHashedSituationTrigger = ptr_mHashedSituationTrigger->value;
    }

    auto ptr_mMaxOccurences = prop->cast_prop<yordle::data::prop::uint32_prop>(813368326u);
    if (ptr_mMaxOccurences != nullptr) {
        mMaxOccurences = ptr_mMaxOccurences->value;
    }
}

yordle::data::meta::ContextualActionPlayAnimation::ContextualActionPlayAnimation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mHashedAnimationName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2956890426u);
    if (ptr_mHashedAnimationName != nullptr) {
        mHashedAnimationName = ptr_mHashedAnimationName->value;
    }

    auto ptr_mPlayAsEmote = prop->cast_prop<yordle::data::prop::bool_prop>(3031797526u);
    if (ptr_mPlayAsEmote != nullptr) {
        mPlayAsEmote = ptr_mPlayAsEmote->value;
    }
}

yordle::data::meta::ContextualActionTriggerEvent::ContextualActionTriggerEvent(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualAction(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ContextualActionPlayAudio::ContextualActionPlayAudio(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSelfEventName = prop->cast_prop<yordle::data::prop::string_prop>(3232093917u);
    if (ptr_mSelfEventName != nullptr) {
        mSelfEventName = ptr_mSelfEventName->value;
    }

    auto ptr_mAllyEventName = prop->cast_prop<yordle::data::prop::string_prop>(1748689337u);
    if (ptr_mAllyEventName != nullptr) {
        mAllyEventName = ptr_mAllyEventName->value;
    }

    auto ptr_mEnemyEventName = prop->cast_prop<yordle::data::prop::string_prop>(1096377831u);
    if (ptr_mEnemyEventName != nullptr) {
        mEnemyEventName = ptr_mEnemyEventName->value;
    }

    auto ptr_mSpectatorEventName = prop->cast_prop<yordle::data::prop::string_prop>(3893363788u);
    if (ptr_mSpectatorEventName != nullptr) {
        mSpectatorEventName = ptr_mSpectatorEventName->value;
    }

    auto ptr_mWaitForAnnouncerQueue = prop->cast_prop<yordle::data::prop::bool_prop>(461378158u);
    if (ptr_mWaitForAnnouncerQueue != nullptr) {
        mWaitForAnnouncerQueue = ptr_mWaitForAnnouncerQueue->value;
    }

    auto ptr_x54cd5fca = prop->cast_prop<yordle::data::prop::bool_prop>(1422745546u);
    if (ptr_x54cd5fca != nullptr) {
        x54cd5fca = ptr_x54cd5fca->value;
    }

    auto ptr_xbeb655b5 = prop->cast_prop<yordle::data::prop::bool_prop>(3199620533u);
    if (ptr_xbeb655b5 != nullptr) {
        xbeb655b5 = ptr_xbeb655b5->value;
    }

    auto ptr_x66a1c28b = prop->cast_prop<yordle::data::prop::string_prop>(1721877131u);
    if (ptr_x66a1c28b != nullptr) {
        x66a1c28b = ptr_x66a1c28b->value;
    }

    auto ptr_mWaitTimeout = prop->cast_prop<yordle::data::prop::float32_prop>(828647620u);
    if (ptr_mWaitTimeout != nullptr) {
        mWaitTimeout = ptr_mWaitTimeout->value;
    }
}

yordle::data::meta::ContextualActionPlayVO::ContextualActionPlayVO(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ContextualActionPlayAudio(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::IContextualCondition::IContextualCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ContextualConditionNegation::ContextualConditionNegation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mChildCondition = prop->cast_prop<yordle::data::prop::structure_prop>(551945819u);
    if (ptr_mChildCondition != nullptr) {
        mChildCondition = yordle::data::meta::deserialize<yordle::data::meta::IContextualCondition>(ptr_mChildCondition, 3400586476u);
    }
}

yordle::data::meta::ContextualConditionItemID::ContextualConditionItemID(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItems = prop->cast_prop<yordle::data::prop::set_prop>(2972511644u);
    if (ptr_mItems != nullptr) {
        for (const auto &entry : ptr_mItems->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mItems.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ContextualConditionMultikillSize::ContextualConditionMultikillSize(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMultikillSize = prop->cast_prop<yordle::data::prop::uint8_prop>(529001360u);
    if (ptr_mMultikillSize != nullptr) {
        mMultikillSize = ptr_mMultikillSize->value;
    }
}

yordle::data::meta::ContextualConditionKillCount::ContextualConditionKillCount(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTotalKills = prop->cast_prop<yordle::data::prop::uint16_prop>(3459867199u);
    if (ptr_mTotalKills != nullptr) {
        mTotalKills = ptr_mTotalKills->value;
    }

    auto ptr_mCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(854730536u);
    if (ptr_mCompareOp != nullptr) {
        mCompareOp = ptr_mCompareOp->value;
    }
}

yordle::data::meta::ContextualConditionItemVOGroup::ContextualConditionItemVOGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItemVOGroupHash = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(207756231u);
    if (ptr_mItemVOGroupHash != nullptr) {
        mItemVOGroupHash = ptr_mItemVOGroupHash->value;
    }
}

yordle::data::meta::ContextualConditionHasItemFromVOGroup::ContextualConditionHasItemFromVOGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItemVOGroupHash = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(207756231u);
    if (ptr_mItemVOGroupHash != nullptr) {
        mItemVOGroupHash = ptr_mItemVOGroupHash->value;
    }
}

yordle::data::meta::ContextualConditionLastBoughtItem::ContextualConditionLastBoughtItem(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItem = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1281445127u);
    if (ptr_mItem != nullptr) {
        mItem = ptr_mItem->value;
    }
}

yordle::data::meta::ContextualConditionRuleCooldown::ContextualConditionRuleCooldown(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mRuleCooldown = prop->cast_prop<yordle::data::prop::float32_prop>(2504881775u);
    if (ptr_mRuleCooldown != nullptr) {
        mRuleCooldown = ptr_mRuleCooldown->value;
    }
}

yordle::data::meta::ContextualConditionChanceToPlay::ContextualConditionChanceToPlay(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPercentChanceToPlay = prop->cast_prop<yordle::data::prop::uint8_prop>(1059937710u);
    if (ptr_mPercentChanceToPlay != nullptr) {
        mPercentChanceToPlay = ptr_mPercentChanceToPlay->value;
    }
}

yordle::data::meta::ContextualConditionMoveDistance::ContextualConditionMoveDistance(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDistance = prop->cast_prop<yordle::data::prop::float32_prop>(2863703955u);
    if (ptr_mDistance != nullptr) {
        mDistance = ptr_mDistance->value;
    }

    auto ptr_mCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(854730536u);
    if (ptr_mCompareOp != nullptr) {
        mCompareOp = ptr_mCompareOp->value;
    }
}

yordle::data::meta::ContextualConditionCharacterLevel::ContextualConditionCharacterLevel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCharacterLevel = prop->cast_prop<yordle::data::prop::uint8_prop>(1643445031u);
    if (ptr_mCharacterLevel != nullptr) {
        mCharacterLevel = ptr_mCharacterLevel->value;
    }

    auto ptr_mCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(854730536u);
    if (ptr_mCompareOp != nullptr) {
        mCompareOp = ptr_mCompareOp->value;
    }
}

yordle::data::meta::ContextualConditionTimeSinceStealthStateChange::ContextualConditionTimeSinceStealthStateChange(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStateToCheck = prop->cast_prop<yordle::data::prop::uint8_prop>(2648368516u);
    if (ptr_mStateToCheck != nullptr) {
        mStateToCheck = ptr_mStateToCheck->value;
    }

    auto ptr_mCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(854730536u);
    if (ptr_mCompareOp != nullptr) {
        mCompareOp = ptr_mCompareOp->value;
    }

    auto ptr_mTimeThreshold = prop->cast_prop<yordle::data::prop::float32_prop>(3998225092u);
    if (ptr_mTimeThreshold != nullptr) {
        mTimeThreshold = ptr_mTimeThreshold->value;
    }
}

yordle::data::meta::ContextualConditionMarkerName::ContextualConditionMarkerName(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMarkerNames = prop->cast_prop<yordle::data::prop::set_prop>(253046910u);
    if (ptr_mMarkerNames != nullptr) {
        for (const auto &entry : ptr_mMarkerNames->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mMarkerNames.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ContextualConditionNeutralMinionMapSide::ContextualConditionNeutralMinionMapSide(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTeamCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(3575408775u);
    if (ptr_mTeamCompareOp != nullptr) {
        mTeamCompareOp = ptr_mTeamCompareOp->value;
    }
}

yordle::data::meta::ContextualConditionNeutralMinionCampName::ContextualConditionNeutralMinionCampName(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCampName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2318038118u);
    if (ptr_mCampName != nullptr) {
        mCampName = ptr_mCampName->value;
    }
}

yordle::data::meta::ContextualConditionNeutralMinionCampIsAlive::ContextualConditionNeutralMinionCampIsAlive(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCampIsAlive = prop->cast_prop<yordle::data::prop::bool_prop>(1638057110u);
    if (ptr_mCampIsAlive != nullptr) {
        mCampIsAlive = ptr_mCampIsAlive->value;
    }
}

yordle::data::meta::ContextualConditionNeutralCampId::ContextualConditionNeutralCampId(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCampId = prop->cast_prop<yordle::data::prop::uint8_prop>(290168160u);
    if (ptr_mCampId != nullptr) {
        mCampId = ptr_mCampId->value;
    }
}

yordle::data::meta::ContextualConditionSituationHasRecentlyRun::ContextualConditionSituationHasRecentlyRun(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSituationNameHash = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2150865547u);
    if (ptr_mSituationNameHash != nullptr) {
        mSituationNameHash = ptr_mSituationNameHash->value;
    }

    auto ptr_mTime = prop->cast_prop<yordle::data::prop::float32_prop>(2888110417u);
    if (ptr_mTime != nullptr) {
        mTime = ptr_mTime->value;
    }
}

yordle::data::meta::ContextualConditionMapID::ContextualConditionMapID(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMapIDs = prop->cast_prop<yordle::data::prop::uint32_prop>(1556945280u);
    if (ptr_mMapIDs != nullptr) {
        mMapIDs = ptr_mMapIDs->value;
    }
}

yordle::data::meta::ContextualConditionObjectiveTakeByMyTeam::ContextualConditionObjectiveTakeByMyTeam(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTakenObjective = prop->cast_prop<yordle::data::prop::uint32_prop>(2295413162u);
    if (ptr_mTakenObjective != nullptr) {
        mTakenObjective = ptr_mTakenObjective->value;
    }
}

yordle::data::meta::ContextualConditionMapRegionName::ContextualConditionMapRegionName(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mRegionType = prop->cast_prop<yordle::data::prop::uint8_prop>(86655780u);
    if (ptr_mRegionType != nullptr) {
        mRegionType = ptr_mRegionType->value;
    }

    auto ptr_mRegionName = prop->cast_prop<yordle::data::prop::string_prop>(4145313831u);
    if (ptr_mRegionName != nullptr) {
        mRegionName = ptr_mRegionName->value;
    }
}

yordle::data::meta::ContextualConditionTurretPosition::ContextualConditionTurretPosition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTurretPosition = prop->cast_prop<yordle::data::prop::uint8_prop>(2777666157u);
    if (ptr_mTurretPosition != nullptr) {
        mTurretPosition = ptr_mTurretPosition->value;
    }
}

yordle::data::meta::ContextualConditionHasGold::ContextualConditionHasGold(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mGold = prop->cast_prop<yordle::data::prop::float32_prop>(1442004174u);
    if (ptr_mGold != nullptr) {
        mGold = ptr_mGold->value;
    }
}

yordle::data::meta::ContextualConditionCustomTimer::ContextualConditionCustomTimer(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCustomTimer = prop->cast_prop<yordle::data::prop::float32_prop>(1079764296u);
    if (ptr_mCustomTimer != nullptr) {
        mCustomTimer = ptr_mCustomTimer->value;
    }
}

yordle::data::meta::ContextualConditionGameTimer::ContextualConditionGameTimer(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mGameTimeInMinutes = prop->cast_prop<yordle::data::prop::float32_prop>(1976660617u);
    if (ptr_mGameTimeInMinutes != nullptr) {
        mGameTimeInMinutes = ptr_mGameTimeInMinutes->value;
    }

    auto ptr_mCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(854730536u);
    if (ptr_mCompareOp != nullptr) {
        mCompareOp = ptr_mCompareOp->value;
    }
}

yordle::data::meta::ContextualConditionShopOpenCount::ContextualConditionShopOpenCount(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mShopOpenCount = prop->cast_prop<yordle::data::prop::uint32_prop>(3379786747u);
    if (ptr_mShopOpenCount != nullptr) {
        mShopOpenCount = ptr_mShopOpenCount->value;
    }
}

yordle::data::meta::ContextualConditionShopCloseCount::ContextualConditionShopCloseCount(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mShopCloseCount = prop->cast_prop<yordle::data::prop::uint32_prop>(1145236823u);
    if (ptr_mShopCloseCount != nullptr) {
        mShopCloseCount = ptr_mShopCloseCount->value;
    }
}

yordle::data::meta::ContextualConditionItemPurchased::ContextualConditionItemPurchased(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItemPurchased = prop->cast_prop<yordle::data::prop::bool_prop>(325311252u);
    if (ptr_mItemPurchased != nullptr) {
        mItemPurchased = ptr_mItemPurchased->value;
    }
}

yordle::data::meta::ContextualConditionItemCanBePurchased::ContextualConditionItemCanBePurchased(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItemCanBePurchased = prop->cast_prop<yordle::data::prop::bool_prop>(2455832015u);
    if (ptr_mItemCanBePurchased != nullptr) {
        mItemCanBePurchased = ptr_mItemCanBePurchased->value;
    }
}

yordle::data::meta::ContextualConditionItemPriceMinimum::ContextualConditionItemPriceMinimum(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItemPriceMinimum = prop->cast_prop<yordle::data::prop::uint32_prop>(722266796u);
    if (ptr_mItemPriceMinimum != nullptr) {
        mItemPriceMinimum = ptr_mItemPriceMinimum->value;
    }
}

yordle::data::meta::ContextualConditionOwnerTeamNetChampionKills::ContextualConditionOwnerTeamNetChampionKills(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mOwnerTeamNetKillAdvantage = prop->cast_prop<yordle::data::prop::int32_prop>(892775018u);
    if (ptr_mOwnerTeamNetKillAdvantage != nullptr) {
        mOwnerTeamNetKillAdvantage = ptr_mOwnerTeamNetKillAdvantage->value;
    }

    auto ptr_mKillAdvantageCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(2534369939u);
    if (ptr_mKillAdvantageCompareOp != nullptr) {
        mKillAdvantageCompareOp = ptr_mKillAdvantageCompareOp->value;
    }

    auto ptr_mTimeFrameSeconds = prop->cast_prop<yordle::data::prop::float32_prop>(458656935u);
    if (ptr_mTimeFrameSeconds != nullptr) {
        mTimeFrameSeconds = ptr_mTimeFrameSeconds->value;
    }
}

yordle::data::meta::ContextualConditionNearbyChampionCount::ContextualConditionNearbyChampionCount(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTeamCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(3575408775u);
    if (ptr_mTeamCompareOp != nullptr) {
        mTeamCompareOp = ptr_mTeamCompareOp->value;
    }

    auto ptr_mCount = prop->cast_prop<yordle::data::prop::uint32_prop>(6566231u);
    if (ptr_mCount != nullptr) {
        mCount = ptr_mCount->value;
    }

    auto ptr_mCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(854730536u);
    if (ptr_mCompareOp != nullptr) {
        mCompareOp = ptr_mCompareOp->value;
    }
}

yordle::data::meta::ContextualConditionNumberOfCharactersNearTargetPos::ContextualConditionNumberOfCharactersNearTargetPos(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mNumberOfCharacters = prop->cast_prop<yordle::data::prop::uint32_prop>(1980061872u);
    if (ptr_mNumberOfCharacters != nullptr) {
        mNumberOfCharacters = ptr_mNumberOfCharacters->value;
    }

    auto ptr_mCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(854730536u);
    if (ptr_mCompareOp != nullptr) {
        mCompareOp = ptr_mCompareOp->value;
    }

    auto ptr_mTeamCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(3575408775u);
    if (ptr_mTeamCompareOp != nullptr) {
        mTeamCompareOp = ptr_mTeamCompareOp->value;
    }
}

yordle::data::meta::ContextualConditionEnemyDeathsNearby::ContextualConditionEnemyDeathsNearby(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEnemyDeaths = prop->cast_prop<yordle::data::prop::uint32_prop>(2248839903u);
    if (ptr_mEnemyDeaths != nullptr) {
        mEnemyDeaths = ptr_mEnemyDeaths->value;
    }
}

yordle::data::meta::ContextualConditionTeammateDeathsNearby::ContextualConditionTeammateDeathsNearby(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTeammateDeaths = prop->cast_prop<yordle::data::prop::uint32_prop>(972319095u);
    if (ptr_mTeammateDeaths != nullptr) {
        mTeammateDeaths = ptr_mTeammateDeaths->value;
    }
}

yordle::data::meta::ContextualConditionCharacter::ContextualConditionCharacter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCharacterType = prop->cast_prop<yordle::data::prop::uint8_prop>(4092125775u);
    if (ptr_mCharacterType != nullptr) {
        mCharacterType = ptr_mCharacterType->value;
    }

    auto ptr_mChildConditions = prop->cast_prop<yordle::data::prop::set_prop>(4061901048u);
    if (ptr_mChildConditions != nullptr) {
        for (const auto &entry : ptr_mChildConditions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mChildConditions.emplace(yordle::data::meta::deserialize<yordle::data::meta::ICharacterSubcondition>(ptr_entry, 3725269960u));
            }
        }
    }
}

yordle::data::meta::ContextualConditionAnyOtherHero::ContextualConditionAnyOtherHero(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mChildConditions = prop->cast_prop<yordle::data::prop::set_prop>(4061901048u);
    if (ptr_mChildConditions != nullptr) {
        for (const auto &entry : ptr_mChildConditions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mChildConditions.emplace(yordle::data::meta::deserialize<yordle::data::meta::ICharacterSubcondition>(ptr_entry, 3725269960u));
            }
        }
    }
}

yordle::data::meta::ICharacterSubcondition::ICharacterSubcondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ContextualConditionCharacterName::ContextualConditionCharacterName(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCharacters = prop->cast_prop<yordle::data::prop::set_prop>(3604631660u);
    if (ptr_mCharacters != nullptr) {
        for (const auto &entry : ptr_mCharacters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mCharacters.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ContextualConditionCharacterFormName::ContextualConditionCharacterFormName(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFormName = prop->cast_prop<yordle::data::prop::string_prop>(2092361917u);
    if (ptr_mFormName != nullptr) {
        mFormName = ptr_mFormName->value;
    }
}

yordle::data::meta::ContextualConditionCharacterSkinID::ContextualConditionCharacterSkinID(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSkinIDs = prop->cast_prop<yordle::data::prop::set_prop>(2274342517u);
    if (ptr_mSkinIDs != nullptr) {
        for (const auto &entry : ptr_mSkinIDs->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(entry);
            if (ptr_entry != nullptr) {
                mSkinIDs.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ContextualConditionCharacterMetadata::ContextualConditionCharacterMetadata(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCategory = prop->cast_prop<yordle::data::prop::string_prop>(2384819472u);
    if (ptr_mCategory != nullptr) {
        mCategory = ptr_mCategory->value;
    }

    auto ptr_mData = prop->cast_prop<yordle::data::prop::string_prop>(2114832992u);
    if (ptr_mData != nullptr) {
        mData = ptr_mData->value;
    }
}

yordle::data::meta::ContextualConditionCharacterUnitTags::ContextualConditionCharacterUnitTags(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTagMode = prop->cast_prop<yordle::data::prop::uint8_prop>(1026539963u);
    if (ptr_mTagMode != nullptr) {
        mTagMode = ptr_mTagMode->value;
    }

    auto ptr_mUnitTags = prop->cast_prop<yordle::data::prop::inline_structure_prop>(471909471u);
    if (ptr_mUnitTags != nullptr) {
        mUnitTags = yordle::data::meta::deserialize<yordle::data::meta::ObjectTags>(ptr_mUnitTags, 622921539u);
    }
}

yordle::data::meta::ContextualConditionCharacterHealth::ContextualConditionCharacterHealth(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTargetHealth = prop->cast_prop<yordle::data::prop::float32_prop>(2764435699u);
    if (ptr_mTargetHealth != nullptr) {
        mTargetHealth = ptr_mTargetHealth->value;
    }

    auto ptr_mCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(854730536u);
    if (ptr_mCompareOp != nullptr) {
        mCompareOp = ptr_mCompareOp->value;
    }
}

yordle::data::meta::ContextualConditionIsAlly::ContextualConditionIsAlly(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mIsAlly = prop->cast_prop<yordle::data::prop::bool_prop>(2153685870u);
    if (ptr_mIsAlly != nullptr) {
        mIsAlly = ptr_mIsAlly->value;
    }
}

yordle::data::meta::ContextualConditionCharacterPlayingEmote::ContextualConditionCharacterPlayingEmote(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEmoteID = prop->cast_prop<yordle::data::prop::uint8_prop>(733935245u);
    if (ptr_mEmoteID != nullptr) {
        mEmoteID = ptr_mEmoteID->value;
    }
}

yordle::data::meta::ContextualConditionCharacterPlayingAnimation::ContextualConditionCharacterPlayingAnimation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAnimationNameHash = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1491762337u);
    if (ptr_mAnimationNameHash != nullptr) {
        mAnimationNameHash = ptr_mAnimationNameHash->value;
    }
}

yordle::data::meta::ContextualConditionCharacterDistance::ContextualConditionCharacterDistance(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDistance = prop->cast_prop<yordle::data::prop::float32_prop>(2863703955u);
    if (ptr_mDistance != nullptr) {
        mDistance = ptr_mDistance->value;
    }

    auto ptr_mCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(854730536u);
    if (ptr_mCompareOp != nullptr) {
        mCompareOp = ptr_mCompareOp->value;
    }

    auto ptr_mDistanceTarget = prop->cast_prop<yordle::data::prop::uint8_prop>(742066998u);
    if (ptr_mDistanceTarget != nullptr) {
        mDistanceTarget = ptr_mDistanceTarget->value;
    }
}

yordle::data::meta::ContextualConditionCharacterInRangeForSyncedAnimation::ContextualConditionCharacterInRangeForSyncedAnimation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ContextualConditionCharacterHasTimeRemainingForAnimation::ContextualConditionCharacterHasTimeRemainingForAnimation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAnimationName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4224806837u);
    if (ptr_mAnimationName != nullptr) {
        mAnimationName = ptr_mAnimationName->value;
    }

    auto ptr_mMinRemainingTime = prop->cast_prop<yordle::data::prop::float32_prop>(3792063913u);
    if (ptr_mMinRemainingTime != nullptr) {
        mMinRemainingTime = ptr_mMinRemainingTime->value;
    }
}

yordle::data::meta::ContextualConditionCharacterIsCastingRecall::ContextualConditionCharacterIsCastingRecall(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ContextualConditionCharacterRole::ContextualConditionCharacterRole(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mRole = prop->cast_prop<yordle::data::prop::uint8_prop>(1833284360u);
    if (ptr_mRole != nullptr) {
        mRole = ptr_mRole->value;
    }
}

yordle::data::meta::ContextualConditionCharacterHasCAC::ContextualConditionCharacterHasCAC(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICharacterSubcondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCacs = prop->cast_prop<yordle::data::prop::set_prop>(201153598u);
    if (ptr_mCacs != nullptr) {
        for (const auto &entry : ptr_mCacs->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mCacs.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::IContextualConditionSpell::IContextualConditionSpell(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ContextualConditionSpell::ContextualConditionSpell(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpellSlot = prop->cast_prop<yordle::data::prop::uint32_prop>(72877302u);
    if (ptr_mSpellSlot != nullptr) {
        mSpellSlot = ptr_mSpellSlot->value;
    }

    auto ptr_mChildConditions = prop->cast_prop<yordle::data::prop::set_prop>(4061901048u);
    if (ptr_mChildConditions != nullptr) {
        for (const auto &entry : ptr_mChildConditions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mChildConditions.emplace(yordle::data::meta::deserialize<yordle::data::meta::IContextualConditionSpell>(ptr_entry, 576452982u));
            }
        }
    }
}

yordle::data::meta::ContextualConditionSpellName::ContextualConditionSpellName(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualConditionSpell(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpell = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1456651858u);
    if (ptr_mSpell != nullptr) {
        mSpell = ptr_mSpell->value;
    }
}

yordle::data::meta::ContextualConditionSpellSlot::ContextualConditionSpellSlot(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualConditionSpell(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpellSlot = prop->cast_prop<yordle::data::prop::uint32_prop>(72877302u);
    if (ptr_mSpellSlot != nullptr) {
        mSpellSlot = ptr_mSpellSlot->value;
    }
}

yordle::data::meta::ContextualConditionSpellLevel::ContextualConditionSpellLevel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualConditionSpell(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpellLevel = prop->cast_prop<yordle::data::prop::uint8_prop>(1715485568u);
    if (ptr_mSpellLevel != nullptr) {
        mSpellLevel = ptr_mSpellLevel->value;
    }

    auto ptr_mCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(854730536u);
    if (ptr_mCompareOp != nullptr) {
        mCompareOp = ptr_mCompareOp->value;
    }
}

yordle::data::meta::ContextualConditionSpellIsReady::ContextualConditionSpellIsReady(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualConditionSpell(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpellIsReady = prop->cast_prop<yordle::data::prop::bool_prop>(3896510325u);
    if (ptr_mSpellIsReady != nullptr) {
        mSpellIsReady = ptr_mSpellIsReady->value;
    }
}

yordle::data::meta::IContextualConditionBuff::IContextualConditionBuff(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualCondition(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::x418b95a::x418b95a(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualConditionBuff(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBuff = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2131712633u);
    if (ptr_mBuff != nullptr) {
        mBuff = ptr_mBuff->value;
    }

    auto ptr_x11206e1a = prop->cast_prop<yordle::data::prop::uint8_prop>(287338010u);
    if (ptr_x11206e1a != nullptr) {
        x11206e1a = ptr_x11206e1a->value;
    }
}

yordle::data::meta::xb8d75e45::xb8d75e45(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IContextualConditionBuff(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBuff = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2131712633u);
    if (ptr_mBuff != nullptr) {
        mBuff = ptr_mBuff->value;
    }

    auto ptr_x11206e1a = prop->cast_prop<yordle::data::prop::uint8_prop>(287338010u);
    if (ptr_x11206e1a != nullptr) {
        x11206e1a = ptr_x11206e1a->value;
    }
}

yordle::data::meta::ContextualRule::ContextualRule(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mConditionRelationship = prop->cast_prop<yordle::data::prop::uint32_prop>(2393837363u);
    if (ptr_mConditionRelationship != nullptr) {
        mConditionRelationship = ptr_mConditionRelationship->value;
    }

    auto ptr_mConditions = prop->cast_prop<yordle::data::prop::set_prop>(721382474u);
    if (ptr_mConditions != nullptr) {
        for (const auto &entry : ptr_mConditions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mConditions.emplace(yordle::data::meta::deserialize<yordle::data::meta::IContextualCondition>(ptr_entry, 3400586476u));
            }
        }
    }

    auto ptr_mAudioAction = prop->cast_prop<yordle::data::prop::structure_prop>(3719046512u);
    if (ptr_mAudioAction != nullptr) {
        mAudioAction = yordle::data::meta::deserialize<yordle::data::meta::ContextualActionPlayAudio>(ptr_mAudioAction, 1668724992u);
    }

    auto ptr_mAnimationAction = prop->cast_prop<yordle::data::prop::structure_prop>(1379841852u);
    if (ptr_mAnimationAction != nullptr) {
        mAnimationAction = yordle::data::meta::deserialize<yordle::data::meta::ContextualActionPlayAnimation>(ptr_mAnimationAction, 3095435268u);
    }

    auto ptr_mTriggerEventAction = prop->cast_prop<yordle::data::prop::structure_prop>(3448342398u);
    if (ptr_mTriggerEventAction != nullptr) {
        mTriggerEventAction = yordle::data::meta::deserialize<yordle::data::meta::ContextualActionTriggerEvent>(ptr_mTriggerEventAction, 500070696u);
    }

    auto ptr_mPriority = prop->cast_prop<yordle::data::prop::optional_prop>(259093296u);
    if (ptr_mPriority != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(ptr_mPriority->value);
        if(ptr_entry != nullptr) {
            mPriority = ptr_entry->value;
        }
    }

    auto ptr_x68fee3c4 = prop->cast_prop<yordle::data::prop::bool_prop>(1761534916u);
    if (ptr_x68fee3c4 != nullptr) {
        x68fee3c4 = ptr_x68fee3c4->value;
    }
}

yordle::data::meta::ContextualSituation::ContextualSituation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mChooseRandomValidRule = prop->cast_prop<yordle::data::prop::bool_prop>(1440275182u);
    if (ptr_mChooseRandomValidRule != nullptr) {
        mChooseRandomValidRule = ptr_mChooseRandomValidRule->value;
    }

    auto ptr_mCoolDownTime = prop->cast_prop<yordle::data::prop::float32_prop>(3332944336u);
    if (ptr_mCoolDownTime != nullptr) {
        mCoolDownTime = ptr_mCoolDownTime->value;
    }

    auto ptr_mRules = prop->cast_prop<yordle::data::prop::set_prop>(437350319u);
    if (ptr_mRules != nullptr) {
        for (const auto &entry : ptr_mRules->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mRules.emplace(yordle::data::meta::deserialize<yordle::data::meta::ContextualRule>(ptr_entry, 584100880u));
            }
        }
    }
}

yordle::data::meta::DamageSourceTemplate::DamageSourceTemplate(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_DamageProperties = prop->cast_prop<yordle::data::prop::uint32_prop>(3514593765u);
    if (ptr_DamageProperties != nullptr) {
        DamageProperties = ptr_DamageProperties->value;
    }

    auto ptr_DamageTags = prop->cast_prop<yordle::data::prop::set_prop>(2266760233u);
    if (ptr_DamageTags != nullptr) {
        for (const auto &entry : ptr_DamageTags->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                DamageTags.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::DamageSourceSettings::DamageSourceSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_damageTagDefinition = prop->cast_prop<yordle::data::prop::set_prop>(964539841u);
    if (ptr_damageTagDefinition != nullptr) {
        for (const auto &entry : ptr_damageTagDefinition->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                damageTagDefinition.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_templateDefinition = prop->cast_prop<yordle::data::prop::set_prop>(758688710u);
    if (ptr_templateDefinition != nullptr) {
        for (const auto &entry : ptr_templateDefinition->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                templateDefinition.emplace(yordle::data::meta::deserialize<yordle::data::meta::DamageSourceTemplate>(ptr_entry, 3888872651u));
            }
        }
    }
}

yordle::data::meta::DeathTimesScalingPoint::DeathTimesScalingPoint(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStartTime = prop->cast_prop<yordle::data::prop::uint32_prop>(4200122501u);
    if (ptr_mStartTime != nullptr) {
        mStartTime = ptr_mStartTime->value;
    }

    auto ptr_mPercentIncrease = prop->cast_prop<yordle::data::prop::float32_prop>(467813609u);
    if (ptr_mPercentIncrease != nullptr) {
        mPercentIncrease = ptr_mPercentIncrease->value;
    }
}

yordle::data::meta::DeathTimes::DeathTimes(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTimeDeadPerLevel = prop->cast_prop<yordle::data::prop::set_prop>(2538302744u);
    if (ptr_mTimeDeadPerLevel != nullptr) {
        for (const auto &entry : ptr_mTimeDeadPerLevel->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mTimeDeadPerLevel.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mScalingStartTime = prop->cast_prop<yordle::data::prop::uint32_prop>(1245706998u);
    if (ptr_mScalingStartTime != nullptr) {
        mScalingStartTime = ptr_mScalingStartTime->value;
    }

    auto ptr_mScalingIncrementTime = prop->cast_prop<yordle::data::prop::uint32_prop>(3534568575u);
    if (ptr_mScalingIncrementTime != nullptr) {
        mScalingIncrementTime = ptr_mScalingIncrementTime->value;
    }

    auto ptr_mScalingPercentIncrease = prop->cast_prop<yordle::data::prop::float32_prop>(2421444002u);
    if (ptr_mScalingPercentIncrease != nullptr) {
        mScalingPercentIncrease = ptr_mScalingPercentIncrease->value;
    }

    auto ptr_mScalingPercentCap = prop->cast_prop<yordle::data::prop::float32_prop>(1962144834u);
    if (ptr_mScalingPercentCap != nullptr) {
        mScalingPercentCap = ptr_mScalingPercentCap->value;
    }

    auto ptr_mScalingPoints = prop->cast_prop<yordle::data::prop::set_prop>(4116699630u);
    if (ptr_mScalingPoints != nullptr) {
        for (const auto &entry : ptr_mScalingPoints->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mScalingPoints.emplace(yordle::data::meta::deserialize<yordle::data::meta::DeathTimesScalingPoint>(ptr_entry, 2583264988u));
            }
        }
    }

    auto ptr_mAllowRespawnMods = prop->cast_prop<yordle::data::prop::bool_prop>(772997342u);
    if (ptr_mAllowRespawnMods != nullptr) {
        mAllowRespawnMods = ptr_mAllowRespawnMods->value;
    }

    auto ptr_mStartDeathTimerForZombies = prop->cast_prop<yordle::data::prop::bool_prop>(834620137u);
    if (ptr_mStartDeathTimerForZombies != nullptr) {
        mStartDeathTimerForZombies = ptr_mStartDeathTimerForZombies->value;
    }
}

yordle::data::meta::AbilityResourceStateColorOptions::AbilityResourceStateColorOptions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_color = prop->cast_prop<yordle::data::prop::color_prop>(1031692888u);
    if (ptr_color != nullptr) {
        color = ptr_color->value;
    }

    auto ptr_fadeColor = prop->cast_prop<yordle::data::prop::color_prop>(169023090u);
    if (ptr_fadeColor != nullptr) {
        fadeColor = ptr_fadeColor->value;
    }
}

yordle::data::meta::AbilityResourceStateData::AbilityResourceStateData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_DefaultPalette = prop->cast_prop<yordle::data::prop::structure_prop>(1254380857u);
    if (ptr_DefaultPalette != nullptr) {
        DefaultPalette = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceStateColorOptions>(ptr_DefaultPalette, 3837969205u);
    }

    auto ptr_ColorblindPalette = prop->cast_prop<yordle::data::prop::structure_prop>(308248430u);
    if (ptr_ColorblindPalette != nullptr) {
        ColorblindPalette = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceStateColorOptions>(ptr_ColorblindPalette, 3837969205u);
    }

    auto ptr_textureSuffix = prop->cast_prop<yordle::data::prop::string_prop>(739544421u);
    if (ptr_textureSuffix != nullptr) {
        textureSuffix = ptr_textureSuffix->value;
    }

    auto ptr_animationSuffix = prop->cast_prop<yordle::data::prop::string_prop>(295255940u);
    if (ptr_animationSuffix != nullptr) {
        animationSuffix = ptr_animationSuffix->value;
    }
}

yordle::data::meta::AbilityResourceThresholdIndicatorRange::AbilityResourceThresholdIndicatorRange(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_rangeStart = prop->cast_prop<yordle::data::prop::float32_prop>(1683359434u);
    if (ptr_rangeStart != nullptr) {
        rangeStart = ptr_rangeStart->value;
    }

    auto ptr_rangeEnd = prop->cast_prop<yordle::data::prop::float32_prop>(1656925471u);
    if (ptr_rangeEnd != nullptr) {
        rangeEnd = ptr_rangeEnd->value;
    }
}

yordle::data::meta::AbilityResourceTypeData::AbilityResourceTypeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_states = prop->cast_prop<yordle::data::prop::set_prop>(3128067935u);
    if (ptr_states != nullptr) {
        for (const auto &entry : ptr_states->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                states.emplace(yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceStateData>(ptr_entry, 2001592274u));
            }
        }
    }

    auto ptr_showAbilityResource = prop->cast_prop<yordle::data::prop::bool_prop>(2979040418u);
    if (ptr_showAbilityResource != nullptr) {
        showAbilityResource = ptr_showAbilityResource->value;
    }

    auto ptr_showRegen = prop->cast_prop<yordle::data::prop::bool_prop>(1234146221u);
    if (ptr_showRegen != nullptr) {
        showRegen = ptr_showRegen->value;
    }

    auto ptr_ThresholdIndicatorRanges = prop->cast_prop<yordle::data::prop::set_prop>(61046271u);
    if (ptr_ThresholdIndicatorRanges != nullptr) {
        for (const auto &entry : ptr_ThresholdIndicatorRanges->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                ThresholdIndicatorRanges.emplace(yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceThresholdIndicatorRange>(ptr_entry, 2815698218u));
            }
        }
    }
}

yordle::data::meta::AbilityResourceTypeConfig::AbilityResourceTypeConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mana = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3650585354u);
    if (ptr_mana != nullptr) {
        mana = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_mana, 3011369577u);
    }

    auto ptr_Energy = prop->cast_prop<yordle::data::prop::inline_structure_prop>(701255829u);
    if (ptr_Energy != nullptr) {
        Energy = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_Energy, 3011369577u);
    }

    auto ptr_None = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2913447899u);
    if (ptr_None != nullptr) {
        None = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_None, 3011369577u);
    }

    auto ptr_Shield = prop->cast_prop<yordle::data::prop::inline_structure_prop>(863312304u);
    if (ptr_Shield != nullptr) {
        Shield = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_Shield, 3011369577u);
    }

    auto ptr_BattleFury = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1229507531u);
    if (ptr_BattleFury != nullptr) {
        BattleFury = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_BattleFury, 3011369577u);
    }

    auto ptr_DragonFury = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2700506754u);
    if (ptr_DragonFury != nullptr) {
        DragonFury = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_DragonFury, 3011369577u);
    }

    auto ptr_Rage = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2125639436u);
    if (ptr_Rage != nullptr) {
        Rage = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_Rage, 3011369577u);
    }

    auto ptr_Heat = prop->cast_prop<yordle::data::prop::inline_structure_prop>(577319571u);
    if (ptr_Heat != nullptr) {
        Heat = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_Heat, 3011369577u);
    }

    auto ptr_PrimalFury = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2843185348u);
    if (ptr_PrimalFury != nullptr) {
        PrimalFury = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_PrimalFury, 3011369577u);
    }

    auto ptr_Ferocity = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2532758328u);
    if (ptr_Ferocity != nullptr) {
        Ferocity = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_Ferocity, 3011369577u);
    }

    auto ptr_Bloodwell = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3379016527u);
    if (ptr_Bloodwell != nullptr) {
        Bloodwell = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_Bloodwell, 3011369577u);
    }

    auto ptr_Wind = prop->cast_prop<yordle::data::prop::inline_structure_prop>(336916743u);
    if (ptr_Wind != nullptr) {
        Wind = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_Wind, 3011369577u);
    }

    auto ptr_Ammo = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1536888239u);
    if (ptr_Ammo != nullptr) {
        Ammo = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_Ammo, 3011369577u);
    }

    auto ptr_Moonlight = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3337955220u);
    if (ptr_Moonlight != nullptr) {
        Moonlight = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_Moonlight, 3011369577u);
    }

    auto ptr_Other = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3363671541u);
    if (ptr_Other != nullptr) {
        Other = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceTypeData>(ptr_Other, 3011369577u);
    }
}

yordle::data::meta::EvolutionDescription::EvolutionDescription(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFlags = prop->cast_prop<yordle::data::prop::uint32_prop>(2374013483u);
    if (ptr_mFlags != nullptr) {
        mFlags = ptr_mFlags->value;
    }

    auto ptr_mTitle = prop->cast_prop<yordle::data::prop::string_prop>(1591387806u);
    if (ptr_mTitle != nullptr) {
        mTitle = ptr_mTitle->value;
    }

    auto ptr_mTooltips = prop->cast_prop<yordle::data::prop::set_prop>(3441038368u);
    if (ptr_mTooltips != nullptr) {
        for (const auto &entry : ptr_mTooltips->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mTooltips.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mIconNames = prop->cast_prop<yordle::data::prop::set_prop>(2968260419u);
    if (ptr_mIconNames != nullptr) {
        for (const auto &entry : ptr_mIconNames->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mIconNames.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ExperienceCurveData::ExperienceCurveData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mExperienceRequiredPerLevel = prop->cast_prop<yordle::data::prop::set_prop>(3148056194u);
    if (ptr_mExperienceRequiredPerLevel != nullptr) {
        for (const auto &entry : ptr_mExperienceRequiredPerLevel->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mExperienceRequiredPerLevel.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mExperienceGrantedForKillPerLevel = prop->cast_prop<yordle::data::prop::set_prop>(2702274825u);
    if (ptr_mExperienceGrantedForKillPerLevel != nullptr) {
        for (const auto &entry : ptr_mExperienceGrantedForKillPerLevel->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mExperienceGrantedForKillPerLevel.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x9980fa2e = prop->cast_prop<yordle::data::prop::set_prop>(2575366702u);
    if (ptr_x9980fa2e != nullptr) {
        for (const auto &entry : ptr_x9980fa2e->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                x9980fa2e.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mBaseExperienceMultiplier = prop->cast_prop<yordle::data::prop::float32_prop>(3825970178u);
    if (ptr_mBaseExperienceMultiplier != nullptr) {
        mBaseExperienceMultiplier = ptr_mBaseExperienceMultiplier->value;
    }

    auto ptr_mLevelDifferenceExperienceMultiplier = prop->cast_prop<yordle::data::prop::float32_prop>(1104070242u);
    if (ptr_mLevelDifferenceExperienceMultiplier != nullptr) {
        mLevelDifferenceExperienceMultiplier = ptr_mLevelDifferenceExperienceMultiplier->value;
    }

    auto ptr_mMinimumExperienceMultiplier = prop->cast_prop<yordle::data::prop::float32_prop>(3571300207u);
    if (ptr_mMinimumExperienceMultiplier != nullptr) {
        mMinimumExperienceMultiplier = ptr_mMinimumExperienceMultiplier->value;
    }
}

yordle::data::meta::ExperienceModData::ExperienceModData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPlayerMinionSplitXp = prop->cast_prop<yordle::data::prop::set_prop>(3242371953u);
    if (ptr_mPlayerMinionSplitXp != nullptr) {
        for (const auto &entry : ptr_mPlayerMinionSplitXp->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mPlayerMinionSplitXp.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::StatUIData::StatUIData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mAbbreviation = prop->cast_prop<yordle::data::prop::string_prop>(1924480492u);
    if (ptr_mAbbreviation != nullptr) {
        mAbbreviation = ptr_mAbbreviation->value;
    }

    auto ptr_mDisplayType = prop->cast_prop<yordle::data::prop::uint8_prop>(4293193334u);
    if (ptr_mDisplayType != nullptr) {
        mDisplayType = ptr_mDisplayType->value;
    }

    auto ptr_mIconKey = prop->cast_prop<yordle::data::prop::string_prop>(9297440u);
    if (ptr_mIconKey != nullptr) {
        mIconKey = ptr_mIconKey->value;
    }

    auto ptr_mScalingTagKey = prop->cast_prop<yordle::data::prop::string_prop>(3047920162u);
    if (ptr_mScalingTagKey != nullptr) {
        mScalingTagKey = ptr_mScalingTagKey->value;
    }
}

yordle::data::meta::GlobalStatsUIData::GlobalStatsUIData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStatUIData = prop->cast_prop<yordle::data::prop::map_prop>(602756116u);
    if (ptr_mStatUIData != nullptr) {
        for (const auto &pair : ptr_mStatUIData->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mStatUIData[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::StatUIData>(ptr_value, 309827837u);
            }
        }
    }

    auto ptr_BaseOutputIconModifier = prop->cast_prop<yordle::data::prop::string_prop>(3133585001u);
    if (ptr_BaseOutputIconModifier != nullptr) {
        BaseOutputIconModifier = ptr_BaseOutputIconModifier->value;
    }

    auto ptr_BonusOutputIconModifier = prop->cast_prop<yordle::data::prop::string_prop>(2757277781u);
    if (ptr_BonusOutputIconModifier != nullptr) {
        BonusOutputIconModifier = ptr_BonusOutputIconModifier->value;
    }

    auto ptr_mNumberStyle = prop->cast_prop<yordle::data::prop::string_prop>(3444945562u);
    if (ptr_mNumberStyle != nullptr) {
        mNumberStyle = ptr_mNumberStyle->value;
    }

    auto ptr_mNumberStylePercent = prop->cast_prop<yordle::data::prop::string_prop>(1205163307u);
    if (ptr_mNumberStylePercent != nullptr) {
        mNumberStylePercent = ptr_mNumberStylePercent->value;
    }

    auto ptr_mNumberStyleBonus = prop->cast_prop<yordle::data::prop::string_prop>(801862189u);
    if (ptr_mNumberStyleBonus != nullptr) {
        mNumberStyleBonus = ptr_mNumberStyleBonus->value;
    }

    auto ptr_mNumberStyleBonusPercent = prop->cast_prop<yordle::data::prop::string_prop>(1961875618u);
    if (ptr_mNumberStyleBonusPercent != nullptr) {
        mNumberStyleBonusPercent = ptr_mNumberStyleBonusPercent->value;
    }

    auto ptr_FormulaPartStyleBonus = prop->cast_prop<yordle::data::prop::string_prop>(2611516976u);
    if (ptr_FormulaPartStyleBonus != nullptr) {
        FormulaPartStyleBonus = ptr_FormulaPartStyleBonus->value;
    }

    auto ptr_FormulaPartStyleBonusPercent = prop->cast_prop<yordle::data::prop::string_prop>(363059393u);
    if (ptr_FormulaPartStyleBonusPercent != nullptr) {
        FormulaPartStyleBonusPercent = ptr_FormulaPartStyleBonusPercent->value;
    }

    auto ptr_FormulaPartStyle = prop->cast_prop<yordle::data::prop::string_prop>(517944321u);
    if (ptr_FormulaPartStyle != nullptr) {
        FormulaPartStyle = ptr_FormulaPartStyle->value;
    }

    auto ptr_FormulaPartStylePercent = prop->cast_prop<yordle::data::prop::string_prop>(3885466478u);
    if (ptr_FormulaPartStylePercent != nullptr) {
        FormulaPartStylePercent = ptr_FormulaPartStylePercent->value;
    }

    auto ptr_FormulaPartRangeStyleBonus = prop->cast_prop<yordle::data::prop::string_prop>(572538325u);
    if (ptr_FormulaPartRangeStyleBonus != nullptr) {
        FormulaPartRangeStyleBonus = ptr_FormulaPartRangeStyleBonus->value;
    }

    auto ptr_FormulaPartRangeStyleBonusPercent = prop->cast_prop<yordle::data::prop::string_prop>(1165969578u);
    if (ptr_FormulaPartRangeStyleBonusPercent != nullptr) {
        FormulaPartRangeStyleBonusPercent = ptr_FormulaPartRangeStyleBonusPercent->value;
    }

    auto ptr_FormulaPartRangeStyle = prop->cast_prop<yordle::data::prop::string_prop>(3069567922u);
    if (ptr_FormulaPartRangeStyle != nullptr) {
        FormulaPartRangeStyle = ptr_FormulaPartRangeStyle->value;
    }

    auto ptr_FormulaPartRangeStylePercent = prop->cast_prop<yordle::data::prop::string_prop>(393775843u);
    if (ptr_FormulaPartRangeStylePercent != nullptr) {
        FormulaPartRangeStylePercent = ptr_FormulaPartRangeStylePercent->value;
    }

    auto ptr_mNumberStyleTotalAndCoefficient = prop->cast_prop<yordle::data::prop::string_prop>(3024034466u);
    if (ptr_mNumberStyleTotalAndCoefficient != nullptr) {
        mNumberStyleTotalAndCoefficient = ptr_mNumberStyleTotalAndCoefficient->value;
    }

    auto ptr_mNumberStyleTotalAndCoefficientPercent = prop->cast_prop<yordle::data::prop::string_prop>(465320723u);
    if (ptr_mNumberStyleTotalAndCoefficientPercent != nullptr) {
        mNumberStyleTotalAndCoefficientPercent = ptr_mNumberStyleTotalAndCoefficientPercent->value;
    }

    auto ptr_NumberStyleTotalAndScalingIcons = prop->cast_prop<yordle::data::prop::string_prop>(3901102167u);
    if (ptr_NumberStyleTotalAndScalingIcons != nullptr) {
        NumberStyleTotalAndScalingIcons = ptr_NumberStyleTotalAndScalingIcons->value;
    }

    auto ptr_NumberStyleTotalAndFormula = prop->cast_prop<yordle::data::prop::string_prop>(178171280u);
    if (ptr_NumberStyleTotalAndFormula != nullptr) {
        NumberStyleTotalAndFormula = ptr_NumberStyleTotalAndFormula->value;
    }

    auto ptr_mManaIconKey = prop->cast_prop<yordle::data::prop::string_prop>(3983319277u);
    if (ptr_mManaIconKey != nullptr) {
        mManaIconKey = ptr_mManaIconKey->value;
    }

    auto ptr_mManaScalingTagKey = prop->cast_prop<yordle::data::prop::string_prop>(3917617343u);
    if (ptr_mManaScalingTagKey != nullptr) {
        mManaScalingTagKey = ptr_mManaScalingTagKey->value;
    }

    auto ptr_x2fa6c4b0 = prop->cast_prop<yordle::data::prop::string_prop>(799458480u);
    if (ptr_x2fa6c4b0 != nullptr) {
        x2fa6c4b0 = ptr_x2fa6c4b0->value;
    }

    auto ptr_x4ac09eef = prop->cast_prop<yordle::data::prop::string_prop>(1254137583u);
    if (ptr_x4ac09eef != nullptr) {
        x4ac09eef = ptr_x4ac09eef->value;
    }

    auto ptr_xf04c21cd = prop->cast_prop<yordle::data::prop::uint8_prop>(4031521229u);
    if (ptr_xf04c21cd != nullptr) {
        xf04c21cd = ptr_xf04c21cd->value;
    }

    auto ptr_xa844caca = prop->cast_prop<yordle::data::prop::uint8_prop>(2823080650u);
    if (ptr_xa844caca != nullptr) {
        xa844caca = ptr_xa844caca->value;
    }

    auto ptr_x97343c80 = prop->cast_prop<yordle::data::prop::uint8_prop>(2536782976u);
    if (ptr_x97343c80 != nullptr) {
        x97343c80 = ptr_x97343c80->value;
    }
}

yordle::data::meta::CameraTrapezoid::CameraTrapezoid(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x9811eb50 = prop->cast_prop<yordle::data::prop::float32_prop>(2551311184u);
    if (ptr_x9811eb50 != nullptr) {
        x9811eb50 = ptr_x9811eb50->value;
    }

    auto ptr_x82cb6669 = prop->cast_prop<yordle::data::prop::float32_prop>(2194368105u);
    if (ptr_x82cb6669 != nullptr) {
        x82cb6669 = ptr_x82cb6669->value;
    }

    auto ptr_mMaxXTop = prop->cast_prop<yordle::data::prop::float32_prop>(1073311597u);
    if (ptr_mMaxXTop != nullptr) {
        mMaxXTop = ptr_mMaxXTop->value;
    }

    auto ptr_mMaxXBottom = prop->cast_prop<yordle::data::prop::float32_prop>(3028376713u);
    if (ptr_mMaxXBottom != nullptr) {
        mMaxXBottom = ptr_mMaxXBottom->value;
    }
}

yordle::data::meta::CameraConfig::CameraConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x671c887 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(108120199u);
    if (ptr_x671c887 != nullptr) {
        x671c887 = yordle::data::meta::deserialize<yordle::data::meta::CameraTrapezoid>(ptr_x671c887, 1207715590u);
    }

    auto ptr_mAccelerationTimeMouse = prop->cast_prop<yordle::data::prop::float32_prop>(3787365436u);
    if (ptr_mAccelerationTimeMouse != nullptr) {
        mAccelerationTimeMouse = ptr_mAccelerationTimeMouse->value;
    }

    auto ptr_mDecelerationTimeMouse = prop->cast_prop<yordle::data::prop::float32_prop>(3670730681u);
    if (ptr_mDecelerationTimeMouse != nullptr) {
        mDecelerationTimeMouse = ptr_mDecelerationTimeMouse->value;
    }

    auto ptr_mAccelerationTimeKeyboard = prop->cast_prop<yordle::data::prop::float32_prop>(4184833772u);
    if (ptr_mAccelerationTimeKeyboard != nullptr) {
        mAccelerationTimeKeyboard = ptr_mAccelerationTimeKeyboard->value;
    }

    auto ptr_mDecelerationTimeKeyboard = prop->cast_prop<yordle::data::prop::float32_prop>(3920233263u);
    if (ptr_mDecelerationTimeKeyboard != nullptr) {
        mDecelerationTimeKeyboard = ptr_mDecelerationTimeKeyboard->value;
    }

    auto ptr_mTopdownZoom = prop->cast_prop<yordle::data::prop::float32_prop>(1960749264u);
    if (ptr_mTopdownZoom != nullptr) {
        mTopdownZoom = ptr_mTopdownZoom->value;
    }

    auto ptr_mZoomMinDistance = prop->cast_prop<yordle::data::prop::float32_prop>(4200292578u);
    if (ptr_mZoomMinDistance != nullptr) {
        mZoomMinDistance = ptr_mZoomMinDistance->value;
    }

    auto ptr_mZoomMaxDistance = prop->cast_prop<yordle::data::prop::float32_prop>(4044280628u);
    if (ptr_mZoomMaxDistance != nullptr) {
        mZoomMaxDistance = ptr_mZoomMaxDistance->value;
    }

    auto ptr_mZoomEaseTime = prop->cast_prop<yordle::data::prop::float32_prop>(3525736568u);
    if (ptr_mZoomEaseTime != nullptr) {
        mZoomEaseTime = ptr_mZoomEaseTime->value;
    }

    auto ptr_mZoomMinSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(2229099776u);
    if (ptr_mZoomMinSpeed != nullptr) {
        mZoomMinSpeed = ptr_mZoomMinSpeed->value;
    }

    auto ptr_mDragScale = prop->cast_prop<yordle::data::prop::float32_prop>(1386936032u);
    if (ptr_mDragScale != nullptr) {
        mDragScale = ptr_mDragScale->value;
    }

    auto ptr_mDragMomentumDecay = prop->cast_prop<yordle::data::prop::float32_prop>(360328530u);
    if (ptr_mDragMomentumDecay != nullptr) {
        mDragMomentumDecay = ptr_mDragMomentumDecay->value;
    }

    auto ptr_mDragMomentumRecencyWeight = prop->cast_prop<yordle::data::prop::float32_prop>(1962047921u);
    if (ptr_mDragMomentumRecencyWeight != nullptr) {
        mDragMomentumRecencyWeight = ptr_mDragMomentumRecencyWeight->value;
    }

    auto ptr_mLockedCameraEasingDistance = prop->cast_prop<yordle::data::prop::float32_prop>(2013047739u);
    if (ptr_mLockedCameraEasingDistance != nullptr) {
        mLockedCameraEasingDistance = ptr_mLockedCameraEasingDistance->value;
    }

    auto ptr_mTransitionDurationIntoCinematicMode = prop->cast_prop<yordle::data::prop::float32_prop>(3456068413u);
    if (ptr_mTransitionDurationIntoCinematicMode != nullptr) {
        mTransitionDurationIntoCinematicMode = ptr_mTransitionDurationIntoCinematicMode->value;
    }

    auto ptr_x71c9323a = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1909011002u);
    if (ptr_x71c9323a != nullptr) {
        x71c9323a = yordle::data::meta::deserialize<yordle::data::meta::CameraTrapezoid>(ptr_x71c9323a, 1207715590u);
    }

    auto ptr_xf7617555 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4150359381u);
    if (ptr_xf7617555 != nullptr) {
        xf7617555 = yordle::data::meta::deserialize<yordle::data::meta::CameraTrapezoid>(ptr_xf7617555, 1207715590u);
    }

    auto ptr_x383f51a8 = prop->cast_prop<yordle::data::prop::float32_prop>(943673768u);
    if (ptr_x383f51a8 != nullptr) {
        x383f51a8 = ptr_x383f51a8->value;
    }
}

yordle::data::meta::MapAudioDataProperties::MapAudioDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_BaseData = prop->cast_prop<yordle::data::prop::reference_prop>(2231333056u);
    if (ptr_BaseData != nullptr) {
        BaseData = ptr_BaseData->value;
    }

    auto ptr_bankUnits = prop->cast_prop<yordle::data::prop::set_prop>(4176650130u);
    if (ptr_bankUnits != nullptr) {
        for (const auto &entry : ptr_bankUnits->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                bankUnits.emplace(yordle::data::meta::deserialize<yordle::data::meta::BankUnit>(ptr_entry, 2755749141u));
            }
        }
    }

    auto ptr_features = prop->cast_prop<yordle::data::prop::set_prop>(1602454474u);
    if (ptr_features != nullptr) {
        for (const auto &entry : ptr_features->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                features.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ClientStateAudioDataProperties::ClientStateAudioDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_BankPaths = prop->cast_prop<yordle::data::prop::set_prop>(3322153993u);
    if (ptr_BankPaths != nullptr) {
        for (const auto &entry : ptr_BankPaths->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                BankPaths.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_themeMusic = prop->cast_prop<yordle::data::prop::string_prop>(1403862017u);
    if (ptr_themeMusic != nullptr) {
        themeMusic = ptr_themeMusic->value;
    }
}

yordle::data::meta::FeatureAudioDataProperties::FeatureAudioDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_bankUnits = prop->cast_prop<yordle::data::prop::set_prop>(4176650130u);
    if (ptr_bankUnits != nullptr) {
        for (const auto &entry : ptr_bankUnits->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                bankUnits.emplace(yordle::data::meta::deserialize<yordle::data::meta::BankUnit>(ptr_entry, 2755749141u));
            }
        }
    }

    auto ptr_music = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2677821396u);
    if (ptr_music != nullptr) {
        music = yordle::data::meta::deserialize<yordle::data::meta::MusicAudioDataProperties>(ptr_music, 1714459771u);
    }

    auto ptr_feature = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3837424445u);
    if (ptr_feature != nullptr) {
        feature = ptr_feature->value;
    }
}

yordle::data::meta::BankUnit::BankUnit(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_bankPath = prop->cast_prop<yordle::data::prop::set_prop>(706850048u);
    if (ptr_bankPath != nullptr) {
        for (const auto &entry : ptr_bankPath->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                bankPath.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_events = prop->cast_prop<yordle::data::prop::set_prop>(316203908u);
    if (ptr_events != nullptr) {
        for (const auto &entry : ptr_events->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                events.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_asynchrone = prop->cast_prop<yordle::data::prop::bool_prop>(2829408511u);
    if (ptr_asynchrone != nullptr) {
        asynchrone = ptr_asynchrone->value;
    }

    auto ptr_voiceOver = prop->cast_prop<yordle::data::prop::bool_prop>(991144523u);
    if (ptr_voiceOver != nullptr) {
        voiceOver = ptr_voiceOver->value;
    }
}

yordle::data::meta::AudioTagListProperties::AudioTagListProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_tags = prop->cast_prop<yordle::data::prop::set_prop>(4095142816u);
    if (ptr_tags != nullptr) {
        for (const auto &entry : ptr_tags->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                tags.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_Key = prop->cast_prop<yordle::data::prop::string_prop>(1746258028u);
    if (ptr_Key != nullptr) {
        Key = ptr_Key->value;
    }
}

yordle::data::meta::AudioSystemDataProperties::AudioSystemDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_systemTagEventList = prop->cast_prop<yordle::data::prop::set_prop>(2500438516u);
    if (ptr_systemTagEventList != nullptr) {
        for (const auto &entry : ptr_systemTagEventList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                systemTagEventList.emplace(yordle::data::meta::deserialize<yordle::data::meta::AudioTagListProperties>(ptr_entry, 1123665566u));
            }
        }
    }
}

yordle::data::meta::AudioStatusEvents::AudioStatusEvents(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_rtpcName = prop->cast_prop<yordle::data::prop::string_prop>(16944333u);
    if (ptr_rtpcName != nullptr) {
        rtpcName = ptr_rtpcName->value;
    }

    auto ptr_startEvent = prop->cast_prop<yordle::data::prop::string_prop>(2202629181u);
    if (ptr_startEvent != nullptr) {
        startEvent = ptr_startEvent->value;
    }

    auto ptr_stopEvent = prop->cast_prop<yordle::data::prop::string_prop>(1943255615u);
    if (ptr_stopEvent != nullptr) {
        stopEvent = ptr_stopEvent->value;
    }
}

yordle::data::meta::GlobalAudioDataProperties::GlobalAudioDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_systems = prop->cast_prop<yordle::data::prop::map_prop>(155924029u);
    if (ptr_systems != nullptr) {
        for (const auto &pair : ptr_systems->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                systems[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_cooldownVoiceOver = prop->cast_prop<yordle::data::prop::float32_prop>(2077673440u);
    if (ptr_cooldownVoiceOver != nullptr) {
        cooldownVoiceOver = ptr_cooldownVoiceOver->value;
    }

    auto ptr_localPlayerStatusEvents = prop->cast_prop<yordle::data::prop::map_prop>(1580370978u);
    if (ptr_localPlayerStatusEvents != nullptr) {
        for (const auto &pair : ptr_localPlayerStatusEvents->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                localPlayerStatusEvents[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::AudioStatusEvents>(ptr_value, 2254221038u);
            }
        }
    }

    auto ptr_x103e4044 = prop->cast_prop<yordle::data::prop::uint32_prop>(272515140u);
    if (ptr_x103e4044 != nullptr) {
        x103e4044 = ptr_x103e4044->value;
    }
}

yordle::data::meta::MusicAudioDataProperties::MusicAudioDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_themeMusicID = prop->cast_prop<yordle::data::prop::string_prop>(3987181396u);
    if (ptr_themeMusicID != nullptr) {
        themeMusicID = ptr_themeMusicID->value;
    }

    auto ptr_themeMusicTransitionID = prop->cast_prop<yordle::data::prop::string_prop>(2362609355u);
    if (ptr_themeMusicTransitionID != nullptr) {
        themeMusicTransitionID = ptr_themeMusicTransitionID->value;
    }

    auto ptr_legacyThemeMusicID = prop->cast_prop<yordle::data::prop::string_prop>(3972064919u);
    if (ptr_legacyThemeMusicID != nullptr) {
        legacyThemeMusicID = ptr_legacyThemeMusicID->value;
    }

    auto ptr_legacyThemeMusicTransitionID = prop->cast_prop<yordle::data::prop::string_prop>(1339397916u);
    if (ptr_legacyThemeMusicTransitionID != nullptr) {
        legacyThemeMusicTransitionID = ptr_legacyThemeMusicTransitionID->value;
    }

    auto ptr_victoryMusicID = prop->cast_prop<yordle::data::prop::string_prop>(3529353225u);
    if (ptr_victoryMusicID != nullptr) {
        victoryMusicID = ptr_victoryMusicID->value;
    }

    auto ptr_defeatMusicID = prop->cast_prop<yordle::data::prop::string_prop>(1207171904u);
    if (ptr_defeatMusicID != nullptr) {
        defeatMusicID = ptr_defeatMusicID->value;
    }

    auto ptr_victoryBannerSound = prop->cast_prop<yordle::data::prop::string_prop>(1945748454u);
    if (ptr_victoryBannerSound != nullptr) {
        victoryBannerSound = ptr_victoryBannerSound->value;
    }

    auto ptr_defeatBannerSound = prop->cast_prop<yordle::data::prop::string_prop>(670540163u);
    if (ptr_defeatBannerSound != nullptr) {
        defeatBannerSound = ptr_defeatBannerSound->value;
    }

    auto ptr_ambientEvent = prop->cast_prop<yordle::data::prop::string_prop>(1071258201u);
    if (ptr_ambientEvent != nullptr) {
        ambientEvent = ptr_ambientEvent->value;
    }

    auto ptr_reverbPreset = prop->cast_prop<yordle::data::prop::string_prop>(2594307870u);
    if (ptr_reverbPreset != nullptr) {
        reverbPreset = ptr_reverbPreset->value;
    }

    auto ptr_GameStartEvent = prop->cast_prop<yordle::data::prop::string_prop>(4159699015u);
    if (ptr_GameStartEvent != nullptr) {
        GameStartEvent = ptr_GameStartEvent->value;
    }

    auto ptr_GameQuitEvent = prop->cast_prop<yordle::data::prop::string_prop>(3644210888u);
    if (ptr_GameQuitEvent != nullptr) {
        GameQuitEvent = ptr_GameQuitEvent->value;
    }
}

yordle::data::meta::EVOSettings::EVOSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEnableChatVO = prop->cast_prop<yordle::data::prop::bool_prop>(2177546374u);
    if (ptr_mEnableChatVO != nullptr) {
        mEnableChatVO = ptr_mEnableChatVO->value;
    }

    auto ptr_mEnableAnnouncerVOReplacement = prop->cast_prop<yordle::data::prop::bool_prop>(132329471u);
    if (ptr_mEnableAnnouncerVOReplacement != nullptr) {
        mEnableAnnouncerVOReplacement = ptr_mEnableAnnouncerVOReplacement->value;
    }

    auto ptr_mChatVOThrottleCounterThreshold = prop->cast_prop<yordle::data::prop::int32_prop>(3674329494u);
    if (ptr_mChatVOThrottleCounterThreshold != nullptr) {
        mChatVOThrottleCounterThreshold = ptr_mChatVOThrottleCounterThreshold->value;
    }

    auto ptr_mChatVOThrottleCounterDecayTime = prop->cast_prop<yordle::data::prop::float32_prop>(4276238770u);
    if (ptr_mChatVOThrottleCounterDecayTime != nullptr) {
        mChatVOThrottleCounterDecayTime = ptr_mChatVOThrottleCounterDecayTime->value;
    }

    auto ptr_mPingVOThrottleThreshold = prop->cast_prop<yordle::data::prop::float32_prop>(2519663562u);
    if (ptr_mPingVOThrottleThreshold != nullptr) {
        mPingVOThrottleThreshold = ptr_mPingVOThrottleThreshold->value;
    }
}

yordle::data::meta::ICatalogEntryOwner::ICatalogEntryOwner(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::CatalogEntry::CatalogEntry(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_contentId = prop->cast_prop<yordle::data::prop::string_prop>(1423177679u);
    if (ptr_contentId != nullptr) {
        contentId = ptr_contentId->value;
    }

    auto ptr_itemID = prop->cast_prop<yordle::data::prop::uint32_prop>(331209851u);
    if (ptr_itemID != nullptr) {
        itemID = ptr_itemID->value;
    }

    auto ptr_offerId = prop->cast_prop<yordle::data::prop::string_prop>(1943751208u);
    if (ptr_offerId != nullptr) {
        offerId = ptr_offerId->value;
    }
}

yordle::data::meta::CensoredImage::CensoredImage(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_image = prop->cast_prop<yordle::data::prop::string_prop>(3008443898u);
    if (ptr_image != nullptr) {
        image = ptr_image->value;
    }

    auto ptr_UncensoredImages = prop->cast_prop<yordle::data::prop::map_prop>(862364035u);
    if (ptr_UncensoredImages != nullptr) {
        for (const auto &pair : ptr_UncensoredImages->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                UncensoredImages[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::Character::Character(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }
}

yordle::data::meta::SkinCharacterDataProperties_CharacterIdleEffect::SkinCharacterDataProperties_CharacterIdleEffect(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_effectKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2600665331u);
    if (ptr_effectKey != nullptr) {
        effectKey = ptr_effectKey->value;
    }

    auto ptr_effectName = prop->cast_prop<yordle::data::prop::string_prop>(1209207887u);
    if (ptr_effectName != nullptr) {
        effectName = ptr_effectName->value;
    }

    auto ptr_position = prop->cast_prop<yordle::data::prop::vector_prop>(2471448074u);
    if (ptr_position != nullptr) {
        position = ptr_position->value;
    }

    auto ptr_boneName = prop->cast_prop<yordle::data::prop::string_prop>(516659084u);
    if (ptr_boneName != nullptr) {
        boneName = ptr_boneName->value;
    }

    auto ptr_targetBoneName = prop->cast_prop<yordle::data::prop::string_prop>(3661793589u);
    if (ptr_targetBoneName != nullptr) {
        targetBoneName = ptr_targetBoneName->value;
    }
}

yordle::data::meta::SkinCharacterMetaDataProperties_SpawningSkinOffset::SkinCharacterMetaDataProperties_SpawningSkinOffset(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_tag = prop->cast_prop<yordle::data::prop::string_prop>(2516003219u);
    if (ptr_tag != nullptr) {
        tag = ptr_tag->value;
    }

    auto ptr_offset = prop->cast_prop<yordle::data::prop::int32_prop>(348705738u);
    if (ptr_offset != nullptr) {
        offset = ptr_offset->value;
    }
}

yordle::data::meta::ESportTeamEntry::ESportTeamEntry(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_teamName = prop->cast_prop<yordle::data::prop::string_prop>(1504895559u);
    if (ptr_teamName != nullptr) {
        teamName = ptr_teamName->value;
    }

    auto ptr_leagueName = prop->cast_prop<yordle::data::prop::string_prop>(390952403u);
    if (ptr_leagueName != nullptr) {
        leagueName = ptr_leagueName->value;
    }

    auto ptr_textureName = prop->cast_prop<yordle::data::prop::string_prop>(3004290287u);
    if (ptr_textureName != nullptr) {
        textureName = ptr_textureName->value;
    }
}

yordle::data::meta::ESportLeagueEntry::ESportLeagueEntry(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_leagueName = prop->cast_prop<yordle::data::prop::string_prop>(390952403u);
    if (ptr_leagueName != nullptr) {
        leagueName = ptr_leagueName->value;
    }

    auto ptr_textureName = prop->cast_prop<yordle::data::prop::string_prop>(3004290287u);
    if (ptr_textureName != nullptr) {
        textureName = ptr_textureName->value;
    }
}

yordle::data::meta::SkinCharacterMetaDataProperties::SkinCharacterMetaDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_eSportCharacter = prop->cast_prop<yordle::data::prop::bool_prop>(1517097453u);
    if (ptr_eSportCharacter != nullptr) {
        eSportCharacter = ptr_eSportCharacter->value;
    }

    auto ptr_eSportTeamTable = prop->cast_prop<yordle::data::prop::set_prop>(1806054589u);
    if (ptr_eSportTeamTable != nullptr) {
        for (const auto &entry : ptr_eSportTeamTable->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                eSportTeamTable.emplace(yordle::data::meta::deserialize<yordle::data::meta::ESportTeamEntry>(ptr_entry, 336658597u));
            }
        }
    }

    auto ptr_eSportLeagueTable = prop->cast_prop<yordle::data::prop::set_prop>(1361690349u);
    if (ptr_eSportLeagueTable != nullptr) {
        for (const auto &entry : ptr_eSportLeagueTable->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                eSportLeagueTable.emplace(yordle::data::meta::deserialize<yordle::data::meta::ESportLeagueEntry>(ptr_entry, 1219793301u));
            }
        }
    }

    auto ptr_skinBasedRelativeColorScheme = prop->cast_prop<yordle::data::prop::bool_prop>(2789129537u);
    if (ptr_skinBasedRelativeColorScheme != nullptr) {
        skinBasedRelativeColorScheme = ptr_skinBasedRelativeColorScheme->value;
    }

    auto ptr_isRelativeColorCharacter = prop->cast_prop<yordle::data::prop::bool_prop>(1398986495u);
    if (ptr_isRelativeColorCharacter != nullptr) {
        isRelativeColorCharacter = ptr_isRelativeColorCharacter->value;
    }

    auto ptr_relativeColorSwapTable = prop->cast_prop<yordle::data::prop::set_prop>(4234249205u);
    if (ptr_relativeColorSwapTable != nullptr) {
        for (const auto &entry : ptr_relativeColorSwapTable->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(entry);
            if (ptr_entry != nullptr) {
                relativeColorSwapTable.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_useAudioProperties = prop->cast_prop<yordle::data::prop::bool_prop>(1072761243u);
    if (ptr_useAudioProperties != nullptr) {
        useAudioProperties = ptr_useAudioProperties->value;
    }

    auto ptr_spawningSkinOffsets = prop->cast_prop<yordle::data::prop::set_prop>(3410485135u);
    if (ptr_spawningSkinOffsets != nullptr) {
        for (const auto &entry : ptr_spawningSkinOffsets->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                spawningSkinOffsets.emplace(yordle::data::meta::deserialize<yordle::data::meta::SkinCharacterMetaDataProperties_SpawningSkinOffset>(ptr_entry, 1393249095u));
            }
        }
    }

    auto ptr_useGDSBinaries = prop->cast_prop<yordle::data::prop::bool_prop>(2816314501u);
    if (ptr_useGDSBinaries != nullptr) {
        useGDSBinaries = ptr_useGDSBinaries->value;
    }
}

yordle::data::meta::SkinAudioProperties::SkinAudioProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_tagEventList = prop->cast_prop<yordle::data::prop::set_prop>(3596332109u);
    if (ptr_tagEventList != nullptr) {
        for (const auto &entry : ptr_tagEventList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                tagEventList.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_bankUnits = prop->cast_prop<yordle::data::prop::set_prop>(4176650130u);
    if (ptr_bankUnits != nullptr) {
        for (const auto &entry : ptr_bankUnits->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                bankUnits.emplace(yordle::data::meta::deserialize<yordle::data::meta::BankUnit>(ptr_entry, 2755749141u));
            }
        }
    }
}

yordle::data::meta::SkinAnimationProperties::SkinAnimationProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_animationGraphData = prop->cast_prop<yordle::data::prop::reference_prop>(4126869447u);
    if (ptr_animationGraphData != nullptr) {
        animationGraphData = ptr_animationGraphData->value;
    }
}

yordle::data::meta::SkinEmblem::SkinEmblem(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEmblemData = prop->cast_prop<yordle::data::prop::reference_prop>(1576489838u);
    if (ptr_mEmblemData != nullptr) {
        mEmblemData = ptr_mEmblemData->value;
    }

    auto ptr_mLoadingScreenAnchor = prop->cast_prop<yordle::data::prop::uint32_prop>(1447999873u);
    if (ptr_mLoadingScreenAnchor != nullptr) {
        mLoadingScreenAnchor = ptr_mLoadingScreenAnchor->value;
    }
}

yordle::data::meta::SkinSummonerEmoteLoadout::SkinSummonerEmoteLoadout(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEmotes = prop->cast_prop<yordle::data::prop::set_prop>(2399705241u);
    if (ptr_mEmotes != nullptr) {
        for (const auto &entry : ptr_mEmotes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mEmotes.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::SkinCharacterDataProperties::SkinCharacterDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_skinClassification = prop->cast_prop<yordle::data::prop::uint32_prop>(2267175040u);
    if (ptr_skinClassification != nullptr) {
        skinClassification = ptr_skinClassification->value;
    }

    auto ptr_championSkinName = prop->cast_prop<yordle::data::prop::string_prop>(762889000u);
    if (ptr_championSkinName != nullptr) {
        championSkinName = ptr_championSkinName->value;
    }

    auto ptr_attributeFlags = prop->cast_prop<yordle::data::prop::uint32_prop>(1282656454u);
    if (ptr_attributeFlags != nullptr) {
        attributeFlags = ptr_attributeFlags->value;
    }

    auto ptr_skinParent = prop->cast_prop<yordle::data::prop::int32_prop>(1363876936u);
    if (ptr_skinParent != nullptr) {
        skinParent = ptr_skinParent->value;
    }

    auto ptr_metaDataTags = prop->cast_prop<yordle::data::prop::string_prop>(2476636969u);
    if (ptr_metaDataTags != nullptr) {
        metaDataTags = ptr_metaDataTags->value;
    }

    auto ptr_emoteLoadout = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4042761877u);
    if (ptr_emoteLoadout != nullptr) {
        emoteLoadout = ptr_emoteLoadout->value;
    }

    auto ptr_skinUpgradeData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1760736924u);
    if (ptr_skinUpgradeData != nullptr) {
        skinUpgradeData = yordle::data::meta::deserialize<yordle::data::meta::SkinUpgradeData>(ptr_skinUpgradeData, 1760736924u);
    }

    auto ptr_endOfGameAlias = prop->cast_prop<yordle::data::prop::string_prop>(741440203u);
    if (ptr_endOfGameAlias != nullptr) {
        endOfGameAlias = ptr_endOfGameAlias->value;
    }

    auto ptr_x4678b8f7 = prop->cast_prop<yordle::data::prop::string_prop>(1182316791u);
    if (ptr_x4678b8f7 != nullptr) {
        x4678b8f7 = ptr_x4678b8f7->value;
    }

    auto ptr_loadscreen = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2549553293u);
    if (ptr_loadscreen != nullptr) {
        loadscreen = yordle::data::meta::deserialize<yordle::data::meta::CensoredImage>(ptr_loadscreen, 3496109055u);
    }

    auto ptr_loadscreenVintage = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3163484077u);
    if (ptr_loadscreenVintage != nullptr) {
        loadscreenVintage = yordle::data::meta::deserialize<yordle::data::meta::CensoredImage>(ptr_loadscreenVintage, 3496109055u);
    }

    auto ptr_skinAudioProperties = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2407209295u);
    if (ptr_skinAudioProperties != nullptr) {
        skinAudioProperties = yordle::data::meta::deserialize<yordle::data::meta::SkinAudioProperties>(ptr_skinAudioProperties, 2407209295u);
    }

    auto ptr_skinAnimationProperties = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1114474915u);
    if (ptr_skinAnimationProperties != nullptr) {
        skinAnimationProperties = yordle::data::meta::deserialize<yordle::data::meta::SkinAnimationProperties>(ptr_skinAnimationProperties, 1114474915u);
    }

    auto ptr_skinMeshProperties = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1174362372u);
    if (ptr_skinMeshProperties != nullptr) {
        skinMeshProperties = yordle::data::meta::deserialize<yordle::data::meta::SkinMeshDataProperties>(ptr_skinMeshProperties, 1628559524u);
    }

    auto ptr_armorMaterial = prop->cast_prop<yordle::data::prop::string_prop>(755834653u);
    if (ptr_armorMaterial != nullptr) {
        armorMaterial = ptr_armorMaterial->value;
    }

    auto ptr_themeMusic = prop->cast_prop<yordle::data::prop::set_prop>(1403862017u);
    if (ptr_themeMusic != nullptr) {
        for (const auto &entry : ptr_themeMusic->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                themeMusic.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x592970c = prop->cast_prop<yordle::data::prop::bool_prop>(93493004u);
    if (ptr_x592970c != nullptr) {
        x592970c = ptr_x592970c->value;
    }

    auto ptr_HudMuteEvent = prop->cast_prop<yordle::data::prop::string_prop>(577901301u);
    if (ptr_HudMuteEvent != nullptr) {
        HudMuteEvent = ptr_HudMuteEvent->value;
    }

    auto ptr_HudUnmuteEvent = prop->cast_prop<yordle::data::prop::string_prop>(1073641932u);
    if (ptr_HudUnmuteEvent != nullptr) {
        HudUnmuteEvent = ptr_HudUnmuteEvent->value;
    }

    auto ptr_defaultAnimations = prop->cast_prop<yordle::data::prop::set_prop>(305370093u);
    if (ptr_defaultAnimations != nullptr) {
        for (const auto &entry : ptr_defaultAnimations->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                defaultAnimations.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_idleParticlesEffects = prop->cast_prop<yordle::data::prop::set_prop>(2216193852u);
    if (ptr_idleParticlesEffects != nullptr) {
        for (const auto &entry : ptr_idleParticlesEffects->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                idleParticlesEffects.emplace(yordle::data::meta::deserialize<yordle::data::meta::SkinCharacterDataProperties_CharacterIdleEffect>(ptr_entry, 856064357u));
            }
        }
    }

    auto ptr_particleOverride_ChampionKillDeathParticle = prop->cast_prop<yordle::data::prop::string_prop>(455964165u);
    if (ptr_particleOverride_ChampionKillDeathParticle != nullptr) {
        particleOverride_ChampionKillDeathParticle = ptr_particleOverride_ChampionKillDeathParticle->value;
    }

    auto ptr_particleOverride_DeathParticle = prop->cast_prop<yordle::data::prop::string_prop>(4119314700u);
    if (ptr_particleOverride_DeathParticle != nullptr) {
        particleOverride_DeathParticle = ptr_particleOverride_DeathParticle->value;
    }

    auto ptr_mSpawnParticleName = prop->cast_prop<yordle::data::prop::string_prop>(3089770946u);
    if (ptr_mSpawnParticleName != nullptr) {
        mSpawnParticleName = ptr_mSpawnParticleName->value;
    }

    auto ptr_extraCharacterPreloads = prop->cast_prop<yordle::data::prop::set_prop>(1712098126u);
    if (ptr_extraCharacterPreloads != nullptr) {
        for (const auto &entry : ptr_extraCharacterPreloads->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                extraCharacterPreloads.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_voiceOverOverride = prop->cast_prop<yordle::data::prop::string_prop>(1998811699u);
    if (ptr_voiceOverOverride != nullptr) {
        voiceOverOverride = ptr_voiceOverOverride->value;
    }

    auto ptr_skipVOOverride = prop->cast_prop<yordle::data::prop::bool_prop>(344277337u);
    if (ptr_skipVOOverride != nullptr) {
        skipVOOverride = ptr_skipVOOverride->value;
    }

    auto ptr_iconAvatar = prop->cast_prop<yordle::data::prop::string_prop>(144375657u);
    if (ptr_iconAvatar != nullptr) {
        iconAvatar = ptr_iconAvatar->value;
    }

    auto ptr_mContextualActionData = prop->cast_prop<yordle::data::prop::reference_prop>(3640019469u);
    if (ptr_mContextualActionData != nullptr) {
        mContextualActionData = ptr_mContextualActionData->value;
    }

    auto ptr_skinAudioNameOverride = prop->cast_prop<yordle::data::prop::string_prop>(1427754905u);
    if (ptr_skinAudioNameOverride != nullptr) {
        skinAudioNameOverride = ptr_skinAudioNameOverride->value;
    }

    auto ptr_iconCircle = prop->cast_prop<yordle::data::prop::optional_prop>(3866264820u);
    if (ptr_iconCircle != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(ptr_iconCircle->value);
        if(ptr_entry != nullptr) {
            iconCircle = ptr_entry->value;
        }
    }

    auto ptr_iconCircleScale = prop->cast_prop<yordle::data::prop::optional_prop>(605984622u);
    if (ptr_iconCircleScale != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_iconCircleScale->value);
        if(ptr_entry != nullptr) {
            iconCircleScale = ptr_entry->value;
        }
    }

    auto ptr_iconSquare = prop->cast_prop<yordle::data::prop::optional_prop>(2890350575u);
    if (ptr_iconSquare != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(ptr_iconSquare->value);
        if(ptr_entry != nullptr) {
            iconSquare = ptr_entry->value;
        }
    }

    auto ptr_alternateIconsCircle = prop->cast_prop<yordle::data::prop::set_prop>(1015343349u);
    if (ptr_alternateIconsCircle != nullptr) {
        for (const auto &entry : ptr_alternateIconsCircle->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                alternateIconsCircle.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_alternateIconsSquare = prop->cast_prop<yordle::data::prop::set_prop>(3006356098u);
    if (ptr_alternateIconsSquare != nullptr) {
        for (const auto &entry : ptr_alternateIconsSquare->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                alternateIconsSquare.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_uncensoredIconCircles = prop->cast_prop<yordle::data::prop::map_prop>(2363509821u);
    if (ptr_uncensoredIconCircles != nullptr) {
        for (const auto &pair : ptr_uncensoredIconCircles->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                uncensoredIconCircles[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_uncensoredIconSquares = prop->cast_prop<yordle::data::prop::map_prop>(2784061420u);
    if (ptr_uncensoredIconSquares != nullptr) {
        for (const auto &pair : ptr_uncensoredIconSquares->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                uncensoredIconSquares[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_secondaryResourceHudDisplayData = prop->cast_prop<yordle::data::prop::structure_prop>(3828461976u);
    if (ptr_secondaryResourceHudDisplayData != nullptr) {
        secondaryResourceHudDisplayData = yordle::data::meta::deserialize<yordle::data::meta::ISecondaryResourceDisplayData>(ptr_secondaryResourceHudDisplayData, 1239842284u);
    }

    auto ptr_emoteBuffbone = prop->cast_prop<yordle::data::prop::string_prop>(691038296u);
    if (ptr_emoteBuffbone != nullptr) {
        emoteBuffbone = ptr_emoteBuffbone->value;
    }

    auto ptr_emoteYOffset = prop->cast_prop<yordle::data::prop::float32_prop>(3898782585u);
    if (ptr_emoteYOffset != nullptr) {
        emoteYOffset = ptr_emoteYOffset->value;
    }

    auto ptr_godrayFXbone = prop->cast_prop<yordle::data::prop::string_prop>(1594442579u);
    if (ptr_godrayFXbone != nullptr) {
        godrayFXbone = ptr_godrayFXbone->value;
    }

    auto ptr_healthBarData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1372076792u);
    if (ptr_healthBarData != nullptr) {
        healthBarData = yordle::data::meta::deserialize<yordle::data::meta::CharacterHealthBarDataRecord>(ptr_healthBarData, 297212766u);
    }

    auto ptr_mEmblems = prop->cast_prop<yordle::data::prop::set_prop>(3063479079u);
    if (ptr_mEmblems != nullptr) {
        for (const auto &entry : ptr_mEmblems->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mEmblems.emplace(yordle::data::meta::deserialize<yordle::data::meta::SkinEmblem>(ptr_entry, 2074733870u));
            }
        }
    }

    auto ptr_rarityGemOverride = prop->cast_prop<yordle::data::prop::optional_prop>(2923770897u);
    if (ptr_rarityGemOverride != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(ptr_rarityGemOverride->value);
        if(ptr_entry != nullptr) {
            rarityGemOverride = ptr_entry->value;
        }
    }

    auto ptr_mResourceResolver = prop->cast_prop<yordle::data::prop::reference_prop>(1646816894u);
    if (ptr_mResourceResolver != nullptr) {
        mResourceResolver = ptr_mResourceResolver->value;
    }

    auto ptr_mAdditionalResourceResolvers = prop->cast_prop<yordle::data::prop::set_prop>(2188533552u);
    if (ptr_mAdditionalResourceResolvers != nullptr) {
        for (const auto &entry : ptr_mAdditionalResourceResolvers->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mAdditionalResourceResolvers.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mOptionalBin = prop->cast_prop<yordle::data::prop::inline_structure_prop>(355435693u);
    if (ptr_mOptionalBin != nullptr) {
        mOptionalBin = yordle::data::meta::deserialize<yordle::data::meta::HudOptionalBinData>(ptr_mOptionalBin, 3920544379u);
    }

    auto ptr_x25f9aa72 = prop->cast_prop<yordle::data::prop::uint32_prop>(637119090u);
    if (ptr_x25f9aa72 != nullptr) {
        x25f9aa72 = ptr_x25f9aa72->value;
    }
}

yordle::data::meta::SkinFilterData::SkinFilterData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_FilterType = prop->cast_prop<yordle::data::prop::uint32_prop>(1279034543u);
    if (ptr_FilterType != nullptr) {
        FilterType = ptr_FilterType->value;
    }

    auto ptr_xc176d167 = prop->cast_prop<yordle::data::prop::bool_prop>(3245789543u);
    if (ptr_xc176d167 != nullptr) {
        xc176d167 = ptr_xc176d167->value;
    }

    auto ptr_skinIds = prop->cast_prop<yordle::data::prop::set_prop>(1248204130u);
    if (ptr_skinIds != nullptr) {
        for (const auto &entry : ptr_skinIds->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(entry);
            if (ptr_entry != nullptr) {
                skinIds.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::CharacterPassiveData::CharacterPassiveData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xbd3c31e4 = prop->cast_prop<yordle::data::prop::reference_prop>(3174838756u);
    if (ptr_xbd3c31e4 != nullptr) {
        xbd3c31e4 = ptr_xbd3c31e4->value;
    }

    auto ptr_mComponentBuffs = prop->cast_prop<yordle::data::prop::set_prop>(390986907u);
    if (ptr_mComponentBuffs != nullptr) {
        for (const auto &entry : ptr_mComponentBuffs->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mComponentBuffs.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mChildSpells = prop->cast_prop<yordle::data::prop::set_prop>(3277117473u);
    if (ptr_mChildSpells != nullptr) {
        for (const auto &entry : ptr_mChildSpells->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mChildSpells.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mDisplayFlags = prop->cast_prop<yordle::data::prop::uint8_prop>(933770753u);
    if (ptr_mDisplayFlags != nullptr) {
        mDisplayFlags = ptr_mDisplayFlags->value;
    }

    auto ptr_x6346a946 = prop->cast_prop<yordle::data::prop::bool_prop>(1665575238u);
    if (ptr_x6346a946 != nullptr) {
        x6346a946 = ptr_x6346a946->value;
    }

    auto ptr_SkinFilter = prop->cast_prop<yordle::data::prop::structure_prop>(3159962186u);
    if (ptr_SkinFilter != nullptr) {
        SkinFilter = yordle::data::meta::deserialize<yordle::data::meta::SkinFilterData>(ptr_SkinFilter, 3022275834u);
    }
}

yordle::data::meta::GlobalPerLevelStatsFactor::GlobalPerLevelStatsFactor(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPerLevelStatsFactor = prop->cast_prop<yordle::data::prop::set_prop>(184911237u);
    if (ptr_mPerLevelStatsFactor != nullptr) {
        for (const auto &entry : ptr_mPerLevelStatsFactor->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mPerLevelStatsFactor.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::OverrideAutoAttackCastTimeData::OverrideAutoAttackCastTimeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mOverrideAutoattackCastTimeCalculation = prop->cast_prop<yordle::data::prop::structure_prop>(2305377978u);
    if (ptr_mOverrideAutoattackCastTimeCalculation != nullptr) {
        mOverrideAutoattackCastTimeCalculation = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculation>(ptr_mOverrideAutoattackCastTimeCalculation, 389493299u);
    }
}

yordle::data::meta::CharacterRecord::CharacterRecord(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCharacterName = prop->cast_prop<yordle::data::prop::string_prop>(4284964308u);
    if (ptr_mCharacterName != nullptr) {
        mCharacterName = ptr_mCharacterName->value;
    }

    auto ptr_mFallbackCharacterName = prop->cast_prop<yordle::data::prop::string_prop>(2716178u);
    if (ptr_mFallbackCharacterName != nullptr) {
        mFallbackCharacterName = ptr_mFallbackCharacterName->value;
    }

    auto ptr_targetLaserEffects = prop->cast_prop<yordle::data::prop::structure_prop>(837692407u);
    if (ptr_targetLaserEffects != nullptr) {
        targetLaserEffects = yordle::data::meta::deserialize<yordle::data::meta::TargetLaserComponentEffects>(ptr_targetLaserEffects, 490133160u);
    }

    auto ptr_DisabledTargetLaserEffects = prop->cast_prop<yordle::data::prop::structure_prop>(3440493367u);
    if (ptr_DisabledTargetLaserEffects != nullptr) {
        DisabledTargetLaserEffects = yordle::data::meta::deserialize<yordle::data::meta::TargetLaserComponentEffects>(ptr_DisabledTargetLaserEffects, 490133160u);
    }

    auto ptr_evolutionData = prop->cast_prop<yordle::data::prop::structure_prop>(1831945790u);
    if (ptr_evolutionData != nullptr) {
        evolutionData = yordle::data::meta::deserialize<yordle::data::meta::EvolutionDescription>(ptr_evolutionData, 3253985952u);
    }

    auto ptr_useableData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4101150036u);
    if (ptr_useableData != nullptr) {
        useableData = yordle::data::meta::deserialize<yordle::data::meta::UseableData>(ptr_useableData, 4101150036u);
    }

    auto ptr_baseHP = prop->cast_prop<yordle::data::prop::float32_prop>(397761056u);
    if (ptr_baseHP != nullptr) {
        baseHP = ptr_baseHP->value;
    }

    auto ptr_hpPerLevel = prop->cast_prop<yordle::data::prop::float32_prop>(265725146u);
    if (ptr_hpPerLevel != nullptr) {
        hpPerLevel = ptr_hpPerLevel->value;
    }

    auto ptr_baseStaticHPRegen = prop->cast_prop<yordle::data::prop::float32_prop>(1259351639u);
    if (ptr_baseStaticHPRegen != nullptr) {
        baseStaticHPRegen = ptr_baseStaticHPRegen->value;
    }

    auto ptr_baseFactorHPRegen = prop->cast_prop<yordle::data::prop::float32_prop>(1589588024u);
    if (ptr_baseFactorHPRegen != nullptr) {
        baseFactorHPRegen = ptr_baseFactorHPRegen->value;
    }

    auto ptr_hpRegenPerLevel = prop->cast_prop<yordle::data::prop::float32_prop>(3426677089u);
    if (ptr_hpRegenPerLevel != nullptr) {
        hpRegenPerLevel = ptr_hpRegenPerLevel->value;
    }

    auto ptr_healthBarHeight = prop->cast_prop<yordle::data::prop::float32_prop>(2687144011u);
    if (ptr_healthBarHeight != nullptr) {
        healthBarHeight = ptr_healthBarHeight->value;
    }

    auto ptr_healthBarFullParallax = prop->cast_prop<yordle::data::prop::bool_prop>(3029139618u);
    if (ptr_healthBarFullParallax != nullptr) {
        healthBarFullParallax = ptr_healthBarFullParallax->value;
    }

    auto ptr_selfChampSpecificHealthSuffix = prop->cast_prop<yordle::data::prop::string_prop>(934036257u);
    if (ptr_selfChampSpecificHealthSuffix != nullptr) {
        selfChampSpecificHealthSuffix = ptr_selfChampSpecificHealthSuffix->value;
    }

    auto ptr_selfCBChampSpecificHealthSuffix = prop->cast_prop<yordle::data::prop::string_prop>(3278337958u);
    if (ptr_selfCBChampSpecificHealthSuffix != nullptr) {
        selfCBChampSpecificHealthSuffix = ptr_selfCBChampSpecificHealthSuffix->value;
    }

    auto ptr_allyChampSpecificHealthSuffix = prop->cast_prop<yordle::data::prop::string_prop>(1944098033u);
    if (ptr_allyChampSpecificHealthSuffix != nullptr) {
        allyChampSpecificHealthSuffix = ptr_allyChampSpecificHealthSuffix->value;
    }

    auto ptr_enemyChampSpecificHealthSuffix = prop->cast_prop<yordle::data::prop::string_prop>(4083525957u);
    if (ptr_enemyChampSpecificHealthSuffix != nullptr) {
        enemyChampSpecificHealthSuffix = ptr_enemyChampSpecificHealthSuffix->value;
    }

    auto ptr_highlightHealthbarIcons = prop->cast_prop<yordle::data::prop::bool_prop>(2711535288u);
    if (ptr_highlightHealthbarIcons != nullptr) {
        highlightHealthbarIcons = ptr_highlightHealthbarIcons->value;
    }

    auto ptr_primaryAbilityResource = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3151502861u);
    if (ptr_primaryAbilityResource != nullptr) {
        primaryAbilityResource = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceSlotInfo>(ptr_primaryAbilityResource, 3459369333u);
    }

    auto ptr_secondaryAbilityResource = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4183540517u);
    if (ptr_secondaryAbilityResource != nullptr) {
        secondaryAbilityResource = yordle::data::meta::deserialize<yordle::data::meta::AbilityResourceSlotInfo>(ptr_secondaryAbilityResource, 3459369333u);
    }

    auto ptr_baseDamage = prop->cast_prop<yordle::data::prop::float32_prop>(64618745u);
    if (ptr_baseDamage != nullptr) {
        baseDamage = ptr_baseDamage->value;
    }

    auto ptr_damagePerLevel = prop->cast_prop<yordle::data::prop::float32_prop>(2925504951u);
    if (ptr_damagePerLevel != nullptr) {
        damagePerLevel = ptr_damagePerLevel->value;
    }

    auto ptr_baseArmor = prop->cast_prop<yordle::data::prop::float32_prop>(126349775u);
    if (ptr_baseArmor != nullptr) {
        baseArmor = ptr_baseArmor->value;
    }

    auto ptr_armorPerLevel = prop->cast_prop<yordle::data::prop::float32_prop>(3658591611u);
    if (ptr_armorPerLevel != nullptr) {
        armorPerLevel = ptr_armorPerLevel->value;
    }

    auto ptr_baseSpellBlock = prop->cast_prop<yordle::data::prop::float32_prop>(45560055u);
    if (ptr_baseSpellBlock != nullptr) {
        baseSpellBlock = ptr_baseSpellBlock->value;
    }

    auto ptr_spellBlockPerLevel = prop->cast_prop<yordle::data::prop::float32_prop>(3164921061u);
    if (ptr_spellBlockPerLevel != nullptr) {
        spellBlockPerLevel = ptr_spellBlockPerLevel->value;
    }

    auto ptr_baseDodge = prop->cast_prop<yordle::data::prop::float32_prop>(128327895u);
    if (ptr_baseDodge != nullptr) {
        baseDodge = ptr_baseDodge->value;
    }

    auto ptr_DodgePerLevel = prop->cast_prop<yordle::data::prop::float32_prop>(2605635303u);
    if (ptr_DodgePerLevel != nullptr) {
        DodgePerLevel = ptr_DodgePerLevel->value;
    }

    auto ptr_baseMissChance = prop->cast_prop<yordle::data::prop::float32_prop>(4084633900u);
    if (ptr_baseMissChance != nullptr) {
        baseMissChance = ptr_baseMissChance->value;
    }

    auto ptr_baseCritChance = prop->cast_prop<yordle::data::prop::float32_prop>(3292795416u);
    if (ptr_baseCritChance != nullptr) {
        baseCritChance = ptr_baseCritChance->value;
    }

    auto ptr_critDamageMultiplier = prop->cast_prop<yordle::data::prop::float32_prop>(2331773119u);
    if (ptr_critDamageMultiplier != nullptr) {
        critDamageMultiplier = ptr_critDamageMultiplier->value;
    }

    auto ptr_critPerLevel = prop->cast_prop<yordle::data::prop::float32_prop>(1073095234u);
    if (ptr_critPerLevel != nullptr) {
        critPerLevel = ptr_critPerLevel->value;
    }

    auto ptr_baseMoveSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(2018645152u);
    if (ptr_baseMoveSpeed != nullptr) {
        baseMoveSpeed = ptr_baseMoveSpeed->value;
    }

    auto ptr_xcb4451d3 = prop->cast_prop<yordle::data::prop::float32_prop>(3410252243u);
    if (ptr_xcb4451d3 != nullptr) {
        xcb4451d3 = ptr_xcb4451d3->value;
    }

    auto ptr_attackRange = prop->cast_prop<yordle::data::prop::float32_prop>(3262159114u);
    if (ptr_attackRange != nullptr) {
        attackRange = ptr_attackRange->value;
    }

    auto ptr_attackSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(2048957000u);
    if (ptr_attackSpeed != nullptr) {
        attackSpeed = ptr_attackSpeed->value;
    }

    auto ptr_attackSpeedRatio = prop->cast_prop<yordle::data::prop::float32_prop>(1623530539u);
    if (ptr_attackSpeedRatio != nullptr) {
        attackSpeedRatio = ptr_attackSpeedRatio->value;
    }

    auto ptr_attackSpeedPerLevel = prop->cast_prop<yordle::data::prop::float32_prop>(467381983u);
    if (ptr_attackSpeedPerLevel != nullptr) {
        attackSpeedPerLevel = ptr_attackSpeedPerLevel->value;
    }

    auto ptr_AbilityPowerIncPerLevel = prop->cast_prop<yordle::data::prop::float32_prop>(3364645729u);
    if (ptr_AbilityPowerIncPerLevel != nullptr) {
        AbilityPowerIncPerLevel = ptr_AbilityPowerIncPerLevel->value;
    }

    auto ptr_mAdaptiveForceToAbilityPowerWeight = prop->cast_prop<yordle::data::prop::float32_prop>(396399247u);
    if (ptr_mAdaptiveForceToAbilityPowerWeight != nullptr) {
        mAdaptiveForceToAbilityPowerWeight = ptr_mAdaptiveForceToAbilityPowerWeight->value;
    }

    auto ptr_attackAutoInterruptPercent = prop->cast_prop<yordle::data::prop::float32_prop>(2726771390u);
    if (ptr_attackAutoInterruptPercent != nullptr) {
        attackAutoInterruptPercent = ptr_attackAutoInterruptPercent->value;
    }

    auto ptr_acquisitionRange = prop->cast_prop<yordle::data::prop::float32_prop>(1676570857u);
    if (ptr_acquisitionRange != nullptr) {
        acquisitionRange = ptr_acquisitionRange->value;
    }

    auto ptr_wakeUpRange = prop->cast_prop<yordle::data::prop::optional_prop>(1722962621u);
    if (ptr_wakeUpRange != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_wakeUpRange->value);
        if(ptr_entry != nullptr) {
            wakeUpRange = ptr_entry->value;
        }
    }

    auto ptr_firstAcquisitionRange = prop->cast_prop<yordle::data::prop::optional_prop>(1679423533u);
    if (ptr_firstAcquisitionRange != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_firstAcquisitionRange->value);
        if(ptr_entry != nullptr) {
            firstAcquisitionRange = ptr_entry->value;
        }
    }

    auto ptr_basicAttack = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3102779173u);
    if (ptr_basicAttack != nullptr) {
        basicAttack = yordle::data::meta::deserialize<yordle::data::meta::AttackSlotData>(ptr_basicAttack, 112014489u);
    }

    auto ptr_extraAttacks = prop->cast_prop<yordle::data::prop::set_prop>(1986802918u);
    if (ptr_extraAttacks != nullptr) {
        for (const auto &entry : ptr_extraAttacks->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                extraAttacks.emplace(yordle::data::meta::deserialize<yordle::data::meta::AttackSlotData>(ptr_entry, 112014489u));
            }
        }
    }

    auto ptr_critAttacks = prop->cast_prop<yordle::data::prop::set_prop>(3598422258u);
    if (ptr_critAttacks != nullptr) {
        for (const auto &entry : ptr_critAttacks->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                critAttacks.emplace(yordle::data::meta::deserialize<yordle::data::meta::AttackSlotData>(ptr_entry, 112014489u));
            }
        }
    }

    auto ptr_towerTargetingPriorityBoost = prop->cast_prop<yordle::data::prop::float32_prop>(1737457744u);
    if (ptr_towerTargetingPriorityBoost != nullptr) {
        towerTargetingPriorityBoost = ptr_towerTargetingPriorityBoost->value;
    }

    auto ptr_expGivenOnDeath = prop->cast_prop<yordle::data::prop::float32_prop>(3431261418u);
    if (ptr_expGivenOnDeath != nullptr) {
        expGivenOnDeath = ptr_expGivenOnDeath->value;
    }

    auto ptr_goldGivenOnDeath = prop->cast_prop<yordle::data::prop::float32_prop>(4120935405u);
    if (ptr_goldGivenOnDeath != nullptr) {
        goldGivenOnDeath = ptr_goldGivenOnDeath->value;
    }

    auto ptr_goldRadius = prop->cast_prop<yordle::data::prop::float32_prop>(1721025217u);
    if (ptr_goldRadius != nullptr) {
        goldRadius = ptr_goldRadius->value;
    }

    auto ptr_experienceRadius = prop->cast_prop<yordle::data::prop::float32_prop>(1893193335u);
    if (ptr_experienceRadius != nullptr) {
        experienceRadius = ptr_experienceRadius->value;
    }

    auto ptr_deathEventListeningRadius = prop->cast_prop<yordle::data::prop::float32_prop>(1561970222u);
    if (ptr_deathEventListeningRadius != nullptr) {
        deathEventListeningRadius = ptr_deathEventListeningRadius->value;
    }

    auto ptr_localGoldGivenOnDeath = prop->cast_prop<yordle::data::prop::float32_prop>(3645072012u);
    if (ptr_localGoldGivenOnDeath != nullptr) {
        localGoldGivenOnDeath = ptr_localGoldGivenOnDeath->value;
    }

    auto ptr_localExpGivenOnDeath = prop->cast_prop<yordle::data::prop::float32_prop>(1230396841u);
    if (ptr_localExpGivenOnDeath != nullptr) {
        localExpGivenOnDeath = ptr_localExpGivenOnDeath->value;
    }

    auto ptr_localGoldSplitWithLastHitter = prop->cast_prop<yordle::data::prop::bool_prop>(3047977906u);
    if (ptr_localGoldSplitWithLastHitter != nullptr) {
        localGoldSplitWithLastHitter = ptr_localGoldSplitWithLastHitter->value;
    }

    auto ptr_globalGoldGivenOnDeath = prop->cast_prop<yordle::data::prop::float32_prop>(2448180294u);
    if (ptr_globalGoldGivenOnDeath != nullptr) {
        globalGoldGivenOnDeath = ptr_globalGoldGivenOnDeath->value;
    }

    auto ptr_globalExpGivenOnDeath = prop->cast_prop<yordle::data::prop::float32_prop>(2627055079u);
    if (ptr_globalExpGivenOnDeath != nullptr) {
        globalExpGivenOnDeath = ptr_globalExpGivenOnDeath->value;
    }

    auto ptr_perceptionBubbleRadius = prop->cast_prop<yordle::data::prop::optional_prop>(2182306178u);
    if (ptr_perceptionBubbleRadius != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_perceptionBubbleRadius->value);
        if(ptr_entry != nullptr) {
            perceptionBubbleRadius = ptr_entry->value;
        }
    }

    auto ptr_perceptionBoundingBoxSize = prop->cast_prop<yordle::data::prop::optional_prop>(1352798482u);
    if (ptr_perceptionBoundingBoxSize != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::vector_prop>(ptr_perceptionBoundingBoxSize->value);
        if(ptr_entry != nullptr) {
            perceptionBoundingBoxSize = ptr_entry->value;
        }
    }

    auto ptr_significance = prop->cast_prop<yordle::data::prop::float32_prop>(1658179760u);
    if (ptr_significance != nullptr) {
        significance = ptr_significance->value;
    }

    auto ptr_untargetableSpawnTime = prop->cast_prop<yordle::data::prop::float32_prop>(2502591299u);
    if (ptr_untargetableSpawnTime != nullptr) {
        untargetableSpawnTime = ptr_untargetableSpawnTime->value;
    }

    auto ptr_abilityPower = prop->cast_prop<yordle::data::prop::float32_prop>(2131952818u);
    if (ptr_abilityPower != nullptr) {
        abilityPower = ptr_abilityPower->value;
    }

    auto ptr_spellNames = prop->cast_prop<yordle::data::prop::set_prop>(3217256707u);
    if (ptr_spellNames != nullptr) {
        for (const auto &entry : ptr_spellNames->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                spellNames.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_extraSpells = prop->cast_prop<yordle::data::prop::set_prop>(2350752218u);
    if (ptr_extraSpells != nullptr) {
        for (const auto &entry : ptr_extraSpells->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                extraSpells.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mAbilities = prop->cast_prop<yordle::data::prop::set_prop>(3799694934u);
    if (ptr_mAbilities != nullptr) {
        for (const auto &entry : ptr_mAbilities->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mAbilities.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_onKillEvent = prop->cast_prop<yordle::data::prop::uint32_prop>(976335800u);
    if (ptr_onKillEvent != nullptr) {
        onKillEvent = ptr_onKillEvent->value;
    }

    auto ptr_OnKillEventSteal = prop->cast_prop<yordle::data::prop::uint32_prop>(2663075043u);
    if (ptr_OnKillEventSteal != nullptr) {
        OnKillEventSteal = ptr_OnKillEventSteal->value;
    }

    auto ptr_onKillEventForSpectator = prop->cast_prop<yordle::data::prop::uint32_prop>(1451949008u);
    if (ptr_onKillEventForSpectator != nullptr) {
        onKillEventForSpectator = ptr_onKillEventForSpectator->value;
    }

    auto ptr_criticalAttack = prop->cast_prop<yordle::data::prop::string_prop>(572959540u);
    if (ptr_criticalAttack != nullptr) {
        criticalAttack = ptr_criticalAttack->value;
    }

    auto ptr_passiveName = prop->cast_prop<yordle::data::prop::string_prop>(3388626109u);
    if (ptr_passiveName != nullptr) {
        passiveName = ptr_passiveName->value;
    }

    auto ptr_passiveLuaName = prop->cast_prop<yordle::data::prop::string_prop>(593657323u);
    if (ptr_passiveLuaName != nullptr) {
        passiveLuaName = ptr_passiveLuaName->value;
    }

    auto ptr_passiveToolTip = prop->cast_prop<yordle::data::prop::string_prop>(2730404133u);
    if (ptr_passiveToolTip != nullptr) {
        passiveToolTip = ptr_passiveToolTip->value;
    }

    auto ptr_passiveSpell = prop->cast_prop<yordle::data::prop::string_prop>(4105475896u);
    if (ptr_passiveSpell != nullptr) {
        passiveSpell = ptr_passiveSpell->value;
    }

    auto ptr_passiveRange = prop->cast_prop<yordle::data::prop::float32_prop>(3575536555u);
    if (ptr_passiveRange != nullptr) {
        passiveRange = ptr_passiveRange->value;
    }

    auto ptr_passive1IconName = prop->cast_prop<yordle::data::prop::string_prop>(4078416219u);
    if (ptr_passive1IconName != nullptr) {
        passive1IconName = ptr_passive1IconName->value;
    }

    auto ptr_lore1 = prop->cast_prop<yordle::data::prop::string_prop>(3124248052u);
    if (ptr_lore1 != nullptr) {
        lore1 = ptr_lore1->value;
    }

    auto ptr_tips1 = prop->cast_prop<yordle::data::prop::string_prop>(2296456702u);
    if (ptr_tips1 != nullptr) {
        tips1 = ptr_tips1->value;
    }

    auto ptr_tips2 = prop->cast_prop<yordle::data::prop::string_prop>(2279679083u);
    if (ptr_tips2 != nullptr) {
        tips2 = ptr_tips2->value;
    }

    auto ptr_friendlyTooltip = prop->cast_prop<yordle::data::prop::string_prop>(2104236997u);
    if (ptr_friendlyTooltip != nullptr) {
        friendlyTooltip = ptr_friendlyTooltip->value;
    }

    auto ptr_enemyTooltip = prop->cast_prop<yordle::data::prop::string_prop>(1636139498u);
    if (ptr_enemyTooltip != nullptr) {
        enemyTooltip = ptr_enemyTooltip->value;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_parName = prop->cast_prop<yordle::data::prop::string_prop>(2509987083u);
    if (ptr_parName != nullptr) {
        parName = ptr_parName->value;
    }

    auto ptr_weaponMaterials = prop->cast_prop<yordle::data::prop::set_prop>(3550582029u);
    if (ptr_weaponMaterials != nullptr) {
        for (const auto &entry : ptr_weaponMaterials->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                weaponMaterials.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_hoverIndicatorTextureName = prop->cast_prop<yordle::data::prop::string_prop>(3972573138u);
    if (ptr_hoverIndicatorTextureName != nullptr) {
        hoverIndicatorTextureName = ptr_hoverIndicatorTextureName->value;
    }

    auto ptr_hoverIndicatorRadius = prop->cast_prop<yordle::data::prop::float32_prop>(919460724u);
    if (ptr_hoverIndicatorRadius != nullptr) {
        hoverIndicatorRadius = ptr_hoverIndicatorRadius->value;
    }

    auto ptr_hoverLineIndicatorBaseTextureName = prop->cast_prop<yordle::data::prop::string_prop>(3761532491u);
    if (ptr_hoverLineIndicatorBaseTextureName != nullptr) {
        hoverLineIndicatorBaseTextureName = ptr_hoverLineIndicatorBaseTextureName->value;
    }

    auto ptr_hoverLineIndicatorTargetTextureName = prop->cast_prop<yordle::data::prop::string_prop>(1538863295u);
    if (ptr_hoverLineIndicatorTargetTextureName != nullptr) {
        hoverLineIndicatorTargetTextureName = ptr_hoverLineIndicatorTargetTextureName->value;
    }

    auto ptr_hoverLineIndicatorWidth = prop->cast_prop<yordle::data::prop::float32_prop>(705048184u);
    if (ptr_hoverLineIndicatorWidth != nullptr) {
        hoverLineIndicatorWidth = ptr_hoverLineIndicatorWidth->value;
    }

    auto ptr_hoverIndicatorRotateToPlayer = prop->cast_prop<yordle::data::prop::bool_prop>(553315353u);
    if (ptr_hoverIndicatorRotateToPlayer != nullptr) {
        hoverIndicatorRotateToPlayer = ptr_hoverIndicatorRotateToPlayer->value;
    }

    auto ptr_hoverIndicatorMinimapOverride = prop->cast_prop<yordle::data::prop::string_prop>(2409727365u);
    if (ptr_hoverIndicatorMinimapOverride != nullptr) {
        hoverIndicatorMinimapOverride = ptr_hoverIndicatorMinimapOverride->value;
    }

    auto ptr_minimapIconOverride = prop->cast_prop<yordle::data::prop::string_prop>(3673546461u);
    if (ptr_minimapIconOverride != nullptr) {
        minimapIconOverride = ptr_minimapIconOverride->value;
    }

    auto ptr_hoverIndicatorRadiusMinimap = prop->cast_prop<yordle::data::prop::float32_prop>(1200221283u);
    if (ptr_hoverIndicatorRadiusMinimap != nullptr) {
        hoverIndicatorRadiusMinimap = ptr_hoverIndicatorRadiusMinimap->value;
    }

    auto ptr_hoverLineIndicatorWidthMinimap = prop->cast_prop<yordle::data::prop::float32_prop>(1403790919u);
    if (ptr_hoverLineIndicatorWidthMinimap != nullptr) {
        hoverLineIndicatorWidthMinimap = ptr_hoverLineIndicatorWidthMinimap->value;
    }

    auto ptr_areaIndicatorRadius = prop->cast_prop<yordle::data::prop::float32_prop>(1641796731u);
    if (ptr_areaIndicatorRadius != nullptr) {
        areaIndicatorRadius = ptr_areaIndicatorRadius->value;
    }

    auto ptr_areaIndicatorMinRadius = prop->cast_prop<yordle::data::prop::float32_prop>(1769241069u);
    if (ptr_areaIndicatorMinRadius != nullptr) {
        areaIndicatorMinRadius = ptr_areaIndicatorMinRadius->value;
    }

    auto ptr_areaIndicatorMaxDistance = prop->cast_prop<yordle::data::prop::float32_prop>(3937146846u);
    if (ptr_areaIndicatorMaxDistance != nullptr) {
        areaIndicatorMaxDistance = ptr_areaIndicatorMaxDistance->value;
    }

    auto ptr_areaIndicatorTargetDistance = prop->cast_prop<yordle::data::prop::float32_prop>(2923755995u);
    if (ptr_areaIndicatorTargetDistance != nullptr) {
        areaIndicatorTargetDistance = ptr_areaIndicatorTargetDistance->value;
    }

    auto ptr_areaIndicatorMinDistance = prop->cast_prop<yordle::data::prop::float32_prop>(258880456u);
    if (ptr_areaIndicatorMinDistance != nullptr) {
        areaIndicatorMinDistance = ptr_areaIndicatorMinDistance->value;
    }

    auto ptr_areaIndicatorTextureName = prop->cast_prop<yordle::data::prop::string_prop>(2797773255u);
    if (ptr_areaIndicatorTextureName != nullptr) {
        areaIndicatorTextureName = ptr_areaIndicatorTextureName->value;
    }

    auto ptr_areaIndicatorTextureSize = prop->cast_prop<yordle::data::prop::float32_prop>(398845477u);
    if (ptr_areaIndicatorTextureSize != nullptr) {
        areaIndicatorTextureSize = ptr_areaIndicatorTextureSize->value;
    }

    auto ptr_charAudioNameOverride = prop->cast_prop<yordle::data::prop::string_prop>(485269234u);
    if (ptr_charAudioNameOverride != nullptr) {
        charAudioNameOverride = ptr_charAudioNameOverride->value;
    }

    auto ptr_x104d2294 = prop->cast_prop<yordle::data::prop::bool_prop>(273490580u);
    if (ptr_x104d2294 != nullptr) {
        x104d2294 = ptr_x104d2294->value;
    }

    auto ptr_mUseCCAnimations = prop->cast_prop<yordle::data::prop::bool_prop>(4224393806u);
    if (ptr_mUseCCAnimations != nullptr) {
        mUseCCAnimations = ptr_mUseCCAnimations->value;
    }

    auto ptr_jointForAnimAdjustedSelection = prop->cast_prop<yordle::data::prop::string_prop>(3653635669u);
    if (ptr_jointForAnimAdjustedSelection != nullptr) {
        jointForAnimAdjustedSelection = ptr_jointForAnimAdjustedSelection->value;
    }

    auto ptr_outlineBBoxExpansion = prop->cast_prop<yordle::data::prop::float32_prop>(578496387u);
    if (ptr_outlineBBoxExpansion != nullptr) {
        outlineBBoxExpansion = ptr_outlineBBoxExpansion->value;
    }

    auto ptr_silhouetteAttachmentAnim = prop->cast_prop<yordle::data::prop::string_prop>(2724640783u);
    if (ptr_silhouetteAttachmentAnim != nullptr) {
        silhouetteAttachmentAnim = ptr_silhouetteAttachmentAnim->value;
    }

    auto ptr_hitFxScale = prop->cast_prop<yordle::data::prop::float32_prop>(4230424014u);
    if (ptr_hitFxScale != nullptr) {
        hitFxScale = ptr_hitFxScale->value;
    }

    auto ptr_selectionHeight = prop->cast_prop<yordle::data::prop::float32_prop>(3948818994u);
    if (ptr_selectionHeight != nullptr) {
        selectionHeight = ptr_selectionHeight->value;
    }

    auto ptr_selectionRadius = prop->cast_prop<yordle::data::prop::float32_prop>(1349597859u);
    if (ptr_selectionRadius != nullptr) {
        selectionRadius = ptr_selectionRadius->value;
    }

    auto ptr_pathfindingCollisionRadius = prop->cast_prop<yordle::data::prop::float32_prop>(2445248287u);
    if (ptr_pathfindingCollisionRadius != nullptr) {
        pathfindingCollisionRadius = ptr_pathfindingCollisionRadius->value;
    }

    auto ptr_overrideGameplayCollisionRadius = prop->cast_prop<yordle::data::prop::optional_prop>(2129752149u);
    if (ptr_overrideGameplayCollisionRadius != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_overrideGameplayCollisionRadius->value);
        if(ptr_entry != nullptr) {
            overrideGameplayCollisionRadius = ptr_entry->value;
        }
    }

    auto ptr_unitTagsString = prop->cast_prop<yordle::data::prop::string_prop>(819243539u);
    if (ptr_unitTagsString != nullptr) {
        unitTagsString = ptr_unitTagsString->value;
    }

    auto ptr_friendlyUxOverrideTeam = prop->cast_prop<yordle::data::prop::uint32_prop>(2122334618u);
    if (ptr_friendlyUxOverrideTeam != nullptr) {
        friendlyUxOverrideTeam = ptr_friendlyUxOverrideTeam->value;
    }

    auto ptr_friendlyUxOverrideIncludeTagsString = prop->cast_prop<yordle::data::prop::string_prop>(4138667821u);
    if (ptr_friendlyUxOverrideIncludeTagsString != nullptr) {
        friendlyUxOverrideIncludeTagsString = ptr_friendlyUxOverrideIncludeTagsString->value;
    }

    auto ptr_friendlyUxOverrideExcludeTagsString = prop->cast_prop<yordle::data::prop::string_prop>(3195079267u);
    if (ptr_friendlyUxOverrideExcludeTagsString != nullptr) {
        friendlyUxOverrideExcludeTagsString = ptr_friendlyUxOverrideExcludeTagsString->value;
    }

    auto ptr_mEducationToolData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(374615088u);
    if (ptr_mEducationToolData != nullptr) {
        mEducationToolData = yordle::data::meta::deserialize<yordle::data::meta::ToolEducationData>(ptr_mEducationToolData, 2970707127u);
    }

    auto ptr_mAbilitySlotCC = prop->cast_prop<yordle::data::prop::set_prop>(2647981432u);
    if (ptr_mAbilitySlotCC != nullptr) {
        for (const auto &entry : ptr_mAbilitySlotCC->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(entry);
            if (ptr_entry != nullptr) {
                mAbilitySlotCC.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_characterToolData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3963447610u);
    if (ptr_characterToolData != nullptr) {
        characterToolData = yordle::data::meta::deserialize<yordle::data::meta::CharacterToolData>(ptr_characterToolData, 3963447610u);
    }

    auto ptr_platformEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(1837249471u);
    if (ptr_platformEnabled != nullptr) {
        platformEnabled = ptr_platformEnabled->value;
    }

    auto ptr_spellLevelUpInfo = prop->cast_prop<yordle::data::prop::set_prop>(2606765944u);
    if (ptr_spellLevelUpInfo != nullptr) {
        for (const auto &entry : ptr_spellLevelUpInfo->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                spellLevelUpInfo.emplace(yordle::data::meta::deserialize<yordle::data::meta::SpellLevelUpInfo>(ptr_entry, 2606765944u));
            }
        }
    }

    auto ptr_recSpellRankUpInfo = prop->cast_prop<yordle::data::prop::set_prop>(825182082u);
    if (ptr_recSpellRankUpInfo != nullptr) {
        for (const auto &entry : ptr_recSpellRankUpInfo->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                recSpellRankUpInfo.emplace(yordle::data::meta::deserialize<yordle::data::meta::RecSpellRankUpInfo>(ptr_entry, 825182082u));
            }
        }
    }

    auto ptr_recordAsWard = prop->cast_prop<yordle::data::prop::bool_prop>(4082356790u);
    if (ptr_recordAsWard != nullptr) {
        recordAsWard = ptr_recordAsWard->value;
    }

    auto ptr_minionScoreValue = prop->cast_prop<yordle::data::prop::float32_prop>(4263074916u);
    if (ptr_minionScoreValue != nullptr) {
        minionScoreValue = ptr_minionScoreValue->value;
    }

    auto ptr_useRiotRelationships = prop->cast_prop<yordle::data::prop::bool_prop>(3966610569u);
    if (ptr_useRiotRelationships != nullptr) {
        useRiotRelationships = ptr_useRiotRelationships->value;
    }

    auto ptr_flags = prop->cast_prop<yordle::data::prop::uint32_prop>(2624027180u);
    if (ptr_flags != nullptr) {
        flags = ptr_flags->value;
    }

    auto ptr_minionFlags = prop->cast_prop<yordle::data::prop::uint32_prop>(548763850u);
    if (ptr_minionFlags != nullptr) {
        minionFlags = ptr_minionFlags->value;
    }

    auto ptr_assetCategory = prop->cast_prop<yordle::data::prop::string_prop>(829774143u);
    if (ptr_assetCategory != nullptr) {
        assetCategory = ptr_assetCategory->value;
    }

    auto ptr_purchaseIdentities = prop->cast_prop<yordle::data::prop::set_prop>(4230214092u);
    if (ptr_purchaseIdentities != nullptr) {
        for (const auto &entry : ptr_purchaseIdentities->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                purchaseIdentities.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mClientSideItemInventory = prop->cast_prop<yordle::data::prop::set_prop>(1226439805u);
    if (ptr_mClientSideItemInventory != nullptr) {
        for (const auto &entry : ptr_mClientSideItemInventory->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mClientSideItemInventory.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mPreferredPerkStyle = prop->cast_prop<yordle::data::prop::reference_prop>(92127542u);
    if (ptr_mPreferredPerkStyle != nullptr) {
        mPreferredPerkStyle = ptr_mPreferredPerkStyle->value;
    }

    auto ptr_mPerkReplacements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(665947137u);
    if (ptr_mPerkReplacements != nullptr) {
        mPerkReplacements = yordle::data::meta::deserialize<yordle::data::meta::PerkReplacementList>(ptr_mPerkReplacements, 2307915623u);
    }

    auto ptr_deathTime = prop->cast_prop<yordle::data::prop::float32_prop>(3032888844u);
    if (ptr_deathTime != nullptr) {
        deathTime = ptr_deathTime->value;
    }

    auto ptr_occludedUnitSelectableDistance = prop->cast_prop<yordle::data::prop::float32_prop>(3237031849u);
    if (ptr_occludedUnitSelectableDistance != nullptr) {
        occludedUnitSelectableDistance = ptr_occludedUnitSelectableDistance->value;
    }

    auto ptr_MovingTowardEnemyActivationAngle = prop->cast_prop<yordle::data::prop::float32_prop>(940040555u);
    if (ptr_MovingTowardEnemyActivationAngle != nullptr) {
        MovingTowardEnemyActivationAngle = ptr_MovingTowardEnemyActivationAngle->value;
    }

    auto ptr_mCharacterCalculations = prop->cast_prop<yordle::data::prop::map_prop>(958843525u);
    if (ptr_mCharacterCalculations != nullptr) {
        for (const auto &pair : ptr_mCharacterCalculations->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mCharacterCalculations[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculation>(ptr_value, 389493299u);
            }
        }
    }

    auto ptr_mCharacterPassiveSpell = prop->cast_prop<yordle::data::prop::reference_prop>(3916366866u);
    if (ptr_mCharacterPassiveSpell != nullptr) {
        mCharacterPassiveSpell = ptr_mCharacterPassiveSpell->value;
    }

    auto ptr_mCharacterPassiveBuffs = prop->cast_prop<yordle::data::prop::set_prop>(3138631806u);
    if (ptr_mCharacterPassiveBuffs != nullptr) {
        for (const auto &entry : ptr_mCharacterPassiveBuffs->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mCharacterPassiveBuffs.emplace(yordle::data::meta::deserialize<yordle::data::meta::CharacterPassiveData>(ptr_entry, 2393107013u));
            }
        }
    }

    auto ptr_mDefaultStatOverrides = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3848632940u);
    if (ptr_mDefaultStatOverrides != nullptr) {
        mDefaultStatOverrides = yordle::data::meta::deserialize<yordle::data::meta::StatFormulaDataList>(ptr_mDefaultStatOverrides, 1250314967u);
    }
}

yordle::data::meta::AbilityResourceSlotInfo::AbilityResourceSlotInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_arType = prop->cast_prop<yordle::data::prop::uint8_prop>(51936954u);
    if (ptr_arType != nullptr) {
        arType = ptr_arType->value;
    }

    auto ptr_arBase = prop->cast_prop<yordle::data::prop::float32_prop>(1245464951u);
    if (ptr_arBase != nullptr) {
        arBase = ptr_arBase->value;
    }

    auto ptr_arPerLevel = prop->cast_prop<yordle::data::prop::float32_prop>(3612934433u);
    if (ptr_arPerLevel != nullptr) {
        arPerLevel = ptr_arPerLevel->value;
    }

    auto ptr_arBaseStaticRegen = prop->cast_prop<yordle::data::prop::float32_prop>(1303282002u);
    if (ptr_arBaseStaticRegen != nullptr) {
        arBaseStaticRegen = ptr_arBaseStaticRegen->value;
    }

    auto ptr_arBaseFactorRegen = prop->cast_prop<yordle::data::prop::float32_prop>(631237985u);
    if (ptr_arBaseFactorRegen != nullptr) {
        arBaseFactorRegen = ptr_arBaseFactorRegen->value;
    }

    auto ptr_arRegenPerLevel = prop->cast_prop<yordle::data::prop::float32_prop>(3580467792u);
    if (ptr_arRegenPerLevel != nullptr) {
        arRegenPerLevel = ptr_arRegenPerLevel->value;
    }

    auto ptr_arIncrements = prop->cast_prop<yordle::data::prop::float32_prop>(2758291504u);
    if (ptr_arIncrements != nullptr) {
        arIncrements = ptr_arIncrements->value;
    }

    auto ptr_arMaxSegments = prop->cast_prop<yordle::data::prop::int32_prop>(2143391250u);
    if (ptr_arMaxSegments != nullptr) {
        arMaxSegments = ptr_arMaxSegments->value;
    }

    auto ptr_arHasRegenText = prop->cast_prop<yordle::data::prop::bool_prop>(2397934700u);
    if (ptr_arHasRegenText != nullptr) {
        arHasRegenText = ptr_arHasRegenText->value;
    }

    auto ptr_arAllowMaxValueToBeOverridden = prop->cast_prop<yordle::data::prop::bool_prop>(3919438124u);
    if (ptr_arAllowMaxValueToBeOverridden != nullptr) {
        arAllowMaxValueToBeOverridden = ptr_arAllowMaxValueToBeOverridden->value;
    }

    auto ptr_arContributesToHealthValues = prop->cast_prop<yordle::data::prop::bool_prop>(2174704283u);
    if (ptr_arContributesToHealthValues != nullptr) {
        arContributesToHealthValues = ptr_arContributesToHealthValues->value;
    }

    auto ptr_arPreventRegenWhileAtZero = prop->cast_prop<yordle::data::prop::bool_prop>(1295275781u);
    if (ptr_arPreventRegenWhileAtZero != nullptr) {
        arPreventRegenWhileAtZero = ptr_arPreventRegenWhileAtZero->value;
    }

    auto ptr_arDisplayAsPips = prop->cast_prop<yordle::data::prop::bool_prop>(3118158470u);
    if (ptr_arDisplayAsPips != nullptr) {
        arDisplayAsPips = ptr_arDisplayAsPips->value;
    }

    auto ptr_arIsShown = prop->cast_prop<yordle::data::prop::bool_prop>(4127223943u);
    if (ptr_arIsShown != nullptr) {
        arIsShown = ptr_arIsShown->value;
    }

    auto ptr_arIsShownOnlyOnLocalPlayer = prop->cast_prop<yordle::data::prop::bool_prop>(1779640350u);
    if (ptr_arIsShownOnlyOnLocalPlayer != nullptr) {
        arIsShownOnlyOnLocalPlayer = ptr_arIsShownOnlyOnLocalPlayer->value;
    }

    auto ptr_arOverrideSmallPipName = prop->cast_prop<yordle::data::prop::string_prop>(2502607441u);
    if (ptr_arOverrideSmallPipName != nullptr) {
        arOverrideSmallPipName = ptr_arOverrideSmallPipName->value;
    }

    auto ptr_arOverrideMediumPipName = prop->cast_prop<yordle::data::prop::string_prop>(3733597457u);
    if (ptr_arOverrideMediumPipName != nullptr) {
        arOverrideMediumPipName = ptr_arOverrideMediumPipName->value;
    }

    auto ptr_arOverrideLargePipName = prop->cast_prop<yordle::data::prop::string_prop>(1869337277u);
    if (ptr_arOverrideLargePipName != nullptr) {
        arOverrideLargePipName = ptr_arOverrideLargePipName->value;
    }

    auto ptr_arOverrideEmptyPipName = prop->cast_prop<yordle::data::prop::string_prop>(2100706935u);
    if (ptr_arOverrideEmptyPipName != nullptr) {
        arOverrideEmptyPipName = ptr_arOverrideEmptyPipName->value;
    }

    auto ptr_arOverrideSpacerName = prop->cast_prop<yordle::data::prop::string_prop>(929546417u);
    if (ptr_arOverrideSpacerName != nullptr) {
        arOverrideSpacerName = ptr_arOverrideSpacerName->value;
    }

    auto ptr_arNegativeSpacer = prop->cast_prop<yordle::data::prop::bool_prop>(3456733133u);
    if (ptr_arNegativeSpacer != nullptr) {
        arNegativeSpacer = ptr_arNegativeSpacer->value;
    }

    auto ptr_x5ca738c0 = prop->cast_prop<yordle::data::prop::bool_prop>(1554462912u);
    if (ptr_x5ca738c0 != nullptr) {
        x5ca738c0 = ptr_x5ca738c0->value;
    }

    auto ptr_xa9d3a87c = prop->cast_prop<yordle::data::prop::bool_prop>(2849220732u);
    if (ptr_xa9d3a87c != nullptr) {
        xa9d3a87c = ptr_xa9d3a87c->value;
    }
}

yordle::data::meta::AttackSlotData::AttackSlotData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAttackTotalTime = prop->cast_prop<yordle::data::prop::optional_prop>(2576789951u);
    if (ptr_mAttackTotalTime != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_mAttackTotalTime->value);
        if(ptr_entry != nullptr) {
            mAttackTotalTime = ptr_entry->value;
        }
    }

    auto ptr_mAttackCastTime = prop->cast_prop<yordle::data::prop::optional_prop>(731577330u);
    if (ptr_mAttackCastTime != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_mAttackCastTime->value);
        if(ptr_entry != nullptr) {
            mAttackCastTime = ptr_entry->value;
        }
    }

    auto ptr_mOverrideAutoattackCastTime = prop->cast_prop<yordle::data::prop::structure_prop>(369242801u);
    if (ptr_mOverrideAutoattackCastTime != nullptr) {
        mOverrideAutoattackCastTime = yordle::data::meta::deserialize<yordle::data::meta::OverrideAutoAttackCastTimeData>(ptr_mOverrideAutoattackCastTime, 3397751176u);
    }

    auto ptr_mAttackDelayCastOffsetPercent = prop->cast_prop<yordle::data::prop::optional_prop>(4176959436u);
    if (ptr_mAttackDelayCastOffsetPercent != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_mAttackDelayCastOffsetPercent->value);
        if(ptr_entry != nullptr) {
            mAttackDelayCastOffsetPercent = ptr_entry->value;
        }
    }

    auto ptr_mAttackDelayCastOffsetPercentAttackSpeedRatio = prop->cast_prop<yordle::data::prop::optional_prop>(3839254662u);
    if (ptr_mAttackDelayCastOffsetPercentAttackSpeedRatio != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_mAttackDelayCastOffsetPercentAttackSpeedRatio->value);
        if(ptr_entry != nullptr) {
            mAttackDelayCastOffsetPercentAttackSpeedRatio = ptr_entry->value;
        }
    }

    auto ptr_mAttackProbability = prop->cast_prop<yordle::data::prop::optional_prop>(1567997819u);
    if (ptr_mAttackProbability != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_mAttackProbability->value);
        if(ptr_entry != nullptr) {
            mAttackProbability = ptr_entry->value;
        }
    }

    auto ptr_mAttackName = prop->cast_prop<yordle::data::prop::optional_prop>(343796191u);
    if (ptr_mAttackName != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(ptr_mAttackName->value);
        if(ptr_entry != nullptr) {
            mAttackName = ptr_entry->value;
        }
    }
}

yordle::data::meta::TargetLaserComponentEffects::TargetLaserComponentEffects(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_beamEffectDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1820024538u);
    if (ptr_beamEffectDefinition != nullptr) {
        beamEffectDefinition = yordle::data::meta::deserialize<yordle::data::meta::SkinCharacterDataProperties_CharacterIdleEffect>(ptr_beamEffectDefinition, 856064357u);
    }

    auto ptr_towerTargetingEffectDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1373168301u);
    if (ptr_towerTargetingEffectDefinition != nullptr) {
        towerTargetingEffectDefinition = yordle::data::meta::deserialize<yordle::data::meta::SkinCharacterDataProperties_CharacterIdleEffect>(ptr_towerTargetingEffectDefinition, 856064357u);
    }

    auto ptr_champTargetingEffectDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2223923715u);
    if (ptr_champTargetingEffectDefinition != nullptr) {
        champTargetingEffectDefinition = yordle::data::meta::deserialize<yordle::data::meta::SkinCharacterDataProperties_CharacterIdleEffect>(ptr_champTargetingEffectDefinition, 856064357u);
    }
}

yordle::data::meta::ToolEducationData::ToolEducationData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_firstItem = prop->cast_prop<yordle::data::prop::int32_prop>(2590564570u);
    if (ptr_firstItem != nullptr) {
        firstItem = ptr_firstItem->value;
    }

    auto ptr_skillOrder = prop->cast_prop<yordle::data::prop::int32_prop>(3132791886u);
    if (ptr_skillOrder != nullptr) {
        skillOrder = ptr_skillOrder->value;
    }
}

yordle::data::meta::CharacterToolData::CharacterToolData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_searchTags = prop->cast_prop<yordle::data::prop::string_prop>(4179647924u);
    if (ptr_searchTags != nullptr) {
        searchTags = ptr_searchTags->value;
    }

    auto ptr_searchTagsSecondary = prop->cast_prop<yordle::data::prop::string_prop>(2378135198u);
    if (ptr_searchTagsSecondary != nullptr) {
        searchTagsSecondary = ptr_searchTagsSecondary->value;
    }
}

yordle::data::meta::Companion::Companion(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Character(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::InteractionData::InteractionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_idleAnim = prop->cast_prop<yordle::data::prop::string_prop>(2328648634u);
    if (ptr_idleAnim != nullptr) {
        idleAnim = ptr_idleAnim->value;
    }

    auto ptr_shouldRandomizeIdleAnimPhase = prop->cast_prop<yordle::data::prop::bool_prop>(2592489145u);
    if (ptr_shouldRandomizeIdleAnimPhase != nullptr) {
        shouldRandomizeIdleAnimPhase = ptr_shouldRandomizeIdleAnimPhase->value;
    }
}

yordle::data::meta::ISpellRankUpRequirement::ISpellRankUpRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::HasSkillPointRequirement::HasSkillPointRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ISpellRankUpRequirement(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::CharacterLevelRequirement::CharacterLevelRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ISpellRankUpRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mLevel = prop->cast_prop<yordle::data::prop::uint32_prop>(2809549998u);
    if (ptr_mLevel != nullptr) {
        mLevel = ptr_mLevel->value;
    }
}

yordle::data::meta::HasBuffRequirement::HasBuffRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ISpellRankUpRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBuffName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(38338834u);
    if (ptr_mBuffName != nullptr) {
        mBuffName = ptr_mBuffName->value;
    }

    auto ptr_mFromAnyone = prop->cast_prop<yordle::data::prop::bool_prop>(1715384362u);
    if (ptr_mFromAnyone != nullptr) {
        mFromAnyone = ptr_mFromAnyone->value;
    }
}

yordle::data::meta::SpellRankUpRequirements::SpellRankUpRequirements(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mRequirements = prop->cast_prop<yordle::data::prop::set_prop>(1271700992u);
    if (ptr_mRequirements != nullptr) {
        for (const auto &entry : ptr_mRequirements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mRequirements.emplace(yordle::data::meta::deserialize<yordle::data::meta::ISpellRankUpRequirement>(ptr_entry, 1708005576u));
            }
        }
    }
}

yordle::data::meta::SpellLevelUpInfo::SpellLevelUpInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mRequirements = prop->cast_prop<yordle::data::prop::set_prop>(1271700992u);
    if (ptr_mRequirements != nullptr) {
        for (const auto &entry : ptr_mRequirements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mRequirements.emplace(yordle::data::meta::deserialize<yordle::data::meta::SpellRankUpRequirements>(ptr_entry, 3158945758u));
            }
        }
    }
}

yordle::data::meta::RecSpellRankUpInfo::RecSpellRankUpInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDefaultPriority = prop->cast_prop<yordle::data::prop::set_prop>(275051513u);
    if (ptr_mDefaultPriority != nullptr) {
        for (const auto &entry : ptr_mDefaultPriority->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(entry);
            if (ptr_entry != nullptr) {
                mDefaultPriority.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mEarlyLevelOverrides = prop->cast_prop<yordle::data::prop::set_prop>(1006671964u);
    if (ptr_mEarlyLevelOverrides != nullptr) {
        for (const auto &entry : ptr_mEarlyLevelOverrides->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(entry);
            if (ptr_entry != nullptr) {
                mEarlyLevelOverrides.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::UseableData::UseableData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_flags = prop->cast_prop<yordle::data::prop::uint32_prop>(2624027180u);
    if (ptr_flags != nullptr) {
        flags = ptr_flags->value;
    }

    auto ptr_useHeroSpellName = prop->cast_prop<yordle::data::prop::string_prop>(1139402973u);
    if (ptr_useHeroSpellName != nullptr) {
        useHeroSpellName = ptr_useHeroSpellName->value;
    }

    auto ptr_useSpellName = prop->cast_prop<yordle::data::prop::string_prop>(1497228333u);
    if (ptr_useSpellName != nullptr) {
        useSpellName = ptr_useSpellName->value;
    }

    auto ptr_useCooldownSpellSlot = prop->cast_prop<yordle::data::prop::int32_prop>(2252568789u);
    if (ptr_useCooldownSpellSlot != nullptr) {
        useCooldownSpellSlot = ptr_useCooldownSpellSlot->value;
    }
}

yordle::data::meta::CharacterHealthBarDataRecord::CharacterHealthBarDataRecord(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_hpPerTick = prop->cast_prop<yordle::data::prop::float32_prop>(1681699737u);
    if (ptr_hpPerTick != nullptr) {
        hpPerTick = ptr_hpPerTick->value;
    }

    auto ptr_attachToBone = prop->cast_prop<yordle::data::prop::string_prop>(1298133719u);
    if (ptr_attachToBone != nullptr) {
        attachToBone = ptr_attachToBone->value;
    }

    auto ptr_unitHealthBarStyle = prop->cast_prop<yordle::data::prop::uint8_prop>(1070290579u);
    if (ptr_unitHealthBarStyle != nullptr) {
        unitHealthBarStyle = ptr_unitHealthBarStyle->value;
    }

    auto ptr_showWhileUntargetable = prop->cast_prop<yordle::data::prop::bool_prop>(154612883u);
    if (ptr_showWhileUntargetable != nullptr) {
        showWhileUntargetable = ptr_showWhileUntargetable->value;
    }

    auto ptr_x9c5124c0 = prop->cast_prop<yordle::data::prop::bool_prop>(2622563520u);
    if (ptr_x9c5124c0 != nullptr) {
        x9c5124c0 = ptr_x9c5124c0->value;
    }

    auto ptr_xe784dd2f = prop->cast_prop<yordle::data::prop::uint32_prop>(3884244271u);
    if (ptr_xe784dd2f != nullptr) {
        xe784dd2f = ptr_xe784dd2f->value;
    }

    auto ptr_x66a7d70a = prop->cast_prop<yordle::data::prop::bool_prop>(1722275594u);
    if (ptr_x66a7d70a != nullptr) {
        x66a7d70a = ptr_x66a7d70a->value;
    }

    auto ptr_x8bdcfa04 = prop->cast_prop<yordle::data::prop::bool_prop>(2346514948u);
    if (ptr_x8bdcfa04 != nullptr) {
        x8bdcfa04 = ptr_x8bdcfa04->value;
    }

    auto ptr_x7f0b706e = prop->cast_prop<yordle::data::prop::bool_prop>(2131456110u);
    if (ptr_x7f0b706e != nullptr) {
        x7f0b706e = ptr_x7f0b706e->value;
    }
}

yordle::data::meta::SponsoredBanner::SponsoredBanner(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_banner = prop->cast_prop<yordle::data::prop::reference_prop>(1097580943u);
    if (ptr_banner != nullptr) {
        banner = ptr_banner->value;
    }

    auto ptr_SponsorTexturePath = prop->cast_prop<yordle::data::prop::xx_hash_prop>(3625922223u);
    if (ptr_SponsorTexturePath != nullptr) {
        SponsorTexturePath = ptr_SponsorTexturePath->value;
    }
}

yordle::data::meta::EsportsBannerConfiguration::EsportsBannerConfiguration(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_esportsTeam = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3114625026u);
    if (ptr_esportsTeam != nullptr) {
        esportsTeam = ptr_esportsTeam->value;
    }

    auto ptr_leagueName = prop->cast_prop<yordle::data::prop::string_prop>(390952403u);
    if (ptr_leagueName != nullptr) {
        leagueName = ptr_leagueName->value;
    }

    auto ptr_eventMutator = prop->cast_prop<yordle::data::prop::reference_prop>(4043971103u);
    if (ptr_eventMutator != nullptr) {
        eventMutator = ptr_eventMutator->value;
    }

    auto ptr_texturePath = prop->cast_prop<yordle::data::prop::xx_hash_prop>(4037239779u);
    if (ptr_texturePath != nullptr) {
        texturePath = ptr_texturePath->value;
    }

    auto ptr_IndividualBannerOverrides = prop->cast_prop<yordle::data::prop::set_prop>(631651853u);
    if (ptr_IndividualBannerOverrides != nullptr) {
        for (const auto &entry : ptr_IndividualBannerOverrides->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                IndividualBannerOverrides.emplace(yordle::data::meta::deserialize<yordle::data::meta::SponsoredBanner>(ptr_entry, 6610142u));
            }
        }
    }
}

yordle::data::meta::EsportsBannerData::EsportsBannerData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_bannerName = prop->cast_prop<yordle::data::prop::string_prop>(1064597388u);
    if (ptr_bannerName != nullptr) {
        bannerName = ptr_bannerName->value;
    }

    auto ptr_Team = prop->cast_prop<yordle::data::prop::uint32_prop>(2734521612u);
    if (ptr_Team != nullptr) {
        Team = ptr_Team->value;
    }
}

yordle::data::meta::EsportsData::EsportsData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_leagues = prop->cast_prop<yordle::data::prop::set_prop>(2165301273u);
    if (ptr_leagues != nullptr) {
        for (const auto &entry : ptr_leagues->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                leagues.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ClashLogo::ClashLogo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mClashLogoId = prop->cast_prop<yordle::data::prop::uint32_prop>(4078196507u);
    if (ptr_mClashLogoId != nullptr) {
        mClashLogoId = ptr_mClashLogoId->value;
    }

    auto ptr_mClashLogoColorId = prop->cast_prop<yordle::data::prop::uint32_prop>(3865085164u);
    if (ptr_mClashLogoColorId != nullptr) {
        mClashLogoColorId = ptr_mClashLogoColorId->value;
    }

    auto ptr_mLogoPath = prop->cast_prop<yordle::data::prop::string_prop>(1910587384u);
    if (ptr_mLogoPath != nullptr) {
        mLogoPath = ptr_mLogoPath->value;
    }
}

yordle::data::meta::EsportsBannerOptions::EsportsBannerOptions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_subMeshName = prop->cast_prop<yordle::data::prop::string_prop>(820886375u);
    if (ptr_subMeshName != nullptr) {
        subMeshName = ptr_subMeshName->value;
    }

    auto ptr_IsSpectatorOnly = prop->cast_prop<yordle::data::prop::bool_prop>(878849852u);
    if (ptr_IsSpectatorOnly != nullptr) {
        IsSpectatorOnly = ptr_IsSpectatorOnly->value;
    }

    auto ptr_defaultTexturePath = prop->cast_prop<yordle::data::prop::xx_hash_prop>(850621690u);
    if (ptr_defaultTexturePath != nullptr) {
        defaultTexturePath = ptr_defaultTexturePath->value;
    }

    auto ptr_DefaultBlankMaterial = prop->cast_prop<yordle::data::prop::reference_prop>(3590584789u);
    if (ptr_DefaultBlankMaterial != nullptr) {
        DefaultBlankMaterial = ptr_DefaultBlankMaterial->value;
    }
}

yordle::data::meta::MasteryBadgeData::MasteryBadgeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mParticleName = prop->cast_prop<yordle::data::prop::string_prop>(4276649273u);
    if (ptr_mParticleName != nullptr) {
        mParticleName = ptr_mParticleName->value;
    }

    auto ptr_mRenderScale = prop->cast_prop<yordle::data::prop::float32_prop>(4176951642u);
    if (ptr_mRenderScale != nullptr) {
        mRenderScale = ptr_mRenderScale->value;
    }

    auto ptr_mVerticalOffset = prop->cast_prop<yordle::data::prop::float32_prop>(499930149u);
    if (ptr_mVerticalOffset != nullptr) {
        mVerticalOffset = ptr_mVerticalOffset->value;
    }

    auto ptr_mSummonerIconId = prop->cast_prop<yordle::data::prop::int32_prop>(1588619876u);
    if (ptr_mSummonerIconId != nullptr) {
        mSummonerIconId = ptr_mSummonerIconId->value;
    }

    auto ptr_mMasteryLevel = prop->cast_prop<yordle::data::prop::uint32_prop>(706044141u);
    if (ptr_mMasteryLevel != nullptr) {
        mMasteryLevel = ptr_mMasteryLevel->value;
    }
}

yordle::data::meta::MasteryBadgeConfig::MasteryBadgeConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBadges = prop->cast_prop<yordle::data::prop::set_prop>(1829395376u);
    if (ptr_mBadges != nullptr) {
        for (const auto &entry : ptr_mBadges->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mBadges.emplace(yordle::data::meta::deserialize<yordle::data::meta::MasteryBadgeData>(ptr_entry, 1337363141u));
            }
        }
    }
}

yordle::data::meta::MasteryData::MasteryData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_texture = prop->cast_prop<yordle::data::prop::string_prop>(1013213428u);
    if (ptr_texture != nullptr) {
        texture = ptr_texture->value;
    }

    auto ptr_LevelTraKey = prop->cast_prop<yordle::data::prop::string_prop>(3077895061u);
    if (ptr_LevelTraKey != nullptr) {
        LevelTraKey = ptr_LevelTraKey->value;
    }

    auto ptr_DetailsTraKey = prop->cast_prop<yordle::data::prop::string_prop>(3729097533u);
    if (ptr_DetailsTraKey != nullptr) {
        DetailsTraKey = ptr_DetailsTraKey->value;
    }
}

yordle::data::meta::ChampionMasteryMap::ChampionMasteryMap(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_masteryData = prop->cast_prop<yordle::data::prop::map_prop>(505623326u);
    if (ptr_masteryData != nullptr) {
        for (const auto &pair : ptr_masteryData->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                masteryData[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::BaseLoadoutData::BaseLoadoutData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mNameTraKey = prop->cast_prop<yordle::data::prop::string_prop>(4134177491u);
    if (ptr_mNameTraKey != nullptr) {
        mNameTraKey = ptr_mNameTraKey->value;
    }

    auto ptr_catalogEntry = prop->cast_prop<yordle::data::prop::inline_structure_prop>(607049692u);
    if (ptr_catalogEntry != nullptr) {
        catalogEntry = yordle::data::meta::deserialize<yordle::data::meta::CatalogEntry>(ptr_catalogEntry, 607049692u);
    }

    auto ptr_mDescriptionTraKey = prop->cast_prop<yordle::data::prop::string_prop>(1905664938u);
    if (ptr_mDescriptionTraKey != nullptr) {
        mDescriptionTraKey = ptr_mDescriptionTraKey->value;
    }
}

yordle::data::meta::LoadoutFeatureData::LoadoutFeatureData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFeature = prop->cast_prop<yordle::data::prop::uint32_prop>(3278163094u);
    if (ptr_mFeature != nullptr) {
        mFeature = ptr_mFeature->value;
    }

    auto ptr_mMutator = prop->cast_prop<yordle::data::prop::optional_prop>(200054682u);
    if (ptr_mMutator != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(ptr_mMutator->value);
        if(ptr_entry != nullptr) {
            mMutator = ptr_entry->value;
        }
    }

    auto ptr_mBinaryFile = prop->cast_prop<yordle::data::prop::optional_prop>(1462592939u);
    if (ptr_mBinaryFile != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(ptr_mBinaryFile->value);
        if(ptr_entry != nullptr) {
            mBinaryFile = ptr_entry->value;
        }
    }

    auto ptr_mLoadoutCategory = prop->cast_prop<yordle::data::prop::string_prop>(271303184u);
    if (ptr_mLoadoutCategory != nullptr) {
        mLoadoutCategory = ptr_mLoadoutCategory->value;
    }

    auto ptr_mLoadoutProperties = prop->cast_prop<yordle::data::prop::set_prop>(1565587133u);
    if (ptr_mLoadoutProperties != nullptr) {
        for (const auto &entry : ptr_mLoadoutProperties->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mLoadoutProperties.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mGDSObjectPathTemplates = prop->cast_prop<yordle::data::prop::map_prop>(1572692579u);
    if (ptr_mGDSObjectPathTemplates != nullptr) {
        for (const auto &pair : ptr_mGDSObjectPathTemplates->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mGDSObjectPathTemplates[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_mLoadFromContentIds = prop->cast_prop<yordle::data::prop::bool_prop>(3689079853u);
    if (ptr_mLoadFromContentIds != nullptr) {
        mLoadFromContentIds = ptr_mLoadFromContentIds->value;
    }
}

yordle::data::meta::RecallDecalData::RecallDecalData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_effectFile = prop->cast_prop<yordle::data::prop::string_prop>(493995746u);
    if (ptr_effectFile != nullptr) {
        effectFile = ptr_effectFile->value;
    }

    auto ptr_arrivalEffectFile = prop->cast_prop<yordle::data::prop::string_prop>(4290503505u);
    if (ptr_arrivalEffectFile != nullptr) {
        arrivalEffectFile = ptr_arrivalEffectFile->value;
    }

    auto ptr_EmpoweredEffectFile = prop->cast_prop<yordle::data::prop::string_prop>(3221725462u);
    if (ptr_EmpoweredEffectFile != nullptr) {
        EmpoweredEffectFile = ptr_EmpoweredEffectFile->value;
    }

    auto ptr_EmpoweredArrivalFile = prop->cast_prop<yordle::data::prop::string_prop>(2784775912u);
    if (ptr_EmpoweredArrivalFile != nullptr) {
        EmpoweredArrivalFile = ptr_EmpoweredArrivalFile->value;
    }

    auto ptr_recallDecalId = prop->cast_prop<yordle::data::prop::uint32_prop>(4226121696u);
    if (ptr_recallDecalId != nullptr) {
        recallDecalId = ptr_recallDecalId->value;
    }
}

yordle::data::meta::GearSkinUpgrade::GearSkinUpgrade(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mGearData = prop->cast_prop<yordle::data::prop::structure_prop>(1671102483u);
    if (ptr_mGearData != nullptr) {
        mGearData = yordle::data::meta::deserialize<yordle::data::meta::GearData>(ptr_mGearData, 3023323566u);
    }

    auto ptr_x358d080b = prop->cast_prop<yordle::data::prop::string_prop>(898435083u);
    if (ptr_x358d080b != nullptr) {
        x358d080b = ptr_x358d080b->value;
    }
}

yordle::data::meta::SkinUpgradeData::SkinUpgradeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mGearSkinUpgrades = prop->cast_prop<yordle::data::prop::set_prop>(3411158819u);
    if (ptr_mGearSkinUpgrades != nullptr) {
        for (const auto &entry : ptr_mGearSkinUpgrades->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mGearSkinUpgrades.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::TFTCompanionBucket::TFTCompanionBucket(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Companions = prop->cast_prop<yordle::data::prop::set_prop>(1458363922u);
    if (ptr_Companions != nullptr) {
        for (const auto &entry : ptr_Companions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                Companions.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::TFTBotLoadoutConfiguration::TFTBotLoadoutConfiguration(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xeffbc65c = prop->cast_prop<yordle::data::prop::set_prop>(4026254940u);
    if (ptr_xeffbc65c != nullptr) {
        for (const auto &entry : ptr_xeffbc65c->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                xeffbc65c.emplace(yordle::data::meta::deserialize<yordle::data::meta::TFTCompanionBucket>(ptr_entry, 4009991563u));
            }
        }
    }

    auto ptr_mapSkins = prop->cast_prop<yordle::data::prop::set_prop>(785627485u);
    if (ptr_mapSkins != nullptr) {
        for (const auto &entry : ptr_mapSkins->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mapSkins.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::BannerFlagData::BannerFlagData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_animationGraphData = prop->cast_prop<yordle::data::prop::reference_prop>(4126869447u);
    if (ptr_animationGraphData != nullptr) {
        animationGraphData = ptr_animationGraphData->value;
    }

    auto ptr_skinMeshProperties = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1174362372u);
    if (ptr_skinMeshProperties != nullptr) {
        skinMeshProperties = yordle::data::meta::deserialize<yordle::data::meta::SkinMeshDataProperties>(ptr_skinMeshProperties, 1628559524u);
    }
}

yordle::data::meta::BannerFrameData::BannerFrameData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_animationGraphData = prop->cast_prop<yordle::data::prop::reference_prop>(4126869447u);
    if (ptr_animationGraphData != nullptr) {
        animationGraphData = ptr_animationGraphData->value;
    }

    auto ptr_skinMeshProperties = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1174362372u);
    if (ptr_skinMeshProperties != nullptr) {
        skinMeshProperties = yordle::data::meta::deserialize<yordle::data::meta::SkinMeshDataProperties>(ptr_skinMeshProperties, 1628559524u);
    }
}

yordle::data::meta::CompanionData::CompanionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseLoadoutData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_rarity = prop->cast_prop<yordle::data::prop::uint32_prop>(1266615690u);
    if (ptr_rarity != nullptr) {
        rarity = ptr_rarity->value;
    }

    auto ptr_level = prop->cast_prop<yordle::data::prop::uint32_prop>(2610554845u);
    if (ptr_level != nullptr) {
        level = ptr_level->value;
    }

    auto ptr_mDisabled = prop->cast_prop<yordle::data::prop::bool_prop>(1460531328u);
    if (ptr_mDisabled != nullptr) {
        mDisabled = ptr_mDisabled->value;
    }

    auto ptr_mCharacter = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1901814039u);
    if (ptr_mCharacter != nullptr) {
        mCharacter = ptr_mCharacter->value;
    }

    auto ptr_mSkinId = prop->cast_prop<yordle::data::prop::uint32_prop>(2831584420u);
    if (ptr_mSkinId != nullptr) {
        mSkinId = ptr_mSkinId->value;
    }

    auto ptr_speciesLink = prop->cast_prop<yordle::data::prop::string_prop>(416215309u);
    if (ptr_speciesLink != nullptr) {
        speciesLink = ptr_speciesLink->value;
    }

    auto ptr_mStandaloneCircleIcon = prop->cast_prop<yordle::data::prop::string_prop>(3290732214u);
    if (ptr_mStandaloneCircleIcon != nullptr) {
        mStandaloneCircleIcon = ptr_mStandaloneCircleIcon->value;
    }

    auto ptr_mStandaloneLoadoutsIcon = prop->cast_prop<yordle::data::prop::string_prop>(2243605595u);
    if (ptr_mStandaloneLoadoutsIcon != nullptr) {
        mStandaloneLoadoutsIcon = ptr_mStandaloneLoadoutsIcon->value;
    }

    auto ptr_mStandaloneLoadoutsLargeIcon = prop->cast_prop<yordle::data::prop::string_prop>(2404894612u);
    if (ptr_mStandaloneLoadoutsLargeIcon != nullptr) {
        mStandaloneLoadoutsLargeIcon = ptr_mStandaloneLoadoutsLargeIcon->value;
    }

    auto ptr_mLoadScreen = prop->cast_prop<yordle::data::prop::string_prop>(3501972704u);
    if (ptr_mLoadScreen != nullptr) {
        mLoadScreen = ptr_mLoadScreen->value;
    }
}

yordle::data::meta::CompanionSpeciesData::CompanionSpeciesData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpeciesName = prop->cast_prop<yordle::data::prop::string_prop>(4028299461u);
    if (ptr_mSpeciesName != nullptr) {
        mSpeciesName = ptr_mSpeciesName->value;
    }

    auto ptr_mSpeciesId = prop->cast_prop<yordle::data::prop::uint32_prop>(3626864379u);
    if (ptr_mSpeciesId != nullptr) {
        mSpeciesId = ptr_mSpeciesId->value;
    }
}

yordle::data::meta::SummonerEmote::SummonerEmote(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_summonerEmoteId = prop->cast_prop<yordle::data::prop::uint32_prop>(2956205910u);
    if (ptr_summonerEmoteId != nullptr) {
        summonerEmoteId = ptr_summonerEmoteId->value;
    }

    auto ptr_vfxSystem = prop->cast_prop<yordle::data::prop::reference_prop>(719095870u);
    if (ptr_vfxSystem != nullptr) {
        vfxSystem = ptr_vfxSystem->value;
    }

    auto ptr_announcementIcon = prop->cast_prop<yordle::data::prop::string_prop>(728839351u);
    if (ptr_announcementIcon != nullptr) {
        announcementIcon = ptr_announcementIcon->value;
    }

    auto ptr_selectionIcon = prop->cast_prop<yordle::data::prop::string_prop>(1415849216u);
    if (ptr_selectionIcon != nullptr) {
        selectionIcon = ptr_selectionIcon->value;
    }

    auto ptr_renderScale = prop->cast_prop<yordle::data::prop::float32_prop>(1923074361u);
    if (ptr_renderScale != nullptr) {
        renderScale = ptr_renderScale->value;
    }

    auto ptr_verticalOffset = prop->cast_prop<yordle::data::prop::float32_prop>(4115310168u);
    if (ptr_verticalOffset != nullptr) {
        verticalOffset = ptr_verticalOffset->value;
    }

    auto ptr_visibleSelectionName = prop->cast_prop<yordle::data::prop::string_prop>(2994461618u);
    if (ptr_visibleSelectionName != nullptr) {
        visibleSelectionName = ptr_visibleSelectionName->value;
    }
}

yordle::data::meta::SummonerEmoteSettings::SummonerEmoteSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFirstBlood = prop->cast_prop<yordle::data::prop::reference_prop>(581243222u);
    if (ptr_mFirstBlood != nullptr) {
        mFirstBlood = ptr_mFirstBlood->value;
    }

    auto ptr_mAce = prop->cast_prop<yordle::data::prop::reference_prop>(3516908855u);
    if (ptr_mAce != nullptr) {
        mAce = ptr_mAce->value;
    }
}

yordle::data::meta::GearData::GearData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_skinMeshProperties = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1174362372u);
    if (ptr_skinMeshProperties != nullptr) {
        skinMeshProperties = yordle::data::meta::deserialize<yordle::data::meta::SkinMeshDataProperties>(ptr_skinMeshProperties, 1628559524u);
    }

    auto ptr_animationGraphData = prop->cast_prop<yordle::data::prop::reference_prop>(4126869447u);
    if (ptr_animationGraphData != nullptr) {
        animationGraphData = ptr_animationGraphData->value;
    }

    auto ptr_mVFXResourceResolver = prop->cast_prop<yordle::data::prop::structure_prop>(1602389154u);
    if (ptr_mVFXResourceResolver != nullptr) {
        mVFXResourceResolver = yordle::data::meta::deserialize<yordle::data::meta::ResourceResolver>(ptr_mVFXResourceResolver, 4013559603u);
    }

    auto ptr_mEquipAnimation = prop->cast_prop<yordle::data::prop::string_prop>(2475638922u);
    if (ptr_mEquipAnimation != nullptr) {
        mEquipAnimation = ptr_mEquipAnimation->value;
    }

    auto ptr_mSelfOnlyPortraitIcon = prop->cast_prop<yordle::data::prop::string_prop>(1725649758u);
    if (ptr_mSelfOnlyPortraitIcon != nullptr) {
        mSelfOnlyPortraitIcon = ptr_mSelfOnlyPortraitIcon->value;
    }

    auto ptr_mPortraitIcon = prop->cast_prop<yordle::data::prop::string_prop>(135389434u);
    if (ptr_mPortraitIcon != nullptr) {
        mPortraitIcon = ptr_mPortraitIcon->value;
    }

    auto ptr_xb6c044fb = prop->cast_prop<yordle::data::prop::set_prop>(3066053883u);
    if (ptr_xb6c044fb != nullptr) {
        for (const auto &entry : ptr_xb6c044fb->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                xb6c044fb.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x21b6167e = prop->cast_prop<yordle::data::prop::set_prop>(565581438u);
    if (ptr_x21b6167e != nullptr) {
        for (const auto &entry : ptr_x21b6167e->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                x21b6167e.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ModeProgressionRewardData::ModeProgressionRewardData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseLoadoutData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBuffName = prop->cast_prop<yordle::data::prop::string_prop>(38338834u);
    if (ptr_mBuffName != nullptr) {
        mBuffName = ptr_mBuffName->value;
    }

    auto ptr_mCharacters = prop->cast_prop<yordle::data::prop::set_prop>(3604631660u);
    if (ptr_mCharacters != nullptr) {
        for (const auto &entry : ptr_mCharacters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mCharacters.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mVFXResourceResolver = prop->cast_prop<yordle::data::prop::structure_prop>(1602389154u);
    if (ptr_mVFXResourceResolver != nullptr) {
        mVFXResourceResolver = yordle::data::meta::deserialize<yordle::data::meta::ResourceResolver>(ptr_mVFXResourceResolver, 4013559603u);
    }
}

yordle::data::meta::RegaliaData::RegaliaData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseLoadoutData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_texture = prop->cast_prop<yordle::data::prop::string_prop>(1013213428u);
    if (ptr_texture != nullptr) {
        texture = ptr_texture->value;
    }
}

yordle::data::meta::RegaliaLookup::RegaliaLookup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_tier = prop->cast_prop<yordle::data::prop::string_prop>(1548858633u);
    if (ptr_tier != nullptr) {
        tier = ptr_tier->value;
    }

    auto ptr_regaliaCrest = prop->cast_prop<yordle::data::prop::reference_prop>(950328649u);
    if (ptr_regaliaCrest != nullptr) {
        regaliaCrest = ptr_regaliaCrest->value;
    }

    auto ptr_regaliaCrown1 = prop->cast_prop<yordle::data::prop::reference_prop>(2753957280u);
    if (ptr_regaliaCrown1 != nullptr) {
        regaliaCrown1 = ptr_regaliaCrown1->value;
    }

    auto ptr_regaliaCrown2 = prop->cast_prop<yordle::data::prop::reference_prop>(2804290137u);
    if (ptr_regaliaCrown2 != nullptr) {
        regaliaCrown2 = ptr_regaliaCrown2->value;
    }

    auto ptr_regaliaCrown3 = prop->cast_prop<yordle::data::prop::reference_prop>(2787512518u);
    if (ptr_regaliaCrown3 != nullptr) {
        regaliaCrown3 = ptr_regaliaCrown3->value;
    }

    auto ptr_regaliaCrown4 = prop->cast_prop<yordle::data::prop::reference_prop>(2837845375u);
    if (ptr_regaliaCrown4 != nullptr) {
        regaliaCrown4 = ptr_regaliaCrown4->value;
    }

    auto ptr_RegaliaTrim = prop->cast_prop<yordle::data::prop::reference_prop>(34629342u);
    if (ptr_RegaliaTrim != nullptr) {
        RegaliaTrim = ptr_RegaliaTrim->value;
    }

    auto ptr_regaliaSplit1 = prop->cast_prop<yordle::data::prop::reference_prop>(3647677749u);
    if (ptr_regaliaSplit1 != nullptr) {
        regaliaSplit1 = ptr_regaliaSplit1->value;
    }

    auto ptr_regaliaSplit2 = prop->cast_prop<yordle::data::prop::reference_prop>(3597344892u);
    if (ptr_regaliaSplit2 != nullptr) {
        regaliaSplit2 = ptr_regaliaSplit2->value;
    }

    auto ptr_regaliaSplit3 = prop->cast_prop<yordle::data::prop::reference_prop>(3614122511u);
    if (ptr_regaliaSplit3 != nullptr) {
        regaliaSplit3 = ptr_regaliaSplit3->value;
    }
}

yordle::data::meta::RegaliaRankedCrestEntry::RegaliaRankedCrestEntry(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_base = prop->cast_prop<yordle::data::prop::reference_prop>(1037866200u);
    if (ptr_base != nullptr) {
        base = ptr_base->value;
    }

    auto ptr_xfbb20410 = prop->cast_prop<yordle::data::prop::map_prop>(4222747664u);
    if (ptr_xfbb20410 != nullptr) {
        for (const auto &pair : ptr_xfbb20410->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                xfbb20410[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_xaf2e170a = prop->cast_prop<yordle::data::prop::map_prop>(2939033354u);
    if (ptr_xaf2e170a != nullptr) {
        for (const auto &pair : ptr_xaf2e170a->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                xaf2e170a[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::RegaliaRankedCrestMap::RegaliaRankedCrestMap(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x723d6f91 = prop->cast_prop<yordle::data::prop::map_prop>(1916628881u);
    if (ptr_x723d6f91 != nullptr) {
        for (const auto &pair : ptr_x723d6f91->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                x723d6f91[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::RegaliaRankedCrestEntry>(ptr_value, 3828118224u);
            }
        }
    }
}

yordle::data::meta::RegaliaPrestigeCrestList::RegaliaPrestigeCrestList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PrestigeCrests = prop->cast_prop<yordle::data::prop::set_prop>(2584072672u);
    if (ptr_PrestigeCrests != nullptr) {
        for (const auto &entry : ptr_PrestigeCrests->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                PrestigeCrests.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::RegaliaRankedBannerMap::RegaliaRankedBannerMap(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xc5b8b568 = prop->cast_prop<yordle::data::prop::map_prop>(3317216616u);
    if (ptr_xc5b8b568 != nullptr) {
        for (const auto &pair : ptr_xc5b8b568->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                xc5b8b568[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::x2ba8fc33::x2ba8fc33(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x5b1fd3c2 = prop->cast_prop<yordle::data::prop::map_prop>(1528812482u);
    if (ptr_x5b1fd3c2 != nullptr) {
        for (const auto &pair : ptr_x5b1fd3c2->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                x5b1fd3c2[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::RegaliaData>(ptr_value, 2286074286u);
            }
        }
    }
}

yordle::data::meta::StatStoneEventToTrack::StatStoneEventToTrack(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_EventToTrack = prop->cast_prop<yordle::data::prop::uint32_prop>(3033949705u);
    if (ptr_EventToTrack != nullptr) {
        EventToTrack = ptr_EventToTrack->value;
    }

    auto ptr_StatFilters = prop->cast_prop<yordle::data::prop::set_prop>(4226789542u);
    if (ptr_StatFilters != nullptr) {
        for (const auto &entry : ptr_StatFilters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                StatFilters.emplace(yordle::data::meta::deserialize<yordle::data::meta::IStatStoneLogicDriver>(ptr_entry, 3276314181u));
            }
        }
    }
}

yordle::data::meta::StatStoneData::StatStoneData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseLoadoutData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_EventsToTrack = prop->cast_prop<yordle::data::prop::set_prop>(2415261508u);
    if (ptr_EventsToTrack != nullptr) {
        for (const auto &entry : ptr_EventsToTrack->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                EventsToTrack.emplace(yordle::data::meta::deserialize<yordle::data::meta::StatStoneEventToTrack>(ptr_entry, 4146948500u));
            }
        }
    }

    auto ptr_category = prop->cast_prop<yordle::data::prop::reference_prop>(3475980913u);
    if (ptr_category != nullptr) {
        category = ptr_category->value;
    }

    auto ptr_xfb2a56ef = prop->cast_prop<yordle::data::prop::uint32_prop>(4213855983u);
    if (ptr_xfb2a56ef != nullptr) {
        xfb2a56ef = ptr_xfb2a56ef->value;
    }

    auto ptr_x286fc9c3 = prop->cast_prop<yordle::data::prop::uint32_prop>(678414787u);
    if (ptr_x286fc9c3 != nullptr) {
        x286fc9c3 = ptr_x286fc9c3->value;
    }

    auto ptr_Milestones = prop->cast_prop<yordle::data::prop::set_prop>(1401290250u);
    if (ptr_Milestones != nullptr) {
        for (const auto &entry : ptr_Milestones->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint64_prop>(entry);
            if (ptr_entry != nullptr) {
                Milestones.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_EpicStatStone = prop->cast_prop<yordle::data::prop::bool_prop>(1475661895u);
    if (ptr_EpicStatStone != nullptr) {
        EpicStatStone = ptr_EpicStatStone->value;
    }

    auto ptr_TriggeredFromScript = prop->cast_prop<yordle::data::prop::bool_prop>(2094353733u);
    if (ptr_TriggeredFromScript != nullptr) {
        TriggeredFromScript = ptr_TriggeredFromScript->value;
    }

    auto ptr_IsRetired = prop->cast_prop<yordle::data::prop::bool_prop>(487172646u);
    if (ptr_IsRetired != nullptr) {
        IsRetired = ptr_IsRetired->value;
    }

    auto ptr_trackingType = prop->cast_prop<yordle::data::prop::uint8_prop>(868103188u);
    if (ptr_trackingType != nullptr) {
        trackingType = ptr_trackingType->value;
    }

    auto ptr_stoneName = prop->cast_prop<yordle::data::prop::string_prop>(2007295361u);
    if (ptr_stoneName != nullptr) {
        stoneName = ptr_stoneName->value;
    }

    auto ptr_x92bd18ab = prop->cast_prop<yordle::data::prop::bool_prop>(2461866155u);
    if (ptr_x92bd18ab != nullptr) {
        x92bd18ab = ptr_x92bd18ab->value;
    }
}

yordle::data::meta::IStatStoneLogicDriver::IStatStoneLogicDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TargetHasUnitTagFilter::TargetHasUnitTagFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_UnitTags = prop->cast_prop<yordle::data::prop::inline_structure_prop>(340455258u);
    if (ptr_UnitTags != nullptr) {
        UnitTags = yordle::data::meta::deserialize<yordle::data::meta::ObjectTags>(ptr_UnitTags, 622921539u);
    }
}

yordle::data::meta::TrueDamageGivenFilter::TrueDamageGivenFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::CrowdControlFilter::CrowdControlFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x20cf84ac = prop->cast_prop<yordle::data::prop::set_prop>(550470828u);
    if (ptr_x20cf84ac != nullptr) {
        for (const auto &entry : ptr_x20cf84ac->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(entry);
            if (ptr_entry != nullptr) {
                x20cf84ac.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_TrackDuration = prop->cast_prop<yordle::data::prop::bool_prop>(2443043316u);
    if (ptr_TrackDuration != nullptr) {
        TrackDuration = ptr_TrackDuration->value;
    }
}

yordle::data::meta::TargetHasBuffFilter::TargetHasBuffFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ValidBuffs = prop->cast_prop<yordle::data::prop::set_prop>(3672164089u);
    if (ptr_ValidBuffs != nullptr) {
        for (const auto &entry : ptr_ValidBuffs->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(entry);
            if (ptr_entry != nullptr) {
                ValidBuffs.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::SourceTypeFilter::SourceTypeFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x47bac313 = prop->cast_prop<yordle::data::prop::bool_prop>(1203421971u);
    if (ptr_x47bac313 != nullptr) {
        x47bac313 = ptr_x47bac313->value;
    }

    auto ptr_x1e3fcd64 = prop->cast_prop<yordle::data::prop::bool_prop>(507497828u);
    if (ptr_x1e3fcd64 != nullptr) {
        x1e3fcd64 = ptr_x1e3fcd64->value;
    }

    auto ptr_xd5e57340 = prop->cast_prop<yordle::data::prop::bool_prop>(3588584256u);
    if (ptr_xd5e57340 != nullptr) {
        xd5e57340 = ptr_xd5e57340->value;
    }
}

yordle::data::meta::TargetTypeFilter::TargetTypeFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x47bac313 = prop->cast_prop<yordle::data::prop::bool_prop>(1203421971u);
    if (ptr_x47bac313 != nullptr) {
        x47bac313 = ptr_x47bac313->value;
    }

    auto ptr_x1e3fcd64 = prop->cast_prop<yordle::data::prop::bool_prop>(507497828u);
    if (ptr_x1e3fcd64 != nullptr) {
        x1e3fcd64 = ptr_x1e3fcd64->value;
    }

    auto ptr_xd5e57340 = prop->cast_prop<yordle::data::prop::bool_prop>(3588584256u);
    if (ptr_xd5e57340 != nullptr) {
        xd5e57340 = ptr_xd5e57340->value;
    }
}

yordle::data::meta::TargetTeamFilter::TargetTeamFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ally = prop->cast_prop<yordle::data::prop::bool_prop>(3770038919u);
    if (ptr_ally != nullptr) {
        ally = ptr_ally->value;
    }

    auto ptr_enemy = prop->cast_prop<yordle::data::prop::bool_prop>(1776971179u);
    if (ptr_enemy != nullptr) {
        enemy = ptr_enemy->value;
    }

    auto ptr_Self = prop->cast_prop<yordle::data::prop::bool_prop>(1683726967u);
    if (ptr_Self != nullptr) {
        Self = ptr_Self->value;
    }
}

yordle::data::meta::SourceLessThanHealthPercentageFilter::SourceLessThanHealthPercentageFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_healthPercentage = prop->cast_prop<yordle::data::prop::float32_prop>(3803982007u);
    if (ptr_healthPercentage != nullptr) {
        healthPercentage = ptr_healthPercentage->value;
    }
}

yordle::data::meta::AssistCountFilter::AssistCountFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_assistCount = prop->cast_prop<yordle::data::prop::uint8_prop>(2915965837u);
    if (ptr_assistCount != nullptr) {
        assistCount = ptr_assistCount->value;
    }
}

yordle::data::meta::MultiKillLogic::MultiKillLogic(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::DamageShieldedLogic::DamageShieldedLogic(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xa1e033be = prop->cast_prop<yordle::data::prop::bool_prop>(2715825086u);
    if (ptr_xa1e033be != nullptr) {
        xa1e033be = ptr_xa1e033be->value;
    }

    auto ptr_x7944553a = prop->cast_prop<yordle::data::prop::bool_prop>(2034521402u);
    if (ptr_x7944553a != nullptr) {
        x7944553a = ptr_x7944553a->value;
    }

    auto ptr_x2ad527a6 = prop->cast_prop<yordle::data::prop::bool_prop>(718612390u);
    if (ptr_x2ad527a6 != nullptr) {
        x2ad527a6 = ptr_x2ad527a6->value;
    }

    auto ptr_x621e14db = prop->cast_prop<yordle::data::prop::bool_prop>(1646138587u);
    if (ptr_x621e14db != nullptr) {
        x621e14db = ptr_x621e14db->value;
    }

    auto ptr_x60b7c1b6 = prop->cast_prop<yordle::data::prop::bool_prop>(1622655414u);
    if (ptr_x60b7c1b6 != nullptr) {
        x60b7c1b6 = ptr_x60b7c1b6->value;
    }

    auto ptr_xcbc2f8ba = prop->cast_prop<yordle::data::prop::bool_prop>(3418552506u);
    if (ptr_xcbc2f8ba != nullptr) {
        xcbc2f8ba = ptr_xcbc2f8ba->value;
    }

    auto ptr_x2efb9d27 = prop->cast_prop<yordle::data::prop::bool_prop>(788241703u);
    if (ptr_x2efb9d27 != nullptr) {
        x2efb9d27 = ptr_x2efb9d27->value;
    }

    auto ptr_x1701ca0a = prop->cast_prop<yordle::data::prop::bool_prop>(385993226u);
    if (ptr_x1701ca0a != nullptr) {
        x1701ca0a = ptr_x1701ca0a->value;
    }
}

yordle::data::meta::GoldSourceFilter::GoldSourceFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ValidGoldSource = prop->cast_prop<yordle::data::prop::uint8_prop>(972553818u);
    if (ptr_ValidGoldSource != nullptr) {
        ValidGoldSource = ptr_ValidGoldSource->value;
    }
}

yordle::data::meta::KillingSpreeFilter::KillingSpreeFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_KillingSpreeCount = prop->cast_prop<yordle::data::prop::int32_prop>(3358576079u);
    if (ptr_KillingSpreeCount != nullptr) {
        KillingSpreeCount = ptr_KillingSpreeCount->value;
    }
}

yordle::data::meta::NeutralMinionCampClearedLogic::NeutralMinionCampClearedLogic(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TurretFirstBloodLogic::TurretFirstBloodLogic(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStatStoneLogicDriver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::StatStoneSet::StatStoneSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_catalogEntry = prop->cast_prop<yordle::data::prop::inline_structure_prop>(607049692u);
    if (ptr_catalogEntry != nullptr) {
        catalogEntry = yordle::data::meta::deserialize<yordle::data::meta::CatalogEntry>(ptr_catalogEntry, 607049692u);
    }

    auto ptr_statStones = prop->cast_prop<yordle::data::prop::set_prop>(3412566397u);
    if (ptr_statStones != nullptr) {
        for (const auto &entry : ptr_statStones->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                statStones.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::StatStoneCategory::StatStoneCategory(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_gameIconUnlit = prop->cast_prop<yordle::data::prop::string_prop>(3755435926u);
    if (ptr_gameIconUnlit != nullptr) {
        gameIconUnlit = ptr_gameIconUnlit->value;
    }

    auto ptr_gameIconLit = prop->cast_prop<yordle::data::prop::string_prop>(1961781939u);
    if (ptr_gameIconLit != nullptr) {
        gameIconLit = ptr_gameIconLit->value;
    }

    auto ptr_gameIconFull = prop->cast_prop<yordle::data::prop::string_prop>(3394707375u);
    if (ptr_gameIconFull != nullptr) {
        gameIconFull = ptr_gameIconFull->value;
    }

    auto ptr_gameIconMini = prop->cast_prop<yordle::data::prop::string_prop>(1633580257u);
    if (ptr_gameIconMini != nullptr) {
        gameIconMini = ptr_gameIconMini->value;
    }

    auto ptr_CategoryColor = prop->cast_prop<yordle::data::prop::color_prop>(3915826324u);
    if (ptr_CategoryColor != nullptr) {
        CategoryColor = ptr_CategoryColor->value;
    }
}

yordle::data::meta::xead1b379::xead1b379(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xfb403eda = prop->cast_prop<yordle::data::prop::map_prop>(4215291610u);
    if (ptr_xfb403eda != nullptr) {
        for (const auto &pair : ptr_xfb403eda->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                xfb403eda[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::x32be2466::x32be2466(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x1a28d722 = prop->cast_prop<yordle::data::prop::map_prop>(438884130u);
    if (ptr_x1a28d722 != nullptr) {
        for (const auto &pair : ptr_x1a28d722->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                x1a28d722[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::TFTDamageSkin::TFTDamageSkin(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseLoadoutData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_rarity = prop->cast_prop<yordle::data::prop::uint32_prop>(1266615690u);
    if (ptr_rarity != nullptr) {
        rarity = ptr_rarity->value;
    }

    auto ptr_DamageBuffName = prop->cast_prop<yordle::data::prop::string_prop>(2698810810u);
    if (ptr_DamageBuffName != nullptr) {
        DamageBuffName = ptr_DamageBuffName->value;
    }

    auto ptr_level = prop->cast_prop<yordle::data::prop::uint32_prop>(2610554845u);
    if (ptr_level != nullptr) {
        level = ptr_level->value;
    }

    auto ptr_disabled = prop->cast_prop<yordle::data::prop::bool_prop>(871591685u);
    if (ptr_disabled != nullptr) {
        disabled = ptr_disabled->value;
    }

    auto ptr_SkinID = prop->cast_prop<yordle::data::prop::uint32_prop>(2067069477u);
    if (ptr_SkinID != nullptr) {
        SkinID = ptr_SkinID->value;
    }

    auto ptr_x31af5dc6 = prop->cast_prop<yordle::data::prop::set_prop>(833576390u);
    if (ptr_x31af5dc6 != nullptr) {
        for (const auto &entry : ptr_x31af5dc6->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                x31af5dc6.emplace(yordle::data::meta::deserialize<yordle::data::meta::TftDamageSkinDescriptor>(ptr_entry, 3607046696u));
            }
        }
    }

    auto ptr_VfxResourceResolver = prop->cast_prop<yordle::data::prop::reference_prop>(2679170533u);
    if (ptr_VfxResourceResolver != nullptr) {
        VfxResourceResolver = ptr_VfxResourceResolver->value;
    }

    auto ptr_StandaloneLoadoutsIcon = prop->cast_prop<yordle::data::prop::string_prop>(1125948026u);
    if (ptr_StandaloneLoadoutsIcon != nullptr) {
        StandaloneLoadoutsIcon = ptr_StandaloneLoadoutsIcon->value;
    }

    auto ptr_StandaloneLoadoutsLargeIcon = prop->cast_prop<yordle::data::prop::string_prop>(4185673651u);
    if (ptr_StandaloneLoadoutsLargeIcon != nullptr) {
        StandaloneLoadoutsLargeIcon = ptr_StandaloneLoadoutsLargeIcon->value;
    }

    auto ptr_AudioBankPaths = prop->cast_prop<yordle::data::prop::set_prop>(991437061u);
    if (ptr_AudioBankPaths != nullptr) {
        for (const auto &entry : ptr_AudioBankPaths->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                AudioBankPaths.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x7ed5b4a7 = prop->cast_prop<yordle::data::prop::float32_prop>(2127934631u);
    if (ptr_x7ed5b4a7 != nullptr) {
        x7ed5b4a7 = ptr_x7ed5b4a7->value;
    }
}

yordle::data::meta::TftDamageSkinDescriptor::TftDamageSkinDescriptor(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_EffectType = prop->cast_prop<yordle::data::prop::uint32_prop>(1545586876u);
    if (ptr_EffectType != nullptr) {
        EffectType = ptr_EffectType->value;
    }

    auto ptr_x9d0cca5b = prop->cast_prop<yordle::data::prop::uint32_prop>(2634861147u);
    if (ptr_x9d0cca5b != nullptr) {
        x9d0cca5b = ptr_x9d0cca5b->value;
    }

    auto ptr_effectKey = prop->cast_prop<yordle::data::prop::string_prop>(2600665331u);
    if (ptr_effectKey != nullptr) {
        effectKey = ptr_effectKey->value;
    }

    auto ptr_AttachedToBone = prop->cast_prop<yordle::data::prop::uint32_prop>(2630749530u);
    if (ptr_AttachedToBone != nullptr) {
        AttachedToBone = ptr_AttachedToBone->value;
    }

    auto ptr_EffectDelay = prop->cast_prop<yordle::data::prop::float32_prop>(255342883u);
    if (ptr_EffectDelay != nullptr) {
        EffectDelay = ptr_EffectDelay->value;
    }
}

yordle::data::meta::TftMapGroupData::TftMapGroupData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mId = prop->cast_prop<yordle::data::prop::uint32_prop>(3280944101u);
    if (ptr_mId != nullptr) {
        mId = ptr_mId->value;
    }
}

yordle::data::meta::TftMapSkin::TftMapSkin(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseLoadoutData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_rarity = prop->cast_prop<yordle::data::prop::uint32_prop>(1266615690u);
    if (ptr_rarity != nullptr) {
        rarity = ptr_rarity->value;
    }

    auto ptr_StandaloneLoadoutsIcon = prop->cast_prop<yordle::data::prop::string_prop>(1125948026u);
    if (ptr_StandaloneLoadoutsIcon != nullptr) {
        StandaloneLoadoutsIcon = ptr_StandaloneLoadoutsIcon->value;
    }

    auto ptr_StandaloneLoadoutsLargeIcon = prop->cast_prop<yordle::data::prop::string_prop>(4185673651u);
    if (ptr_StandaloneLoadoutsLargeIcon != nullptr) {
        StandaloneLoadoutsLargeIcon = ptr_StandaloneLoadoutsLargeIcon->value;
    }

    auto ptr_GroupLink = prop->cast_prop<yordle::data::prop::string_prop>(4216969820u);
    if (ptr_GroupLink != nullptr) {
        GroupLink = ptr_GroupLink->value;
    }

    auto ptr_AudioBankPaths = prop->cast_prop<yordle::data::prop::set_prop>(991437061u);
    if (ptr_AudioBankPaths != nullptr) {
        for (const auto &entry : ptr_AudioBankPaths->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                AudioBankPaths.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_characters = prop->cast_prop<yordle::data::prop::unordered_set_prop>(2421522649u);
    if (ptr_characters != nullptr) {
        for (const auto &entry : ptr_characters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                characters.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mapContainer = prop->cast_prop<yordle::data::prop::string_prop>(3723018516u);
    if (ptr_mapContainer != nullptr) {
        mapContainer = ptr_mapContainer->value;
    }

    auto ptr_xafc467eb = prop->cast_prop<yordle::data::prop::uint16_prop>(2948884459u);
    if (ptr_xafc467eb != nullptr) {
        xafc467eb = ptr_xafc467eb->value;
    }

    auto ptr_x6e39b04a = prop->cast_prop<yordle::data::prop::uint16_prop>(1849274442u);
    if (ptr_x6e39b04a != nullptr) {
        x6e39b04a = ptr_x6e39b04a->value;
    }
}

yordle::data::meta::TrophyData::TrophyData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseLoadoutData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPerceptionBubbleRadius = prop->cast_prop<yordle::data::prop::float32_prop>(20532479u);
    if (ptr_mPerceptionBubbleRadius != nullptr) {
        mPerceptionBubbleRadius = ptr_mPerceptionBubbleRadius->value;
    }

    auto ptr_skinMeshProperties = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1174362372u);
    if (ptr_skinMeshProperties != nullptr) {
        skinMeshProperties = yordle::data::meta::deserialize<yordle::data::meta::SkinMeshDataProperties>(ptr_skinMeshProperties, 1628559524u);
    }

    auto ptr_animationGraphData = prop->cast_prop<yordle::data::prop::reference_prop>(4126869447u);
    if (ptr_animationGraphData != nullptr) {
        animationGraphData = ptr_animationGraphData->value;
    }

    auto ptr_mVFXResourceResolver = prop->cast_prop<yordle::data::prop::structure_prop>(1602389154u);
    if (ptr_mVFXResourceResolver != nullptr) {
        mVFXResourceResolver = yordle::data::meta::deserialize<yordle::data::meta::ResourceResolver>(ptr_mVFXResourceResolver, 4013559603u);
    }

    auto ptr_mBracketTRAKey = prop->cast_prop<yordle::data::prop::string_prop>(1360340284u);
    if (ptr_mBracketTRAKey != nullptr) {
        mBracketTRAKey = ptr_mBracketTRAKey->value;
    }
}

yordle::data::meta::TrophyPedestalData::TrophyPedestalData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseLoadoutData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_animationGraphData = prop->cast_prop<yordle::data::prop::reference_prop>(4126869447u);
    if (ptr_animationGraphData != nullptr) {
        animationGraphData = ptr_animationGraphData->value;
    }

    auto ptr_mJointName = prop->cast_prop<yordle::data::prop::string_prop>(4077582351u);
    if (ptr_mJointName != nullptr) {
        mJointName = ptr_mJointName->value;
    }

    auto ptr_skinMeshProperties = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1174362372u);
    if (ptr_skinMeshProperties != nullptr) {
        skinMeshProperties = yordle::data::meta::deserialize<yordle::data::meta::SkinMeshDataProperties>(ptr_skinMeshProperties, 1628559524u);
    }

    auto ptr_mTierTRAKey = prop->cast_prop<yordle::data::prop::string_prop>(396559668u);
    if (ptr_mTierTRAKey != nullptr) {
        mTierTRAKey = ptr_mTierTRAKey->value;
    }
}

yordle::data::meta::x1650a4ce::x1650a4ce(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::EmblemPosition::EmblemPosition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mVertical = prop->cast_prop<yordle::data::prop::string_prop>(3165476130u);
    if (ptr_mVertical != nullptr) {
        mVertical = ptr_mVertical->value;
    }

    auto ptr_mHorizontal = prop->cast_prop<yordle::data::prop::string_prop>(78089096u);
    if (ptr_mHorizontal != nullptr) {
        mHorizontal = ptr_mHorizontal->value;
    }
}

yordle::data::meta::EmblemData::EmblemData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mShowOnLoadingScreen = prop->cast_prop<yordle::data::prop::bool_prop>(2106504220u);
    if (ptr_mShowOnLoadingScreen != nullptr) {
        mShowOnLoadingScreen = ptr_mShowOnLoadingScreen->value;
    }

    auto ptr_mLoadingScreenScale = prop->cast_prop<yordle::data::prop::float32_prop>(2955305810u);
    if (ptr_mLoadingScreenScale != nullptr) {
        mLoadingScreenScale = ptr_mLoadingScreenScale->value;
    }

    auto ptr_mImagePath = prop->cast_prop<yordle::data::prop::string_prop>(3199978518u);
    if (ptr_mImagePath != nullptr) {
        mImagePath = ptr_mImagePath->value;
    }
}

yordle::data::meta::EmblemSettings::EmblemSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBottomFraction = prop->cast_prop<yordle::data::prop::float32_prop>(1526019205u);
    if (ptr_mBottomFraction != nullptr) {
        mBottomFraction = ptr_mBottomFraction->value;
    }

    auto ptr_mDebugDrawEmblems = prop->cast_prop<yordle::data::prop::bool_prop>(101577472u);
    if (ptr_mDebugDrawEmblems != nullptr) {
        mDebugDrawEmblems = ptr_mDebugDrawEmblems->value;
    }
}

yordle::data::meta::GameModeAutoItemPurchasingConfig::GameModeAutoItemPurchasingConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x19ef67a2 = prop->cast_prop<yordle::data::prop::int32_prop>(435120034u);
    if (ptr_x19ef67a2 != nullptr) {
        x19ef67a2 = ptr_x19ef67a2->value;
    }

    auto ptr_xe34f62d0 = prop->cast_prop<yordle::data::prop::set_prop>(3813630672u);
    if (ptr_xe34f62d0 != nullptr) {
        for (const auto &entry : ptr_xe34f62d0->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                xe34f62d0.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_xc8adfdbc = prop->cast_prop<yordle::data::prop::set_prop>(3366845884u);
    if (ptr_xc8adfdbc != nullptr) {
        for (const auto &entry : ptr_xc8adfdbc->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                xc8adfdbc.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x83f0cccd = prop->cast_prop<yordle::data::prop::set_prop>(2213596365u);
    if (ptr_x83f0cccd != nullptr) {
        for (const auto &entry : ptr_x83f0cccd->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                x83f0cccd.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x14596d09 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(341404937u);
    if (ptr_x14596d09 != nullptr) {
        x14596d09 = ptr_x14596d09->value;
    }
}

yordle::data::meta::GameModeChampionList::GameModeChampionList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mChampions = prop->cast_prop<yordle::data::prop::unordered_set_prop>(3401416180u);
    if (ptr_mChampions != nullptr) {
        for (const auto &entry : ptr_mChampions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mChampions.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::GameModeConstant::GameModeConstant(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::GameModeConstantFloat::GameModeConstantFloat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GameModeConstant(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::float32_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = ptr_mValue->value;
    }
}

yordle::data::meta::GameModeConstantInteger::GameModeConstantInteger(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GameModeConstant(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::int32_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = ptr_mValue->value;
    }
}

yordle::data::meta::GameModeConstantBool::GameModeConstantBool(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GameModeConstant(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::bool_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = ptr_mValue->value;
    }
}

yordle::data::meta::GameModeConstantString::GameModeConstantString(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GameModeConstant(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::string_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = ptr_mValue->value;
    }
}

yordle::data::meta::GameModeConstantStringVector::GameModeConstantStringVector(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GameModeConstant(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::set_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        for (const auto &entry : ptr_mValue->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mValue.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::GameModeConstantTRAKey::GameModeConstantTRAKey(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GameModeConstant(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::string_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = ptr_mValue->value;
    }
}

yordle::data::meta::GameModeConstantVector3f::GameModeConstantVector3f(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GameModeConstant(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::vector_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = ptr_mValue->value;
    }
}

yordle::data::meta::GameModeConstantFloatPerLevel::GameModeConstantFloatPerLevel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GameModeConstant(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mValues = prop->cast_prop<yordle::data::prop::set_prop>(610995598u);
    if (ptr_mValues != nullptr) {
        for (const auto &entry : ptr_mValues->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mValues.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::GameModeConstantsGroup::GameModeConstantsGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mConstants = prop->cast_prop<yordle::data::prop::map_prop>(125003421u);
    if (ptr_mConstants != nullptr) {
        for (const auto &pair : ptr_mConstants->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mConstants[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::GameModeConstant>(ptr_value, 1670770484u);
            }
        }
    }
}

yordle::data::meta::GameModeConstants::GameModeConstants(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mGroups = prop->cast_prop<yordle::data::prop::map_prop>(3699657592u);
    if (ptr_mGroups != nullptr) {
        for (const auto &pair : ptr_mGroups->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mGroups[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::GameModeConstantsGroup>(ptr_value, 720276364u);
            }
        }
    }
}

yordle::data::meta::GameModeItemList::GameModeItemList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItems = prop->cast_prop<yordle::data::prop::unordered_set_prop>(2972511644u);
    if (ptr_mItems != nullptr) {
        for (const auto &entry : ptr_mItems->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mItems.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::GameModeMapData::GameModeMapData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mModeName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3158795888u);
    if (ptr_mModeName != nullptr) {
        mModeName = ptr_mModeName->value;
    }

    auto ptr_mChampionLists = prop->cast_prop<yordle::data::prop::unordered_set_prop>(242939244u);
    if (ptr_mChampionLists != nullptr) {
        for (const auto &entry : ptr_mChampionLists->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mChampionLists.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_itemLists = prop->cast_prop<yordle::data::prop::unordered_set_prop>(1298046227u);
    if (ptr_itemLists != nullptr) {
        for (const auto &entry : ptr_itemLists->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                itemLists.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_xf74c67bb = prop->cast_prop<yordle::data::prop::string_prop>(4148979643u);
    if (ptr_xf74c67bb != nullptr) {
        xf74c67bb = ptr_xf74c67bb->value;
    }

    auto ptr_mItemShopData = prop->cast_prop<yordle::data::prop::reference_prop>(2519132899u);
    if (ptr_mItemShopData != nullptr) {
        mItemShopData = ptr_mItemShopData->value;
    }

    auto ptr_AnnouncementsMapping = prop->cast_prop<yordle::data::prop::reference_prop>(635771279u);
    if (ptr_AnnouncementsMapping != nullptr) {
        AnnouncementsMapping = ptr_AnnouncementsMapping->value;
    }

    auto ptr_mRelativeColorization = prop->cast_prop<yordle::data::prop::bool_prop>(3788255821u);
    if (ptr_mRelativeColorization != nullptr) {
        mRelativeColorization = ptr_mRelativeColorization->value;
    }

    auto ptr_mNeutralTimersDisplay = prop->cast_prop<yordle::data::prop::reference_prop>(2378333997u);
    if (ptr_mNeutralTimersDisplay != nullptr) {
        mNeutralTimersDisplay = ptr_mNeutralTimersDisplay->value;
    }

    auto ptr_mCursorConfig = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3834810340u);
    if (ptr_mCursorConfig != nullptr) {
        mCursorConfig = ptr_mCursorConfig->value;
    }

    auto ptr_mCursorConfigUpdate = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4115552613u);
    if (ptr_mCursorConfigUpdate != nullptr) {
        mCursorConfigUpdate = ptr_mCursorConfigUpdate->value;
    }

    auto ptr_mHudScoreData = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3646863737u);
    if (ptr_mHudScoreData != nullptr) {
        mHudScoreData = ptr_mHudScoreData->value;
    }

    auto ptr_mRenderStyle = prop->cast_prop<yordle::data::prop::reference_prop>(1948257549u);
    if (ptr_mRenderStyle != nullptr) {
        mRenderStyle = ptr_mRenderStyle->value;
    }

    auto ptr_mFloatingTextOverride = prop->cast_prop<yordle::data::prop::reference_prop>(1845085589u);
    if (ptr_mFloatingTextOverride != nullptr) {
        mFloatingTextOverride = ptr_mFloatingTextOverride->value;
    }

    auto ptr_mStatsUiData = prop->cast_prop<yordle::data::prop::reference_prop>(1519015945u);
    if (ptr_mStatsUiData != nullptr) {
        mStatsUiData = ptr_mStatsUiData->value;
    }

    auto ptr_mChampionIndicatorEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(2041914701u);
    if (ptr_mChampionIndicatorEnabled != nullptr) {
        mChampionIndicatorEnabled = ptr_mChampionIndicatorEnabled->value;
    }

    auto ptr_ItemShopEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(1551909767u);
    if (ptr_ItemShopEnabled != nullptr) {
        ItemShopEnabled = ptr_ItemShopEnabled->value;
    }

    auto ptr_mExperienceCurveData = prop->cast_prop<yordle::data::prop::reference_prop>(4259458487u);
    if (ptr_mExperienceCurveData != nullptr) {
        mExperienceCurveData = ptr_mExperienceCurveData->value;
    }

    auto ptr_mExperienceModData = prop->cast_prop<yordle::data::prop::reference_prop>(1682265312u);
    if (ptr_mExperienceModData != nullptr) {
        mExperienceModData = ptr_mExperienceModData->value;
    }

    auto ptr_mDeathTimes = prop->cast_prop<yordle::data::prop::reference_prop>(3211873720u);
    if (ptr_mDeathTimes != nullptr) {
        mDeathTimes = ptr_mDeathTimes->value;
    }

    auto ptr_mLoadScreenTipConfiguration = prop->cast_prop<yordle::data::prop::reference_prop>(1689397297u);
    if (ptr_mLoadScreenTipConfiguration != nullptr) {
        mLoadScreenTipConfiguration = ptr_mLoadScreenTipConfiguration->value;
    }

    auto ptr_mMapLocators = prop->cast_prop<yordle::data::prop::reference_prop>(1456889581u);
    if (ptr_mMapLocators != nullptr) {
        mMapLocators = ptr_mMapLocators->value;
    }

    auto ptr_mScriptDataObjectLists = prop->cast_prop<yordle::data::prop::set_prop>(3273571353u);
    if (ptr_mScriptDataObjectLists != nullptr) {
        for (const auto &entry : ptr_mScriptDataObjectLists->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mScriptDataObjectLists.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mPerkReplacements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(665947137u);
    if (ptr_mPerkReplacements != nullptr) {
        mPerkReplacements = yordle::data::meta::deserialize<yordle::data::meta::PerkReplacementList>(ptr_mPerkReplacements, 2307915623u);
    }

    auto ptr_mGameModeConstants = prop->cast_prop<yordle::data::prop::reference_prop>(885630574u);
    if (ptr_mGameModeConstants != nullptr) {
        mGameModeConstants = ptr_mGameModeConstants->value;
    }

    auto ptr_mGameplayConfig = prop->cast_prop<yordle::data::prop::reference_prop>(3712367922u);
    if (ptr_mGameplayConfig != nullptr) {
        mGameplayConfig = ptr_mGameplayConfig->value;
    }

    auto ptr_mMissionBuffData = prop->cast_prop<yordle::data::prop::reference_prop>(3386271259u);
    if (ptr_mMissionBuffData != nullptr) {
        mMissionBuffData = ptr_mMissionBuffData->value;
    }

    auto ptr_mSurrenderSettings = prop->cast_prop<yordle::data::prop::reference_prop>(3906072283u);
    if (ptr_mSurrenderSettings != nullptr) {
        mSurrenderSettings = ptr_mSurrenderSettings->value;
    }

    auto ptr_x6941e612 = prop->cast_prop<yordle::data::prop::reference_prop>(1765926418u);
    if (ptr_x6941e612 != nullptr) {
        x6941e612 = ptr_x6941e612->value;
    }

    auto ptr_x882a6450 = prop->cast_prop<yordle::data::prop::bool_prop>(2284479568u);
    if (ptr_x882a6450 != nullptr) {
        x882a6450 = ptr_x882a6450->value;
    }

    auto ptr_x70b29c3d = prop->cast_prop<yordle::data::prop::set_prop>(1890753597u);
    if (ptr_x70b29c3d != nullptr) {
        for (const auto &entry : ptr_x70b29c3d->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                x70b29c3d.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mLoadingScreenBackground = prop->cast_prop<yordle::data::prop::string_prop>(2640988148u);
    if (ptr_mLoadingScreenBackground != nullptr) {
        mLoadingScreenBackground = ptr_mLoadingScreenBackground->value;
    }
}

yordle::data::meta::GameMutatorExpansions::GameMutatorExpansions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mExpandedMutator = prop->cast_prop<yordle::data::prop::string_prop>(1123609781u);
    if (ptr_mExpandedMutator != nullptr) {
        mExpandedMutator = ptr_mExpandedMutator->value;
    }

    auto ptr_mMutators = prop->cast_prop<yordle::data::prop::unordered_set_prop>(2926781387u);
    if (ptr_mMutators != nullptr) {
        for (const auto &entry : ptr_mMutators->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mMutators.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::IGameCalculationPart::IGameCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::EffectValueCalculationPart::EffectValueCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEffectIndex = prop->cast_prop<yordle::data::prop::int32_prop>(2331712095u);
    if (ptr_mEffectIndex != nullptr) {
        mEffectIndex = ptr_mEffectIndex->value;
    }
}

yordle::data::meta::NamedDataValueCalculationPart::NamedDataValueCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDataValue = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3011960049u);
    if (ptr_mDataValue != nullptr) {
        mDataValue = ptr_mDataValue->value;
    }
}

yordle::data::meta::CooldownMultiplierCalculationPart::CooldownMultiplierCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::CustomReductionMultiplierCalculationPart::CustomReductionMultiplierCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x6e82b179 = prop->cast_prop<yordle::data::prop::structure_prop>(1854058873u);
    if (ptr_x6e82b179 != nullptr) {
        x6e82b179 = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculationPart>(ptr_x6e82b179, 3053458126u);
    }

    auto ptr_mMaximumReductionPercent = prop->cast_prop<yordle::data::prop::float32_prop>(4038717832u);
    if (ptr_mMaximumReductionPercent != nullptr) {
        mMaximumReductionPercent = ptr_mMaximumReductionPercent->value;
    }
}

yordle::data::meta::ProductOfSubPartsCalculationPart::ProductOfSubPartsCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPart1 = prop->cast_prop<yordle::data::prop::structure_prop>(1175732340u);
    if (ptr_mPart1 != nullptr) {
        mPart1 = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculationPart>(ptr_mPart1, 3053458126u);
    }

    auto ptr_mPart2 = prop->cast_prop<yordle::data::prop::structure_prop>(1226065197u);
    if (ptr_mPart2 != nullptr) {
        mPart2 = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculationPart>(ptr_mPart2, 3053458126u);
    }
}

yordle::data::meta::SumOfSubPartsCalculationPart::SumOfSubPartsCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSubparts = prop->cast_prop<yordle::data::prop::set_prop>(2691091496u);
    if (ptr_mSubparts != nullptr) {
        for (const auto &entry : ptr_mSubparts->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mSubparts.emplace(yordle::data::meta::deserialize<yordle::data::meta::IGameCalculationPart>(ptr_entry, 3053458126u));
            }
        }
    }
}

yordle::data::meta::x803dae4c::x803dae4c(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCeiling = prop->cast_prop<yordle::data::prop::optional_prop>(2289025431u);
    if (ptr_mCeiling != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_mCeiling->value);
        if(ptr_entry != nullptr) {
            mCeiling = ptr_entry->value;
        }
    }

    auto ptr_mFloor = prop->cast_prop<yordle::data::prop::optional_prop>(3426554062u);
    if (ptr_mFloor != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_mFloor->value);
        if(ptr_entry != nullptr) {
            mFloor = ptr_entry->value;
        }
    }

    auto ptr_mSubparts = prop->cast_prop<yordle::data::prop::set_prop>(2691091496u);
    if (ptr_mSubparts != nullptr) {
        for (const auto &entry : ptr_mSubparts->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mSubparts.emplace(yordle::data::meta::deserialize<yordle::data::meta::IGameCalculationPart>(ptr_entry, 3053458126u));
            }
        }
    }
}

yordle::data::meta::NumberCalculationPart::NumberCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mNumber = prop->cast_prop<yordle::data::prop::float32_prop>(3791830185u);
    if (ptr_mNumber != nullptr) {
        mNumber = ptr_mNumber->value;
    }
}

yordle::data::meta::IGameCalculationPartWithStats::IGameCalculationPartWithStats(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStat = prop->cast_prop<yordle::data::prop::uint8_prop>(1290546314u);
    if (ptr_mStat != nullptr) {
        mStat = ptr_mStat->value;
    }

    auto ptr_mStatFormula = prop->cast_prop<yordle::data::prop::uint8_prop>(2100383980u);
    if (ptr_mStatFormula != nullptr) {
        mStatFormula = ptr_mStatFormula->value;
    }
}

yordle::data::meta::StatByCoefficientCalculationPart::StatByCoefficientCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPartWithStats(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCoefficient = prop->cast_prop<yordle::data::prop::float32_prop>(693905545u);
    if (ptr_mCoefficient != nullptr) {
        mCoefficient = ptr_mCoefficient->value;
    }
}

yordle::data::meta::StatBySubPartCalculationPart::StatBySubPartCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPartWithStats(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSubpart = prop->cast_prop<yordle::data::prop::structure_prop>(483933259u);
    if (ptr_mSubpart != nullptr) {
        mSubpart = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculationPart>(ptr_mSubpart, 3053458126u);
    }
}

yordle::data::meta::StatByNamedDataValueCalculationPart::StatByNamedDataValueCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPartWithStats(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDataValue = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3011960049u);
    if (ptr_mDataValue != nullptr) {
        mDataValue = ptr_mDataValue->value;
    }
}

yordle::data::meta::x5abdfab::x5abdfab(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStat = prop->cast_prop<yordle::data::prop::uint8_prop>(1290546314u);
    if (ptr_mStat != nullptr) {
        mStat = ptr_mStat->value;
    }

    auto ptr_mStatFormula = prop->cast_prop<yordle::data::prop::uint8_prop>(2100383980u);
    if (ptr_mStatFormula != nullptr) {
        mStatFormula = ptr_mStatFormula->value;
    }

    auto ptr_xbfe6ad01 = prop->cast_prop<yordle::data::prop::float32_prop>(3219565825u);
    if (ptr_xbfe6ad01 != nullptr) {
        xbfe6ad01 = ptr_xbfe6ad01->value;
    }

    auto ptr_mDataValue = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3011960049u);
    if (ptr_mDataValue != nullptr) {
        mDataValue = ptr_mDataValue->value;
    }
}

yordle::data::meta::xe9fb4d18::xe9fb4d18(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x616627c4 = prop->cast_prop<yordle::data::prop::structure_prop>(1634084804u);
    if (ptr_x616627c4 != nullptr) {
        x616627c4 = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculationPart>(ptr_x616627c4, 3053458126u);
    }

    auto ptr_x465802ea = prop->cast_prop<yordle::data::prop::uint8_prop>(1180173034u);
    if (ptr_x465802ea != nullptr) {
        x465802ea = ptr_x465802ea->value;
    }

    auto ptr_x27833dcc = prop->cast_prop<yordle::data::prop::uint8_prop>(662912460u);
    if (ptr_x27833dcc != nullptr) {
        x27833dcc = ptr_x27833dcc->value;
    }
}

yordle::data::meta::SubPartScaledProportionalToStat::SubPartScaledProportionalToStat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSubpart = prop->cast_prop<yordle::data::prop::structure_prop>(483933259u);
    if (ptr_mSubpart != nullptr) {
        mSubpart = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculationPart>(ptr_mSubpart, 3053458126u);
    }

    auto ptr_mRatio = prop->cast_prop<yordle::data::prop::float32_prop>(3101490363u);
    if (ptr_mRatio != nullptr) {
        mRatio = ptr_mRatio->value;
    }

    auto ptr_mStat = prop->cast_prop<yordle::data::prop::uint8_prop>(1290546314u);
    if (ptr_mStat != nullptr) {
        mStat = ptr_mStat->value;
    }

    auto ptr_mStatFormula = prop->cast_prop<yordle::data::prop::uint8_prop>(2100383980u);
    if (ptr_mStatFormula != nullptr) {
        mStatFormula = ptr_mStatFormula->value;
    }

    auto ptr_mStyleTag = prop->cast_prop<yordle::data::prop::string_prop>(2569852907u);
    if (ptr_mStyleTag != nullptr) {
        mStyleTag = ptr_mStyleTag->value;
    }

    auto ptr_xa5749b52 = prop->cast_prop<yordle::data::prop::string_prop>(2775882578u);
    if (ptr_xa5749b52 != nullptr) {
        xa5749b52 = ptr_xa5749b52->value;
    }
}

yordle::data::meta::AbilityResourceByCoefficientCalculationPart::AbilityResourceByCoefficientCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCoefficient = prop->cast_prop<yordle::data::prop::float32_prop>(693905545u);
    if (ptr_mCoefficient != nullptr) {
        mCoefficient = ptr_mCoefficient->value;
    }

    auto ptr_mAbilityResource = prop->cast_prop<yordle::data::prop::uint8_prop>(1306624758u);
    if (ptr_mAbilityResource != nullptr) {
        mAbilityResource = ptr_mAbilityResource->value;
    }

    auto ptr_mStatFormula = prop->cast_prop<yordle::data::prop::uint8_prop>(2100383980u);
    if (ptr_mStatFormula != nullptr) {
        mStatFormula = ptr_mStatFormula->value;
    }
}

yordle::data::meta::IGameCalculationPartWithBuffCounter::IGameCalculationPartWithBuffCounter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBuffName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(38338834u);
    if (ptr_mBuffName != nullptr) {
        mBuffName = ptr_mBuffName->value;
    }

    auto ptr_mIconKey = prop->cast_prop<yordle::data::prop::string_prop>(9297440u);
    if (ptr_mIconKey != nullptr) {
        mIconKey = ptr_mIconKey->value;
    }

    auto ptr_mScalingTagKey = prop->cast_prop<yordle::data::prop::string_prop>(3047920162u);
    if (ptr_mScalingTagKey != nullptr) {
        mScalingTagKey = ptr_mScalingTagKey->value;
    }
}

yordle::data::meta::BuffCounterByCoefficientCalculationPart::BuffCounterByCoefficientCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPartWithBuffCounter(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCoefficient = prop->cast_prop<yordle::data::prop::float32_prop>(693905545u);
    if (ptr_mCoefficient != nullptr) {
        mCoefficient = ptr_mCoefficient->value;
    }
}

yordle::data::meta::BuffCounterByNamedDataValueCalculationPart::BuffCounterByNamedDataValueCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPartWithBuffCounter(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDataValue = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3011960049u);
    if (ptr_mDataValue != nullptr) {
        mDataValue = ptr_mDataValue->value;
    }
}

yordle::data::meta::IGameCalculationPartByCharLevel::IGameCalculationPartByCharLevel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ByCharLevelInterpolationCalculationPart::ByCharLevelInterpolationCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPartByCharLevel(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStartValue = prop->cast_prop<yordle::data::prop::float32_prop>(3496752989u);
    if (ptr_mStartValue != nullptr) {
        mStartValue = ptr_mStartValue->value;
    }

    auto ptr_mEndValue = prop->cast_prop<yordle::data::prop::float32_prop>(483910946u);
    if (ptr_mEndValue != nullptr) {
        mEndValue = ptr_mEndValue->value;
    }

    auto ptr_x7fe8e3b3 = prop->cast_prop<yordle::data::prop::bool_prop>(2145969075u);
    if (ptr_x7fe8e3b3 != nullptr) {
        x7fe8e3b3 = ptr_x7fe8e3b3->value;
    }

    auto ptr_xa331f6bf = prop->cast_prop<yordle::data::prop::bool_prop>(2737960639u);
    if (ptr_xa331f6bf != nullptr) {
        xa331f6bf = ptr_xa331f6bf->value;
    }
}

yordle::data::meta::ByCharLevelBreakpointsCalculationPart::ByCharLevelBreakpointsCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPartByCharLevel(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mLevel1Value = prop->cast_prop<yordle::data::prop::float32_prop>(2908943986u);
    if (ptr_mLevel1Value != nullptr) {
        mLevel1Value = ptr_mLevel1Value->value;
    }

    auto ptr_x2deb550 = prop->cast_prop<yordle::data::prop::float32_prop>(48149840u);
    if (ptr_x2deb550 != nullptr) {
        x2deb550 = ptr_x2deb550->value;
    }

    auto ptr_mBreakpoints = prop->cast_prop<yordle::data::prop::set_prop>(2069698868u);
    if (ptr_mBreakpoints != nullptr) {
        for (const auto &entry : ptr_mBreakpoints->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mBreakpoints.emplace(yordle::data::meta::deserialize<yordle::data::meta::Breakpoint>(ptr_entry, 2392053998u));
            }
        }
    }
}

yordle::data::meta::Breakpoint::Breakpoint(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mLevel = prop->cast_prop<yordle::data::prop::uint32_prop>(2809549998u);
    if (ptr_mLevel != nullptr) {
        mLevel = ptr_mLevel->value;
    }

    auto ptr_xd5fd07ed = prop->cast_prop<yordle::data::prop::float32_prop>(3590129645u);
    if (ptr_xd5fd07ed != nullptr) {
        xd5fd07ed = ptr_xd5fd07ed->value;
    }

    auto ptr_x57fdc438 = prop->cast_prop<yordle::data::prop::float32_prop>(1476248632u);
    if (ptr_x57fdc438 != nullptr) {
        x57fdc438 = ptr_x57fdc438->value;
    }
}

yordle::data::meta::ByCharLevelFormulaCalculationPart::ByCharLevelFormulaCalculationPart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPartByCharLevel(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mValues = prop->cast_prop<yordle::data::prop::set_prop>(610995598u);
    if (ptr_mValues != nullptr) {
        for (const auto &entry : ptr_mValues->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mValues.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::x663d5e00::x663d5e00(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculationPart(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Coefficient = prop->cast_prop<yordle::data::prop::float32_prop>(3401692882u);
    if (ptr_Coefficient != nullptr) {
        Coefficient = ptr_Coefficient->value;
    }

    auto ptr_epicness = prop->cast_prop<yordle::data::prop::uint8_prop>(1591985235u);
    if (ptr_epicness != nullptr) {
        epicness = ptr_epicness->value;
    }
}

yordle::data::meta::IGameCalculation::IGameCalculation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMultiplier = prop->cast_prop<yordle::data::prop::structure_prop>(746040831u);
    if (ptr_mMultiplier != nullptr) {
        mMultiplier = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculationPart>(ptr_mMultiplier, 3053458126u);
    }

    auto ptr_xcbcac618 = prop->cast_prop<yordle::data::prop::uint8_prop>(3419063832u);
    if (ptr_xcbcac618 != nullptr) {
        xcbcac618 = ptr_xcbcac618->value;
    }

    auto ptr_x37070a8d = prop->cast_prop<yordle::data::prop::uint8_prop>(923208333u);
    if (ptr_x37070a8d != nullptr) {
        x37070a8d = ptr_x37070a8d->value;
    }

    auto ptr_xe6eebb2f = prop->cast_prop<yordle::data::prop::uint8_prop>(3874405167u);
    if (ptr_xe6eebb2f != nullptr) {
        xe6eebb2f = ptr_xe6eebb2f->value;
    }

    auto ptr_tooltipOnly = prop->cast_prop<yordle::data::prop::bool_prop>(3602359842u);
    if (ptr_tooltipOnly != nullptr) {
        tooltipOnly = ptr_tooltipOnly->value;
    }
}

yordle::data::meta::GameCalculation::GameCalculation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculation(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFormulaParts = prop->cast_prop<yordle::data::prop::set_prop>(1357989312u);
    if (ptr_mFormulaParts != nullptr) {
        for (const auto &entry : ptr_mFormulaParts->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mFormulaParts.emplace(yordle::data::meta::deserialize<yordle::data::meta::IGameCalculationPart>(ptr_entry, 3053458126u));
            }
        }
    }

    auto ptr_mDisplayAsPercent = prop->cast_prop<yordle::data::prop::bool_prop>(1512216531u);
    if (ptr_mDisplayAsPercent != nullptr) {
        mDisplayAsPercent = ptr_mDisplayAsPercent->value;
    }

    auto ptr_mPrecision = prop->cast_prop<yordle::data::prop::int32_prop>(148143844u);
    if (ptr_mPrecision != nullptr) {
        mPrecision = ptr_mPrecision->value;
    }
}

yordle::data::meta::GameCalculationModified::GameCalculationModified(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculation(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mOverrideSpellLevel = prop->cast_prop<yordle::data::prop::optional_prop>(3931102800u);
    if (ptr_mOverrideSpellLevel != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(ptr_mOverrideSpellLevel->value);
        if(ptr_entry != nullptr) {
            mOverrideSpellLevel = ptr_entry->value;
        }
    }

    auto ptr_mModifiedGameCalculation = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2140393294u);
    if (ptr_mModifiedGameCalculation != nullptr) {
        mModifiedGameCalculation = ptr_mModifiedGameCalculation->value;
    }
}

yordle::data::meta::GameCalculationConditional::GameCalculationConditional(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IGameCalculation(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDefaultGameCalculation = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(18101940u);
    if (ptr_mDefaultGameCalculation != nullptr) {
        mDefaultGameCalculation = ptr_mDefaultGameCalculation->value;
    }

    auto ptr_mConditionalGameCalculation = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(7331431u);
    if (ptr_mConditionalGameCalculation != nullptr) {
        mConditionalGameCalculation = ptr_mConditionalGameCalculation->value;
    }

    auto ptr_xc0482365 = prop->cast_prop<yordle::data::prop::structure_prop>(3225953125u);
    if (ptr_xc0482365 != nullptr) {
        xc0482365 = yordle::data::meta::deserialize<yordle::data::meta::ICastRequirement>(ptr_xc0482365, 1550969638u);
    }
}

yordle::data::meta::GameplayConfig::GameplayConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpellPostponeTimeoutSec = prop->cast_prop<yordle::data::prop::float32_prop>(2074318308u);
    if (ptr_mSpellPostponeTimeoutSec != nullptr) {
        mSpellPostponeTimeoutSec = ptr_mSpellPostponeTimeoutSec->value;
    }

    auto ptr_mAutoAttackMinPreCastLockoutDeltaTimeSec = prop->cast_prop<yordle::data::prop::float32_prop>(2561598034u);
    if (ptr_mAutoAttackMinPreCastLockoutDeltaTimeSec != nullptr) {
        mAutoAttackMinPreCastLockoutDeltaTimeSec = ptr_mAutoAttackMinPreCastLockoutDeltaTimeSec->value;
    }

    auto ptr_mAutoAttackMinPostCastLockoutDeltaTimeSec = prop->cast_prop<yordle::data::prop::float32_prop>(3263509469u);
    if (ptr_mAutoAttackMinPostCastLockoutDeltaTimeSec != nullptr) {
        mAutoAttackMinPostCastLockoutDeltaTimeSec = ptr_mAutoAttackMinPostCastLockoutDeltaTimeSec->value;
    }

    auto ptr_mLethalityPercentGivenAtLevel0 = prop->cast_prop<yordle::data::prop::float32_prop>(1189221507u);
    if (ptr_mLethalityPercentGivenAtLevel0 != nullptr) {
        mLethalityPercentGivenAtLevel0 = ptr_mLethalityPercentGivenAtLevel0->value;
    }

    auto ptr_mLethalityScalesToLevel = prop->cast_prop<yordle::data::prop::int32_prop>(2426136726u);
    if (ptr_mLethalityScalesToLevel != nullptr) {
        mLethalityScalesToLevel = ptr_mLethalityScalesToLevel->value;
    }

    auto ptr_mLethalityScalesCapsAtLevel = prop->cast_prop<yordle::data::prop::int32_prop>(1294549913u);
    if (ptr_mLethalityScalesCapsAtLevel != nullptr) {
        mLethalityScalesCapsAtLevel = ptr_mLethalityScalesCapsAtLevel->value;
    }

    auto ptr_mLethalityRatioFromTarget = prop->cast_prop<yordle::data::prop::float32_prop>(3860608716u);
    if (ptr_mLethalityRatioFromTarget != nullptr) {
        mLethalityRatioFromTarget = ptr_mLethalityRatioFromTarget->value;
    }

    auto ptr_mLethalityRatioFromAttacker = prop->cast_prop<yordle::data::prop::float32_prop>(1073304890u);
    if (ptr_mLethalityRatioFromAttacker != nullptr) {
        mLethalityRatioFromAttacker = ptr_mLethalityRatioFromAttacker->value;
    }

    auto ptr_AbilityHasteMax = prop->cast_prop<yordle::data::prop::float32_prop>(3096181938u);
    if (ptr_AbilityHasteMax != nullptr) {
        AbilityHasteMax = ptr_AbilityHasteMax->value;
    }

    auto ptr_mCritTotalArmorPenPercent = prop->cast_prop<yordle::data::prop::float32_prop>(1657146057u);
    if (ptr_mCritTotalArmorPenPercent != nullptr) {
        mCritTotalArmorPenPercent = ptr_mCritTotalArmorPenPercent->value;
    }

    auto ptr_mCritBonusArmorPenPercent = prop->cast_prop<yordle::data::prop::float32_prop>(351901930u);
    if (ptr_mCritBonusArmorPenPercent != nullptr) {
        mCritBonusArmorPenPercent = ptr_mCritBonusArmorPenPercent->value;
    }

    auto ptr_mCritGlobalDamageMultiplier = prop->cast_prop<yordle::data::prop::float32_prop>(127833845u);
    if (ptr_mCritGlobalDamageMultiplier != nullptr) {
        mCritGlobalDamageMultiplier = ptr_mCritGlobalDamageMultiplier->value;
    }

    auto ptr_mAdaptiveForceAbilityPowerScale = prop->cast_prop<yordle::data::prop::float32_prop>(2905483848u);
    if (ptr_mAdaptiveForceAbilityPowerScale != nullptr) {
        mAdaptiveForceAbilityPowerScale = ptr_mAdaptiveForceAbilityPowerScale->value;
    }

    auto ptr_mAdaptiveForceAttackDamageScale = prop->cast_prop<yordle::data::prop::float32_prop>(2705888682u);
    if (ptr_mAdaptiveForceAttackDamageScale != nullptr) {
        mAdaptiveForceAttackDamageScale = ptr_mAdaptiveForceAttackDamageScale->value;
    }

    auto ptr_mMinionDeathDelay = prop->cast_prop<yordle::data::prop::float32_prop>(2114953727u);
    if (ptr_mMinionDeathDelay != nullptr) {
        mMinionDeathDelay = ptr_mMinionDeathDelay->value;
    }

    auto ptr_mMinionAutoLeeway = prop->cast_prop<yordle::data::prop::float32_prop>(1376872132u);
    if (ptr_mMinionAutoLeeway != nullptr) {
        mMinionAutoLeeway = ptr_mMinionAutoLeeway->value;
    }

    auto ptr_mMinionAAHelperLimit = prop->cast_prop<yordle::data::prop::float32_prop>(2590579819u);
    if (ptr_mMinionAAHelperLimit != nullptr) {
        mMinionAAHelperLimit = ptr_mMinionAAHelperLimit->value;
    }

    auto ptr_mItemSellQueueTime = prop->cast_prop<yordle::data::prop::float32_prop>(2629334123u);
    if (ptr_mItemSellQueueTime != nullptr) {
        mItemSellQueueTime = ptr_mItemSellQueueTime->value;
    }

    auto ptr_mCCScoreMultipliers = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1888351048u);
    if (ptr_mCCScoreMultipliers != nullptr) {
        mCCScoreMultipliers = yordle::data::meta::deserialize<yordle::data::meta::CCScoreMultipliers>(ptr_mCCScoreMultipliers, 2006398389u);
    }

    auto ptr_mPerSlotCDRIsAdditive = prop->cast_prop<yordle::data::prop::bool_prop>(3747866318u);
    if (ptr_mPerSlotCDRIsAdditive != nullptr) {
        mPerSlotCDRIsAdditive = ptr_mPerSlotCDRIsAdditive->value;
    }

    auto ptr_mSummonerSpells = prop->cast_prop<yordle::data::prop::set_prop>(2886103531u);
    if (ptr_mSummonerSpells != nullptr) {
        for (const auto &entry : ptr_mSummonerSpells->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mSummonerSpells.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mLegacySummonerSpells = prop->cast_prop<yordle::data::prop::set_prop>(627629096u);
    if (ptr_mLegacySummonerSpells != nullptr) {
        for (const auto &entry : ptr_mLegacySummonerSpells->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mLegacySummonerSpells.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mBasicAttackCalculation = prop->cast_prop<yordle::data::prop::structure_prop>(518544983u);
    if (ptr_mBasicAttackCalculation != nullptr) {
        mBasicAttackCalculation = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculation>(ptr_mBasicAttackCalculation, 389493299u);
    }

    auto ptr_ItemsRolesPerRow = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1627693693u);
    if (ptr_ItemsRolesPerRow != nullptr) {
        ItemsRolesPerRow = ptr_ItemsRolesPerRow->value;
    }

    auto ptr_xa64802f2 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2789737202u);
    if (ptr_xa64802f2 != nullptr) {
        xa64802f2 = ptr_xa64802f2->value;
    }
}

yordle::data::meta::EnchantmentGroup::EnchantmentGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEnchantments = prop->cast_prop<yordle::data::prop::set_prop>(501613686u);
    if (ptr_mEnchantments != nullptr) {
        for (const auto &entry : ptr_mEnchantments->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(entry);
            if (ptr_entry != nullptr) {
                mEnchantments.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mBaseItems = prop->cast_prop<yordle::data::prop::set_prop>(739126263u);
    if (ptr_mBaseItems != nullptr) {
        for (const auto &entry : ptr_mBaseItems->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(entry);
            if (ptr_entry != nullptr) {
                mBaseItems.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mCanSidegrade = prop->cast_prop<yordle::data::prop::bool_prop>(3747941032u);
    if (ptr_mCanSidegrade != nullptr) {
        mCanSidegrade = ptr_mCanSidegrade->value;
    }

    auto ptr_mItemIdRangeMinimum = prop->cast_prop<yordle::data::prop::int32_prop>(4036251945u);
    if (ptr_mItemIdRangeMinimum != nullptr) {
        mItemIdRangeMinimum = ptr_mItemIdRangeMinimum->value;
    }

    auto ptr_mItemIdRangeMaximum = prop->cast_prop<yordle::data::prop::int32_prop>(3559280335u);
    if (ptr_mItemIdRangeMaximum != nullptr) {
        mItemIdRangeMaximum = ptr_mItemIdRangeMaximum->value;
    }
}

yordle::data::meta::ItemData::ItemData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_spellName = prop->cast_prop<yordle::data::prop::string_prop>(2184067234u);
    if (ptr_spellName != nullptr) {
        spellName = ptr_spellName->value;
    }

    auto ptr_mDisplayName = prop->cast_prop<yordle::data::prop::string_prop>(1960067173u);
    if (ptr_mDisplayName != nullptr) {
        mDisplayName = ptr_mDisplayName->value;
    }

    auto ptr_mRequiredChampion = prop->cast_prop<yordle::data::prop::string_prop>(243406986u);
    if (ptr_mRequiredChampion != nullptr) {
        mRequiredChampion = ptr_mRequiredChampion->value;
    }

    auto ptr_mRequiredAlly = prop->cast_prop<yordle::data::prop::string_prop>(1076119683u);
    if (ptr_mRequiredAlly != nullptr) {
        mRequiredAlly = ptr_mRequiredAlly->value;
    }

    auto ptr_mRequiredLevel = prop->cast_prop<yordle::data::prop::int32_prop>(3143486745u);
    if (ptr_mRequiredLevel != nullptr) {
        mRequiredLevel = ptr_mRequiredLevel->value;
    }

    auto ptr_mRequiredSpellName = prop->cast_prop<yordle::data::prop::string_prop>(3301591302u);
    if (ptr_mRequiredSpellName != nullptr) {
        mRequiredSpellName = ptr_mRequiredSpellName->value;
    }

    auto ptr_mRequiredPurchaseIdentities = prop->cast_prop<yordle::data::prop::set_prop>(2199566952u);
    if (ptr_mRequiredPurchaseIdentities != nullptr) {
        for (const auto &entry : ptr_mRequiredPurchaseIdentities->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mRequiredPurchaseIdentities.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mDisabledDescriptionOverride = prop->cast_prop<yordle::data::prop::string_prop>(2515646082u);
    if (ptr_mDisabledDescriptionOverride != nullptr) {
        mDisabledDescriptionOverride = ptr_mDisabledDescriptionOverride->value;
    }

    auto ptr_mParentEnchantmentGroup = prop->cast_prop<yordle::data::prop::string_prop>(3911778248u);
    if (ptr_mParentEnchantmentGroup != nullptr) {
        mParentEnchantmentGroup = ptr_mParentEnchantmentGroup->value;
    }

    auto ptr_mDeathRecapName = prop->cast_prop<yordle::data::prop::string_prop>(395849542u);
    if (ptr_mDeathRecapName != nullptr) {
        mDeathRecapName = ptr_mDeathRecapName->value;
    }

    auto ptr_itemID = prop->cast_prop<yordle::data::prop::int32_prop>(331209851u);
    if (ptr_itemID != nullptr) {
        itemID = ptr_itemID->value;
    }

    auto ptr_maxStack = prop->cast_prop<yordle::data::prop::int32_prop>(2362301363u);
    if (ptr_maxStack != nullptr) {
        maxStack = ptr_maxStack->value;
    }

    auto ptr_mItemGroups = prop->cast_prop<yordle::data::prop::set_prop>(1926246343u);
    if (ptr_mItemGroups != nullptr) {
        for (const auto &entry : ptr_mItemGroups->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mItemGroups.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mItemAdviceAttributes = prop->cast_prop<yordle::data::prop::set_prop>(1527415230u);
    if (ptr_mItemAdviceAttributes != nullptr) {
        for (const auto &entry : ptr_mItemAdviceAttributes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mItemAdviceAttributes.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_itemVOGroup = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(553900340u);
    if (ptr_itemVOGroup != nullptr) {
        itemVOGroup = ptr_itemVOGroup->value;
    }

    auto ptr_price = prop->cast_prop<yordle::data::prop::int32_prop>(189023530u);
    if (ptr_price != nullptr) {
        price = ptr_price->value;
    }

    auto ptr_mRequiredBuffCurrencyName = prop->cast_prop<yordle::data::prop::string_prop>(2389750688u);
    if (ptr_mRequiredBuffCurrencyName != nullptr) {
        mRequiredBuffCurrencyName = ptr_mRequiredBuffCurrencyName->value;
    }

    auto ptr_mRequiredBuffCurrencyCost = prop->cast_prop<yordle::data::prop::int32_prop>(1153225762u);
    if (ptr_mRequiredBuffCurrencyCost != nullptr) {
        mRequiredBuffCurrencyCost = ptr_mRequiredBuffCurrencyCost->value;
    }

    auto ptr_mSidegradeCredit = prop->cast_prop<yordle::data::prop::float32_prop>(340108739u);
    if (ptr_mSidegradeCredit != nullptr) {
        mSidegradeCredit = ptr_mSidegradeCredit->value;
    }

    auto ptr_consumed = prop->cast_prop<yordle::data::prop::bool_prop>(1312195519u);
    if (ptr_consumed != nullptr) {
        consumed = ptr_consumed->value;
    }

    auto ptr_usableInStore = prop->cast_prop<yordle::data::prop::bool_prop>(2403638411u);
    if (ptr_usableInStore != nullptr) {
        usableInStore = ptr_usableInStore->value;
    }

    auto ptr_consumeOnAcquire = prop->cast_prop<yordle::data::prop::bool_prop>(2162312232u);
    if (ptr_consumeOnAcquire != nullptr) {
        consumeOnAcquire = ptr_consumeOnAcquire->value;
    }

    auto ptr_clickable = prop->cast_prop<yordle::data::prop::bool_prop>(4029153691u);
    if (ptr_clickable != nullptr) {
        clickable = ptr_clickable->value;
    }

    auto ptr_mMajorActiveItem = prop->cast_prop<yordle::data::prop::bool_prop>(2106565168u);
    if (ptr_mMajorActiveItem != nullptr) {
        mMajorActiveItem = ptr_mMajorActiveItem->value;
    }

    auto ptr_mItemCalloutPlayer = prop->cast_prop<yordle::data::prop::bool_prop>(3776240468u);
    if (ptr_mItemCalloutPlayer != nullptr) {
        mItemCalloutPlayer = ptr_mItemCalloutPlayer->value;
    }

    auto ptr_mItemCalloutSpectator = prop->cast_prop<yordle::data::prop::bool_prop>(1371846774u);
    if (ptr_mItemCalloutSpectator != nullptr) {
        mItemCalloutSpectator = ptr_mItemCalloutSpectator->value;
    }

    auto ptr_clearUndoHistory = prop->cast_prop<yordle::data::prop::uint8_prop>(3517176776u);
    if (ptr_clearUndoHistory != nullptr) {
        clearUndoHistory = ptr_clearUndoHistory->value;
    }

    auto ptr_mCanBeSold = prop->cast_prop<yordle::data::prop::bool_prop>(3520834977u);
    if (ptr_mCanBeSold != nullptr) {
        mCanBeSold = ptr_mCanBeSold->value;
    }

    auto ptr_mHiddenFromOpponents = prop->cast_prop<yordle::data::prop::bool_prop>(1851807742u);
    if (ptr_mHiddenFromOpponents != nullptr) {
        mHiddenFromOpponents = ptr_mHiddenFromOpponents->value;
    }

    auto ptr_mIsEnchantment = prop->cast_prop<yordle::data::prop::bool_prop>(2758140601u);
    if (ptr_mIsEnchantment != nullptr) {
        mIsEnchantment = ptr_mIsEnchantment->value;
    }

    auto ptr_specialRecipe = prop->cast_prop<yordle::data::prop::int32_prop>(119453886u);
    if (ptr_specialRecipe != nullptr) {
        specialRecipe = ptr_specialRecipe->value;
    }

    auto ptr_epicness = prop->cast_prop<yordle::data::prop::uint8_prop>(1591985235u);
    if (ptr_epicness != nullptr) {
        epicness = ptr_epicness->value;
    }

    auto ptr_SecondaryEpicness = prop->cast_prop<yordle::data::prop::uint8_prop>(2413426407u);
    if (ptr_SecondaryEpicness != nullptr) {
        SecondaryEpicness = ptr_SecondaryEpicness->value;
    }

    auto ptr_recipeItemLinks = prop->cast_prop<yordle::data::prop::set_prop>(741707921u);
    if (ptr_recipeItemLinks != nullptr) {
        for (const auto &entry : ptr_recipeItemLinks->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                recipeItemLinks.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_requiredItemLinks = prop->cast_prop<yordle::data::prop::set_prop>(4205694064u);
    if (ptr_requiredItemLinks != nullptr) {
        for (const auto &entry : ptr_requiredItemLinks->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                requiredItemLinks.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_sidegradeItemLinks = prop->cast_prop<yordle::data::prop::set_prop>(1731786979u);
    if (ptr_sidegradeItemLinks != nullptr) {
        for (const auto &entry : ptr_sidegradeItemLinks->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                sidegradeItemLinks.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mItemModifiers = prop->cast_prop<yordle::data::prop::set_prop>(3055062855u);
    if (ptr_mItemModifiers != nullptr) {
        for (const auto &entry : ptr_mItemModifiers->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mItemModifiers.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mScripts = prop->cast_prop<yordle::data::prop::set_prop>(2657988264u);
    if (ptr_mScripts != nullptr) {
        for (const auto &entry : ptr_mScripts->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mScripts.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_parentItemLink = prop->cast_prop<yordle::data::prop::reference_prop>(240928630u);
    if (ptr_parentItemLink != nullptr) {
        parentItemLink = ptr_parentItemLink->value;
    }

    auto ptr_parentEnchantmentLink = prop->cast_prop<yordle::data::prop::reference_prop>(3884213970u);
    if (ptr_parentEnchantmentLink != nullptr) {
        parentEnchantmentLink = ptr_parentEnchantmentLink->value;
    }

    auto ptr_mEffectAmount = prop->cast_prop<yordle::data::prop::set_prop>(622481957u);
    if (ptr_mEffectAmount != nullptr) {
        for (const auto &entry : ptr_mEffectAmount->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mEffectAmount.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mDataValues = prop->cast_prop<yordle::data::prop::set_prop>(525148326u);
    if (ptr_mDataValues != nullptr) {
        for (const auto &entry : ptr_mDataValues->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mDataValues.emplace(yordle::data::meta::deserialize<yordle::data::meta::ItemDataValue>(ptr_entry, 2999331975u));
            }
        }
    }

    auto ptr_xfb56608c = prop->cast_prop<yordle::data::prop::map_prop>(4216742028u);
    if (ptr_xfb56608c != nullptr) {
        for (const auto &pair : ptr_xfb56608c->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                xfb56608c[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::x61f8c41c>(ptr_value, 1643693084u);
            }
        }
    }

    auto ptr_mItemCalculations = prop->cast_prop<yordle::data::prop::map_prop>(180678869u);
    if (ptr_mItemCalculations != nullptr) {
        for (const auto &pair : ptr_mItemCalculations->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mItemCalculations[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculation>(ptr_value, 389493299u);
            }
        }
    }

    auto ptr_mEnchantmentEffectAmount = prop->cast_prop<yordle::data::prop::set_prop>(4158404644u);
    if (ptr_mEnchantmentEffectAmount != nullptr) {
        for (const auto &entry : ptr_mEnchantmentEffectAmount->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mEnchantmentEffectAmount.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mEffectByLevelAmount = prop->cast_prop<yordle::data::prop::set_prop>(4226416210u);
    if (ptr_mEffectByLevelAmount != nullptr) {
        for (const auto &entry : ptr_mEffectByLevelAmount->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mEffectByLevelAmount.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mFlatCooldownMod = prop->cast_prop<yordle::data::prop::float32_prop>(383889158u);
    if (ptr_mFlatCooldownMod != nullptr) {
        mFlatCooldownMod = ptr_mFlatCooldownMod->value;
    }

    auto ptr_mPercentCooldownMod = prop->cast_prop<yordle::data::prop::float32_prop>(2668631768u);
    if (ptr_mPercentCooldownMod != nullptr) {
        mPercentCooldownMod = ptr_mPercentCooldownMod->value;
    }

    auto ptr_mAbilityHasteMod = prop->cast_prop<yordle::data::prop::float32_prop>(1536713119u);
    if (ptr_mAbilityHasteMod != nullptr) {
        mAbilityHasteMod = ptr_mAbilityHasteMod->value;
    }

    auto ptr_mFlatHPPoolMod = prop->cast_prop<yordle::data::prop::float32_prop>(114923451u);
    if (ptr_mFlatHPPoolMod != nullptr) {
        mFlatHPPoolMod = ptr_mFlatHPPoolMod->value;
    }

    auto ptr_mPercentHPPoolMod = prop->cast_prop<yordle::data::prop::float32_prop>(2503021533u);
    if (ptr_mPercentHPPoolMod != nullptr) {
        mPercentHPPoolMod = ptr_mPercentHPPoolMod->value;
    }

    auto ptr_mFlatHPRegenMod = prop->cast_prop<yordle::data::prop::float32_prop>(21500352u);
    if (ptr_mFlatHPRegenMod != nullptr) {
        mFlatHPRegenMod = ptr_mFlatHPRegenMod->value;
    }

    auto ptr_mPercentHPRegenMod = prop->cast_prop<yordle::data::prop::float32_prop>(1056021178u);
    if (ptr_mPercentHPRegenMod != nullptr) {
        mPercentHPRegenMod = ptr_mPercentHPRegenMod->value;
    }

    auto ptr_mPercentBaseHPRegenMod = prop->cast_prop<yordle::data::prop::float32_prop>(3251443531u);
    if (ptr_mPercentBaseHPRegenMod != nullptr) {
        mPercentBaseHPRegenMod = ptr_mPercentBaseHPRegenMod->value;
    }

    auto ptr_mPercentTenacityItemMod = prop->cast_prop<yordle::data::prop::float32_prop>(3484183065u);
    if (ptr_mPercentTenacityItemMod != nullptr) {
        mPercentTenacityItemMod = ptr_mPercentTenacityItemMod->value;
    }

    auto ptr_mPercentSlowResistMod = prop->cast_prop<yordle::data::prop::float32_prop>(438843610u);
    if (ptr_mPercentSlowResistMod != nullptr) {
        mPercentSlowResistMod = ptr_mPercentSlowResistMod->value;
    }

    auto ptr_mFlatMovementSpeedMod = prop->cast_prop<yordle::data::prop::float32_prop>(465474815u);
    if (ptr_mFlatMovementSpeedMod != nullptr) {
        mFlatMovementSpeedMod = ptr_mFlatMovementSpeedMod->value;
    }

    auto ptr_mPercentMovementSpeedMod = prop->cast_prop<yordle::data::prop::float32_prop>(3074015573u);
    if (ptr_mPercentMovementSpeedMod != nullptr) {
        mPercentMovementSpeedMod = ptr_mPercentMovementSpeedMod->value;
    }

    auto ptr_mPercentMultiplicativeMovementSpeedMod = prop->cast_prop<yordle::data::prop::float32_prop>(2860471743u);
    if (ptr_mPercentMultiplicativeMovementSpeedMod != nullptr) {
        mPercentMultiplicativeMovementSpeedMod = ptr_mPercentMultiplicativeMovementSpeedMod->value;
    }

    auto ptr_mFlatArmorMod = prop->cast_prop<yordle::data::prop::float32_prop>(3046428930u);
    if (ptr_mFlatArmorMod != nullptr) {
        mFlatArmorMod = ptr_mFlatArmorMod->value;
    }

    auto ptr_mPercentArmorMod = prop->cast_prop<yordle::data::prop::float32_prop>(2481690788u);
    if (ptr_mPercentArmorMod != nullptr) {
        mPercentArmorMod = ptr_mPercentArmorMod->value;
    }

    auto ptr_mFlatArmorPenetrationMod = prop->cast_prop<yordle::data::prop::float32_prop>(1437359509u);
    if (ptr_mFlatArmorPenetrationMod != nullptr) {
        mFlatArmorPenetrationMod = ptr_mFlatArmorPenetrationMod->value;
    }

    auto ptr_mPercentArmorPenetrationMod = prop->cast_prop<yordle::data::prop::float32_prop>(1175202283u);
    if (ptr_mPercentArmorPenetrationMod != nullptr) {
        mPercentArmorPenetrationMod = ptr_mPercentArmorPenetrationMod->value;
    }

    auto ptr_mPercentBonusArmorPenetrationMod = prop->cast_prop<yordle::data::prop::float32_prop>(1696157308u);
    if (ptr_mPercentBonusArmorPenetrationMod != nullptr) {
        mPercentBonusArmorPenetrationMod = ptr_mPercentBonusArmorPenetrationMod->value;
    }

    auto ptr_mFlatMagicPenetrationMod = prop->cast_prop<yordle::data::prop::float32_prop>(3960767193u);
    if (ptr_mFlatMagicPenetrationMod != nullptr) {
        mFlatMagicPenetrationMod = ptr_mFlatMagicPenetrationMod->value;
    }

    auto ptr_mPercentMagicPenetrationMod = prop->cast_prop<yordle::data::prop::float32_prop>(1490206803u);
    if (ptr_mPercentMagicPenetrationMod != nullptr) {
        mPercentMagicPenetrationMod = ptr_mPercentMagicPenetrationMod->value;
    }

    auto ptr_mPercentBonusMagicPenetrationMod = prop->cast_prop<yordle::data::prop::float32_prop>(1771515992u);
    if (ptr_mPercentBonusMagicPenetrationMod != nullptr) {
        mPercentBonusMagicPenetrationMod = ptr_mPercentBonusMagicPenetrationMod->value;
    }

    auto ptr_mFlatSpellBlockMod = prop->cast_prop<yordle::data::prop::float32_prop>(3120132768u);
    if (ptr_mFlatSpellBlockMod != nullptr) {
        mFlatSpellBlockMod = ptr_mFlatSpellBlockMod->value;
    }

    auto ptr_mPercentSpellBlockMod = prop->cast_prop<yordle::data::prop::float32_prop>(2246896526u);
    if (ptr_mPercentSpellBlockMod != nullptr) {
        mPercentSpellBlockMod = ptr_mPercentSpellBlockMod->value;
    }

    auto ptr_mFlatDodgeMod = prop->cast_prop<yordle::data::prop::float32_prop>(3110649810u);
    if (ptr_mFlatDodgeMod != nullptr) {
        mFlatDodgeMod = ptr_mFlatDodgeMod->value;
    }

    auto ptr_mFlatCritChanceMod = prop->cast_prop<yordle::data::prop::float32_prop>(3154445093u);
    if (ptr_mFlatCritChanceMod != nullptr) {
        mFlatCritChanceMod = ptr_mFlatCritChanceMod->value;
    }

    auto ptr_mFlatMissChanceMod = prop->cast_prop<yordle::data::prop::float32_prop>(3340385681u);
    if (ptr_mFlatMissChanceMod != nullptr) {
        mFlatMissChanceMod = ptr_mFlatMissChanceMod->value;
    }

    auto ptr_mFlatCritDamageMod = prop->cast_prop<yordle::data::prop::float32_prop>(3520107050u);
    if (ptr_mFlatCritDamageMod != nullptr) {
        mFlatCritDamageMod = ptr_mFlatCritDamageMod->value;
    }

    auto ptr_mPercentCritDamageMod = prop->cast_prop<yordle::data::prop::float32_prop>(823330312u);
    if (ptr_mPercentCritDamageMod != nullptr) {
        mPercentCritDamageMod = ptr_mPercentCritDamageMod->value;
    }

    auto ptr_mFlatPhysicalDamageMod = prop->cast_prop<yordle::data::prop::float32_prop>(1316651469u);
    if (ptr_mFlatPhysicalDamageMod != nullptr) {
        mFlatPhysicalDamageMod = ptr_mFlatPhysicalDamageMod->value;
    }

    auto ptr_mPercentPhysicalDamageMod = prop->cast_prop<yordle::data::prop::float32_prop>(3556259147u);
    if (ptr_mPercentPhysicalDamageMod != nullptr) {
        mPercentPhysicalDamageMod = ptr_mPercentPhysicalDamageMod->value;
    }

    auto ptr_mFlatMagicDamageMod = prop->cast_prop<yordle::data::prop::float32_prop>(680171085u);
    if (ptr_mFlatMagicDamageMod != nullptr) {
        mFlatMagicDamageMod = ptr_mFlatMagicDamageMod->value;
    }

    auto ptr_mPercentMagicDamageMod = prop->cast_prop<yordle::data::prop::float32_prop>(107141991u);
    if (ptr_mPercentMagicDamageMod != nullptr) {
        mPercentMagicDamageMod = ptr_mPercentMagicDamageMod->value;
    }

    auto ptr_mFlatPhysicalReduction = prop->cast_prop<yordle::data::prop::float32_prop>(2093165359u);
    if (ptr_mFlatPhysicalReduction != nullptr) {
        mFlatPhysicalReduction = ptr_mFlatPhysicalReduction->value;
    }

    auto ptr_mPercentPhysicalReduction = prop->cast_prop<yordle::data::prop::float32_prop>(1666883285u);
    if (ptr_mPercentPhysicalReduction != nullptr) {
        mPercentPhysicalReduction = ptr_mPercentPhysicalReduction->value;
    }

    auto ptr_mFlatMagicReduction = prop->cast_prop<yordle::data::prop::float32_prop>(1456684975u);
    if (ptr_mFlatMagicReduction != nullptr) {
        mFlatMagicReduction = ptr_mFlatMagicReduction->value;
    }

    auto ptr_mPercentMagicReduction = prop->cast_prop<yordle::data::prop::float32_prop>(2902530009u);
    if (ptr_mPercentMagicReduction != nullptr) {
        mPercentMagicReduction = ptr_mPercentMagicReduction->value;
    }

    auto ptr_mPercentEXPBonus = prop->cast_prop<yordle::data::prop::float32_prop>(2480014019u);
    if (ptr_mPercentEXPBonus != nullptr) {
        mPercentEXPBonus = ptr_mPercentEXPBonus->value;
    }

    auto ptr_mFlatAttackRangeMod = prop->cast_prop<yordle::data::prop::float32_prop>(2223490792u);
    if (ptr_mFlatAttackRangeMod != nullptr) {
        mFlatAttackRangeMod = ptr_mFlatAttackRangeMod->value;
    }

    auto ptr_mPercentAttackRangeMod = prop->cast_prop<yordle::data::prop::float32_prop>(3418195010u);
    if (ptr_mPercentAttackRangeMod != nullptr) {
        mPercentAttackRangeMod = ptr_mPercentAttackRangeMod->value;
    }

    auto ptr_mFlatCastRangeMod = prop->cast_prop<yordle::data::prop::float32_prop>(1205165755u);
    if (ptr_mFlatCastRangeMod != nullptr) {
        mFlatCastRangeMod = ptr_mFlatCastRangeMod->value;
    }

    auto ptr_mPercentCastRangeMod = prop->cast_prop<yordle::data::prop::float32_prop>(3849080725u);
    if (ptr_mPercentCastRangeMod != nullptr) {
        mPercentCastRangeMod = ptr_mPercentCastRangeMod->value;
    }

    auto ptr_mPercentAttackSpeedMod = prop->cast_prop<yordle::data::prop::float32_prop>(3311766576u);
    if (ptr_mPercentAttackSpeedMod != nullptr) {
        mPercentAttackSpeedMod = ptr_mPercentAttackSpeedMod->value;
    }

    auto ptr_mPercentMultiplicativeAttackSpeedMod = prop->cast_prop<yordle::data::prop::float32_prop>(3413524030u);
    if (ptr_mPercentMultiplicativeAttackSpeedMod != nullptr) {
        mPercentMultiplicativeAttackSpeedMod = ptr_mPercentMultiplicativeAttackSpeedMod->value;
    }

    auto ptr_mPercentHealingAmountMod = prop->cast_prop<yordle::data::prop::float32_prop>(205329187u);
    if (ptr_mPercentHealingAmountMod != nullptr) {
        mPercentHealingAmountMod = ptr_mPercentHealingAmountMod->value;
    }

    auto ptr_mPercentLifeStealMod = prop->cast_prop<yordle::data::prop::float32_prop>(53828642u);
    if (ptr_mPercentLifeStealMod != nullptr) {
        mPercentLifeStealMod = ptr_mPercentLifeStealMod->value;
    }

    auto ptr_mPercentSpellVampMod = prop->cast_prop<yordle::data::prop::float32_prop>(1734111875u);
    if (ptr_mPercentSpellVampMod != nullptr) {
        mPercentSpellVampMod = ptr_mPercentSpellVampMod->value;
    }

    auto ptr_PercentPhysicalVampMod = prop->cast_prop<yordle::data::prop::float32_prop>(471318737u);
    if (ptr_PercentPhysicalVampMod != nullptr) {
        PercentPhysicalVampMod = ptr_PercentPhysicalVampMod->value;
    }

    auto ptr_PercentOmnivampMod = prop->cast_prop<yordle::data::prop::float32_prop>(3078168669u);
    if (ptr_PercentOmnivampMod != nullptr) {
        PercentOmnivampMod = ptr_PercentOmnivampMod->value;
    }

    auto ptr_mPercentSpellEffectivenessMod = prop->cast_prop<yordle::data::prop::float32_prop>(4131342143u);
    if (ptr_mPercentSpellEffectivenessMod != nullptr) {
        mPercentSpellEffectivenessMod = ptr_mPercentSpellEffectivenessMod->value;
    }

    auto ptr_mFlatBubbleRadiusMod = prop->cast_prop<yordle::data::prop::float32_prop>(1894351929u);
    if (ptr_mFlatBubbleRadiusMod != nullptr) {
        mFlatBubbleRadiusMod = ptr_mFlatBubbleRadiusMod->value;
    }

    auto ptr_mPercentBubbleRadiusMod = prop->cast_prop<yordle::data::prop::float32_prop>(2982985559u);
    if (ptr_mPercentBubbleRadiusMod != nullptr) {
        mPercentBubbleRadiusMod = ptr_mPercentBubbleRadiusMod->value;
    }

    auto ptr_sellBackModifier = prop->cast_prop<yordle::data::prop::float32_prop>(1179205471u);
    if (ptr_sellBackModifier != nullptr) {
        sellBackModifier = ptr_sellBackModifier->value;
    }

    auto ptr_mCooldownShowDisabledDuration = prop->cast_prop<yordle::data::prop::float32_prop>(3414564600u);
    if (ptr_mCooldownShowDisabledDuration != nullptr) {
        mCooldownShowDisabledDuration = ptr_mCooldownShowDisabledDuration->value;
    }

    auto ptr_flatMPPoolMod = prop->cast_prop<yordle::data::prop::float32_prop>(2682018419u);
    if (ptr_flatMPPoolMod != nullptr) {
        flatMPPoolMod = ptr_flatMPPoolMod->value;
    }

    auto ptr_PercentMPPoolMod = prop->cast_prop<yordle::data::prop::float32_prop>(1465104691u);
    if (ptr_PercentMPPoolMod != nullptr) {
        PercentMPPoolMod = ptr_PercentMPPoolMod->value;
    }

    auto ptr_flatMPRegenMod = prop->cast_prop<yordle::data::prop::float32_prop>(3589720264u);
    if (ptr_flatMPRegenMod != nullptr) {
        flatMPRegenMod = ptr_flatMPRegenMod->value;
    }

    auto ptr_PercentMPRegenMod = prop->cast_prop<yordle::data::prop::float32_prop>(952926856u);
    if (ptr_PercentMPRegenMod != nullptr) {
        PercentMPRegenMod = ptr_PercentMPRegenMod->value;
    }

    auto ptr_percentBaseMPRegenMod = prop->cast_prop<yordle::data::prop::float32_prop>(2809881569u);
    if (ptr_percentBaseMPRegenMod != nullptr) {
        percentBaseMPRegenMod = ptr_percentBaseMPRegenMod->value;
    }

    auto ptr_mItemDataBuild = prop->cast_prop<yordle::data::prop::inline_structure_prop>(149088197u);
    if (ptr_mItemDataBuild != nullptr) {
        mItemDataBuild = yordle::data::meta::deserialize<yordle::data::meta::ItemDataBuild>(ptr_mItemDataBuild, 3845505502u);
    }

    auto ptr_mCategories = prop->cast_prop<yordle::data::prop::set_prop>(3438910276u);
    if (ptr_mCategories != nullptr) {
        for (const auto &entry : ptr_mCategories->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mCategories.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mItemDataAvailability = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1472645072u);
    if (ptr_mItemDataAvailability != nullptr) {
        mItemDataAvailability = yordle::data::meta::deserialize<yordle::data::meta::ItemDataAvailability>(ptr_mItemDataAvailability, 3225152729u);
    }

    auto ptr_mBuildDepth = prop->cast_prop<yordle::data::prop::int32_prop>(1632533069u);
    if (ptr_mBuildDepth != nullptr) {
        mBuildDepth = ptr_mBuildDepth->value;
    }

    auto ptr_mItemAttributes = prop->cast_prop<yordle::data::prop::set_prop>(1465224138u);
    if (ptr_mItemAttributes != nullptr) {
        for (const auto &entry : ptr_mItemAttributes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(entry);
            if (ptr_entry != nullptr) {
                mItemAttributes.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x224a3815 = prop->cast_prop<yordle::data::prop::int32_prop>(575289365u);
    if (ptr_x224a3815 != nullptr) {
        x224a3815 = ptr_x224a3815->value;
    }

    auto ptr_xc01bb6dd = prop->cast_prop<yordle::data::prop::uint8_prop>(3223041757u);
    if (ptr_xc01bb6dd != nullptr) {
        xc01bb6dd = ptr_xc01bb6dd->value;
    }

    auto ptr_x51265c89 = prop->cast_prop<yordle::data::prop::uint8_prop>(1361468553u);
    if (ptr_x51265c89 != nullptr) {
        x51265c89 = ptr_x51265c89->value;
    }

    auto ptr_mItemDataClient = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3643312288u);
    if (ptr_mItemDataClient != nullptr) {
        mItemDataClient = yordle::data::meta::deserialize<yordle::data::meta::ItemDataClient>(ptr_mItemDataClient, 2233135733u);
    }

    auto ptr_mVFXResourceResolver = prop->cast_prop<yordle::data::prop::structure_prop>(1602389154u);
    if (ptr_mVFXResourceResolver != nullptr) {
        mVFXResourceResolver = yordle::data::meta::deserialize<yordle::data::meta::ResourceResolver>(ptr_mVFXResourceResolver, 4013559603u);
    }
}

yordle::data::meta::ItemDataValue::ItemDataValue(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::float32_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = ptr_mValue->value;
    }
}

yordle::data::meta::x61f8c41c::x61f8c41c(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x6afef1b = prop->cast_prop<yordle::data::prop::set_prop>(112193307u);
    if (ptr_x6afef1b != nullptr) {
        for (const auto &entry : ptr_x6afef1b->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                x6afef1b.emplace(yordle::data::meta::deserialize<yordle::data::meta::ItemDataValue>(ptr_entry, 2999331975u));
            }
        }
    }
}

yordle::data::meta::ItemDataAvailability::ItemDataAvailability(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mInStore = prop->cast_prop<yordle::data::prop::bool_prop>(1568493488u);
    if (ptr_mInStore != nullptr) {
        mInStore = ptr_mInStore->value;
    }

    auto ptr_mForceLoad = prop->cast_prop<yordle::data::prop::bool_prop>(781700779u);
    if (ptr_mForceLoad != nullptr) {
        mForceLoad = ptr_mForceLoad->value;
    }

    auto ptr_mHidefromAll = prop->cast_prop<yordle::data::prop::bool_prop>(1831013931u);
    if (ptr_mHidefromAll != nullptr) {
        mHidefromAll = ptr_mHidefromAll->value;
    }
}

yordle::data::meta::ItemDataBuild::ItemDataBuild(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_itemLinks = prop->cast_prop<yordle::data::prop::set_prop>(1448841303u);
    if (ptr_itemLinks != nullptr) {
        for (const auto &entry : ptr_itemLinks->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                itemLinks.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ItemGroup::ItemGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItemGroupID = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1552211283u);
    if (ptr_mItemGroupID != nullptr) {
        mItemGroupID = ptr_mItemGroupID->value;
    }

    auto ptr_mMaxGroupOwnable = prop->cast_prop<yordle::data::prop::int32_prop>(3018798879u);
    if (ptr_mMaxGroupOwnable != nullptr) {
        mMaxGroupOwnable = ptr_mMaxGroupOwnable->value;
    }

    auto ptr_mInventorySlotMin = prop->cast_prop<yordle::data::prop::int32_prop>(3382331180u);
    if (ptr_mInventorySlotMin != nullptr) {
        mInventorySlotMin = ptr_mInventorySlotMin->value;
    }

    auto ptr_mInventorySlotMax = prop->cast_prop<yordle::data::prop::int32_prop>(3615937918u);
    if (ptr_mInventorySlotMax != nullptr) {
        mInventorySlotMax = ptr_mInventorySlotMax->value;
    }

    auto ptr_mPurchaseCooldown = prop->cast_prop<yordle::data::prop::float32_prop>(534597238u);
    if (ptr_mPurchaseCooldown != nullptr) {
        mPurchaseCooldown = ptr_mPurchaseCooldown->value;
    }

    auto ptr_mCooldownExtendedByAmbientGoldStart = prop->cast_prop<yordle::data::prop::bool_prop>(1887144575u);
    if (ptr_mCooldownExtendedByAmbientGoldStart != nullptr) {
        mCooldownExtendedByAmbientGoldStart = ptr_mCooldownExtendedByAmbientGoldStart->value;
    }

    auto ptr_mItemModifiers = prop->cast_prop<yordle::data::prop::set_prop>(3055062855u);
    if (ptr_mItemModifiers != nullptr) {
        for (const auto &entry : ptr_mItemModifiers->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mItemModifiers.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ItemModifier::ItemModifier(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItemModifierID = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3346215891u);
    if (ptr_mItemModifierID != nullptr) {
        mItemModifierID = ptr_mItemModifierID->value;
    }

    auto ptr_mModifiedItem = prop->cast_prop<yordle::data::prop::reference_prop>(2130202224u);
    if (ptr_mModifiedItem != nullptr) {
        mModifiedItem = ptr_mModifiedItem->value;
    }

    auto ptr_mModifiedGroup = prop->cast_prop<yordle::data::prop::reference_prop>(1794967550u);
    if (ptr_mModifiedGroup != nullptr) {
        mModifiedGroup = ptr_mModifiedGroup->value;
    }

    auto ptr_mModifiedIfBuildsFromItem = prop->cast_prop<yordle::data::prop::reference_prop>(1758653510u);
    if (ptr_mModifiedIfBuildsFromItem != nullptr) {
        mModifiedIfBuildsFromItem = ptr_mModifiedIfBuildsFromItem->value;
    }

    auto ptr_mMinimumModifierInstancesToBeActive = prop->cast_prop<yordle::data::prop::int32_prop>(2823290189u);
    if (ptr_mMinimumModifierInstancesToBeActive != nullptr) {
        mMinimumModifierInstancesToBeActive = ptr_mMinimumModifierInstancesToBeActive->value;
    }

    auto ptr_mMaximumModifierInstancesToBeActive = prop->cast_prop<yordle::data::prop::int32_prop>(3978647115u);
    if (ptr_mMaximumModifierInstancesToBeActive != nullptr) {
        mMaximumModifierInstancesToBeActive = ptr_mMaximumModifierInstancesToBeActive->value;
    }

    auto ptr_mMaximumDeltasToStack = prop->cast_prop<yordle::data::prop::int32_prop>(1350505296u);
    if (ptr_mMaximumDeltasToStack != nullptr) {
        mMaximumDeltasToStack = ptr_mMaximumDeltasToStack->value;
    }

    auto ptr_mShowAsModifiedInUI = prop->cast_prop<yordle::data::prop::bool_prop>(3587154471u);
    if (ptr_mShowAsModifiedInUI != nullptr) {
        mShowAsModifiedInUI = ptr_mShowAsModifiedInUI->value;
    }

    auto ptr_mModifierIsInheritedByOwnedParentItems = prop->cast_prop<yordle::data::prop::bool_prop>(2328870783u);
    if (ptr_mModifierIsInheritedByOwnedParentItems != nullptr) {
        mModifierIsInheritedByOwnedParentItems = ptr_mModifierIsInheritedByOwnedParentItems->value;
    }

    auto ptr_mAddedBuildFrom = prop->cast_prop<yordle::data::prop::set_prop>(2002854710u);
    if (ptr_mAddedBuildFrom != nullptr) {
        for (const auto &entry : ptr_mAddedBuildFrom->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mAddedBuildFrom.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mRemovedBuildFrom = prop->cast_prop<yordle::data::prop::set_prop>(2111503732u);
    if (ptr_mRemovedBuildFrom != nullptr) {
        for (const auto &entry : ptr_mRemovedBuildFrom->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mRemovedBuildFrom.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mReplaceInsteadOfAddingBuildFrom = prop->cast_prop<yordle::data::prop::bool_prop>(2302486958u);
    if (ptr_mReplaceInsteadOfAddingBuildFrom != nullptr) {
        mReplaceInsteadOfAddingBuildFrom = ptr_mReplaceInsteadOfAddingBuildFrom->value;
    }

    auto ptr_mIgnoreMaxGroupOwnable = prop->cast_prop<yordle::data::prop::bool_prop>(2004092977u);
    if (ptr_mIgnoreMaxGroupOwnable != nullptr) {
        mIgnoreMaxGroupOwnable = ptr_mIgnoreMaxGroupOwnable->value;
    }

    auto ptr_mIgnoreSpecificMaxGroupOwnable = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4223969433u);
    if (ptr_mIgnoreSpecificMaxGroupOwnable != nullptr) {
        mIgnoreSpecificMaxGroupOwnable = ptr_mIgnoreSpecificMaxGroupOwnable->value;
    }

    auto ptr_mDeltaGoldCost = prop->cast_prop<yordle::data::prop::float32_prop>(2812356609u);
    if (ptr_mDeltaGoldCost != nullptr) {
        mDeltaGoldCost = ptr_mDeltaGoldCost->value;
    }

    auto ptr_mDeltaGoldCostPercent = prop->cast_prop<yordle::data::prop::float32_prop>(3044130670u);
    if (ptr_mDeltaGoldCostPercent != nullptr) {
        mDeltaGoldCostPercent = ptr_mDeltaGoldCostPercent->value;
    }

    auto ptr_mDeltaBuffCurrencyCostPercent = prop->cast_prop<yordle::data::prop::float32_prop>(1222809074u);
    if (ptr_mDeltaBuffCurrencyCostPercent != nullptr) {
        mDeltaBuffCurrencyCostPercent = ptr_mDeltaBuffCurrencyCostPercent->value;
    }

    auto ptr_mDeltaRequiredLevel = prop->cast_prop<yordle::data::prop::int32_prop>(104834311u);
    if (ptr_mDeltaRequiredLevel != nullptr) {
        mDeltaRequiredLevel = ptr_mDeltaRequiredLevel->value;
    }

    auto ptr_mDeltaBuffCurrencyCost = prop->cast_prop<yordle::data::prop::int32_prop>(4033835197u);
    if (ptr_mDeltaBuffCurrencyCost != nullptr) {
        mDeltaBuffCurrencyCost = ptr_mDeltaBuffCurrencyCost->value;
    }

    auto ptr_mDeltaMaxStacks = prop->cast_prop<yordle::data::prop::int32_prop>(3060307697u);
    if (ptr_mDeltaMaxStacks != nullptr) {
        mDeltaMaxStacks = ptr_mDeltaMaxStacks->value;
    }

    auto ptr_mVisualPriority = prop->cast_prop<yordle::data::prop::int32_prop>(1247751868u);
    if (ptr_mVisualPriority != nullptr) {
        mVisualPriority = ptr_mVisualPriority->value;
    }

    auto ptr_inventoryIconToOverlay = prop->cast_prop<yordle::data::prop::string_prop>(1341320049u);
    if (ptr_inventoryIconToOverlay != nullptr) {
        inventoryIconToOverlay = ptr_inventoryIconToOverlay->value;
    }

    auto ptr_mDescriptionToAppend = prop->cast_prop<yordle::data::prop::string_prop>(169380431u);
    if (ptr_mDescriptionToAppend != nullptr) {
        mDescriptionToAppend = ptr_mDescriptionToAppend->value;
    }

    auto ptr_mDescriptionToPrepend = prop->cast_prop<yordle::data::prop::string_prop>(511652085u);
    if (ptr_mDescriptionToPrepend != nullptr) {
        mDescriptionToPrepend = ptr_mDescriptionToPrepend->value;
    }

    auto ptr_mDescriptionToReplace = prop->cast_prop<yordle::data::prop::string_prop>(133677057u);
    if (ptr_mDescriptionToReplace != nullptr) {
        mDescriptionToReplace = ptr_mDescriptionToReplace->value;
    }

    auto ptr_mDynamicTooltipToAppend = prop->cast_prop<yordle::data::prop::string_prop>(1966883929u);
    if (ptr_mDynamicTooltipToAppend != nullptr) {
        mDynamicTooltipToAppend = ptr_mDynamicTooltipToAppend->value;
    }

    auto ptr_mDynamicTooltipToPrepend = prop->cast_prop<yordle::data::prop::string_prop>(1582912023u);
    if (ptr_mDynamicTooltipToPrepend != nullptr) {
        mDynamicTooltipToPrepend = ptr_mDynamicTooltipToPrepend->value;
    }

    auto ptr_mDynamicTooltipToReplace = prop->cast_prop<yordle::data::prop::string_prop>(1565504299u);
    if (ptr_mDynamicTooltipToReplace != nullptr) {
        mDynamicTooltipToReplace = ptr_mDynamicTooltipToReplace->value;
    }

    auto ptr_mDisplayNameToAppend = prop->cast_prop<yordle::data::prop::string_prop>(3215248900u);
    if (ptr_mDisplayNameToAppend != nullptr) {
        mDisplayNameToAppend = ptr_mDisplayNameToAppend->value;
    }

    auto ptr_mDisplayNameToPrepend = prop->cast_prop<yordle::data::prop::string_prop>(2252043716u);
    if (ptr_mDisplayNameToPrepend != nullptr) {
        mDisplayNameToPrepend = ptr_mDisplayNameToPrepend->value;
    }

    auto ptr_mDisplayNameToReplace = prop->cast_prop<yordle::data::prop::string_prop>(2084979804u);
    if (ptr_mDisplayNameToReplace != nullptr) {
        mDisplayNameToReplace = ptr_mDisplayNameToReplace->value;
    }

    auto ptr_mClickableToEnable = prop->cast_prop<yordle::data::prop::bool_prop>(3791869018u);
    if (ptr_mClickableToEnable != nullptr) {
        mClickableToEnable = ptr_mClickableToEnable->value;
    }

    auto ptr_mMajorActiveItemToEnable = prop->cast_prop<yordle::data::prop::bool_prop>(3067060546u);
    if (ptr_mMajorActiveItemToEnable != nullptr) {
        mMajorActiveItemToEnable = ptr_mMajorActiveItemToEnable->value;
    }

    auto ptr_mSpellNameToReplace = prop->cast_prop<yordle::data::prop::string_prop>(2004343680u);
    if (ptr_mSpellNameToReplace != nullptr) {
        mSpellNameToReplace = ptr_mSpellNameToReplace->value;
    }
}

yordle::data::meta::ItemDataClient::ItemDataClient(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTooltipData = prop->cast_prop<yordle::data::prop::structure_prop>(674324571u);
    if (ptr_mTooltipData != nullptr) {
        mTooltipData = yordle::data::meta::deserialize<yordle::data::meta::TooltipInstanceItem>(ptr_mTooltipData, 905298284u);
    }

    auto ptr_mDescription = prop->cast_prop<yordle::data::prop::string_prop>(4059172210u);
    if (ptr_mDescription != nullptr) {
        mDescription = ptr_mDescription->value;
    }

    auto ptr_mDynamicTooltip = prop->cast_prop<yordle::data::prop::string_prop>(2589604484u);
    if (ptr_mDynamicTooltip != nullptr) {
        mDynamicTooltip = ptr_mDynamicTooltip->value;
    }

    auto ptr_mShopTooltip = prop->cast_prop<yordle::data::prop::string_prop>(1444652607u);
    if (ptr_mShopTooltip != nullptr) {
        mShopTooltip = ptr_mShopTooltip->value;
    }

    auto ptr_ShopExtendedTooltip = prop->cast_prop<yordle::data::prop::string_prop>(3389472215u);
    if (ptr_ShopExtendedTooltip != nullptr) {
        ShopExtendedTooltip = ptr_ShopExtendedTooltip->value;
    }

    auto ptr_inventoryIcon = prop->cast_prop<yordle::data::prop::string_prop>(3331175726u);
    if (ptr_inventoryIcon != nullptr) {
        inventoryIcon = ptr_inventoryIcon->value;
    }

    auto ptr_InventoryIconSmall = prop->cast_prop<yordle::data::prop::string_prop>(3915617293u);
    if (ptr_InventoryIconSmall != nullptr) {
        InventoryIconSmall = ptr_InventoryIconSmall->value;
    }

    auto ptr_InventoryIconLarge = prop->cast_prop<yordle::data::prop::string_prop>(37634217u);
    if (ptr_InventoryIconLarge != nullptr) {
        InventoryIconLarge = ptr_InventoryIconLarge->value;
    }

    auto ptr_InventoryIconMaterial = prop->cast_prop<yordle::data::prop::reference_prop>(3824668275u);
    if (ptr_InventoryIconMaterial != nullptr) {
        InventoryIconMaterial = ptr_InventoryIconMaterial->value;
    }

    auto ptr_epicness = prop->cast_prop<yordle::data::prop::uint8_prop>(1591985235u);
    if (ptr_epicness != nullptr) {
        epicness = ptr_epicness->value;
    }

    auto ptr_effectRadius = prop->cast_prop<yordle::data::prop::float32_prop>(2441583306u);
    if (ptr_effectRadius != nullptr) {
        effectRadius = ptr_effectRadius->value;
    }

    auto ptr_mFloatVarsDecimals = prop->cast_prop<yordle::data::prop::set_prop>(439122960u);
    if (ptr_mFloatVarsDecimals != nullptr) {
        for (const auto &entry : ptr_mFloatVarsDecimals->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(entry);
            if (ptr_entry != nullptr) {
                mFloatVarsDecimals.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ChampionItemRecommendations::ChampionItemRecommendations(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xcc35ff18 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3426090776u);
    if (ptr_xcc35ff18 != nullptr) {
        xcc35ff18 = ptr_xcc35ff18->value;
    }

    auto ptr_mContextListLink = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2477901527u);
    if (ptr_mContextListLink != nullptr) {
        mContextListLink = ptr_mContextListLink->value;
    }

    auto ptr_xad6d25a8 = prop->cast_prop<yordle::data::prop::set_prop>(2909611432u);
    if (ptr_xad6d25a8 != nullptr) {
        for (const auto &entry : ptr_xad6d25a8->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                xad6d25a8.emplace(yordle::data::meta::deserialize<yordle::data::meta::ItemCareyOverrideStartingItemSet>(ptr_entry, 2822771443u));
            }
        }
    }

    auto ptr_x2d7fd821 = prop->cast_prop<yordle::data::prop::set_prop>(763353121u);
    if (ptr_x2d7fd821 != nullptr) {
        for (const auto &entry : ptr_x2d7fd821->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                x2d7fd821.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ItemRecommendationItemList::ItemRecommendationItemList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItemList = prop->cast_prop<yordle::data::prop::set_prop>(2861724943u);
    if (ptr_mItemList != nullptr) {
        for (const auto &entry : ptr_mItemList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(entry);
            if (ptr_entry != nullptr) {
                mItemList.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ItemRecommendationContextList::ItemRecommendationContextList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAllStartingItemIds = prop->cast_prop<yordle::data::prop::map_prop>(4112741066u);
    if (ptr_mAllStartingItemIds != nullptr) {
        for (const auto &pair : ptr_mAllStartingItemIds->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mAllStartingItemIds[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::ItemRecommendationItemList>(ptr_value, 1183984318u);
            }
        }
    }

    auto ptr_xa109530e = prop->cast_prop<yordle::data::prop::map_prop>(2701742862u);
    if (ptr_xa109530e != nullptr) {
        for (const auto &pair : ptr_xa109530e->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                xa109530e[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::ItemRecommendationItemList>(ptr_value, 1183984318u);
            }
        }
    }

    auto ptr_mContexts = prop->cast_prop<yordle::data::prop::set_prop>(4147583912u);
    if (ptr_mContexts != nullptr) {
        for (const auto &entry : ptr_mContexts->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mContexts.emplace(yordle::data::meta::deserialize<yordle::data::meta::ItemRecommendationContext>(ptr_entry, 4266457040u));
            }
        }
    }
}

yordle::data::meta::ItemRecommendationContext::ItemRecommendationContext(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mChampionId = prop->cast_prop<yordle::data::prop::uint32_prop>(3155596802u);
    if (ptr_mChampionId != nullptr) {
        mChampionId = ptr_mChampionId->value;
    }

    auto ptr_mMapID = prop->cast_prop<yordle::data::prop::uint32_prop>(3035918579u);
    if (ptr_mMapID != nullptr) {
        mMapID = ptr_mMapID->value;
    }

    auto ptr_x37b75f5c = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(934764380u);
    if (ptr_x37b75f5c != nullptr) {
        x37b75f5c = ptr_x37b75f5c->value;
    }

    auto ptr_mPosition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1077461003u);
    if (ptr_mPosition != nullptr) {
        mPosition = ptr_mPosition->value;
    }

    auto ptr_mIsDefaultPosition = prop->cast_prop<yordle::data::prop::bool_prop>(3434017602u);
    if (ptr_mIsDefaultPosition != nullptr) {
        mIsDefaultPosition = ptr_mIsDefaultPosition->value;
    }

    auto ptr_mStartingItemMatrix = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2698561854u);
    if (ptr_mStartingItemMatrix != nullptr) {
        mStartingItemMatrix = yordle::data::meta::deserialize<yordle::data::meta::ItemRecommendationMatrix>(ptr_mStartingItemMatrix, 779837744u);
    }

    auto ptr_mStartingItemBundles = prop->cast_prop<yordle::data::prop::set_prop>(3481751656u);
    if (ptr_mStartingItemBundles != nullptr) {
        for (const auto &entry : ptr_mStartingItemBundles->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mStartingItemBundles.emplace(yordle::data::meta::deserialize<yordle::data::meta::ItemRecommendationItemList>(ptr_entry, 1183984318u));
            }
        }
    }

    auto ptr_mPopularItems = prop->cast_prop<yordle::data::prop::set_prop>(144730223u);
    if (ptr_mPopularItems != nullptr) {
        for (const auto &entry : ptr_mPopularItems->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mPopularItems.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mCompletedItemMatrix = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3298200407u);
    if (ptr_mCompletedItemMatrix != nullptr) {
        mCompletedItemMatrix = yordle::data::meta::deserialize<yordle::data::meta::ItemRecommendationMatrix>(ptr_mCompletedItemMatrix, 779837744u);
    }
}

yordle::data::meta::ItemRecommendationChoices::ItemRecommendationChoices(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mChoices = prop->cast_prop<yordle::data::prop::set_prop>(766608976u);
    if (ptr_mChoices != nullptr) {
        for (const auto &entry : ptr_mChoices->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(entry);
            if (ptr_entry != nullptr) {
                mChoices.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ItemRecommendationMatrixRow::ItemRecommendationMatrixRow(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mChoicesMap = prop->cast_prop<yordle::data::prop::map_prop>(1335420358u);
    if (ptr_mChoicesMap != nullptr) {
        for (const auto &pair : ptr_mChoicesMap->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mChoicesMap[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::ItemRecommendationChoices>(ptr_value, 1589364011u);
            }
        }
    }
}

yordle::data::meta::ItemRecommendationMatrix::ItemRecommendationMatrix(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mrows = prop->cast_prop<yordle::data::prop::set_prop>(1666346813u);
    if (ptr_mrows != nullptr) {
        for (const auto &entry : ptr_mrows->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mrows.emplace(yordle::data::meta::deserialize<yordle::data::meta::ItemRecommendationMatrixRow>(ptr_entry, 2727115092u));
            }
        }
    }
}

yordle::data::meta::x5a3bc52d::x5a3bc52d(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_items = prop->cast_prop<yordle::data::prop::set_prop>(981021583u);
    if (ptr_items != nullptr) {
        for (const auto &entry : ptr_items->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                items.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x50ef1a22 = prop->cast_prop<yordle::data::prop::uint32_prop>(1357847074u);
    if (ptr_x50ef1a22 != nullptr) {
        x50ef1a22 = ptr_x50ef1a22->value;
    }
}

yordle::data::meta::ItemRecommendationCondition::ItemRecommendationCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItem = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1281445127u);
    if (ptr_mItem != nullptr) {
        mItem = ptr_mItem->value;
    }

    auto ptr_mDisplayLimit = prop->cast_prop<yordle::data::prop::uint32_prop>(1383594277u);
    if (ptr_mDisplayLimit != nullptr) {
        mDisplayLimit = ptr_mDisplayLimit->value;
    }

    auto ptr_mGroupId = prop->cast_prop<yordle::data::prop::uint8_prop>(878428694u);
    if (ptr_mGroupId != nullptr) {
        mGroupId = ptr_mGroupId->value;
    }
}

yordle::data::meta::ItemRecommendationOverrideContext::ItemRecommendationOverrideContext(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMapID = prop->cast_prop<yordle::data::prop::uint32_prop>(3035918579u);
    if (ptr_mMapID != nullptr) {
        mMapID = ptr_mMapID->value;
    }

    auto ptr_x37b75f5c = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(934764380u);
    if (ptr_x37b75f5c != nullptr) {
        x37b75f5c = ptr_x37b75f5c->value;
    }

    auto ptr_mPosition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1077461003u);
    if (ptr_mPosition != nullptr) {
        mPosition = ptr_mPosition->value;
    }
}

yordle::data::meta::ItemRecommendationOverrideStartingItemSet::ItemRecommendationOverrideStartingItemSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStartingItems = prop->cast_prop<yordle::data::prop::set_prop>(43002728u);
    if (ptr_mStartingItems != nullptr) {
        for (const auto &entry : ptr_mStartingItems->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mStartingItems.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ItemRecommendationOverride::ItemRecommendationOverride(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mForceOverride = prop->cast_prop<yordle::data::prop::bool_prop>(2231942803u);
    if (ptr_mForceOverride != nullptr) {
        mForceOverride = ptr_mForceOverride->value;
    }

    auto ptr_mOverrideContexts = prop->cast_prop<yordle::data::prop::set_prop>(2318063320u);
    if (ptr_mOverrideContexts != nullptr) {
        for (const auto &entry : ptr_mOverrideContexts->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mOverrideContexts.emplace(yordle::data::meta::deserialize<yordle::data::meta::ItemRecommendationOverrideContext>(ptr_entry, 3898055584u));
            }
        }
    }

    auto ptr_mStartingItemSets = prop->cast_prop<yordle::data::prop::set_prop>(971331326u);
    if (ptr_mStartingItemSets != nullptr) {
        for (const auto &entry : ptr_mStartingItemSets->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mStartingItemSets.emplace(yordle::data::meta::deserialize<yordle::data::meta::ItemRecommendationOverrideStartingItemSet>(ptr_entry, 2556481222u));
            }
        }
    }

    auto ptr_mRecItemRanges = prop->cast_prop<yordle::data::prop::set_prop>(2106947283u);
    if (ptr_mRecItemRanges != nullptr) {
        for (const auto &entry : ptr_mRecItemRanges->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mRecItemRanges.emplace(yordle::data::meta::deserialize<yordle::data::meta::x5a3bc52d>(ptr_entry, 1513866541u));
            }
        }
    }

    auto ptr_mCoreItems = prop->cast_prop<yordle::data::prop::set_prop>(1219672089u);
    if (ptr_mCoreItems != nullptr) {
        for (const auto &entry : ptr_mCoreItems->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mCoreItems.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mRecommendedItems = prop->cast_prop<yordle::data::prop::set_prop>(2190279189u);
    if (ptr_mRecommendedItems != nullptr) {
        for (const auto &entry : ptr_mRecommendedItems->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mRecommendedItems.emplace(yordle::data::meta::deserialize<yordle::data::meta::ItemRecommendationCondition>(ptr_entry, 396544810u));
            }
        }
    }
}

yordle::data::meta::ItemRecommendationOverrideSet::ItemRecommendationOverrideSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mOverrides = prop->cast_prop<yordle::data::prop::set_prop>(2168086401u);
    if (ptr_mOverrides != nullptr) {
        for (const auto &entry : ptr_mOverrides->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mOverrides.emplace(yordle::data::meta::deserialize<yordle::data::meta::ItemRecommendationOverride>(ptr_entry, 1661050393u));
            }
        }
    }
}

yordle::data::meta::ItemAdviceAttribute::ItemAdviceAttribute(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAttribute = prop->cast_prop<yordle::data::prop::string_prop>(2528880824u);
    if (ptr_mAttribute != nullptr) {
        mAttribute = ptr_mAttribute->value;
    }
}

yordle::data::meta::ItemCareyOverrideStartingItemSet::ItemCareyOverrideStartingItemSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAttribute = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2528880824u);
    if (ptr_mAttribute != nullptr) {
        mAttribute = ptr_mAttribute->value;
    }
}

yordle::data::meta::ItemCareyOverrideStartingItemSetSet::ItemCareyOverrideStartingItemSetSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x6ca781cd = prop->cast_prop<yordle::data::prop::set_prop>(1822917069u);
    if (ptr_x6ca781cd != nullptr) {
        for (const auto &entry : ptr_x6ca781cd->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                x6ca781cd.emplace(yordle::data::meta::deserialize<yordle::data::meta::ItemCareyOverrideStartingItemSet>(ptr_entry, 2822771443u));
            }
        }
    }
}

yordle::data::meta::ItemShopGameModeData::ItemShopGameModeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xc561f8e9 = prop->cast_prop<yordle::data::prop::set_prop>(3311532265u);
    if (ptr_xc561f8e9 != nullptr) {
        for (const auto &entry : ptr_xc561f8e9->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                xc561f8e9.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_xc3b3430a = prop->cast_prop<yordle::data::prop::uint32_prop>(3283305226u);
    if (ptr_xc3b3430a != nullptr) {
        xc3b3430a = ptr_xc3b3430a->value;
    }

    auto ptr_x51a18bc3 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1369541571u);
    if (ptr_x51a18bc3 != nullptr) {
        x51a18bc3 = ptr_x51a18bc3->value;
    }

    auto ptr_x897c69b7 = prop->cast_prop<yordle::data::prop::map_prop>(2306632119u);
    if (ptr_x897c69b7 != nullptr) {
        for (const auto &pair : ptr_x897c69b7->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                x897c69b7[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_RecItemsSwaps = prop->cast_prop<yordle::data::prop::map_prop>(3090661733u);
    if (ptr_RecItemsSwaps != nullptr) {
        for (const auto &pair : ptr_RecItemsSwaps->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                RecItemsSwaps[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::CollectiblesEsportsTeamData::CollectiblesEsportsTeamData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_teamId = prop->cast_prop<yordle::data::prop::uint32_prop>(1015280385u);
    if (ptr_teamId != nullptr) {
        teamId = ptr_teamId->value;
    }

    auto ptr_shortName = prop->cast_prop<yordle::data::prop::string_prop>(2106911478u);
    if (ptr_shortName != nullptr) {
        shortName = ptr_shortName->value;
    }

    auto ptr_fullName = prop->cast_prop<yordle::data::prop::string_prop>(141582903u);
    if (ptr_fullName != nullptr) {
        fullName = ptr_fullName->value;
    }

    auto ptr_leagueName = prop->cast_prop<yordle::data::prop::string_prop>(390952403u);
    if (ptr_leagueName != nullptr) {
        leagueName = ptr_leagueName->value;
    }
}

yordle::data::meta::SummonerIconData::SummonerIconData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_iconId = prop->cast_prop<yordle::data::prop::uint32_prop>(3217398189u);
    if (ptr_iconId != nullptr) {
        iconId = ptr_iconId->value;
    }

    auto ptr_esportsTeam = prop->cast_prop<yordle::data::prop::reference_prop>(3114625026u);
    if (ptr_esportsTeam != nullptr) {
        esportsTeam = ptr_esportsTeam->value;
    }

    auto ptr_gameTexture = prop->cast_prop<yordle::data::prop::string_prop>(487149542u);
    if (ptr_gameTexture != nullptr) {
        gameTexture = ptr_gameTexture->value;
    }

    auto ptr_x50e5b6e1 = prop->cast_prop<yordle::data::prop::bool_prop>(1357231841u);
    if (ptr_x50e5b6e1 != nullptr) {
        x50e5b6e1 = ptr_x50e5b6e1->value;
    }

    auto ptr_eSportsEventMutator = prop->cast_prop<yordle::data::prop::string_prop>(1096330989u);
    if (ptr_eSportsEventMutator != nullptr) {
        eSportsEventMutator = ptr_eSportsEventMutator->value;
    }
}

yordle::data::meta::LiveFeatureToggles::LiveFeatureToggles(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mLoLToggles = prop->cast_prop<yordle::data::prop::inline_structure_prop>(538383488u);
    if (ptr_mLoLToggles != nullptr) {
        mLoLToggles = yordle::data::meta::deserialize<yordle::data::meta::LoLFeatureToggles>(ptr_mLoLToggles, 3353146463u);
    }

    auto ptr_mGameplayToggles = prop->cast_prop<yordle::data::prop::inline_structure_prop>(96400105u);
    if (ptr_mGameplayToggles != nullptr) {
        mGameplayToggles = yordle::data::meta::deserialize<yordle::data::meta::GameplayFeatureToggles>(ptr_mGameplayToggles, 3021260058u);
    }

    auto ptr_mEngineToggles = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2476043155u);
    if (ptr_mEngineToggles != nullptr) {
        mEngineToggles = yordle::data::meta::deserialize<yordle::data::meta::EngineFeatureToggles>(ptr_mEngineToggles, 2790085136u);
    }
}

yordle::data::meta::LoLFeatureToggles::LoLFeatureToggles(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_NewSpellScript = prop->cast_prop<yordle::data::prop::bool_prop>(3299903082u);
    if (ptr_NewSpellScript != nullptr) {
        NewSpellScript = ptr_NewSpellScript->value;
    }

    auto ptr_xf2505841 = prop->cast_prop<yordle::data::prop::bool_prop>(4065351745u);
    if (ptr_xf2505841 != nullptr) {
        xf2505841 = ptr_xf2505841->value;
    }

    auto ptr_x6dbee4b7 = prop->cast_prop<yordle::data::prop::bool_prop>(1841226935u);
    if (ptr_x6dbee4b7 != nullptr) {
        x6dbee4b7 = ptr_x6dbee4b7->value;
    }

    auto ptr_xa3820b10 = prop->cast_prop<yordle::data::prop::bool_prop>(2743208720u);
    if (ptr_xa3820b10 != nullptr) {
        xa3820b10 = ptr_xa3820b10->value;
    }

    auto ptr_ItemUndo = prop->cast_prop<yordle::data::prop::bool_prop>(4064556372u);
    if (ptr_ItemUndo != nullptr) {
        ItemUndo = ptr_ItemUndo->value;
    }

    auto ptr_xf1125a78 = prop->cast_prop<yordle::data::prop::bool_prop>(4044511864u);
    if (ptr_xf1125a78 != nullptr) {
        xf1125a78 = ptr_xf1125a78->value;
    }

    auto ptr_queuedOrdersTriggerPreIssueOrder = prop->cast_prop<yordle::data::prop::bool_prop>(887561257u);
    if (ptr_queuedOrdersTriggerPreIssueOrder != nullptr) {
        queuedOrdersTriggerPreIssueOrder = ptr_queuedOrdersTriggerPreIssueOrder->value;
    }

    auto ptr_EnableCustomPlayerScoreColoring = prop->cast_prop<yordle::data::prop::bool_prop>(1874040027u);
    if (ptr_EnableCustomPlayerScoreColoring != nullptr) {
        EnableCustomPlayerScoreColoring = ptr_EnableCustomPlayerScoreColoring->value;
    }

    auto ptr_closeOnEndGameAfterDelay = prop->cast_prop<yordle::data::prop::bool_prop>(1174510576u);
    if (ptr_closeOnEndGameAfterDelay != nullptr) {
        closeOnEndGameAfterDelay = ptr_closeOnEndGameAfterDelay->value;
    }

    auto ptr_PromoController = prop->cast_prop<yordle::data::prop::bool_prop>(362664360u);
    if (ptr_PromoController != nullptr) {
        PromoController = ptr_PromoController->value;
    }

    auto ptr_cooldownSpellQueueing = prop->cast_prop<yordle::data::prop::bool_prop>(3018310139u);
    if (ptr_cooldownSpellQueueing != nullptr) {
        cooldownSpellQueueing = ptr_cooldownSpellQueueing->value;
    }

    auto ptr_useNewAttackSpeed = prop->cast_prop<yordle::data::prop::bool_prop>(780933441u);
    if (ptr_useNewAttackSpeed != nullptr) {
        useNewAttackSpeed = ptr_useNewAttackSpeed->value;
    }

    auto ptr_UseNewFireBBEvents = prop->cast_prop<yordle::data::prop::bool_prop>(4199965231u);
    if (ptr_UseNewFireBBEvents != nullptr) {
        UseNewFireBBEvents = ptr_UseNewFireBBEvents->value;
    }

    auto ptr_abilityResetUI = prop->cast_prop<yordle::data::prop::bool_prop>(3703784614u);
    if (ptr_abilityResetUI != nullptr) {
        abilityResetUI = ptr_abilityResetUI->value;
    }

    auto ptr_xa6cc4da4 = prop->cast_prop<yordle::data::prop::bool_prop>(2798407076u);
    if (ptr_xa6cc4da4 != nullptr) {
        xa6cc4da4 = ptr_xa6cc4da4->value;
    }

    auto ptr_xa6000d17 = prop->cast_prop<yordle::data::prop::bool_prop>(2785021207u);
    if (ptr_xa6000d17 != nullptr) {
        xa6000d17 = ptr_xa6000d17->value;
    }

    auto ptr_xed504579 = prop->cast_prop<yordle::data::prop::bool_prop>(3981460857u);
    if (ptr_xed504579 != nullptr) {
        xed504579 = ptr_xed504579->value;
    }

    auto ptr_xd3323ebc = prop->cast_prop<yordle::data::prop::bool_prop>(3543285436u);
    if (ptr_xd3323ebc != nullptr) {
        xd3323ebc = ptr_xd3323ebc->value;
    }

    auto ptr_x8cd3b1f9 = prop->cast_prop<yordle::data::prop::bool_prop>(2362683897u);
    if (ptr_x8cd3b1f9 != nullptr) {
        x8cd3b1f9 = ptr_x8cd3b1f9->value;
    }

    auto ptr_x8bab003a = prop->cast_prop<yordle::data::prop::bool_prop>(2343239738u);
    if (ptr_x8bab003a != nullptr) {
        x8bab003a = ptr_x8bab003a->value;
    }

    auto ptr_x3e3c2065 = prop->cast_prop<yordle::data::prop::bool_prop>(1044127845u);
    if (ptr_x3e3c2065 != nullptr) {
        x3e3c2065 = ptr_x3e3c2065->value;
    }

    auto ptr_x6f0ba2b0 = prop->cast_prop<yordle::data::prop::bool_prop>(1863033520u);
    if (ptr_x6f0ba2b0 != nullptr) {
        x6f0ba2b0 = ptr_x6f0ba2b0->value;
    }

    auto ptr_x69b85d1 = prop->cast_prop<yordle::data::prop::bool_prop>(110855633u);
    if (ptr_x69b85d1 != nullptr) {
        x69b85d1 = ptr_x69b85d1->value;
    }

    auto ptr_x59e03167 = prop->cast_prop<yordle::data::prop::bool_prop>(1507864935u);
    if (ptr_x59e03167 != nullptr) {
        x59e03167 = ptr_x59e03167->value;
    }

    auto ptr_x6d9b5c59 = prop->cast_prop<yordle::data::prop::bool_prop>(1838898265u);
    if (ptr_x6d9b5c59 != nullptr) {
        x6d9b5c59 = ptr_x6d9b5c59->value;
    }

    auto ptr_xcc5e3f8d = prop->cast_prop<yordle::data::prop::bool_prop>(3428728717u);
    if (ptr_xcc5e3f8d != nullptr) {
        xcc5e3f8d = ptr_xcc5e3f8d->value;
    }

    auto ptr_x82799f80 = prop->cast_prop<yordle::data::prop::bool_prop>(2189008768u);
    if (ptr_x82799f80 != nullptr) {
        x82799f80 = ptr_x82799f80->value;
    }

    auto ptr_x92187457 = prop->cast_prop<yordle::data::prop::bool_prop>(2451076183u);
    if (ptr_x92187457 != nullptr) {
        x92187457 = ptr_x92187457->value;
    }

    auto ptr_x768400a9 = prop->cast_prop<yordle::data::prop::bool_prop>(1988362409u);
    if (ptr_x768400a9 != nullptr) {
        x768400a9 = ptr_x768400a9->value;
    }

    auto ptr_xa28bbddc = prop->cast_prop<yordle::data::prop::bool_prop>(2727067100u);
    if (ptr_xa28bbddc != nullptr) {
        xa28bbddc = ptr_xa28bbddc->value;
    }

    auto ptr_x76e809b = prop->cast_prop<yordle::data::prop::bool_prop>(124682395u);
    if (ptr_x76e809b != nullptr) {
        x76e809b = ptr_x76e809b->value;
    }

    auto ptr_x9b710bf6 = prop->cast_prop<yordle::data::prop::bool_prop>(2607877110u);
    if (ptr_x9b710bf6 != nullptr) {
        x9b710bf6 = ptr_x9b710bf6->value;
    }

    auto ptr_x68c9483d = prop->cast_prop<yordle::data::prop::bool_prop>(1758021693u);
    if (ptr_x68c9483d != nullptr) {
        x68c9483d = ptr_x68c9483d->value;
    }

    auto ptr_xc779da22 = prop->cast_prop<yordle::data::prop::bool_prop>(3346651682u);
    if (ptr_xc779da22 != nullptr) {
        xc779da22 = ptr_xc779da22->value;
    }

    auto ptr_x9cfc57ba = prop->cast_prop<yordle::data::prop::bool_prop>(2633783226u);
    if (ptr_x9cfc57ba != nullptr) {
        x9cfc57ba = ptr_x9cfc57ba->value;
    }

    auto ptr_xcd2f9591 = prop->cast_prop<yordle::data::prop::bool_prop>(3442447761u);
    if (ptr_xcd2f9591 != nullptr) {
        xcd2f9591 = ptr_xcd2f9591->value;
    }

    auto ptr_x85af0cb5 = prop->cast_prop<yordle::data::prop::bool_prop>(2242841781u);
    if (ptr_x85af0cb5 != nullptr) {
        x85af0cb5 = ptr_x85af0cb5->value;
    }

    auto ptr_x84fe7ccf = prop->cast_prop<yordle::data::prop::bool_prop>(2231270607u);
    if (ptr_x84fe7ccf != nullptr) {
        x84fe7ccf = ptr_x84fe7ccf->value;
    }

    auto ptr_x90e08cc7 = prop->cast_prop<yordle::data::prop::bool_prop>(2430635207u);
    if (ptr_x90e08cc7 != nullptr) {
        x90e08cc7 = ptr_x90e08cc7->value;
    }

    auto ptr_x2f0e955a = prop->cast_prop<yordle::data::prop::bool_prop>(789484890u);
    if (ptr_x2f0e955a != nullptr) {
        x2f0e955a = ptr_x2f0e955a->value;
    }

    auto ptr_xefe584bb = prop->cast_prop<yordle::data::prop::bool_prop>(4024796347u);
    if (ptr_xefe584bb != nullptr) {
        xefe584bb = ptr_xefe584bb->value;
    }

    auto ptr_xc25a56fb = prop->cast_prop<yordle::data::prop::bool_prop>(3260700411u);
    if (ptr_xc25a56fb != nullptr) {
        xc25a56fb = ptr_xc25a56fb->value;
    }
}

yordle::data::meta::GDSMapObjectExtraInfo::GDSMapObjectExtraInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::GDSMapObjectAnimationInfo::GDSMapObjectAnimationInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GDSMapObjectExtraInfo(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_defaultAnimation = prop->cast_prop<yordle::data::prop::string_prop>(3992028172u);
    if (ptr_defaultAnimation != nullptr) {
        defaultAnimation = ptr_defaultAnimation->value;
    }

    auto ptr_looping = prop->cast_prop<yordle::data::prop::bool_prop>(1972607277u);
    if (ptr_looping != nullptr) {
        looping = ptr_looping->value;
    }

    auto ptr_destroyOnCompletion = prop->cast_prop<yordle::data::prop::bool_prop>(31102750u);
    if (ptr_destroyOnCompletion != nullptr) {
        destroyOnCompletion = ptr_destroyOnCompletion->value;
    }

    auto ptr_duration = prop->cast_prop<yordle::data::prop::float32_prop>(799079693u);
    if (ptr_duration != nullptr) {
        duration = ptr_duration->value;
    }
}

yordle::data::meta::GDSMapObjectLightingInfo::GDSMapObjectLightingInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GDSMapObjectExtraInfo(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_colors = prop->cast_prop<yordle::data::prop::set_prop>(4176775601u);
    if (ptr_colors != nullptr) {
        for (const auto &entry : ptr_colors->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::quaternion_prop>(entry);
            if (ptr_entry != nullptr) {
                colors.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::GDSMapObjectBannerInfo::GDSMapObjectBannerInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GDSMapObjectExtraInfo(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_BannerData = prop->cast_prop<yordle::data::prop::reference_prop>(621604631u);
    if (ptr_BannerData != nullptr) {
        BannerData = ptr_BannerData->value;
    }
}

yordle::data::meta::LootOutputBase::LootOutputBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::LootItemDetails::LootItemDetails(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStoreId = prop->cast_prop<yordle::data::prop::uint32_prop>(1274114748u);
    if (ptr_mStoreId != nullptr) {
        mStoreId = ptr_mStoreId->value;
    }

    auto ptr_mRarity = prop->cast_prop<yordle::data::prop::uint32_prop>(520217347u);
    if (ptr_mRarity != nullptr) {
        mRarity = ptr_mRarity->value;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::uint32_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = ptr_mValue->value;
    }
}

yordle::data::meta::LootStatus::LootStatus(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTags = prop->cast_prop<yordle::data::prop::set_prop>(1333146945u);
    if (ptr_mTags != nullptr) {
        for (const auto &entry : ptr_mTags->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mTags.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mImageTexturePath = prop->cast_prop<yordle::data::prop::string_prop>(3437130819u);
    if (ptr_mImageTexturePath != nullptr) {
        mImageTexturePath = ptr_mImageTexturePath->value;
    }

    auto ptr_mActiveDate = prop->cast_prop<yordle::data::prop::string_prop>(225453014u);
    if (ptr_mActiveDate != nullptr) {
        mActiveDate = ptr_mActiveDate->value;
    }

    auto ptr_mInactiveDate = prop->cast_prop<yordle::data::prop::string_prop>(3474799429u);
    if (ptr_mInactiveDate != nullptr) {
        mInactiveDate = ptr_mInactiveDate->value;
    }

    auto ptr_mLifetimeMax = prop->cast_prop<yordle::data::prop::int32_prop>(876863779u);
    if (ptr_mLifetimeMax != nullptr) {
        mLifetimeMax = ptr_mLifetimeMax->value;
    }

    auto ptr_mAutoRedeem = prop->cast_prop<yordle::data::prop::bool_prop>(3819983323u);
    if (ptr_mAutoRedeem != nullptr) {
        mAutoRedeem = ptr_mAutoRedeem->value;
    }

    auto ptr_mActive = prop->cast_prop<yordle::data::prop::bool_prop>(235007858u);
    if (ptr_mActive != nullptr) {
        mActive = ptr_mActive->value;
    }
}

yordle::data::meta::LootItem::LootItem(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : LootOutputBase(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mInternalName = prop->cast_prop<yordle::data::prop::string_prop>(3912128722u);
    if (ptr_mInternalName != nullptr) {
        mInternalName = ptr_mInternalName->value;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mHoverDescription = prop->cast_prop<yordle::data::prop::string_prop>(959175484u);
    if (ptr_mHoverDescription != nullptr) {
        mHoverDescription = ptr_mHoverDescription->value;
    }

    auto ptr_mAdminDescription = prop->cast_prop<yordle::data::prop::string_prop>(3430910259u);
    if (ptr_mAdminDescription != nullptr) {
        mAdminDescription = ptr_mAdminDescription->value;
    }

    auto ptr_mStatus = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4283268666u);
    if (ptr_mStatus != nullptr) {
        mStatus = yordle::data::meta::deserialize<yordle::data::meta::LootStatus>(ptr_mStatus, 685945729u);
    }

    auto ptr_mDetails = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2369037022u);
    if (ptr_mDetails != nullptr) {
        mDetails = yordle::data::meta::deserialize<yordle::data::meta::LootItemDetails>(ptr_mDetails, 1665937510u);
    }
}

yordle::data::meta::ClientStateCommonSettings::ClientStateCommonSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x5b40f8fd = prop->cast_prop<yordle::data::prop::uint32_prop>(1530984701u);
    if (ptr_x5b40f8fd != nullptr) {
        x5b40f8fd = ptr_x5b40f8fd->value;
    }

    auto ptr_x6a9d87e7 = prop->cast_prop<yordle::data::prop::uint32_prop>(1788708839u);
    if (ptr_x6a9d87e7 != nullptr) {
        x6a9d87e7 = ptr_x6a9d87e7->value;
    }

    auto ptr_xefe9214c = prop->cast_prop<yordle::data::prop::uint32_prop>(4025033036u);
    if (ptr_xefe9214c != nullptr) {
        xefe9214c = ptr_xefe9214c->value;
    }
}

yordle::data::meta::IdentityInstance::IdentityInstance(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItemTexturePath = prop->cast_prop<yordle::data::prop::string_prop>(1953428173u);
    if (ptr_mItemTexturePath != nullptr) {
        mItemTexturePath = ptr_mItemTexturePath->value;
    }
}

yordle::data::meta::x4d31ed46::x4d31ed46(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mIdentityInstance = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3844885605u);
    if (ptr_mIdentityInstance != nullptr) {
        mIdentityInstance = yordle::data::meta::deserialize<yordle::data::meta::IdentityInstance>(ptr_mIdentityInstance, 1790162312u);
    }

    auto ptr_mCatalogEntry = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1384195201u);
    if (ptr_mCatalogEntry != nullptr) {
        mCatalogEntry = yordle::data::meta::deserialize<yordle::data::meta::CatalogEntry>(ptr_mCatalogEntry, 607049692u);
    }
}

yordle::data::meta::x14aef50c::x14aef50c(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mInventoryType = prop->cast_prop<yordle::data::prop::string_prop>(822482004u);
    if (ptr_mInventoryType != nullptr) {
        mInventoryType = ptr_mInventoryType->value;
    }

    auto ptr_mOrder = prop->cast_prop<yordle::data::prop::uint8_prop>(1310541936u);
    if (ptr_mOrder != nullptr) {
        mOrder = ptr_mOrder->value;
    }

    auto ptr_mItemIDs = prop->cast_prop<yordle::data::prop::set_prop>(3855791419u);
    if (ptr_mItemIDs != nullptr) {
        for (const auto &entry : ptr_mItemIDs->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(entry);
            if (ptr_entry != nullptr) {
                mItemIDs.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mInventoryFilters = prop->cast_prop<yordle::data::prop::set_prop>(2029937751u);
    if (ptr_mInventoryFilters != nullptr) {
        for (const auto &entry : ptr_mInventoryFilters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mInventoryFilters.emplace(yordle::data::meta::deserialize<yordle::data::meta::x14aef50c>(ptr_entry, 347010316u));
            }
        }
    }
}

yordle::data::meta::x9f59e92d::x9f59e92d(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mOrder = prop->cast_prop<yordle::data::prop::uint8_prop>(1310541936u);
    if (ptr_mOrder != nullptr) {
        mOrder = ptr_mOrder->value;
    }

    auto ptr_mEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(1239023785u);
    if (ptr_mEnabled != nullptr) {
        mEnabled = ptr_mEnabled->value;
    }

    auto ptr_mInventoryFilters = prop->cast_prop<yordle::data::prop::set_prop>(2029937751u);
    if (ptr_mInventoryFilters != nullptr) {
        for (const auto &entry : ptr_mInventoryFilters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mInventoryFilters.emplace(yordle::data::meta::deserialize<yordle::data::meta::x14aef50c>(ptr_entry, 347010316u));
            }
        }
    }
}

yordle::data::meta::MapAction::MapAction(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_startTime = prop->cast_prop<yordle::data::prop::float32_prop>(2322632174u);
    if (ptr_startTime != nullptr) {
        startTime = ptr_startTime->value;
    }
}

yordle::data::meta::xaf23408c::xaf23408c(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x5c042946 = prop->cast_prop<yordle::data::prop::set_prop>(1543776582u);
    if (ptr_x5c042946 != nullptr) {
        for (const auto &entry : ptr_x5c042946->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                x5c042946.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x15db0d85 = prop->cast_prop<yordle::data::prop::string_prop>(366677381u);
    if (ptr_x15db0d85 != nullptr) {
        x15db0d85 = ptr_x15db0d85->value;
    }

    auto ptr_x29a7efc6 = prop->cast_prop<yordle::data::prop::float32_prop>(698871750u);
    if (ptr_x29a7efc6 != nullptr) {
        x29a7efc6 = ptr_x29a7efc6->value;
    }

    auto ptr_Shuffle = prop->cast_prop<yordle::data::prop::bool_prop>(2030840142u);
    if (ptr_Shuffle != nullptr) {
        Shuffle = ptr_Shuffle->value;
    }
}

yordle::data::meta::x8c0d80f5::x8c0d80f5(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_MapParticleName = prop->cast_prop<yordle::data::prop::set_prop>(518005000u);
    if (ptr_MapParticleName != nullptr) {
        for (const auto &entry : ptr_MapParticleName->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                MapParticleName.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_Shuffle = prop->cast_prop<yordle::data::prop::bool_prop>(2030840142u);
    if (ptr_Shuffle != nullptr) {
        Shuffle = ptr_Shuffle->value;
    }
}

yordle::data::meta::x6cdbb71d::x6cdbb71d(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_targetName = prop->cast_prop<yordle::data::prop::string_prop>(1629956843u);
    if (ptr_targetName != nullptr) {
        targetName = ptr_targetName->value;
    }

    auto ptr_pathname = prop->cast_prop<yordle::data::prop::string_prop>(540204693u);
    if (ptr_pathname != nullptr) {
        pathname = ptr_pathname->value;
    }

    auto ptr_duration = prop->cast_prop<yordle::data::prop::float32_prop>(799079693u);
    if (ptr_duration != nullptr) {
        duration = ptr_duration->value;
    }

    auto ptr_velocity = prop->cast_prop<yordle::data::prop::float32_prop>(846470194u);
    if (ptr_velocity != nullptr) {
        velocity = ptr_velocity->value;
    }

    auto ptr_x3ade3a5d = prop->cast_prop<yordle::data::prop::bool_prop>(987642461u);
    if (ptr_x3ade3a5d != nullptr) {
        x3ade3a5d = ptr_x3ade3a5d->value;
    }

    auto ptr_xeefb990f = prop->cast_prop<yordle::data::prop::bool_prop>(4009466127u);
    if (ptr_xeefb990f != nullptr) {
        xeefb990f = ptr_xeefb990f->value;
    }
}

yordle::data::meta::MapActionPlayAnimation::MapActionPlayAnimation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PropName = prop->cast_prop<yordle::data::prop::string_prop>(1392331355u);
    if (ptr_PropName != nullptr) {
        PropName = ptr_PropName->value;
    }

    auto ptr_animationName = prop->cast_prop<yordle::data::prop::string_prop>(2555738718u);
    if (ptr_animationName != nullptr) {
        animationName = ptr_animationName->value;
    }

    auto ptr_looping = prop->cast_prop<yordle::data::prop::bool_prop>(1972607277u);
    if (ptr_looping != nullptr) {
        looping = ptr_looping->value;
    }
}

yordle::data::meta::MapActionPlaySoundAtLocation::MapActionPlaySoundAtLocation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_SoundEventName = prop->cast_prop<yordle::data::prop::string_prop>(40023207u);
    if (ptr_SoundEventName != nullptr) {
        SoundEventName = ptr_SoundEventName->value;
    }

    auto ptr_LocationName = prop->cast_prop<yordle::data::prop::string_prop>(4157284869u);
    if (ptr_LocationName != nullptr) {
        LocationName = ptr_LocationName->value;
    }
}

yordle::data::meta::x49da656e::x49da656e(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PropName = prop->cast_prop<yordle::data::prop::string_prop>(1392331355u);
    if (ptr_PropName != nullptr) {
        PropName = ptr_PropName->value;
    }

    auto ptr_Key = prop->cast_prop<yordle::data::prop::string_prop>(1746258028u);
    if (ptr_Key != nullptr) {
        Key = ptr_Key->value;
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::float32_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = ptr_value->value;
    }
}

yordle::data::meta::xced6ab09::xced6ab09(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_MapParticleName = prop->cast_prop<yordle::data::prop::set_prop>(518005000u);
    if (ptr_MapParticleName != nullptr) {
        for (const auto &entry : ptr_MapParticleName->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                MapParticleName.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_shown = prop->cast_prop<yordle::data::prop::bool_prop>(3458811670u);
    if (ptr_shown != nullptr) {
        shown = ptr_shown->value;
    }
}

yordle::data::meta::xe1bb8efb::xe1bb8efb(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapAction(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::MapAlternateAsset::MapAlternateAsset(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mGrassTintTextureName = prop->cast_prop<yordle::data::prop::string_prop>(3702238593u);
    if (ptr_mGrassTintTextureName != nullptr) {
        mGrassTintTextureName = ptr_mGrassTintTextureName->value;
    }

    auto ptr_x603134b8 = prop->cast_prop<yordle::data::prop::string_prop>(1613837496u);
    if (ptr_x603134b8 != nullptr) {
        x603134b8 = ptr_x603134b8->value;
    }

    auto ptr_x198716d9 = prop->cast_prop<yordle::data::prop::string_prop>(428283609u);
    if (ptr_x198716d9 != nullptr) {
        x198716d9 = ptr_x198716d9->value;
    }

    auto ptr_mParticleResourceResolver = prop->cast_prop<yordle::data::prop::reference_prop>(2232238088u);
    if (ptr_mParticleResourceResolver != nullptr) {
        mParticleResourceResolver = ptr_mParticleResourceResolver->value;
    }

    auto ptr_x97472c4d = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2538024013u);
    if (ptr_x97472c4d != nullptr) {
        x97472c4d = ptr_x97472c4d->value;
    }
}

yordle::data::meta::MapAlternateAssets::MapAlternateAssets(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAlternateAssets = prop->cast_prop<yordle::data::prop::set_prop>(3351283947u);
    if (ptr_mAlternateAssets != nullptr) {
        for (const auto &entry : ptr_mAlternateAssets->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mAlternateAssets.emplace(yordle::data::meta::deserialize<yordle::data::meta::MapAlternateAsset>(ptr_entry, 3846963535u));
            }
        }
    }
}

yordle::data::meta::MapCharacterList::MapCharacterList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_characters = prop->cast_prop<yordle::data::prop::unordered_set_prop>(2421522649u);
    if (ptr_characters != nullptr) {
        for (const auto &entry : ptr_characters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                characters.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::MapLocatorArray::MapLocatorArray(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_locators = prop->cast_prop<yordle::data::prop::set_prop>(3027360810u);
    if (ptr_locators != nullptr) {
        for (const auto &entry : ptr_locators->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                locators.emplace(yordle::data::meta::deserialize<yordle::data::meta::MapLocator>(ptr_entry, 2823085921u));
            }
        }
    }
}

yordle::data::meta::MapNavigationGridOverlays::MapNavigationGridOverlays(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_overlays = prop->cast_prop<yordle::data::prop::map_prop>(1884225360u);
    if (ptr_overlays != nullptr) {
        for (const auto &pair : ptr_overlays->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                overlays[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::MapNavigationGridOverlay::MapNavigationGridOverlay(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_navGridFileName = prop->cast_prop<yordle::data::prop::string_prop>(2737727815u);
    if (ptr_navGridFileName != nullptr) {
        navGridFileName = ptr_navGridFileName->value;
    }

    auto ptr_regionsFilename = prop->cast_prop<yordle::data::prop::string_prop>(3403579975u);
    if (ptr_regionsFilename != nullptr) {
        regionsFilename = ptr_regionsFilename->value;
    }
}

yordle::data::meta::MapSkinColorizationPostEffect::MapSkinColorizationPostEffect(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMultipliersRGB = prop->cast_prop<yordle::data::prop::vector_prop>(1640278471u);
    if (ptr_mMultipliersRGB != nullptr) {
        mMultipliersRGB = ptr_mMultipliersRGB->value;
    }

    auto ptr_mMultipliersSaturation = prop->cast_prop<yordle::data::prop::float32_prop>(4235297924u);
    if (ptr_mMultipliersSaturation != nullptr) {
        mMultipliersSaturation = ptr_mMultipliersSaturation->value;
    }
}

yordle::data::meta::MapSkin::MapSkin(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMapContainerLink = prop->cast_prop<yordle::data::prop::string_prop>(2517564801u);
    if (ptr_mMapContainerLink != nullptr) {
        mMapContainerLink = ptr_mMapContainerLink->value;
    }

    auto ptr_mMinimapBackgroundConfig = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1123874201u);
    if (ptr_mMinimapBackgroundConfig != nullptr) {
        mMinimapBackgroundConfig = yordle::data::meta::deserialize<yordle::data::meta::MinimapBackgroundConfig>(ptr_mMinimapBackgroundConfig, 718267822u);
    }

    auto ptr_mAlternateAssets = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3351283947u);
    if (ptr_mAlternateAssets != nullptr) {
        mAlternateAssets = yordle::data::meta::deserialize<yordle::data::meta::MapAlternateAssets>(ptr_mAlternateAssets, 849736052u);
    }

    auto ptr_mMapObjectsCFG = prop->cast_prop<yordle::data::prop::string_prop>(3777502624u);
    if (ptr_mMapObjectsCFG != nullptr) {
        mMapObjectsCFG = ptr_mMapObjectsCFG->value;
    }

    auto ptr_mNavigationMesh = prop->cast_prop<yordle::data::prop::string_prop>(1663313043u);
    if (ptr_mNavigationMesh != nullptr) {
        mNavigationMesh = ptr_mNavigationMesh->value;
    }

    auto ptr_x14f54bbd = prop->cast_prop<yordle::data::prop::reference_prop>(351620029u);
    if (ptr_x14f54bbd != nullptr) {
        x14f54bbd = ptr_x14f54bbd->value;
    }

    auto ptr_mWorldGeometry = prop->cast_prop<yordle::data::prop::string_prop>(2890499484u);
    if (ptr_mWorldGeometry != nullptr) {
        mWorldGeometry = ptr_mWorldGeometry->value;
    }

    auto ptr_mWorldParticlesINI = prop->cast_prop<yordle::data::prop::string_prop>(2652159343u);
    if (ptr_mWorldParticlesINI != nullptr) {
        mWorldParticlesINI = ptr_mWorldParticlesINI->value;
    }

    auto ptr_mColorizationPostEffect = prop->cast_prop<yordle::data::prop::structure_prop>(3036871010u);
    if (ptr_mColorizationPostEffect != nullptr) {
        mColorizationPostEffect = yordle::data::meta::deserialize<yordle::data::meta::MapSkinColorizationPostEffect>(ptr_mColorizationPostEffect, 955345470u);
    }

    auto ptr_mGrassTintTexture = prop->cast_prop<yordle::data::prop::string_prop>(3133382906u);
    if (ptr_mGrassTintTexture != nullptr) {
        mGrassTintTexture = ptr_mGrassTintTexture->value;
    }

    auto ptr_xb0e90e8e = prop->cast_prop<yordle::data::prop::string_prop>(2968063630u);
    if (ptr_xb0e90e8e != nullptr) {
        xb0e90e8e = ptr_xb0e90e8e->value;
    }

    auto ptr_mObjectSkinFallbacks = prop->cast_prop<yordle::data::prop::map_prop>(2511100733u);
    if (ptr_mObjectSkinFallbacks != nullptr) {
        for (const auto &pair : ptr_mObjectSkinFallbacks->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mObjectSkinFallbacks[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_mResourceResolvers = prop->cast_prop<yordle::data::prop::set_prop>(2460302967u);
    if (ptr_mResourceResolvers != nullptr) {
        for (const auto &entry : ptr_mResourceResolvers->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mResourceResolvers.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::MapVisibilityFlagRange::MapVisibilityFlagRange(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_minIndex = prop->cast_prop<yordle::data::prop::uint8_prop>(1130128413u);
    if (ptr_minIndex != nullptr) {
        minIndex = ptr_minIndex->value;
    }

    auto ptr_maxIndex = prop->cast_prop<yordle::data::prop::uint8_prop>(2163621455u);
    if (ptr_maxIndex != nullptr) {
        maxIndex = ptr_maxIndex->value;
    }
}

yordle::data::meta::MapVisibilityFlagDefinition::MapVisibilityFlagDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_PublicName = prop->cast_prop<yordle::data::prop::string_prop>(313514243u);
    if (ptr_PublicName != nullptr) {
        PublicName = ptr_PublicName->value;
    }

    auto ptr_BitIndex = prop->cast_prop<yordle::data::prop::uint8_prop>(153069804u);
    if (ptr_BitIndex != nullptr) {
        BitIndex = ptr_BitIndex->value;
    }

    auto ptr_transitionTime = prop->cast_prop<yordle::data::prop::float32_prop>(646358147u);
    if (ptr_transitionTime != nullptr) {
        transitionTime = ptr_transitionTime->value;
    }
}

yordle::data::meta::MapVisibilityFlagDefinitions::MapVisibilityFlagDefinitions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_FlagDefinitions = prop->cast_prop<yordle::data::prop::set_prop>(1309176603u);
    if (ptr_FlagDefinitions != nullptr) {
        for (const auto &entry : ptr_FlagDefinitions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                FlagDefinitions.emplace(yordle::data::meta::deserialize<yordle::data::meta::MapVisibilityFlagDefinition>(ptr_entry, 730516414u));
            }
        }
    }

    auto ptr_FlagRange = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2175247852u);
    if (ptr_FlagRange != nullptr) {
        FlagRange = yordle::data::meta::deserialize<yordle::data::meta::MapVisibilityFlagRange>(ptr_FlagRange, 298132920u);
    }

    auto ptr_x822356e3 = prop->cast_prop<yordle::data::prop::bool_prop>(2183354083u);
    if (ptr_x822356e3 != nullptr) {
        x822356e3 = ptr_x822356e3->value;
    }

    auto ptr_x5ffc00df = prop->cast_prop<yordle::data::prop::bool_prop>(1610350815u);
    if (ptr_x5ffc00df != nullptr) {
        x5ffc00df = ptr_x5ffc00df->value;
    }
}

yordle::data::meta::MinimapBackground::MinimapBackground(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mOrigin = prop->cast_prop<yordle::data::prop::point_prop>(2625061402u);
    if (ptr_mOrigin != nullptr) {
        mOrigin = ptr_mOrigin->value;
    }

    auto ptr_mSize = prop->cast_prop<yordle::data::prop::point_prop>(1663564297u);
    if (ptr_mSize != nullptr) {
        mSize = ptr_mSize->value;
    }

    auto ptr_mTextureName = prop->cast_prop<yordle::data::prop::string_prop>(4185004664u);
    if (ptr_mTextureName != nullptr) {
        mTextureName = ptr_mTextureName->value;
    }
}

yordle::data::meta::MinimapBackgroundConfig::MinimapBackgroundConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDefaultTextureName = prop->cast_prop<yordle::data::prop::string_prop>(4268156415u);
    if (ptr_mDefaultTextureName != nullptr) {
        mDefaultTextureName = ptr_mDefaultTextureName->value;
    }

    auto ptr_mCustomMinimapBackgrounds = prop->cast_prop<yordle::data::prop::map_prop>(1864435707u);
    if (ptr_mCustomMinimapBackgrounds != nullptr) {
        for (const auto &pair : ptr_mCustomMinimapBackgrounds->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mCustomMinimapBackgrounds[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MinimapBackground>(ptr_value, 2712490432u);
            }
        }
    }
}

yordle::data::meta::MissionAsset::MissionAsset(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mInternalName = prop->cast_prop<yordle::data::prop::string_prop>(3912128722u);
    if (ptr_mInternalName != nullptr) {
        mInternalName = ptr_mInternalName->value;
    }

    auto ptr_mIconTexturePath = prop->cast_prop<yordle::data::prop::string_prop>(2033897871u);
    if (ptr_mIconTexturePath != nullptr) {
        mIconTexturePath = ptr_mIconTexturePath->value;
    }

    auto ptr_xf82efec6 = prop->cast_prop<yordle::data::prop::bool_prop>(4163829446u);
    if (ptr_xf82efec6 != nullptr) {
        xf82efec6 = ptr_xf82efec6->value;
    }
}

yordle::data::meta::CheatPage::CheatPage(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCheats = prop->cast_prop<yordle::data::prop::set_prop>(2032951844u);
    if (ptr_mCheats != nullptr) {
        for (const auto &entry : ptr_mCheats->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mCheats.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::CheatSet::CheatSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mIsPlayerFacing = prop->cast_prop<yordle::data::prop::bool_prop>(1317932527u);
    if (ptr_mIsPlayerFacing != nullptr) {
        mIsPlayerFacing = ptr_mIsPlayerFacing->value;
    }

    auto ptr_mGameMutator = prop->cast_prop<yordle::data::prop::string_prop>(220200368u);
    if (ptr_mGameMutator != nullptr) {
        mGameMutator = ptr_mGameMutator->value;
    }

    auto ptr_mGameModeName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3698228650u);
    if (ptr_mGameModeName != nullptr) {
        mGameModeName = ptr_mGameModeName->value;
    }

    auto ptr_mAssociatedChampion = prop->cast_prop<yordle::data::prop::reference_prop>(736167517u);
    if (ptr_mAssociatedChampion != nullptr) {
        mAssociatedChampion = ptr_mAssociatedChampion->value;
    }

    auto ptr_mCheatPages = prop->cast_prop<yordle::data::prop::set_prop>(2738501045u);
    if (ptr_mCheatPages != nullptr) {
        for (const auto &entry : ptr_mCheatPages->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mCheatPages.emplace(yordle::data::meta::deserialize<yordle::data::meta::CheatPage>(ptr_entry, 2577175271u));
            }
        }
    }

    auto ptr_mUseIconsForButtons = prop->cast_prop<yordle::data::prop::bool_prop>(2898410727u);
    if (ptr_mUseIconsForButtons != nullptr) {
        mUseIconsForButtons = ptr_mUseIconsForButtons->value;
    }

    auto ptr_mIsUIAlwaysShown = prop->cast_prop<yordle::data::prop::bool_prop>(4069353204u);
    if (ptr_mIsUIAlwaysShown != nullptr) {
        mIsUIAlwaysShown = ptr_mIsUIAlwaysShown->value;
    }
}

yordle::data::meta::CheatMenuUIData::CheatMenuUIData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDisplayName = prop->cast_prop<yordle::data::prop::string_prop>(1960067173u);
    if (ptr_mDisplayName != nullptr) {
        mDisplayName = ptr_mDisplayName->value;
    }

    auto ptr_mFloatingTextDisplayName = prop->cast_prop<yordle::data::prop::string_prop>(1867225358u);
    if (ptr_mFloatingTextDisplayName != nullptr) {
        mFloatingTextDisplayName = ptr_mFloatingTextDisplayName->value;
    }

    auto ptr_mTooltipText = prop->cast_prop<yordle::data::prop::string_prop>(4276971092u);
    if (ptr_mTooltipText != nullptr) {
        mTooltipText = ptr_mTooltipText->value;
    }

    auto ptr_mDynamicTooltipText = prop->cast_prop<yordle::data::prop::string_prop>(4002418643u);
    if (ptr_mDynamicTooltipText != nullptr) {
        mDynamicTooltipText = ptr_mDynamicTooltipText->value;
    }

    auto ptr_mHotkey = prop->cast_prop<yordle::data::prop::string_prop>(3152123906u);
    if (ptr_mHotkey != nullptr) {
        mHotkey = ptr_mHotkey->value;
    }

    auto ptr_mHotkeys = prop->cast_prop<yordle::data::prop::set_prop>(891484643u);
    if (ptr_mHotkeys != nullptr) {
        for (const auto &entry : ptr_mHotkeys->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mHotkeys.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mIsToggleCheat = prop->cast_prop<yordle::data::prop::bool_prop>(2772937131u);
    if (ptr_mIsToggleCheat != nullptr) {
        mIsToggleCheat = ptr_mIsToggleCheat->value;
    }
}

yordle::data::meta::Cheat::Cheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mIsPlayerFacing = prop->cast_prop<yordle::data::prop::bool_prop>(1317932527u);
    if (ptr_mIsPlayerFacing != nullptr) {
        mIsPlayerFacing = ptr_mIsPlayerFacing->value;
    }

    auto ptr_mCheatMenuUIData = prop->cast_prop<yordle::data::prop::structure_prop>(1101592146u);
    if (ptr_mCheatMenuUIData != nullptr) {
        mCheatMenuUIData = yordle::data::meta::deserialize<yordle::data::meta::CheatMenuUIData>(ptr_mCheatMenuUIData, 337391297u);
    }

    auto ptr_mRecastFrequency = prop->cast_prop<yordle::data::prop::float32_prop>(1014591604u);
    if (ptr_mRecastFrequency != nullptr) {
        mRecastFrequency = ptr_mRecastFrequency->value;
    }
}

yordle::data::meta::ScriptCheat::ScriptCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }

    auto ptr_mScriptCallback = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3952419188u);
    if (ptr_mScriptCallback != nullptr) {
        mScriptCallback = ptr_mScriptCallback->value;
    }
}

yordle::data::meta::AddGoldCheat::AddGoldCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mGoldAmount = prop->cast_prop<yordle::data::prop::float32_prop>(2812104562u);
    if (ptr_mGoldAmount != nullptr) {
        mGoldAmount = ptr_mGoldAmount->value;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }
}

yordle::data::meta::MaxAllSkillsCheat::MaxAllSkillsCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mOnlyOnePointEach = prop->cast_prop<yordle::data::prop::bool_prop>(681900485u);
    if (ptr_mOnlyOnePointEach != nullptr) {
        mOnlyOnePointEach = ptr_mOnlyOnePointEach->value;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }
}

yordle::data::meta::AddExperienceCheat::AddExperienceCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }

    auto ptr_mGiveMaxLevel = prop->cast_prop<yordle::data::prop::bool_prop>(177991981u);
    if (ptr_mGiveMaxLevel != nullptr) {
        mGiveMaxLevel = ptr_mGiveMaxLevel->value;
    }
}

yordle::data::meta::ToggleBuffCheat::ToggleBuffCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }

    auto ptr_mBuffName = prop->cast_prop<yordle::data::prop::string_prop>(38338834u);
    if (ptr_mBuffName != nullptr) {
        mBuffName = ptr_mBuffName->value;
    }

    auto ptr_UseTargetAsCaster = prop->cast_prop<yordle::data::prop::bool_prop>(3068408121u);
    if (ptr_UseTargetAsCaster != nullptr) {
        UseTargetAsCaster = ptr_UseTargetAsCaster->value;
    }
}

yordle::data::meta::AddHealthCheat::AddHealthCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }

    auto ptr_mAmount = prop->cast_prop<yordle::data::prop::float32_prop>(2385801188u);
    if (ptr_mAmount != nullptr) {
        mAmount = ptr_mAmount->value;
    }
}

yordle::data::meta::AddPARCheat::AddPARCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }

    auto ptr_mAmount = prop->cast_prop<yordle::data::prop::float32_prop>(2385801188u);
    if (ptr_mAmount != nullptr) {
        mAmount = ptr_mAmount->value;
    }
}

yordle::data::meta::ToggleRegenCheat::ToggleRegenCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }

    auto ptr_mToggleHP = prop->cast_prop<yordle::data::prop::bool_prop>(355564284u);
    if (ptr_mToggleHP != nullptr) {
        mToggleHP = ptr_mToggleHP->value;
    }

    auto ptr_mTogglePAR = prop->cast_prop<yordle::data::prop::bool_prop>(1140150607u);
    if (ptr_mTogglePAR != nullptr) {
        mTogglePAR = ptr_mTogglePAR->value;
    }
}

yordle::data::meta::ClearTargetCooldownCheat::ClearTargetCooldownCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }
}

yordle::data::meta::TimeMultiplierCheat::TimeMultiplierCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpeedUp = prop->cast_prop<yordle::data::prop::bool_prop>(3816987430u);
    if (ptr_mSpeedUp != nullptr) {
        mSpeedUp = ptr_mSpeedUp->value;
    }

    auto ptr_mSpeedDown = prop->cast_prop<yordle::data::prop::bool_prop>(342845103u);
    if (ptr_mSpeedDown != nullptr) {
        mSpeedDown = ptr_mSpeedDown->value;
    }
}

yordle::data::meta::DamageUnitCheat::DamageUnitCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }

    auto ptr_mDamageAmount = prop->cast_prop<yordle::data::prop::uint32_prop>(380880277u);
    if (ptr_mDamageAmount != nullptr) {
        mDamageAmount = ptr_mDamageAmount->value;
    }

    auto ptr_mPercentageOfAttack = prop->cast_prop<yordle::data::prop::float32_prop>(2872806129u);
    if (ptr_mPercentageOfAttack != nullptr) {
        mPercentageOfAttack = ptr_mPercentageOfAttack->value;
    }

    auto ptr_mDamageType = prop->cast_prop<yordle::data::prop::uint32_prop>(3206328209u);
    if (ptr_mDamageType != nullptr) {
        mDamageType = ptr_mDamageType->value;
    }

    auto ptr_mHitResult = prop->cast_prop<yordle::data::prop::uint32_prop>(4001524460u);
    if (ptr_mHitResult != nullptr) {
        mHitResult = ptr_mHitResult->value;
    }
}

yordle::data::meta::ToggleBarracksCheat::ToggleBarracksCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mKillExistingMinions = prop->cast_prop<yordle::data::prop::bool_prop>(1982481512u);
    if (ptr_mKillExistingMinions != nullptr) {
        mKillExistingMinions = ptr_mKillExistingMinions->value;
    }

    auto ptr_mKillWards = prop->cast_prop<yordle::data::prop::bool_prop>(4063073539u);
    if (ptr_mKillWards != nullptr) {
        mKillWards = ptr_mKillWards->value;
    }
}

yordle::data::meta::ToggleTeamCheat::ToggleTeamCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }
}

yordle::data::meta::SetRespawnTimerCheat::SetRespawnTimerCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }

    auto ptr_mTimerValue = prop->cast_prop<yordle::data::prop::float32_prop>(1644841766u);
    if (ptr_mTimerValue != nullptr) {
        mTimerValue = ptr_mTimerValue->value;
    }
}

yordle::data::meta::ToggleInvulnerableCheat::ToggleInvulnerableCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }
}

yordle::data::meta::KillAllTurretsCheat::KillAllTurretsCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ForceSpawnNeutralCampsCheat::ForceSpawnNeutralCampsCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpawnBaron = prop->cast_prop<yordle::data::prop::bool_prop>(338441665u);
    if (ptr_mSpawnBaron != nullptr) {
        mSpawnBaron = ptr_mSpawnBaron->value;
    }
}

yordle::data::meta::ResetGoldCheat::ResetGoldCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTarget = prop->cast_prop<yordle::data::prop::uint32_prop>(2572657729u);
    if (ptr_mTarget != nullptr) {
        mTarget = ptr_mTarget->value;
    }
}

yordle::data::meta::TogglePlantFastRespawnCheat::TogglePlantFastRespawnCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::SwapChampionCheat::SwapChampionCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ToggleAfkDetectionCheat::ToggleAfkDetectionCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::PerkEffectAmountPerMode::PerkEffectAmountPerMode(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEffectAmountPerMode = prop->cast_prop<yordle::data::prop::map_prop>(2562594311u);
    if (ptr_mEffectAmountPerMode != nullptr) {
        for (const auto &pair : ptr_mEffectAmountPerMode->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mEffectAmountPerMode[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::PerkScriptData::PerkScriptData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEffectAmount = prop->cast_prop<yordle::data::prop::map_prop>(622481957u);
    if (ptr_mEffectAmount != nullptr) {
        for (const auto &pair : ptr_mEffectAmount->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mEffectAmount[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_mEffectAmountGameMode = prop->cast_prop<yordle::data::prop::map_prop>(2427468992u);
    if (ptr_mEffectAmountGameMode != nullptr) {
        for (const auto &pair : ptr_mEffectAmountGameMode->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mEffectAmountGameMode[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::PerkEffectAmountPerMode>(ptr_value, 2971960800u);
            }
        }
    }

    auto ptr_mCalculations = prop->cast_prop<yordle::data::prop::map_prop>(3702070358u);
    if (ptr_mCalculations != nullptr) {
        for (const auto &pair : ptr_mCalculations->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mCalculations[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculation>(ptr_value, 389493299u);
            }
        }
    }
}

yordle::data::meta::PerkScript::PerkScript(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpellScriptName = prop->cast_prop<yordle::data::prop::string_prop>(739491186u);
    if (ptr_mSpellScriptName != nullptr) {
        mSpellScriptName = ptr_mSpellScriptName->value;
    }

    auto ptr_mSpellScript = prop->cast_prop<yordle::data::prop::structure_prop>(2184003033u);
    if (ptr_mSpellScript != nullptr) {
        mSpellScript = yordle::data::meta::deserialize<yordle::data::meta::LolSpellScript>(ptr_mSpellScript, 1775952673u);
    }

    auto ptr_mSpellScriptData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2770069641u);
    if (ptr_mSpellScriptData != nullptr) {
        mSpellScriptData = yordle::data::meta::deserialize<yordle::data::meta::PerkScriptData>(ptr_mSpellScriptData, 2766644386u);
    }
}

yordle::data::meta::PerkBuff::PerkBuff(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBuffScriptName = prop->cast_prop<yordle::data::prop::string_prop>(1856794645u);
    if (ptr_mBuffScriptName != nullptr) {
        mBuffScriptName = ptr_mBuffScriptName->value;
    }

    auto ptr_mBuffSpellObject = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3398685234u);
    if (ptr_mBuffSpellObject != nullptr) {
        mBuffSpellObject = yordle::data::meta::deserialize<yordle::data::meta::SpellObject>(ptr_mBuffSpellObject, 1585338886u);
    }
}

yordle::data::meta::BasePerk::BasePerk(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPerkId = prop->cast_prop<yordle::data::prop::uint32_prop>(922217793u);
    if (ptr_mPerkId != nullptr) {
        mPerkId = ptr_mPerkId->value;
    }

    auto ptr_mPerkName = prop->cast_prop<yordle::data::prop::string_prop>(1313042823u);
    if (ptr_mPerkName != nullptr) {
        mPerkName = ptr_mPerkName->value;
    }

    auto ptr_mDisplayNameLocalizationKey = prop->cast_prop<yordle::data::prop::string_prop>(765720767u);
    if (ptr_mDisplayNameLocalizationKey != nullptr) {
        mDisplayNameLocalizationKey = ptr_mDisplayNameLocalizationKey->value;
    }

    auto ptr_mTooltipNameLocalizationKey = prop->cast_prop<yordle::data::prop::string_prop>(977481760u);
    if (ptr_mTooltipNameLocalizationKey != nullptr) {
        mTooltipNameLocalizationKey = ptr_mTooltipNameLocalizationKey->value;
    }

    auto ptr_mPingTextLocalizationKey = prop->cast_prop<yordle::data::prop::string_prop>(471669941u);
    if (ptr_mPingTextLocalizationKey != nullptr) {
        mPingTextLocalizationKey = ptr_mPingTextLocalizationKey->value;
    }

    auto ptr_mShortDescLocalizationKey = prop->cast_prop<yordle::data::prop::string_prop>(1596027113u);
    if (ptr_mShortDescLocalizationKey != nullptr) {
        mShortDescLocalizationKey = ptr_mShortDescLocalizationKey->value;
    }

    auto ptr_mLongDescLocalizationKey = prop->cast_prop<yordle::data::prop::string_prop>(2716665333u);
    if (ptr_mLongDescLocalizationKey != nullptr) {
        mLongDescLocalizationKey = ptr_mLongDescLocalizationKey->value;
    }

    auto ptr_mEndOfGameStatDescriptions = prop->cast_prop<yordle::data::prop::set_prop>(4111934595u);
    if (ptr_mEndOfGameStatDescriptions != nullptr) {
        for (const auto &entry : ptr_mEndOfGameStatDescriptions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mEndOfGameStatDescriptions.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mDisplayStatLocalizationKey = prop->cast_prop<yordle::data::prop::string_prop>(3477675700u);
    if (ptr_mDisplayStatLocalizationKey != nullptr) {
        mDisplayStatLocalizationKey = ptr_mDisplayStatLocalizationKey->value;
    }

    auto ptr_mIconTextureName = prop->cast_prop<yordle::data::prop::string_prop>(1472102971u);
    if (ptr_mIconTextureName != nullptr) {
        mIconTextureName = ptr_mIconTextureName->value;
    }

    auto ptr_mEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(1239023785u);
    if (ptr_mEnabled != nullptr) {
        mEnabled = ptr_mEnabled->value;
    }

    auto ptr_mStackable = prop->cast_prop<yordle::data::prop::bool_prop>(3428652312u);
    if (ptr_mStackable != nullptr) {
        mStackable = ptr_mStackable->value;
    }

    auto ptr_mScript = prop->cast_prop<yordle::data::prop::structure_prop>(1160601547u);
    if (ptr_mScript != nullptr) {
        mScript = yordle::data::meta::deserialize<yordle::data::meta::PerkScript>(ptr_mScript, 501137906u);
    }

    auto ptr_mBuffs = prop->cast_prop<yordle::data::prop::set_prop>(254459326u);
    if (ptr_mBuffs != nullptr) {
        for (const auto &entry : ptr_mBuffs->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mBuffs.emplace(yordle::data::meta::deserialize<yordle::data::meta::PerkBuff>(ptr_entry, 1031283364u));
            }
        }
    }

    auto ptr_mVFXResourceResolver = prop->cast_prop<yordle::data::prop::structure_prop>(1602389154u);
    if (ptr_mVFXResourceResolver != nullptr) {
        mVFXResourceResolver = yordle::data::meta::deserialize<yordle::data::meta::ResourceResolver>(ptr_mVFXResourceResolver, 4013559603u);
    }

    auto ptr_mCharacters = prop->cast_prop<yordle::data::prop::set_prop>(3604631660u);
    if (ptr_mCharacters != nullptr) {
        for (const auto &entry : ptr_mCharacters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mCharacters.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::PerkStyle::PerkStyle(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPerkStyleId = prop->cast_prop<yordle::data::prop::uint32_prop>(2664844788u);
    if (ptr_mPerkStyleId != nullptr) {
        mPerkStyleId = ptr_mPerkStyleId->value;
    }

    auto ptr_mPerkStyleName = prop->cast_prop<yordle::data::prop::string_prop>(1908853018u);
    if (ptr_mPerkStyleName != nullptr) {
        mPerkStyleName = ptr_mPerkStyleName->value;
    }

    auto ptr_mDisplayNameLocalizationKey = prop->cast_prop<yordle::data::prop::string_prop>(765720767u);
    if (ptr_mDisplayNameLocalizationKey != nullptr) {
        mDisplayNameLocalizationKey = ptr_mDisplayNameLocalizationKey->value;
    }

    auto ptr_mTooltipNameLocalizationKey = prop->cast_prop<yordle::data::prop::string_prop>(977481760u);
    if (ptr_mTooltipNameLocalizationKey != nullptr) {
        mTooltipNameLocalizationKey = ptr_mTooltipNameLocalizationKey->value;
    }

    auto ptr_mDefaultPageLocalizationKey = prop->cast_prop<yordle::data::prop::string_prop>(2258702858u);
    if (ptr_mDefaultPageLocalizationKey != nullptr) {
        mDefaultPageLocalizationKey = ptr_mDefaultPageLocalizationKey->value;
    }

    auto ptr_mPingTextLocalizationKey = prop->cast_prop<yordle::data::prop::string_prop>(471669941u);
    if (ptr_mPingTextLocalizationKey != nullptr) {
        mPingTextLocalizationKey = ptr_mPingTextLocalizationKey->value;
    }

    auto ptr_mIconTextureName = prop->cast_prop<yordle::data::prop::string_prop>(1472102971u);
    if (ptr_mIconTextureName != nullptr) {
        mIconTextureName = ptr_mIconTextureName->value;
    }

    auto ptr_mEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(1239023785u);
    if (ptr_mEnabled != nullptr) {
        mEnabled = ptr_mEnabled->value;
    }

    auto ptr_mIsAdvancedStyle = prop->cast_prop<yordle::data::prop::bool_prop>(2921787927u);
    if (ptr_mIsAdvancedStyle != nullptr) {
        mIsAdvancedStyle = ptr_mIsAdvancedStyle->value;
    }

    auto ptr_mAllowedSubStyles = prop->cast_prop<yordle::data::prop::set_prop>(2274456244u);
    if (ptr_mAllowedSubStyles != nullptr) {
        for (const auto &entry : ptr_mAllowedSubStyles->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(entry);
            if (ptr_entry != nullptr) {
                mAllowedSubStyles.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mSubStyleBonus = prop->cast_prop<yordle::data::prop::set_prop>(1720843154u);
    if (ptr_mSubStyleBonus != nullptr) {
        for (const auto &entry : ptr_mSubStyleBonus->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mSubStyleBonus.emplace(yordle::data::meta::deserialize<yordle::data::meta::PerkSubStyleBonus>(ptr_entry, 3127434961u));
            }
        }
    }

    auto ptr_mLCUAssetFileMap = prop->cast_prop<yordle::data::prop::map_prop>(3789342776u);
    if (ptr_mLCUAssetFileMap != nullptr) {
        for (const auto &pair : ptr_mLCUAssetFileMap->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mLCUAssetFileMap[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_mDefaultSplash = prop->cast_prop<yordle::data::prop::structure_prop>(2926079702u);
    if (ptr_mDefaultSplash != nullptr) {
        mDefaultSplash = yordle::data::meta::deserialize<yordle::data::meta::DefaultSplashedPerkStyle>(ptr_mDefaultSplash, 2405280373u);
    }

    auto ptr_mDefaultPerksWhenSplashed = prop->cast_prop<yordle::data::prop::set_prop>(1329530256u);
    if (ptr_mDefaultPerksWhenSplashed != nullptr) {
        for (const auto &entry : ptr_mDefaultPerksWhenSplashed->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mDefaultPerksWhenSplashed.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_xfa4e9a2 = prop->cast_prop<yordle::data::prop::set_prop>(262465954u);
    if (ptr_xfa4e9a2 != nullptr) {
        for (const auto &entry : ptr_xfa4e9a2->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                xfa4e9a2.emplace(yordle::data::meta::deserialize<yordle::data::meta::DefaultStatModPerkSet>(ptr_entry, 3234822452u));
            }
        }
    }

    auto ptr_mSlots = prop->cast_prop<yordle::data::prop::set_prop>(2443691253u);
    if (ptr_mSlots != nullptr) {
        for (const auto &entry : ptr_mSlots->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mSlots.emplace(yordle::data::meta::deserialize<yordle::data::meta::PerkSlot>(ptr_entry, 232419497u));
            }
        }
    }

    auto ptr_mSlotlinks = prop->cast_prop<yordle::data::prop::set_prop>(2825020389u);
    if (ptr_mSlotlinks != nullptr) {
        for (const auto &entry : ptr_mSlotlinks->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mSlotlinks.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mScript = prop->cast_prop<yordle::data::prop::structure_prop>(1160601547u);
    if (ptr_mScript != nullptr) {
        mScript = yordle::data::meta::deserialize<yordle::data::meta::PerkScript>(ptr_mScript, 501137906u);
    }

    auto ptr_mScriptAsSubStyle = prop->cast_prop<yordle::data::prop::structure_prop>(136287996u);
    if (ptr_mScriptAsSubStyle != nullptr) {
        mScriptAsSubStyle = yordle::data::meta::deserialize<yordle::data::meta::PerkScript>(ptr_mScriptAsSubStyle, 501137906u);
    }

    auto ptr_mBuffs = prop->cast_prop<yordle::data::prop::set_prop>(254459326u);
    if (ptr_mBuffs != nullptr) {
        for (const auto &entry : ptr_mBuffs->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mBuffs.emplace(yordle::data::meta::deserialize<yordle::data::meta::PerkBuff>(ptr_entry, 1031283364u));
            }
        }
    }

    auto ptr_mStyleVFXResourceResolver = prop->cast_prop<yordle::data::prop::structure_prop>(3660239581u);
    if (ptr_mStyleVFXResourceResolver != nullptr) {
        mStyleVFXResourceResolver = yordle::data::meta::deserialize<yordle::data::meta::ResourceResolver>(ptr_mStyleVFXResourceResolver, 4013559603u);
    }
}

yordle::data::meta::PerkSlot::PerkSlot(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSlotLabelKey = prop->cast_prop<yordle::data::prop::string_prop>(3165192297u);
    if (ptr_mSlotLabelKey != nullptr) {
        mSlotLabelKey = ptr_mSlotLabelKey->value;
    }

    auto ptr_mType = prop->cast_prop<yordle::data::prop::uint32_prop>(2280500912u);
    if (ptr_mType != nullptr) {
        mType = ptr_mType->value;
    }

    auto ptr_mPerks = prop->cast_prop<yordle::data::prop::set_prop>(1170084653u);
    if (ptr_mPerks != nullptr) {
        for (const auto &entry : ptr_mPerks->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mPerks.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::DefaultSplashedPerkStyle::DefaultSplashedPerkStyle(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStyle = prop->cast_prop<yordle::data::prop::reference_prop>(4070665549u);
    if (ptr_mStyle != nullptr) {
        mStyle = ptr_mStyle->value;
    }

    auto ptr_mPerk1 = prop->cast_prop<yordle::data::prop::reference_prop>(2210297031u);
    if (ptr_mPerk1 != nullptr) {
        mPerk1 = ptr_mPerk1->value;
    }

    auto ptr_mPerk2 = prop->cast_prop<yordle::data::prop::reference_prop>(2227074650u);
    if (ptr_mPerk2 != nullptr) {
        mPerk2 = ptr_mPerk2->value;
    }
}

yordle::data::meta::DefaultStatModPerkSet::DefaultStatModPerkSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStyleId = prop->cast_prop<yordle::data::prop::uint32_prop>(3229685720u);
    if (ptr_mStyleId != nullptr) {
        mStyleId = ptr_mStyleId->value;
    }

    auto ptr_mPerks = prop->cast_prop<yordle::data::prop::set_prop>(1170084653u);
    if (ptr_mPerks != nullptr) {
        for (const auto &entry : ptr_mPerks->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mPerks.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::PerkSubStyleBonus::PerkSubStyleBonus(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStyleId = prop->cast_prop<yordle::data::prop::uint32_prop>(3229685720u);
    if (ptr_mStyleId != nullptr) {
        mStyleId = ptr_mStyleId->value;
    }

    auto ptr_mPerk = prop->cast_prop<yordle::data::prop::reference_prop>(3080294476u);
    if (ptr_mPerk != nullptr) {
        mPerk = ptr_mPerk->value;
    }
}

yordle::data::meta::SummonerSpellPerkReplacement::SummonerSpellPerkReplacement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSummonerSpellRequired = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3495851587u);
    if (ptr_mSummonerSpellRequired != nullptr) {
        mSummonerSpellRequired = ptr_mSummonerSpellRequired->value;
    }

    auto ptr_xd48a5ef1 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3565838065u);
    if (ptr_xd48a5ef1 != nullptr) {
        xd48a5ef1 = ptr_xd48a5ef1->value;
    }
}

yordle::data::meta::SummonerSpellPerkReplacementList::SummonerSpellPerkReplacementList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mReplacements = prop->cast_prop<yordle::data::prop::set_prop>(4168911829u);
    if (ptr_mReplacements != nullptr) {
        for (const auto &entry : ptr_mReplacements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mReplacements.emplace(yordle::data::meta::deserialize<yordle::data::meta::SummonerSpellPerkReplacement>(ptr_entry, 4081542451u));
            }
        }
    }
}

yordle::data::meta::Perk::Perk(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BasePerk(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDefault = prop->cast_prop<yordle::data::prop::bool_prop>(3960646101u);
    if (ptr_mDefault != nullptr) {
        mDefault = ptr_mDefault->value;
    }

    auto ptr_mMajorChangePatchVersion = prop->cast_prop<yordle::data::prop::string_prop>(3235129123u);
    if (ptr_mMajorChangePatchVersion != nullptr) {
        mMajorChangePatchVersion = ptr_mMajorChangePatchVersion->value;
    }

    auto ptr_mSummonerPerkReplacements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4168790169u);
    if (ptr_mSummonerPerkReplacements != nullptr) {
        mSummonerPerkReplacements = yordle::data::meta::deserialize<yordle::data::meta::SummonerSpellPerkReplacementList>(ptr_mSummonerPerkReplacements, 3014400443u);
    }
}

yordle::data::meta::PerkReplacement::PerkReplacement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mReplaceTarget = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3675386201u);
    if (ptr_mReplaceTarget != nullptr) {
        mReplaceTarget = ptr_mReplaceTarget->value;
    }

    auto ptr_mReplaceWith = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(838662440u);
    if (ptr_mReplaceWith != nullptr) {
        mReplaceWith = ptr_mReplaceWith->value;
    }
}

yordle::data::meta::PerkReplacementList::PerkReplacementList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mReplacements = prop->cast_prop<yordle::data::prop::set_prop>(4168911829u);
    if (ptr_mReplacements != nullptr) {
        for (const auto &entry : ptr_mReplacements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mReplacements.emplace(yordle::data::meta::deserialize<yordle::data::meta::PerkReplacement>(ptr_entry, 1517326239u));
            }
        }
    }
}

yordle::data::meta::PerkConfig::PerkConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBotOverrideSet = prop->cast_prop<yordle::data::prop::reference_prop>(4033440779u);
    if (ptr_mBotOverrideSet != nullptr) {
        mBotOverrideSet = ptr_mBotOverrideSet->value;
    }

    auto ptr_mPerkReplacements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(665947137u);
    if (ptr_mPerkReplacements != nullptr) {
        mPerkReplacements = yordle::data::meta::deserialize<yordle::data::meta::PerkReplacementList>(ptr_mPerkReplacements, 2307915623u);
    }

    auto ptr_x108e746d = prop->cast_prop<yordle::data::prop::uint32_prop>(277771373u);
    if (ptr_x108e746d != nullptr) {
        x108e746d = ptr_x108e746d->value;
    }
}

yordle::data::meta::OverridePerkSelectionSet::OverridePerkSelectionSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStyle = prop->cast_prop<yordle::data::prop::reference_prop>(4070665549u);
    if (ptr_mStyle != nullptr) {
        mStyle = ptr_mStyle->value;
    }

    auto ptr_mSubStyle = prop->cast_prop<yordle::data::prop::reference_prop>(4291321791u);
    if (ptr_mSubStyle != nullptr) {
        mSubStyle = ptr_mSubStyle->value;
    }

    auto ptr_mPerks = prop->cast_prop<yordle::data::prop::set_prop>(1170084653u);
    if (ptr_mPerks != nullptr) {
        for (const auto &entry : ptr_mPerks->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mPerks.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ToonInkingFilterParams::ToonInkingFilterParams(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPixelSize = prop->cast_prop<yordle::data::prop::float32_prop>(1282563089u);
    if (ptr_mPixelSize != nullptr) {
        mPixelSize = ptr_mPixelSize->value;
    }

    auto ptr_mMinVal = prop->cast_prop<yordle::data::prop::float32_prop>(2988346699u);
    if (ptr_mMinVal != nullptr) {
        mMinVal = ptr_mMinVal->value;
    }

    auto ptr_mMaxVal = prop->cast_prop<yordle::data::prop::float32_prop>(2201945645u);
    if (ptr_mMaxVal != nullptr) {
        mMaxVal = ptr_mMaxVal->value;
    }

    auto ptr_mResultScale = prop->cast_prop<yordle::data::prop::float32_prop>(290305301u);
    if (ptr_mResultScale != nullptr) {
        mResultScale = ptr_mResultScale->value;
    }
}

yordle::data::meta::RenderStyleData::RenderStyleData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mUnitFilterParamsInterior = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2801890326u);
    if (ptr_mUnitFilterParamsInterior != nullptr) {
        mUnitFilterParamsInterior = yordle::data::meta::deserialize<yordle::data::meta::ToonInkingFilterParams>(ptr_mUnitFilterParamsInterior, 2533312697u);
    }

    auto ptr_mUnitFilterParamsExterior = prop->cast_prop<yordle::data::prop::inline_structure_prop>(476722428u);
    if (ptr_mUnitFilterParamsExterior != nullptr) {
        mUnitFilterParamsExterior = yordle::data::meta::deserialize<yordle::data::meta::ToonInkingFilterParams>(ptr_mUnitFilterParamsExterior, 2533312697u);
    }

    auto ptr_mUnitStyleUseInking = prop->cast_prop<yordle::data::prop::bool_prop>(3974937446u);
    if (ptr_mUnitStyleUseInking != nullptr) {
        mUnitStyleUseInking = ptr_mUnitStyleUseInking->value;
    }
}

yordle::data::meta::MaterialOverrideCallbackDynamicMaterial::MaterialOverrideCallbackDynamicMaterial(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::MouseOverEffectData::MouseOverEffectData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAllyColor = prop->cast_prop<yordle::data::prop::color_prop>(659552649u);
    if (ptr_mAllyColor != nullptr) {
        mAllyColor = ptr_mAllyColor->value;
    }

    auto ptr_mEnemyColor = prop->cast_prop<yordle::data::prop::color_prop>(645545979u);
    if (ptr_mEnemyColor != nullptr) {
        mEnemyColor = ptr_mEnemyColor->value;
    }

    auto ptr_mNeutralColor = prop->cast_prop<yordle::data::prop::color_prop>(4121441318u);
    if (ptr_mNeutralColor != nullptr) {
        mNeutralColor = ptr_mNeutralColor->value;
    }

    auto ptr_mSelfColor = prop->cast_prop<yordle::data::prop::color_prop>(1192402645u);
    if (ptr_mSelfColor != nullptr) {
        mSelfColor = ptr_mSelfColor->value;
    }

    auto ptr_mMouseOverSize = prop->cast_prop<yordle::data::prop::int32_prop>(3977549456u);
    if (ptr_mMouseOverSize != nullptr) {
        mMouseOverSize = ptr_mMouseOverSize->value;
    }

    auto ptr_mMouseOverColorFactor = prop->cast_prop<yordle::data::prop::float32_prop>(2652021487u);
    if (ptr_mMouseOverColorFactor != nullptr) {
        mMouseOverColorFactor = ptr_mMouseOverColorFactor->value;
    }

    auto ptr_mMouseOverBlurPassCount = prop->cast_prop<yordle::data::prop::uint32_prop>(3564329420u);
    if (ptr_mMouseOverBlurPassCount != nullptr) {
        mMouseOverBlurPassCount = ptr_mMouseOverBlurPassCount->value;
    }

    auto ptr_mSelectedSize = prop->cast_prop<yordle::data::prop::int32_prop>(2093032704u);
    if (ptr_mSelectedSize != nullptr) {
        mSelectedSize = ptr_mSelectedSize->value;
    }

    auto ptr_mSelectedColorFactor = prop->cast_prop<yordle::data::prop::float32_prop>(1316945311u);
    if (ptr_mSelectedColorFactor != nullptr) {
        mSelectedColorFactor = ptr_mSelectedColorFactor->value;
    }

    auto ptr_mSelectedBlurPassCount = prop->cast_prop<yordle::data::prop::uint32_prop>(1211416828u);
    if (ptr_mSelectedBlurPassCount != nullptr) {
        mSelectedBlurPassCount = ptr_mSelectedBlurPassCount->value;
    }

    auto ptr_mAvatarSize = prop->cast_prop<yordle::data::prop::int32_prop>(1394595840u);
    if (ptr_mAvatarSize != nullptr) {
        mAvatarSize = ptr_mAvatarSize->value;
    }

    auto ptr_mAvatarColorFactor = prop->cast_prop<yordle::data::prop::float32_prop>(4104945311u);
    if (ptr_mAvatarColorFactor != nullptr) {
        mAvatarColorFactor = ptr_mAvatarColorFactor->value;
    }

    auto ptr_mAvatarColor = prop->cast_prop<yordle::data::prop::color_prop>(2843343508u);
    if (ptr_mAvatarColor != nullptr) {
        mAvatarColor = ptr_mAvatarColor->value;
    }

    auto ptr_mAvatarBlurPassCount = prop->cast_prop<yordle::data::prop::uint32_prop>(576236028u);
    if (ptr_mAvatarBlurPassCount != nullptr) {
        mAvatarBlurPassCount = ptr_mAvatarBlurPassCount->value;
    }

    auto ptr_mKillerSize = prop->cast_prop<yordle::data::prop::int32_prop>(4009348966u);
    if (ptr_mKillerSize != nullptr) {
        mKillerSize = ptr_mKillerSize->value;
    }

    auto ptr_mKillerColorFactor = prop->cast_prop<yordle::data::prop::float32_prop>(1266946041u);
    if (ptr_mKillerColorFactor != nullptr) {
        mKillerColorFactor = ptr_mKillerColorFactor->value;
    }

    auto ptr_mKillerBlurPassCount = prop->cast_prop<yordle::data::prop::uint32_prop>(4001684746u);
    if (ptr_mKillerBlurPassCount != nullptr) {
        mKillerBlurPassCount = ptr_mKillerBlurPassCount->value;
    }

    auto ptr_mInteractionTimes = prop->cast_prop<yordle::data::prop::set_prop>(584826622u);
    if (ptr_mInteractionTimes != nullptr) {
        for (const auto &entry : ptr_mInteractionTimes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mInteractionTimes.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mInteractionSizes = prop->cast_prop<yordle::data::prop::set_prop>(306111174u);
    if (ptr_mInteractionSizes != nullptr) {
        for (const auto &entry : ptr_mInteractionSizes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(entry);
            if (ptr_entry != nullptr) {
                mInteractionSizes.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::FxSequence::FxSequence(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Actions = prop->cast_prop<yordle::data::prop::set_prop>(3048556132u);
    if (ptr_Actions != nullptr) {
        for (const auto &entry : ptr_Actions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                Actions.emplace(yordle::data::meta::deserialize<yordle::data::meta::IFxAction>(ptr_entry, 3063177560u));
            }
        }
    }
}

yordle::data::meta::FxTableEntry::FxTableEntry(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_Sequence = prop->cast_prop<yordle::data::prop::reference_prop>(1011085160u);
    if (ptr_Sequence != nullptr) {
        Sequence = ptr_Sequence->value;
    }
}

yordle::data::meta::FxTable::FxTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Entries = prop->cast_prop<yordle::data::prop::set_prop>(1868071667u);
    if (ptr_Entries != nullptr) {
        for (const auto &entry : ptr_Entries->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                Entries.emplace(yordle::data::meta::deserialize<yordle::data::meta::FxTableEntry>(ptr_entry, 351234915u));
            }
        }
    }
}

yordle::data::meta::FxTarget::FxTarget(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_type = prop->cast_prop<yordle::data::prop::uint32_prop>(1361572173u);
    if (ptr_type != nullptr) {
        type = ptr_type->value;
    }

    auto ptr_Index = prop->cast_prop<yordle::data::prop::int32_prop>(151693739u);
    if (ptr_Index != nullptr) {
        Index = ptr_Index->value;
    }
}

yordle::data::meta::FxTiming::FxTiming(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_anchor = prop->cast_prop<yordle::data::prop::uint32_prop>(1122880180u);
    if (ptr_anchor != nullptr) {
        anchor = ptr_anchor->value;
    }

    auto ptr_type = prop->cast_prop<yordle::data::prop::uint32_prop>(1361572173u);
    if (ptr_type != nullptr) {
        type = ptr_type->value;
    }

    auto ptr_offset = prop->cast_prop<yordle::data::prop::float32_prop>(348705738u);
    if (ptr_offset != nullptr) {
        offset = ptr_offset->value;
    }
}

yordle::data::meta::FxTransform::FxTransform(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_type = prop->cast_prop<yordle::data::prop::uint32_prop>(1361572173u);
    if (ptr_type != nullptr) {
        type = ptr_type->value;
    }

    auto ptr_Index = prop->cast_prop<yordle::data::prop::int32_prop>(151693739u);
    if (ptr_Index != nullptr) {
        Index = ptr_Index->value;
    }

    auto ptr_AttachmentName = prop->cast_prop<yordle::data::prop::string_prop>(3447302923u);
    if (ptr_AttachmentName != nullptr) {
        AttachmentName = ptr_AttachmentName->value;
    }
}

yordle::data::meta::IFxAction::IFxAction(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Start = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1697318111u);
    if (ptr_Start != nullptr) {
        Start = yordle::data::meta::deserialize<yordle::data::meta::FxTiming>(ptr_Start, 3687298637u);
    }

    auto ptr_End = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1787721130u);
    if (ptr_End != nullptr) {
        End = yordle::data::meta::deserialize<yordle::data::meta::FxTiming>(ptr_End, 3687298637u);
    }
}

yordle::data::meta::GameplayFeatureToggles::GameplayFeatureToggles(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_NewActorStuckPathfinding = prop->cast_prop<yordle::data::prop::bool_prop>(689679626u);
    if (ptr_NewActorStuckPathfinding != nullptr) {
        NewActorStuckPathfinding = ptr_NewActorStuckPathfinding->value;
    }

    auto ptr_fowCastRayAccurate = prop->cast_prop<yordle::data::prop::bool_prop>(1316620882u);
    if (ptr_fowCastRayAccurate != nullptr) {
        fowCastRayAccurate = ptr_fowCastRayAccurate->value;
    }

    auto ptr_disableSpellLevelMinimumProtections = prop->cast_prop<yordle::data::prop::bool_prop>(1700882399u);
    if (ptr_disableSpellLevelMinimumProtections != nullptr) {
        disableSpellLevelMinimumProtections = ptr_disableSpellLevelMinimumProtections->value;
    }

    auto ptr_IndividualItemVisibility = prop->cast_prop<yordle::data::prop::bool_prop>(3146339973u);
    if (ptr_IndividualItemVisibility != nullptr) {
        IndividualItemVisibility = ptr_IndividualItemVisibility->value;
    }

    auto ptr_AFKDetection2 = prop->cast_prop<yordle::data::prop::bool_prop>(3829795124u);
    if (ptr_AFKDetection2 != nullptr) {
        AFKDetection2 = ptr_AFKDetection2->value;
    }
}

yordle::data::meta::ScriptDataObject::ScriptDataObject(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mConstants = prop->cast_prop<yordle::data::prop::map_prop>(125003421u);
    if (ptr_mConstants != nullptr) {
        for (const auto &pair : ptr_mConstants->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mConstants[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::GameModeConstant>(ptr_value, 1670770484u);
            }
        }
    }

    auto ptr_x9be36761 = prop->cast_prop<yordle::data::prop::reference_prop>(2615371617u);
    if (ptr_x9be36761 != nullptr) {
        x9be36761 = ptr_x9be36761->value;
    }
}

yordle::data::meta::ScriptDataObjectList::ScriptDataObjectList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mScriptDataObjects = prop->cast_prop<yordle::data::prop::set_prop>(1331068385u);
    if (ptr_mScriptDataObjects != nullptr) {
        for (const auto &entry : ptr_mScriptDataObjects->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mScriptDataObjects.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ICastRequirement::ICastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mInvertResult = prop->cast_prop<yordle::data::prop::bool_prop>(3314780533u);
    if (ptr_mInvertResult != nullptr) {
        mInvertResult = ptr_mInvertResult->value;
    }
}

yordle::data::meta::HasAllSubRequirementsCastRequirement::HasAllSubRequirementsCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSubRequirements = prop->cast_prop<yordle::data::prop::set_prop>(90001786u);
    if (ptr_mSubRequirements != nullptr) {
        for (const auto &entry : ptr_mSubRequirements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mSubRequirements.emplace(yordle::data::meta::deserialize<yordle::data::meta::ICastRequirement>(ptr_entry, 1550969638u));
            }
        }
    }
}

yordle::data::meta::HasNNearbyUnitsRequirement::HasNNearbyUnitsRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mUnitsRequirements = prop->cast_prop<yordle::data::prop::set_prop>(1519291675u);
    if (ptr_mUnitsRequirements != nullptr) {
        for (const auto &entry : ptr_mUnitsRequirements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mUnitsRequirements.emplace(yordle::data::meta::deserialize<yordle::data::meta::ICastRequirement>(ptr_entry, 1550969638u));
            }
        }
    }

    auto ptr_mUnitsRequired = prop->cast_prop<yordle::data::prop::uint32_prop>(2670354330u);
    if (ptr_mUnitsRequired != nullptr) {
        mUnitsRequired = ptr_mUnitsRequired->value;
    }

    auto ptr_mRange = prop->cast_prop<yordle::data::prop::float32_prop>(1741401325u);
    if (ptr_mRange != nullptr) {
        mRange = ptr_mRange->value;
    }

    auto ptr_mDistanceType = prop->cast_prop<yordle::data::prop::uint32_prop>(1524285035u);
    if (ptr_mDistanceType != nullptr) {
        mDistanceType = ptr_mDistanceType->value;
    }
}

yordle::data::meta::HasNNearbyVisibleUnitsRequirement::HasNNearbyVisibleUnitsRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mUnitsRequirements = prop->cast_prop<yordle::data::prop::set_prop>(1519291675u);
    if (ptr_mUnitsRequirements != nullptr) {
        for (const auto &entry : ptr_mUnitsRequirements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mUnitsRequirements.emplace(yordle::data::meta::deserialize<yordle::data::meta::ICastRequirement>(ptr_entry, 1550969638u));
            }
        }
    }

    auto ptr_mUnitsRequired = prop->cast_prop<yordle::data::prop::uint32_prop>(2670354330u);
    if (ptr_mUnitsRequired != nullptr) {
        mUnitsRequired = ptr_mUnitsRequired->value;
    }

    auto ptr_mRange = prop->cast_prop<yordle::data::prop::float32_prop>(1741401325u);
    if (ptr_mRange != nullptr) {
        mRange = ptr_mRange->value;
    }

    auto ptr_mDistanceType = prop->cast_prop<yordle::data::prop::uint32_prop>(1524285035u);
    if (ptr_mDistanceType != nullptr) {
        mDistanceType = ptr_mDistanceType->value;
    }
}

yordle::data::meta::HasTypeAndStatusFlags::HasTypeAndStatusFlags(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAffectsTypeFlags = prop->cast_prop<yordle::data::prop::uint32_prop>(3975411853u);
    if (ptr_mAffectsTypeFlags != nullptr) {
        mAffectsTypeFlags = ptr_mAffectsTypeFlags->value;
    }

    auto ptr_mAffectsStatusFlags = prop->cast_prop<yordle::data::prop::uint32_prop>(2434399679u);
    if (ptr_mAffectsStatusFlags != nullptr) {
        mAffectsStatusFlags = ptr_mAffectsStatusFlags->value;
    }
}

yordle::data::meta::HasAtleastNSubRequirementsCastRequirement::HasAtleastNSubRequirementsCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSuccessesRequired = prop->cast_prop<yordle::data::prop::uint32_prop>(629262918u);
    if (ptr_mSuccessesRequired != nullptr) {
        mSuccessesRequired = ptr_mSuccessesRequired->value;
    }

    auto ptr_mSubRequirements = prop->cast_prop<yordle::data::prop::set_prop>(90001786u);
    if (ptr_mSubRequirements != nullptr) {
        for (const auto &entry : ptr_mSubRequirements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mSubRequirements.emplace(yordle::data::meta::deserialize<yordle::data::meta::ICastRequirement>(ptr_entry, 1550969638u));
            }
        }
    }
}

yordle::data::meta::HasUnitTagsCastRequirement::HasUnitTagsCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mUnitTags = prop->cast_prop<yordle::data::prop::inline_structure_prop>(471909471u);
    if (ptr_mUnitTags != nullptr) {
        mUnitTags = yordle::data::meta::deserialize<yordle::data::meta::ObjectTags>(ptr_mUnitTags, 622921539u);
    }
}

yordle::data::meta::SameTeamCastRequirement::SameTeamCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::HasBuffCastRequirement::HasBuffCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBuffName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(38338834u);
    if (ptr_mBuffName != nullptr) {
        mBuffName = ptr_mBuffName->value;
    }

    auto ptr_mFromAnyone = prop->cast_prop<yordle::data::prop::bool_prop>(1715384362u);
    if (ptr_mFromAnyone != nullptr) {
        mFromAnyone = ptr_mFromAnyone->value;
    }
}

yordle::data::meta::AboveHealthPercentCastRequirement::AboveHealthPercentCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCurrentPercentHealth = prop->cast_prop<yordle::data::prop::float32_prop>(534009688u);
    if (ptr_mCurrentPercentHealth != nullptr) {
        mCurrentPercentHealth = ptr_mCurrentPercentHealth->value;
    }
}

yordle::data::meta::AbovePARPercentCastRequirement::AbovePARPercentCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPARType = prop->cast_prop<yordle::data::prop::uint8_prop>(506184499u);
    if (ptr_mPARType != nullptr) {
        mPARType = ptr_mPARType->value;
    }

    auto ptr_mCurrentPercentPAR = prop->cast_prop<yordle::data::prop::float32_prop>(1061076085u);
    if (ptr_mCurrentPercentPAR != nullptr) {
        mCurrentPercentPAR = ptr_mCurrentPercentPAR->value;
    }
}

yordle::data::meta::IsSpecifiedUnitCastRequirement::IsSpecifiedUnitCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mUnit = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1803810150u);
    if (ptr_mUnit != nullptr) {
        mUnit = ptr_mUnit->value;
    }
}

yordle::data::meta::x10f4d0bf::x10f4d0bf(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::xdc65ffe4::xdc65ffe4(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ItemSlotHasChargesCastRequirement::ItemSlotHasChargesCastRequirement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::x2e7c5eda::x2e7c5eda(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_level = prop->cast_prop<yordle::data::prop::uint32_prop>(2610554845u);
    if (ptr_level != nullptr) {
        level = ptr_level->value;
    }
}

yordle::data::meta::x48284759::x48284759(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ICastRequirement(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Distance = prop->cast_prop<yordle::data::prop::float32_prop>(783488098u);
    if (ptr_Distance != nullptr) {
        Distance = ptr_Distance->value;
    }
}

yordle::data::meta::CCScoreMultipliers::CCScoreMultipliers(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_stun = prop->cast_prop<yordle::data::prop::float32_prop>(3714899745u);
    if (ptr_stun != nullptr) {
        stun = ptr_stun->value;
    }

    auto ptr_taunt = prop->cast_prop<yordle::data::prop::float32_prop>(3164374115u);
    if (ptr_taunt != nullptr) {
        taunt = ptr_taunt->value;
    }

    auto ptr_fear = prop->cast_prop<yordle::data::prop::float32_prop>(3443430919u);
    if (ptr_fear != nullptr) {
        fear = ptr_fear->value;
    }

    auto ptr_flee = prop->cast_prop<yordle::data::prop::float32_prop>(3756019969u);
    if (ptr_flee != nullptr) {
        flee = ptr_flee->value;
    }

    auto ptr_suppression = prop->cast_prop<yordle::data::prop::float32_prop>(4265819416u);
    if (ptr_suppression != nullptr) {
        suppression = ptr_suppression->value;
    }

    auto ptr_knockup = prop->cast_prop<yordle::data::prop::float32_prop>(696045898u);
    if (ptr_knockup != nullptr) {
        knockup = ptr_knockup->value;
    }

    auto ptr_knockback = prop->cast_prop<yordle::data::prop::float32_prop>(3231562936u);
    if (ptr_knockback != nullptr) {
        knockback = ptr_knockback->value;
    }

    auto ptr_polymorph = prop->cast_prop<yordle::data::prop::float32_prop>(3743326195u);
    if (ptr_polymorph != nullptr) {
        polymorph = ptr_polymorph->value;
    }

    auto ptr_root = prop->cast_prop<yordle::data::prop::float32_prop>(553455173u);
    if (ptr_root != nullptr) {
        root = ptr_root->value;
    }

    auto ptr_silence = prop->cast_prop<yordle::data::prop::float32_prop>(3077804428u);
    if (ptr_silence != nullptr) {
        silence = ptr_silence->value;
    }

    auto ptr_charm = prop->cast_prop<yordle::data::prop::float32_prop>(1604938064u);
    if (ptr_charm != nullptr) {
        charm = ptr_charm->value;
    }

    auto ptr_slow = prop->cast_prop<yordle::data::prop::float32_prop>(1838498488u);
    if (ptr_slow != nullptr) {
        slow = ptr_slow->value;
    }

    auto ptr_attackSpeedSlow = prop->cast_prop<yordle::data::prop::float32_prop>(1285845805u);
    if (ptr_attackSpeedSlow != nullptr) {
        attackSpeedSlow = ptr_attackSpeedSlow->value;
    }

    auto ptr_blind = prop->cast_prop<yordle::data::prop::float32_prop>(274826164u);
    if (ptr_blind != nullptr) {
        blind = ptr_blind->value;
    }

    auto ptr_disarm = prop->cast_prop<yordle::data::prop::float32_prop>(3024816983u);
    if (ptr_disarm != nullptr) {
        disarm = ptr_disarm->value;
    }

    auto ptr_grounded = prop->cast_prop<yordle::data::prop::float32_prop>(1265902975u);
    if (ptr_grounded != nullptr) {
        grounded = ptr_grounded->value;
    }

    auto ptr_nearsight = prop->cast_prop<yordle::data::prop::float32_prop>(969463844u);
    if (ptr_nearsight != nullptr) {
        nearsight = ptr_nearsight->value;
    }

    auto ptr_drowsy = prop->cast_prop<yordle::data::prop::float32_prop>(2893680069u);
    if (ptr_drowsy != nullptr) {
        drowsy = ptr_drowsy->value;
    }

    auto ptr_asleep = prop->cast_prop<yordle::data::prop::float32_prop>(3773054511u);
    if (ptr_asleep != nullptr) {
        asleep = ptr_asleep->value;
    }
}

yordle::data::meta::BuffData::BuffData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDescription = prop->cast_prop<yordle::data::prop::string_prop>(4059172210u);
    if (ptr_mDescription != nullptr) {
        mDescription = ptr_mDescription->value;
    }

    auto ptr_mTooltipData = prop->cast_prop<yordle::data::prop::structure_prop>(674324571u);
    if (ptr_mTooltipData != nullptr) {
        mTooltipData = yordle::data::meta::deserialize<yordle::data::meta::TooltipInstanceBuff>(ptr_mTooltipData, 1588263926u);
    }

    auto ptr_mVfxSpawnConditions = prop->cast_prop<yordle::data::prop::set_prop>(2672799421u);
    if (ptr_mVfxSpawnConditions != nullptr) {
        for (const auto &entry : ptr_mVfxSpawnConditions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mVfxSpawnConditions.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxSpawnConditions>(ptr_entry, 2833994484u));
            }
        }
    }

    auto ptr_x62e282aa = prop->cast_prop<yordle::data::prop::bool_prop>(1659011754u);
    if (ptr_x62e282aa != nullptr) {
        x62e282aa = ptr_x62e282aa->value;
    }

    auto ptr_mShowDuration = prop->cast_prop<yordle::data::prop::bool_prop>(3490082433u);
    if (ptr_mShowDuration != nullptr) {
        mShowDuration = ptr_mShowDuration->value;
    }

    auto ptr_xd019c1 = prop->cast_prop<yordle::data::prop::bool_prop>(13638081u);
    if (ptr_xd019c1 != nullptr) {
        xd019c1 = ptr_xd019c1->value;
    }

    auto ptr_mFloatVarsDecimals = prop->cast_prop<yordle::data::prop::set_prop>(439122960u);
    if (ptr_mFloatVarsDecimals != nullptr) {
        for (const auto &entry : ptr_mFloatVarsDecimals->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(entry);
            if (ptr_entry != nullptr) {
                mFloatVarsDecimals.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mBuffAttributeFlag = prop->cast_prop<yordle::data::prop::uint8_prop>(3621963549u);
    if (ptr_mBuffAttributeFlag != nullptr) {
        mBuffAttributeFlag = ptr_mBuffAttributeFlag->value;
    }
}

yordle::data::meta::TeamBuffData::TeamBuffData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBuffName = prop->cast_prop<yordle::data::prop::string_prop>(38338834u);
    if (ptr_mBuffName != nullptr) {
        mBuffName = ptr_mBuffName->value;
    }

    auto ptr_mUiName = prop->cast_prop<yordle::data::prop::string_prop>(3736966593u);
    if (ptr_mUiName != nullptr) {
        mUiName = ptr_mUiName->value;
    }

    auto ptr_x9a53f442 = prop->cast_prop<yordle::data::prop::bool_prop>(2589193282u);
    if (ptr_x9a53f442 != nullptr) {
        x9a53f442 = ptr_x9a53f442->value;
    }
}

yordle::data::meta::MissionBuffData::MissionBuffData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_dragon = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4161811998u);
    if (ptr_dragon != nullptr) {
        dragon = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_dragon, 2090279541u);
    }

    auto ptr_fireDrake = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1081630498u);
    if (ptr_fireDrake != nullptr) {
        fireDrake = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_fireDrake, 2090279541u);
    }

    auto ptr_airDrake = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1265210044u);
    if (ptr_airDrake != nullptr) {
        airDrake = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_airDrake, 2090279541u);
    }

    auto ptr_waterDrake = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2125982193u);
    if (ptr_waterDrake != nullptr) {
        waterDrake = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_waterDrake, 2090279541u);
    }

    auto ptr_earthDrake = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1537318524u);
    if (ptr_earthDrake != nullptr) {
        earthDrake = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_earthDrake, 2090279541u);
    }

    auto ptr_elderDrake = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1818122524u);
    if (ptr_elderDrake != nullptr) {
        elderDrake = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_elderDrake, 2090279541u);
    }

    auto ptr_GameModeCustom1 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2414492958u);
    if (ptr_GameModeCustom1 != nullptr) {
        GameModeCustom1 = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_GameModeCustom1, 2090279541u);
    }

    auto ptr_GameModeCustom2 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2397715339u);
    if (ptr_GameModeCustom2 != nullptr) {
        GameModeCustom2 = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_GameModeCustom2, 2090279541u);
    }

    auto ptr_x8dea39f8 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2380937720u);
    if (ptr_x8dea39f8 != nullptr) {
        x8dea39f8 = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_x8dea39f8, 2090279541u);
    }

    auto ptr_x94ea44fd = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2498381053u);
    if (ptr_x94ea44fd != nullptr) {
        x94ea44fd = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_x94ea44fd, 2090279541u);
    }

    auto ptr_x93ea436a = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2481603434u);
    if (ptr_x93ea436a != nullptr) {
        x93ea436a = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_x93ea436a, 2090279541u);
    }

    auto ptr_x92ea41d7 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2464825815u);
    if (ptr_x92ea41d7 != nullptr) {
        x92ea41d7 = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_x92ea41d7, 2090279541u);
    }

    auto ptr_x91ea4044 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2448048196u);
    if (ptr_x91ea4044 != nullptr) {
        x91ea4044 = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_x91ea4044, 2090279541u);
    }

    auto ptr_x88ea3219 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2297049625u);
    if (ptr_x88ea3219 != nullptr) {
        x88ea3219 = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_x88ea3219, 2090279541u);
    }

    auto ptr_x87ea3086 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2280272006u);
    if (ptr_x87ea3086 != nullptr) {
        x87ea3086 = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_x87ea3086, 2090279541u);
    }

    auto ptr_xbbbe4f6a = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3149811562u);
    if (ptr_xbbbe4f6a != nullptr) {
        xbbbe4f6a = yordle::data::meta::deserialize<yordle::data::meta::TeamBuffData>(ptr_xbbbe4f6a, 2090279541u);
    }
}

yordle::data::meta::BuffStackingTemplate::BuffStackingTemplate(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_maxStacks = prop->cast_prop<yordle::data::prop::int32_prop>(1745940288u);
    if (ptr_maxStacks != nullptr) {
        maxStacks = ptr_maxStacks->value;
    }

    auto ptr_xb36eae8c = prop->cast_prop<yordle::data::prop::int32_prop>(3010375308u);
    if (ptr_xb36eae8c != nullptr) {
        xb36eae8c = ptr_xb36eae8c->value;
    }

    auto ptr_StacksExclusive = prop->cast_prop<yordle::data::prop::bool_prop>(3995831980u);
    if (ptr_StacksExclusive != nullptr) {
        StacksExclusive = ptr_StacksExclusive->value;
    }

    auto ptr_BuffAddType = prop->cast_prop<yordle::data::prop::uint32_prop>(1057836047u);
    if (ptr_BuffAddType != nullptr) {
        BuffAddType = ptr_BuffAddType->value;
    }
}

yordle::data::meta::BuffStackingSettings::BuffStackingSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_templateDefinition = prop->cast_prop<yordle::data::prop::set_prop>(758688710u);
    if (ptr_templateDefinition != nullptr) {
        for (const auto &entry : ptr_templateDefinition->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                templateDefinition.emplace(yordle::data::meta::deserialize<yordle::data::meta::BuffStackingTemplate>(ptr_entry, 471801710u));
            }
        }
    }
}

yordle::data::meta::VFXSpawnConditionData::VFXSpawnConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPersistentVfxs = prop->cast_prop<yordle::data::prop::set_prop>(3754699228u);
    if (ptr_mPersistentVfxs != nullptr) {
        for (const auto &entry : ptr_mPersistentVfxs->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mPersistentVfxs.emplace(yordle::data::meta::deserialize<yordle::data::meta::EffectCreationData>(ptr_entry, 2338173165u));
            }
        }
    }
}

yordle::data::meta::VFXDefaultSpawnConditionData::VFXDefaultSpawnConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VFXSpawnConditionData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::HasBuffData::HasBuffData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBuffName = prop->cast_prop<yordle::data::prop::string_prop>(38338834u);
    if (ptr_mBuffName != nullptr) {
        mBuffName = ptr_mBuffName->value;
    }

    auto ptr_mFromAnyone = prop->cast_prop<yordle::data::prop::bool_prop>(1715384362u);
    if (ptr_mFromAnyone != nullptr) {
        mFromAnyone = ptr_mFromAnyone->value;
    }

    auto ptr_mFromOwner = prop->cast_prop<yordle::data::prop::bool_prop>(2271474239u);
    if (ptr_mFromOwner != nullptr) {
        mFromOwner = ptr_mFromOwner->value;
    }

    auto ptr_mFromAttacker = prop->cast_prop<yordle::data::prop::bool_prop>(3118580291u);
    if (ptr_mFromAttacker != nullptr) {
        mFromAttacker = ptr_mFromAttacker->value;
    }
}

yordle::data::meta::HasBuffComparisonData::HasBuffComparisonData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBuffs = prop->cast_prop<yordle::data::prop::set_prop>(254459326u);
    if (ptr_mBuffs != nullptr) {
        for (const auto &entry : ptr_mBuffs->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mBuffs.emplace(yordle::data::meta::deserialize<yordle::data::meta::HasBuffData>(ptr_entry, 3836337806u));
            }
        }
    }

    auto ptr_mCompareOp = prop->cast_prop<yordle::data::prop::uint8_prop>(854730536u);
    if (ptr_mCompareOp != nullptr) {
        mCompareOp = ptr_mCompareOp->value;
    }
}

yordle::data::meta::HasBuffSpawnConditionData::HasBuffSpawnConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VFXSpawnConditionData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBuffComparisons = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4056521681u);
    if (ptr_mBuffComparisons != nullptr) {
        mBuffComparisons = yordle::data::meta::deserialize<yordle::data::meta::HasBuffComparisonData>(ptr_mBuffComparisons, 3686997399u);
    }
}

yordle::data::meta::IsSkinSpawnConditionData::IsSkinSpawnConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VFXSpawnConditionData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSkinId = prop->cast_prop<yordle::data::prop::uint32_prop>(2831584420u);
    if (ptr_mSkinId != nullptr) {
        mSkinId = ptr_mSkinId->value;
    }
}

yordle::data::meta::IsOwnerHeroConditionData::IsOwnerHeroConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VFXSpawnConditionData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::IsOwnerAliveConditionData::IsOwnerAliveConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VFXSpawnConditionData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::HasSpellRankSpawnConditionData::HasSpellRankSpawnConditionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VFXSpawnConditionData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpellSlot = prop->cast_prop<yordle::data::prop::uint32_prop>(72877302u);
    if (ptr_mSpellSlot != nullptr) {
        mSpellSlot = ptr_mSpellSlot->value;
    }

    auto ptr_mSpellLevel = prop->cast_prop<yordle::data::prop::int32_prop>(1715485568u);
    if (ptr_mSpellLevel != nullptr) {
        mSpellLevel = ptr_mSpellLevel->value;
    }
}

yordle::data::meta::VfxSpawnConditions::VfxSpawnConditions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mConditionalVfxData = prop->cast_prop<yordle::data::prop::set_prop>(2275536844u);
    if (ptr_mConditionalVfxData != nullptr) {
        for (const auto &entry : ptr_mConditionalVfxData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mConditionalVfxData.emplace(yordle::data::meta::deserialize<yordle::data::meta::VFXSpawnConditionData>(ptr_entry, 3390937687u));
            }
        }
    }

    auto ptr_mDefaultVfxData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(785443991u);
    if (ptr_mDefaultVfxData != nullptr) {
        mDefaultVfxData = yordle::data::meta::deserialize<yordle::data::meta::VFXDefaultSpawnConditionData>(ptr_mDefaultVfxData, 922712184u);
    }
}

yordle::data::meta::IVFXSpawnConditions::IVFXSpawnConditions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::AlwaysSpawnCondition::AlwaysSpawnCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IVFXSpawnConditions(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDefaultVfxData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(785443991u);
    if (ptr_mDefaultVfxData != nullptr) {
        mDefaultVfxData = yordle::data::meta::deserialize<yordle::data::meta::VFXDefaultSpawnConditionData>(ptr_mDefaultVfxData, 922712184u);
    }
}

yordle::data::meta::HasBuffNameSpawnConditions::HasBuffNameSpawnConditions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IVFXSpawnConditions(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mConditions = prop->cast_prop<yordle::data::prop::set_prop>(721382474u);
    if (ptr_mConditions != nullptr) {
        for (const auto &entry : ptr_mConditions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mConditions.emplace(yordle::data::meta::deserialize<yordle::data::meta::HasBuffSpawnConditionData>(ptr_entry, 2412429686u));
            }
        }
    }

    auto ptr_mDefaultVfxData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(785443991u);
    if (ptr_mDefaultVfxData != nullptr) {
        mDefaultVfxData = yordle::data::meta::deserialize<yordle::data::meta::VFXDefaultSpawnConditionData>(ptr_mDefaultVfxData, 922712184u);
    }
}

yordle::data::meta::HasSkinIDSpawnConditions::HasSkinIDSpawnConditions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IVFXSpawnConditions(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mConditions = prop->cast_prop<yordle::data::prop::set_prop>(721382474u);
    if (ptr_mConditions != nullptr) {
        for (const auto &entry : ptr_mConditions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mConditions.emplace(yordle::data::meta::deserialize<yordle::data::meta::IsSkinSpawnConditionData>(ptr_entry, 1323437592u));
            }
        }
    }

    auto ptr_mDefaultVfxData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(785443991u);
    if (ptr_mDefaultVfxData != nullptr) {
        mDefaultVfxData = yordle::data::meta::deserialize<yordle::data::meta::VFXDefaultSpawnConditionData>(ptr_mDefaultVfxData, 922712184u);
    }
}

yordle::data::meta::IsOwnerHeroSpawnConditions::IsOwnerHeroSpawnConditions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IVFXSpawnConditions(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mConditions = prop->cast_prop<yordle::data::prop::set_prop>(721382474u);
    if (ptr_mConditions != nullptr) {
        for (const auto &entry : ptr_mConditions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mConditions.emplace(yordle::data::meta::deserialize<yordle::data::meta::IsOwnerHeroConditionData>(ptr_entry, 3706207649u));
            }
        }
    }

    auto ptr_mDefaultVfxData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(785443991u);
    if (ptr_mDefaultVfxData != nullptr) {
        mDefaultVfxData = yordle::data::meta::deserialize<yordle::data::meta::VFXDefaultSpawnConditionData>(ptr_mDefaultVfxData, 922712184u);
    }
}

yordle::data::meta::IsOwnerAliveSpawnConditions::IsOwnerAliveSpawnConditions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IVFXSpawnConditions(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mConditions = prop->cast_prop<yordle::data::prop::set_prop>(721382474u);
    if (ptr_mConditions != nullptr) {
        for (const auto &entry : ptr_mConditions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mConditions.emplace(yordle::data::meta::deserialize<yordle::data::meta::IsOwnerAliveConditionData>(ptr_entry, 3575093694u));
            }
        }
    }

    auto ptr_mDefaultVfxData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(785443991u);
    if (ptr_mDefaultVfxData != nullptr) {
        mDefaultVfxData = yordle::data::meta::deserialize<yordle::data::meta::VFXDefaultSpawnConditionData>(ptr_mDefaultVfxData, 922712184u);
    }
}

yordle::data::meta::EffectCreationData::EffectCreationData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBoneName = prop->cast_prop<yordle::data::prop::string_prop>(3951561061u);
    if (ptr_mBoneName != nullptr) {
        mBoneName = ptr_mBoneName->value;
    }

    auto ptr_mTargetBoneName = prop->cast_prop<yordle::data::prop::string_prop>(2512086968u);
    if (ptr_mTargetBoneName != nullptr) {
        mTargetBoneName = ptr_mTargetBoneName->value;
    }

    auto ptr_mEffectName = prop->cast_prop<yordle::data::prop::string_prop>(1514000834u);
    if (ptr_mEffectName != nullptr) {
        mEffectName = ptr_mEffectName->value;
    }

    auto ptr_mEffectKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4130890368u);
    if (ptr_mEffectKey != nullptr) {
        mEffectKey = ptr_mEffectKey->value;
    }

    auto ptr_xfe758550 = prop->cast_prop<yordle::data::prop::string_prop>(4269114704u);
    if (ptr_xfe758550 != nullptr) {
        xfe758550 = ptr_xfe758550->value;
    }

    auto ptr_xa03a9542 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2688193858u);
    if (ptr_xa03a9542 != nullptr) {
        xa03a9542 = ptr_xa03a9542->value;
    }

    auto ptr_xc42cf88d = prop->cast_prop<yordle::data::prop::bool_prop>(3291281549u);
    if (ptr_xc42cf88d != nullptr) {
        xc42cf88d = ptr_xc42cf88d->value;
    }

    auto ptr_mPlaySpeedModifier = prop->cast_prop<yordle::data::prop::float32_prop>(3967304360u);
    if (ptr_mPlaySpeedModifier != nullptr) {
        mPlaySpeedModifier = ptr_mPlaySpeedModifier->value;
    }

    auto ptr_xa45eda7b = prop->cast_prop<yordle::data::prop::bool_prop>(2757679739u);
    if (ptr_xa45eda7b != nullptr) {
        xa45eda7b = ptr_xa45eda7b->value;
    }

    auto ptr_x87596a93 = prop->cast_prop<yordle::data::prop::uint32_prop>(2270784147u);
    if (ptr_x87596a93 != nullptr) {
        x87596a93 = ptr_x87596a93->value;
    }

    auto ptr_x62f57c79 = prop->cast_prop<yordle::data::prop::bool_prop>(1660255353u);
    if (ptr_x62f57c79 != nullptr) {
        x62f57c79 = ptr_x62f57c79->value;
    }

    auto ptr_mFaceTarget = prop->cast_prop<yordle::data::prop::bool_prop>(2347668140u);
    if (ptr_mFaceTarget != nullptr) {
        mFaceTarget = ptr_mFaceTarget->value;
    }

    auto ptr_xfd1e1bb4 = prop->cast_prop<yordle::data::prop::bool_prop>(4246608820u);
    if (ptr_xfd1e1bb4 != nullptr) {
        xfd1e1bb4 = ptr_xfd1e1bb4->value;
    }

    auto ptr_x453384e6 = prop->cast_prop<yordle::data::prop::bool_prop>(1161004262u);
    if (ptr_x453384e6 != nullptr) {
        x453384e6 = ptr_x453384e6->value;
    }
}

yordle::data::meta::RatioConversion::RatioConversion(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSourceStatType = prop->cast_prop<yordle::data::prop::uint8_prop>(2546428647u);
    if (ptr_mSourceStatType != nullptr) {
        mSourceStatType = ptr_mSourceStatType->value;
    }

    auto ptr_mSourceStatOutput = prop->cast_prop<yordle::data::prop::uint8_prop>(2666183218u);
    if (ptr_mSourceStatOutput != nullptr) {
        mSourceStatOutput = ptr_mSourceStatOutput->value;
    }

    auto ptr_mResultingStatType = prop->cast_prop<yordle::data::prop::uint8_prop>(346472573u);
    if (ptr_mResultingStatType != nullptr) {
        mResultingStatType = ptr_mResultingStatType->value;
    }

    auto ptr_mResultingStatOutput = prop->cast_prop<yordle::data::prop::uint8_prop>(205246452u);
    if (ptr_mResultingStatOutput != nullptr) {
        mResultingStatOutput = ptr_mResultingStatOutput->value;
    }

    auto ptr_x9227ce44 = prop->cast_prop<yordle::data::prop::float32_prop>(2452082244u);
    if (ptr_x9227ce44 != nullptr) {
        x9227ce44 = ptr_x9227ce44->value;
    }
}

yordle::data::meta::x4379a5b2::x4379a5b2(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x5c92b7f2 = prop->cast_prop<yordle::data::prop::uint8_prop>(1553119218u);
    if (ptr_x5c92b7f2 != nullptr) {
        x5c92b7f2 = ptr_x5c92b7f2->value;
    }

    auto ptr_xaca5b9b4 = prop->cast_prop<yordle::data::prop::uint8_prop>(2896542132u);
    if (ptr_xaca5b9b4 != nullptr) {
        xaca5b9b4 = ptr_xaca5b9b4->value;
    }

    auto ptr_x583da425 = prop->cast_prop<yordle::data::prop::set_prop>(1480434725u);
    if (ptr_x583da425 != nullptr) {
        for (const auto &entry : ptr_x583da425->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                x583da425.emplace(yordle::data::meta::deserialize<yordle::data::meta::IGameCalculationPart>(ptr_entry, 3053458126u));
            }
        }
    }
}

yordle::data::meta::SpellModifier::SpellModifier(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mModifierID = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2444616212u);
    if (ptr_mModifierID != nullptr) {
        mModifierID = ptr_mModifierID->value;
    }

    auto ptr_xa9cc2bf6 = prop->cast_prop<yordle::data::prop::uint8_prop>(2848730102u);
    if (ptr_xa9cc2bf6 != nullptr) {
        xa9cc2bf6 = ptr_xa9cc2bf6->value;
    }

    auto ptr_xa47f56d7 = prop->cast_prop<yordle::data::prop::uint8_prop>(2759808727u);
    if (ptr_xa47f56d7 != nullptr) {
        xa47f56d7 = ptr_xa47f56d7->value;
    }

    auto ptr_x5b1192f5 = prop->cast_prop<yordle::data::prop::uint32_prop>(1527878389u);
    if (ptr_x5b1192f5 != nullptr) {
        x5b1192f5 = ptr_x5b1192f5->value;
    }

    auto ptr_x441a3020 = prop->cast_prop<yordle::data::prop::set_prop>(1142566944u);
    if (ptr_x441a3020 != nullptr) {
        for (const auto &entry : ptr_x441a3020->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                x441a3020.emplace(yordle::data::meta::deserialize<yordle::data::meta::RatioConversion>(ptr_entry, 3393100796u));
            }
        }
    }

    auto ptr_xddbea054 = prop->cast_prop<yordle::data::prop::set_prop>(3720257620u);
    if (ptr_xddbea054 != nullptr) {
        for (const auto &entry : ptr_xddbea054->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                xddbea054.emplace(yordle::data::meta::deserialize<yordle::data::meta::x4379a5b2>(ptr_entry, 1132045746u));
            }
        }
    }
}

yordle::data::meta::AbilityObject::AbilityObject(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mRootSpell = prop->cast_prop<yordle::data::prop::reference_prop>(444295482u);
    if (ptr_mRootSpell != nullptr) {
        mRootSpell = ptr_mRootSpell->value;
    }

    auto ptr_mChildSpells = prop->cast_prop<yordle::data::prop::set_prop>(3277117473u);
    if (ptr_mChildSpells != nullptr) {
        for (const auto &entry : ptr_mChildSpells->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mChildSpells.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x86ddaddb = prop->cast_prop<yordle::data::prop::bool_prop>(2262674907u);
    if (ptr_x86ddaddb != nullptr) {
        x86ddaddb = ptr_x86ddaddb->value;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mType = prop->cast_prop<yordle::data::prop::uint8_prop>(2280500912u);
    if (ptr_mType != nullptr) {
        mType = ptr_mType->value;
    }
}

yordle::data::meta::SpellObject::SpellObject(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mScriptName = prop->cast_prop<yordle::data::prop::string_prop>(3370352368u);
    if (ptr_mScriptName != nullptr) {
        mScriptName = ptr_mScriptName->value;
    }

    auto ptr_mScript = prop->cast_prop<yordle::data::prop::structure_prop>(1160601547u);
    if (ptr_mScript != nullptr) {
        mScript = yordle::data::meta::deserialize<yordle::data::meta::LolSpellScript>(ptr_mScript, 1775952673u);
    }

    auto ptr_mSpell = prop->cast_prop<yordle::data::prop::structure_prop>(1456651858u);
    if (ptr_mSpell != nullptr) {
        mSpell = yordle::data::meta::deserialize<yordle::data::meta::SpellDataResource>(ptr_mSpell, 1127646569u);
    }

    auto ptr_mBuff = prop->cast_prop<yordle::data::prop::structure_prop>(2131712633u);
    if (ptr_mBuff != nullptr) {
        mBuff = yordle::data::meta::deserialize<yordle::data::meta::BuffData>(ptr_mBuff, 1177802644u);
    }
}

yordle::data::meta::MissileSpecification::MissileSpecification(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMissileWidth = prop->cast_prop<yordle::data::prop::float32_prop>(3023865132u);
    if (ptr_mMissileWidth != nullptr) {
        mMissileWidth = ptr_mMissileWidth->value;
    }

    auto ptr_movementComponent = prop->cast_prop<yordle::data::prop::structure_prop>(4261069671u);
    if (ptr_movementComponent != nullptr) {
        movementComponent = yordle::data::meta::deserialize<yordle::data::meta::MissileMovementSpec>(ptr_movementComponent, 1798110077u);
    }

    auto ptr_visibilityComponent = prop->cast_prop<yordle::data::prop::structure_prop>(2697400192u);
    if (ptr_visibilityComponent != nullptr) {
        visibilityComponent = yordle::data::meta::deserialize<yordle::data::meta::MissileVisibilitySpec>(ptr_visibilityComponent, 1749521072u);
    }

    auto ptr_heightSolver = prop->cast_prop<yordle::data::prop::structure_prop>(1823820221u);
    if (ptr_heightSolver != nullptr) {
        heightSolver = yordle::data::meta::deserialize<yordle::data::meta::HeightSolverType>(ptr_heightSolver, 974318101u);
    }

    auto ptr_verticalFacing = prop->cast_prop<yordle::data::prop::structure_prop>(25933845u);
    if (ptr_verticalFacing != nullptr) {
        verticalFacing = yordle::data::meta::deserialize<yordle::data::meta::VerticalFacingType>(ptr_verticalFacing, 3891808829u);
    }

    auto ptr_missileGroupSpawners = prop->cast_prop<yordle::data::prop::set_prop>(428211019u);
    if (ptr_missileGroupSpawners != nullptr) {
        for (const auto &entry : ptr_missileGroupSpawners->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                missileGroupSpawners.emplace(yordle::data::meta::deserialize<yordle::data::meta::MissileGroupSpawnerSpec>(ptr_entry, 1040594301u));
            }
        }
    }

    auto ptr_behaviors = prop->cast_prop<yordle::data::prop::set_prop>(2700516924u);
    if (ptr_behaviors != nullptr) {
        for (const auto &entry : ptr_behaviors->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                behaviors.emplace(yordle::data::meta::deserialize<yordle::data::meta::MissileBehaviorSpec>(ptr_entry, 369826590u));
            }
        }
    }
}

yordle::data::meta::MissileBehaviorSpec::MissileBehaviorSpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::FixedDistanceIgnoringTerrain::FixedDistanceIgnoringTerrain(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileBehaviorSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMaximumDistance = prop->cast_prop<yordle::data::prop::float32_prop>(1908713741u);
    if (ptr_mMaximumDistance != nullptr) {
        mMaximumDistance = ptr_mMaximumDistance->value;
    }

    auto ptr_mMinimumGapBetweenTerrainWalls = prop->cast_prop<yordle::data::prop::float32_prop>(3025224742u);
    if (ptr_mMinimumGapBetweenTerrainWalls != nullptr) {
        mMinimumGapBetweenTerrainWalls = ptr_mMinimumGapBetweenTerrainWalls->value;
    }

    auto ptr_mMaximumTerrainWallsToSkip = prop->cast_prop<yordle::data::prop::optional_prop>(3775348694u);
    if (ptr_mMaximumTerrainWallsToSkip != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(ptr_mMaximumTerrainWallsToSkip->value);
        if(ptr_entry != nullptr) {
            mMaximumTerrainWallsToSkip = ptr_entry->value;
        }
    }

    auto ptr_scanWidthOverride = prop->cast_prop<yordle::data::prop::optional_prop>(282150412u);
    if (ptr_scanWidthOverride != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_scanWidthOverride->value);
        if(ptr_entry != nullptr) {
            scanWidthOverride = ptr_entry->value;
        }
    }

    auto ptr_mTargeterDefinition = prop->cast_prop<yordle::data::prop::structure_prop>(3263115659u);
    if (ptr_mTargeterDefinition != nullptr) {
        mTargeterDefinition = yordle::data::meta::deserialize<yordle::data::meta::TargeterDefinitionSkipTerrain>(ptr_mTargeterDefinition, 3994921506u);
    }
}

yordle::data::meta::ScaleByScaleSkinCoef::ScaleByScaleSkinCoef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileBehaviorSpec(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::WidthPerSecond::WidthPerSecond(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileBehaviorSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mWidthPerSecond = prop->cast_prop<yordle::data::prop::float32_prop>(984461507u);
    if (ptr_mWidthPerSecond != nullptr) {
        mWidthPerSecond = ptr_mWidthPerSecond->value;
    }
}

yordle::data::meta::MissileTriggerSpec::MissileTriggerSpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileBehaviorSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mActions = prop->cast_prop<yordle::data::prop::set_prop>(991949763u);
    if (ptr_mActions != nullptr) {
        for (const auto &entry : ptr_mActions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mActions.emplace(yordle::data::meta::deserialize<yordle::data::meta::MissileTriggeredActionSpec>(ptr_entry, 1405067729u));
            }
        }
    }
}

yordle::data::meta::TriggerOnMovementComplete::TriggerOnMovementComplete(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggerSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDelay = prop->cast_prop<yordle::data::prop::int32_prop>(904417079u);
    if (ptr_mDelay != nullptr) {
        mDelay = ptr_mDelay->value;
    }
}

yordle::data::meta::TriggerOnDelay::TriggerOnDelay(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggerSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDelay = prop->cast_prop<yordle::data::prop::float32_prop>(904417079u);
    if (ptr_mDelay != nullptr) {
        mDelay = ptr_mDelay->value;
    }
}

yordle::data::meta::DelayStart::DelayStart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileBehaviorSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDelayTime = prop->cast_prop<yordle::data::prop::float32_prop>(3426884646u);
    if (ptr_mDelayTime != nullptr) {
        mDelayTime = ptr_mDelayTime->value;
    }
}

yordle::data::meta::x798277f::x798277f(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileBehaviorSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x5e19cde2 = prop->cast_prop<yordle::data::prop::float32_prop>(1578749410u);
    if (ptr_x5e19cde2 != nullptr) {
        x5e19cde2 = ptr_x5e19cde2->value;
    }

    auto ptr_x6bfae91c = prop->cast_prop<yordle::data::prop::uint32_prop>(1811605788u);
    if (ptr_x6bfae91c != nullptr) {
        x6bfae91c = ptr_x6bfae91c->value;
    }

    auto ptr_x754a85a6 = prop->cast_prop<yordle::data::prop::uint32_prop>(1967818150u);
    if (ptr_x754a85a6 != nullptr) {
        x754a85a6 = ptr_x754a85a6->value;
    }
}

yordle::data::meta::TriggerOnStart::TriggerOnStart(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggerSpec(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TriggerOnHit::TriggerOnHit(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggerSpec(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TriggerOnDistanceFromCaster::TriggerOnDistanceFromCaster(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggerSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDistance = prop->cast_prop<yordle::data::prop::float32_prop>(2863703955u);
    if (ptr_mDistance != nullptr) {
        mDistance = ptr_mDistance->value;
    }
}

yordle::data::meta::TriggerFromScript::TriggerFromScript(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggerSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTriggerName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1616616399u);
    if (ptr_mTriggerName != nullptr) {
        mTriggerName = ptr_mTriggerName->value;
    }

    auto ptr_mDelay = prop->cast_prop<yordle::data::prop::float32_prop>(904417079u);
    if (ptr_mDelay != nullptr) {
        mDelay = ptr_mDelay->value;
    }
}

yordle::data::meta::MissileTriggeredActionSpec::MissileTriggeredActionSpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::Cast::Cast(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggeredActionSpec(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::Destroy::Destroy(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggeredActionSpec(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ReturnToCaster::ReturnToCaster(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggeredActionSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPreserveSpeed = prop->cast_prop<yordle::data::prop::bool_prop>(2162022683u);
    if (ptr_mPreserveSpeed != nullptr) {
        mPreserveSpeed = ptr_mPreserveSpeed->value;
    }

    auto ptr_mOverrideSpec = prop->cast_prop<yordle::data::prop::structure_prop>(231640515u);
    if (ptr_mOverrideSpec != nullptr) {
        mOverrideSpec = yordle::data::meta::deserialize<yordle::data::meta::MissileMovementSpec>(ptr_mOverrideSpec, 1798110077u);
    }
}

yordle::data::meta::ClearAlreadyHitTracking::ClearAlreadyHitTracking(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggeredActionSpec(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::CallOnMissileBounce::CallOnMissileBounce(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggeredActionSpec(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ClearTargetAndKeepMoving::ClearTargetAndKeepMoving(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggeredActionSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mOverrideHeightAugment = prop->cast_prop<yordle::data::prop::optional_prop>(1145244202u);
    if (ptr_mOverrideHeightAugment != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_mOverrideHeightAugment->value);
        if(ptr_entry != nullptr) {
            mOverrideHeightAugment = ptr_entry->value;
        }
    }

    auto ptr_mOverrideRange = prop->cast_prop<yordle::data::prop::optional_prop>(3941935197u);
    if (ptr_mOverrideRange != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_mOverrideRange->value);
        if(ptr_entry != nullptr) {
            mOverrideRange = ptr_entry->value;
        }
    }

    auto ptr_mOverrideMovement = prop->cast_prop<yordle::data::prop::structure_prop>(4259506493u);
    if (ptr_mOverrideMovement != nullptr) {
        mOverrideMovement = yordle::data::meta::deserialize<yordle::data::meta::MissileMovementSpec>(ptr_mOverrideMovement, 1798110077u);
    }
}

yordle::data::meta::ChangeMissileSpeed::ChangeMissileSpeed(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggeredActionSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpeedChangeType = prop->cast_prop<yordle::data::prop::uint32_prop>(3437995983u);
    if (ptr_mSpeedChangeType != nullptr) {
        mSpeedChangeType = ptr_mSpeedChangeType->value;
    }

    auto ptr_mSpeedValue = prop->cast_prop<yordle::data::prop::float32_prop>(1555099728u);
    if (ptr_mSpeedValue != nullptr) {
        mSpeedValue = ptr_mSpeedValue->value;
    }
}

yordle::data::meta::ChangeTurnRadius::ChangeTurnRadius(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggeredActionSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x84bb076a = prop->cast_prop<yordle::data::prop::set_prop>(2226849642u);
    if (ptr_x84bb076a != nullptr) {
        for (const auto &entry : ptr_x84bb076a->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                x84bb076a.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ChangeHeightSolver::ChangeHeightSolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileTriggeredActionSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mOverrideHeightSolver = prop->cast_prop<yordle::data::prop::structure_prop>(1549368804u);
    if (ptr_mOverrideHeightSolver != nullptr) {
        mOverrideHeightSolver = yordle::data::meta::deserialize<yordle::data::meta::HeightSolverType>(ptr_mOverrideHeightSolver, 974318101u);
    }
}

yordle::data::meta::DestroyOnHit::DestroyOnHit(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileBehaviorSpec(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::DestroyOnMovementComplete::DestroyOnMovementComplete(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileBehaviorSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDelay = prop->cast_prop<yordle::data::prop::int32_prop>(904417079u);
    if (ptr_mDelay != nullptr) {
        mDelay = ptr_mDelay->value;
    }
}

yordle::data::meta::xe357c116::xe357c116(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileBehaviorSpec(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::CastOnHit::CastOnHit(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileBehaviorSpec(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::CastOnMovementComplete::CastOnMovementComplete(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileBehaviorSpec(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ReturnToCasterOnMovementComplete::ReturnToCasterOnMovementComplete(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileBehaviorSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPreserveSpeed = prop->cast_prop<yordle::data::prop::bool_prop>(2162022683u);
    if (ptr_mPreserveSpeed != nullptr) {
        mPreserveSpeed = ptr_mPreserveSpeed->value;
    }

    auto ptr_mOverrideSpec = prop->cast_prop<yordle::data::prop::structure_prop>(231640515u);
    if (ptr_mOverrideSpec != nullptr) {
        mOverrideSpec = yordle::data::meta::deserialize<yordle::data::meta::MissileMovementSpec>(ptr_mOverrideSpec, 1798110077u);
    }
}

yordle::data::meta::MissileGroupSpawnerSpec::MissileGroupSpawnerSpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mChildMissileSpell = prop->cast_prop<yordle::data::prop::reference_prop>(2196846212u);
    if (ptr_mChildMissileSpell != nullptr) {
        mChildMissileSpell = ptr_mChildMissileSpell->value;
    }
}

yordle::data::meta::HeightSolverType::HeightSolverType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::GravityHeightSolver::GravityHeightSolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : HeightSolverType(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mGravity = prop->cast_prop<yordle::data::prop::float32_prop>(444388102u);
    if (ptr_mGravity != nullptr) {
        mGravity = ptr_mGravity->value;
    }
}

yordle::data::meta::FollowTerrainHeightSolver::FollowTerrainHeightSolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : HeightSolverType(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mHeightOffset = prop->cast_prop<yordle::data::prop::float32_prop>(4160140816u);
    if (ptr_mHeightOffset != nullptr) {
        mHeightOffset = ptr_mHeightOffset->value;
    }

    auto ptr_mMaxSlope = prop->cast_prop<yordle::data::prop::float32_prop>(3821269113u);
    if (ptr_mMaxSlope != nullptr) {
        mMaxSlope = ptr_mMaxSlope->value;
    }
}

yordle::data::meta::BlendedLinearHeightSolver::BlendedLinearHeightSolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : HeightSolverType(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::SinusoidalHeightSolver::SinusoidalHeightSolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : HeightSolverType(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mVerticalOffset = prop->cast_prop<yordle::data::prop::float32_prop>(499930149u);
    if (ptr_mVerticalOffset != nullptr) {
        mVerticalOffset = ptr_mVerticalOffset->value;
    }

    auto ptr_mAmplitude = prop->cast_prop<yordle::data::prop::float32_prop>(2375976053u);
    if (ptr_mAmplitude != nullptr) {
        mAmplitude = ptr_mAmplitude->value;
    }

    auto ptr_mNumberOfPeriods = prop->cast_prop<yordle::data::prop::float32_prop>(2878240850u);
    if (ptr_mNumberOfPeriods != nullptr) {
        mNumberOfPeriods = ptr_mNumberOfPeriods->value;
    }
}

yordle::data::meta::CurveTheDifferenceHeightSolver::CurveTheDifferenceHeightSolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : HeightSolverType(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mInitialTargetHeightOffset = prop->cast_prop<yordle::data::prop::float32_prop>(2125539285u);
    if (ptr_mInitialTargetHeightOffset != nullptr) {
        mInitialTargetHeightOffset = ptr_mInitialTargetHeightOffset->value;
    }
}

yordle::data::meta::MissileMovementSpec::MissileMovementSpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mUseHeightOffsetAtEnd = prop->cast_prop<yordle::data::prop::bool_prop>(3600884823u);
    if (ptr_mUseHeightOffsetAtEnd != nullptr) {
        mUseHeightOffsetAtEnd = ptr_mUseHeightOffsetAtEnd->value;
    }

    auto ptr_mTracksTarget = prop->cast_prop<yordle::data::prop::bool_prop>(771053645u);
    if (ptr_mTracksTarget != nullptr) {
        mTracksTarget = ptr_mTracksTarget->value;
    }

    auto ptr_xaa44f99e = prop->cast_prop<yordle::data::prop::bool_prop>(2856647070u);
    if (ptr_xaa44f99e != nullptr) {
        xaa44f99e = ptr_xaa44f99e->value;
    }

    auto ptr_mTargetHeightAugment = prop->cast_prop<yordle::data::prop::float32_prop>(2429909213u);
    if (ptr_mTargetHeightAugment != nullptr) {
        mTargetHeightAugment = ptr_mTargetHeightAugment->value;
    }

    auto ptr_mOffsetInitialTargetHeight = prop->cast_prop<yordle::data::prop::float32_prop>(4061126383u);
    if (ptr_mOffsetInitialTargetHeight != nullptr) {
        mOffsetInitialTargetHeight = ptr_mOffsetInitialTargetHeight->value;
    }

    auto ptr_mStartBoneName = prop->cast_prop<yordle::data::prop::string_prop>(3095844977u);
    if (ptr_mStartBoneName != nullptr) {
        mStartBoneName = ptr_mStartBoneName->value;
    }

    auto ptr_xa6cb1fa4 = prop->cast_prop<yordle::data::prop::map_prop>(2798329764u);
    if (ptr_xa6cb1fa4 != nullptr) {
        for (const auto &pair : ptr_xa6cb1fa4->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                xa6cb1fa4[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_mTargetBoneName = prop->cast_prop<yordle::data::prop::string_prop>(2512086968u);
    if (ptr_mTargetBoneName != nullptr) {
        mTargetBoneName = ptr_mTargetBoneName->value;
    }

    auto ptr_mStartDelay = prop->cast_prop<yordle::data::prop::float32_prop>(2799230803u);
    if (ptr_mStartDelay != nullptr) {
        mStartDelay = ptr_mStartDelay->value;
    }
}

yordle::data::meta::CircleMovement::CircleMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileMovementSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mRadialVelocity = prop->cast_prop<yordle::data::prop::float32_prop>(2374803676u);
    if (ptr_mRadialVelocity != nullptr) {
        mRadialVelocity = ptr_mRadialVelocity->value;
    }

    auto ptr_mAngularVelocity = prop->cast_prop<yordle::data::prop::float32_prop>(984266661u);
    if (ptr_mAngularVelocity != nullptr) {
        mAngularVelocity = ptr_mAngularVelocity->value;
    }

    auto ptr_mLinearVelocity = prop->cast_prop<yordle::data::prop::float32_prop>(2151814918u);
    if (ptr_mLinearVelocity != nullptr) {
        mLinearVelocity = ptr_mLinearVelocity->value;
    }

    auto ptr_mLifetime = prop->cast_prop<yordle::data::prop::float32_prop>(3878970827u);
    if (ptr_mLifetime != nullptr) {
        mLifetime = ptr_mLifetime->value;
    }
}

yordle::data::meta::SyncCircleMovement::SyncCircleMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileMovementSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAngularVelocity = prop->cast_prop<yordle::data::prop::float32_prop>(984266661u);
    if (ptr_mAngularVelocity != nullptr) {
        mAngularVelocity = ptr_mAngularVelocity->value;
    }

    auto ptr_mLifetime = prop->cast_prop<yordle::data::prop::float32_prop>(3878970827u);
    if (ptr_mLifetime != nullptr) {
        mLifetime = ptr_mLifetime->value;
    }

    auto ptr_x2630302a = prop->cast_prop<yordle::data::prop::uint8_prop>(640692266u);
    if (ptr_x2630302a != nullptr) {
        x2630302a = ptr_x2630302a->value;
    }

    auto ptr_x16d0a895 = prop->cast_prop<yordle::data::prop::bool_prop>(382773397u);
    if (ptr_x16d0a895 != nullptr) {
        x16d0a895 = ptr_x16d0a895->value;
    }
}

yordle::data::meta::NullMovement::NullMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileMovementSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mWaitForChildren = prop->cast_prop<yordle::data::prop::bool_prop>(3875219371u);
    if (ptr_mWaitForChildren != nullptr) {
        mWaitForChildren = ptr_mWaitForChildren->value;
    }

    auto ptr_mDelayTime = prop->cast_prop<yordle::data::prop::float32_prop>(3426884646u);
    if (ptr_mDelayTime != nullptr) {
        mDelayTime = ptr_mDelayTime->value;
    }
}

yordle::data::meta::AcceleratingMovement::AcceleratingMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileMovementSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mInferDirectionFromFacingIfNeeded = prop->cast_prop<yordle::data::prop::bool_prop>(2046346341u);
    if (ptr_mInferDirectionFromFacingIfNeeded != nullptr) {
        mInferDirectionFromFacingIfNeeded = ptr_mInferDirectionFromFacingIfNeeded->value;
    }

    auto ptr_mProjectTargetToCastRange = prop->cast_prop<yordle::data::prop::bool_prop>(665175815u);
    if (ptr_mProjectTargetToCastRange != nullptr) {
        mProjectTargetToCastRange = ptr_mProjectTargetToCastRange->value;
    }

    auto ptr_mUseGroundHeightAtTarget = prop->cast_prop<yordle::data::prop::bool_prop>(1847500467u);
    if (ptr_mUseGroundHeightAtTarget != nullptr) {
        mUseGroundHeightAtTarget = ptr_mUseGroundHeightAtTarget->value;
    }

    auto ptr_mAcceleration = prop->cast_prop<yordle::data::prop::float32_prop>(2197761356u);
    if (ptr_mAcceleration != nullptr) {
        mAcceleration = ptr_mAcceleration->value;
    }

    auto ptr_mMinSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(3364125375u);
    if (ptr_mMinSpeed != nullptr) {
        mMinSpeed = ptr_mMinSpeed->value;
    }

    auto ptr_mMaxSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(4018095465u);
    if (ptr_mMaxSpeed != nullptr) {
        mMaxSpeed = ptr_mMaxSpeed->value;
    }

    auto ptr_mInitialSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(2196887431u);
    if (ptr_mInitialSpeed != nullptr) {
        mInitialSpeed = ptr_mInitialSpeed->value;
    }
}

yordle::data::meta::DecelToLocationMovement::DecelToLocationMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : AcceleratingMovement(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::FixedTimeMovement::FixedTimeMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileMovementSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mInferDirectionFromFacingIfNeeded = prop->cast_prop<yordle::data::prop::bool_prop>(2046346341u);
    if (ptr_mInferDirectionFromFacingIfNeeded != nullptr) {
        mInferDirectionFromFacingIfNeeded = ptr_mInferDirectionFromFacingIfNeeded->value;
    }

    auto ptr_mProjectTargetToCastRange = prop->cast_prop<yordle::data::prop::bool_prop>(665175815u);
    if (ptr_mProjectTargetToCastRange != nullptr) {
        mProjectTargetToCastRange = ptr_mProjectTargetToCastRange->value;
    }

    auto ptr_mUseGroundHeightAtTarget = prop->cast_prop<yordle::data::prop::bool_prop>(1847500467u);
    if (ptr_mUseGroundHeightAtTarget != nullptr) {
        mUseGroundHeightAtTarget = ptr_mUseGroundHeightAtTarget->value;
    }

    auto ptr_mTravelTime = prop->cast_prop<yordle::data::prop::float32_prop>(2749650285u);
    if (ptr_mTravelTime != nullptr) {
        mTravelTime = ptr_mTravelTime->value;
    }
}

yordle::data::meta::FixedSpeedMovement::FixedSpeedMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileMovementSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mInferDirectionFromFacingIfNeeded = prop->cast_prop<yordle::data::prop::bool_prop>(2046346341u);
    if (ptr_mInferDirectionFromFacingIfNeeded != nullptr) {
        mInferDirectionFromFacingIfNeeded = ptr_mInferDirectionFromFacingIfNeeded->value;
    }

    auto ptr_mProjectTargetToCastRange = prop->cast_prop<yordle::data::prop::bool_prop>(665175815u);
    if (ptr_mProjectTargetToCastRange != nullptr) {
        mProjectTargetToCastRange = ptr_mProjectTargetToCastRange->value;
    }

    auto ptr_mUseGroundHeightAtTarget = prop->cast_prop<yordle::data::prop::bool_prop>(1847500467u);
    if (ptr_mUseGroundHeightAtTarget != nullptr) {
        mUseGroundHeightAtTarget = ptr_mUseGroundHeightAtTarget->value;
    }

    auto ptr_mSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(1287742835u);
    if (ptr_mSpeed != nullptr) {
        mSpeed = ptr_mSpeed->value;
    }
}

yordle::data::meta::PhysicsMovement::PhysicsMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileMovementSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mLifetime = prop->cast_prop<yordle::data::prop::float32_prop>(3878970827u);
    if (ptr_mLifetime != nullptr) {
        mLifetime = ptr_mLifetime->value;
    }

    auto ptr_mInitialSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(2196887431u);
    if (ptr_mInitialSpeed != nullptr) {
        mInitialSpeed = ptr_mInitialSpeed->value;
    }

    auto ptr_mDrag = prop->cast_prop<yordle::data::prop::float32_prop>(856519594u);
    if (ptr_mDrag != nullptr) {
        mDrag = ptr_mDrag->value;
    }

    auto ptr_mWallSliding = prop->cast_prop<yordle::data::prop::bool_prop>(2468250002u);
    if (ptr_mWallSliding != nullptr) {
        mWallSliding = ptr_mWallSliding->value;
    }

    auto ptr_xca771747 = prop->cast_prop<yordle::data::prop::float32_prop>(3396802375u);
    if (ptr_xca771747 != nullptr) {
        xca771747 = ptr_xca771747->value;
    }
}

yordle::data::meta::TrackMouseMovement::TrackMouseMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileMovementSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x84bb076a = prop->cast_prop<yordle::data::prop::set_prop>(2226849642u);
    if (ptr_x84bb076a != nullptr) {
        for (const auto &entry : ptr_x84bb076a->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                x84bb076a.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mInferDirectionFromFacingIfNeeded = prop->cast_prop<yordle::data::prop::bool_prop>(2046346341u);
    if (ptr_mInferDirectionFromFacingIfNeeded != nullptr) {
        mInferDirectionFromFacingIfNeeded = ptr_mInferDirectionFromFacingIfNeeded->value;
    }

    auto ptr_mProjectTargetToCastRange = prop->cast_prop<yordle::data::prop::bool_prop>(665175815u);
    if (ptr_mProjectTargetToCastRange != nullptr) {
        mProjectTargetToCastRange = ptr_mProjectTargetToCastRange->value;
    }

    auto ptr_mUseGroundHeightAtTarget = prop->cast_prop<yordle::data::prop::bool_prop>(1847500467u);
    if (ptr_mUseGroundHeightAtTarget != nullptr) {
        mUseGroundHeightAtTarget = ptr_mUseGroundHeightAtTarget->value;
    }

    auto ptr_mAcceleration = prop->cast_prop<yordle::data::prop::float32_prop>(2197761356u);
    if (ptr_mAcceleration != nullptr) {
        mAcceleration = ptr_mAcceleration->value;
    }

    auto ptr_mMinSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(3364125375u);
    if (ptr_mMinSpeed != nullptr) {
        mMinSpeed = ptr_mMinSpeed->value;
    }

    auto ptr_mMaxSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(4018095465u);
    if (ptr_mMaxSpeed != nullptr) {
        mMaxSpeed = ptr_mMaxSpeed->value;
    }

    auto ptr_mInitialSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(2196887431u);
    if (ptr_mInitialSpeed != nullptr) {
        mInitialSpeed = ptr_mInitialSpeed->value;
    }

    auto ptr_x604989cf = prop->cast_prop<yordle::data::prop::float32_prop>(1615432143u);
    if (ptr_x604989cf != nullptr) {
        x604989cf = ptr_x604989cf->value;
    }
}

yordle::data::meta::GenericSplineMovementSpec::GenericSplineMovementSpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileMovementSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSplineInfo = prop->cast_prop<yordle::data::prop::structure_prop>(3943953505u);
    if (ptr_mSplineInfo != nullptr) {
        mSplineInfo = yordle::data::meta::deserialize<yordle::data::meta::ISplineInfo>(ptr_mSplineInfo, 771419981u);
    }

    auto ptr_mUseMissilePositionAsOrigin = prop->cast_prop<yordle::data::prop::bool_prop>(542848600u);
    if (ptr_mUseMissilePositionAsOrigin != nullptr) {
        mUseMissilePositionAsOrigin = ptr_mUseMissilePositionAsOrigin->value;
    }
}

yordle::data::meta::FixedTimeSplineMovement::FixedTimeSplineMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GenericSplineMovementSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTravelTime = prop->cast_prop<yordle::data::prop::float32_prop>(2749650285u);
    if (ptr_mTravelTime != nullptr) {
        mTravelTime = ptr_mTravelTime->value;
    }
}

yordle::data::meta::FixedSpeedSplineMovement::FixedSpeedSplineMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GenericSplineMovementSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(1287742835u);
    if (ptr_mSpeed != nullptr) {
        mSpeed = ptr_mSpeed->value;
    }
}

yordle::data::meta::WallFollowMovement::WallFollowMovement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileMovementSpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mInferDirectionFromFacingIfNeeded = prop->cast_prop<yordle::data::prop::bool_prop>(2046346341u);
    if (ptr_mInferDirectionFromFacingIfNeeded != nullptr) {
        mInferDirectionFromFacingIfNeeded = ptr_mInferDirectionFromFacingIfNeeded->value;
    }

    auto ptr_mProjectTargetToCastRange = prop->cast_prop<yordle::data::prop::bool_prop>(665175815u);
    if (ptr_mProjectTargetToCastRange != nullptr) {
        mProjectTargetToCastRange = ptr_mProjectTargetToCastRange->value;
    }

    auto ptr_mUseGroundHeightAtTarget = prop->cast_prop<yordle::data::prop::bool_prop>(1847500467u);
    if (ptr_mUseGroundHeightAtTarget != nullptr) {
        mUseGroundHeightAtTarget = ptr_mUseGroundHeightAtTarget->value;
    }

    auto ptr_mSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(1287742835u);
    if (ptr_mSpeed != nullptr) {
        mSpeed = ptr_mSpeed->value;
    }

    auto ptr_mCounterClockwise = prop->cast_prop<yordle::data::prop::bool_prop>(1289482586u);
    if (ptr_mCounterClockwise != nullptr) {
        mCounterClockwise = ptr_mCounterClockwise->value;
    }

    auto ptr_mWallOffset = prop->cast_prop<yordle::data::prop::float32_prop>(2261403255u);
    if (ptr_mWallOffset != nullptr) {
        mWallOffset = ptr_mWallOffset->value;
    }

    auto ptr_mWallLength = prop->cast_prop<yordle::data::prop::float32_prop>(3085905440u);
    if (ptr_mWallLength != nullptr) {
        mWallLength = ptr_mWallLength->value;
    }

    auto ptr_mWallSearchRadius = prop->cast_prop<yordle::data::prop::float32_prop>(3936574710u);
    if (ptr_mWallSearchRadius != nullptr) {
        mWallSearchRadius = ptr_mWallSearchRadius->value;
    }

    auto ptr_xbcff2ee1 = prop->cast_prop<yordle::data::prop::bool_prop>(3170840289u);
    if (ptr_xbcff2ee1 != nullptr) {
        xbcff2ee1 = ptr_xbcff2ee1->value;
    }

    auto ptr_x38872364 = prop->cast_prop<yordle::data::prop::bool_prop>(948380516u);
    if (ptr_x38872364 != nullptr) {
        x38872364 = ptr_x38872364->value;
    }
}

yordle::data::meta::VerticalFacingType::VerticalFacingType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VeritcalFacingMatchVelocity::VeritcalFacingMatchVelocity(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VerticalFacingType(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VerticalFacingFaceTarget::VerticalFacingFaceTarget(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VerticalFacingType(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::MissileVisibilitySpec::MissileVisibilitySpec(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTargetControlsVisibility = prop->cast_prop<yordle::data::prop::bool_prop>(1470622879u);
    if (ptr_mTargetControlsVisibility != nullptr) {
        mTargetControlsVisibility = ptr_mTargetControlsVisibility->value;
    }

    auto ptr_mVisibleToOwnerTeamOnly = prop->cast_prop<yordle::data::prop::bool_prop>(2217819237u);
    if (ptr_mVisibleToOwnerTeamOnly != nullptr) {
        mVisibleToOwnerTeamOnly = ptr_mVisibleToOwnerTeamOnly->value;
    }

    auto ptr_mPerceptionBubbleRadius = prop->cast_prop<yordle::data::prop::float32_prop>(20532479u);
    if (ptr_mPerceptionBubbleRadius != nullptr) {
        mPerceptionBubbleRadius = ptr_mPerceptionBubbleRadius->value;
    }

    auto ptr_xbb639057 = prop->cast_prop<yordle::data::prop::float32_prop>(3143864407u);
    if (ptr_xbb639057 != nullptr) {
        xbb639057 = ptr_xbb639057->value;
    }
}

yordle::data::meta::Defaultvisibility::Defaultvisibility(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileVisibilitySpec(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::EnterFOWVisibility::EnterFOWVisibility(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MissileVisibilitySpec(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMissileClientExitFOWPrediction = prop->cast_prop<yordle::data::prop::bool_prop>(3068490952u);
    if (ptr_mMissileClientExitFOWPrediction != nullptr) {
        mMissileClientExitFOWPrediction = ptr_mMissileClientExitFOWPrediction->value;
    }

    auto ptr_mMissileClientWaitForTargetUpdateBeforeMissileShow = prop->cast_prop<yordle::data::prop::bool_prop>(2980651371u);
    if (ptr_mMissileClientWaitForTargetUpdateBeforeMissileShow != nullptr) {
        mMissileClientWaitForTargetUpdateBeforeMissileShow = ptr_mMissileClientWaitForTargetUpdateBeforeMissileShow->value;
    }
}

yordle::data::meta::MissileAttachedTargetingDefinition::MissileAttachedTargetingDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEndPositionType = prop->cast_prop<yordle::data::prop::uint8_prop>(2179411650u);
    if (ptr_mEndPositionType != nullptr) {
        mEndPositionType = ptr_mEndPositionType->value;
    }

    auto ptr_mLineTextureName = prop->cast_prop<yordle::data::prop::string_prop>(838968470u);
    if (ptr_mLineTextureName != nullptr) {
        mLineTextureName = ptr_mLineTextureName->value;
    }

    auto ptr_mLineTextureWidth = prop->cast_prop<yordle::data::prop::float32_prop>(1708815855u);
    if (ptr_mLineTextureWidth != nullptr) {
        mLineTextureWidth = ptr_mLineTextureWidth->value;
    }

    auto ptr_mLineEndTextureName = prop->cast_prop<yordle::data::prop::string_prop>(3363663597u);
    if (ptr_mLineEndTextureName != nullptr) {
        mLineEndTextureName = ptr_mLineEndTextureName->value;
    }

    auto ptr_mLineEndTextureWidth = prop->cast_prop<yordle::data::prop::float32_prop>(4203743114u);
    if (ptr_mLineEndTextureWidth != nullptr) {
        mLineEndTextureWidth = ptr_mLineEndTextureWidth->value;
    }

    auto ptr_mLineEndTextureHeight = prop->cast_prop<yordle::data::prop::float32_prop>(3095097893u);
    if (ptr_mLineEndTextureHeight != nullptr) {
        mLineEndTextureHeight = ptr_mLineEndTextureHeight->value;
    }
}

yordle::data::meta::AISpellData::AISpellData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSendAIEvent = prop->cast_prop<yordle::data::prop::bool_prop>(1431369420u);
    if (ptr_mSendAIEvent != nullptr) {
        mSendAIEvent = ptr_mSendAIEvent->value;
    }

    auto ptr_mRadius = prop->cast_prop<yordle::data::prop::float32_prop>(1679911566u);
    if (ptr_mRadius != nullptr) {
        mRadius = ptr_mRadius->value;
    }

    auto ptr_mLifetime = prop->cast_prop<yordle::data::prop::float32_prop>(3878970827u);
    if (ptr_mLifetime != nullptr) {
        mLifetime = ptr_mLifetime->value;
    }

    auto ptr_mRange = prop->cast_prop<yordle::data::prop::float32_prop>(1741401325u);
    if (ptr_mRange != nullptr) {
        mRange = ptr_mRange->value;
    }

    auto ptr_mSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(1287742835u);
    if (ptr_mSpeed != nullptr) {
        mSpeed = ptr_mSpeed->value;
    }

    auto ptr_mEndOnly = prop->cast_prop<yordle::data::prop::bool_prop>(3815827279u);
    if (ptr_mEndOnly != nullptr) {
        mEndOnly = ptr_mEndOnly->value;
    }

    auto ptr_mBlockLevel = prop->cast_prop<yordle::data::prop::uint8_prop>(2990597217u);
    if (ptr_mBlockLevel != nullptr) {
        mBlockLevel = ptr_mBlockLevel->value;
    }
}

yordle::data::meta::SpellEffectAmount::SpellEffectAmount(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::set_prop>(1113510858u);
    if (ptr_value != nullptr) {
        for (const auto &entry : ptr_value->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                value.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::SpellDataValue::SpellDataValue(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mValues = prop->cast_prop<yordle::data::prop::set_prop>(610995598u);
    if (ptr_mValues != nullptr) {
        for (const auto &entry : ptr_mValues->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mValues.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::SpellDataValueVector::SpellDataValueVector(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_SpellDataValues = prop->cast_prop<yordle::data::prop::set_prop>(1392371535u);
    if (ptr_SpellDataValues != nullptr) {
        for (const auto &entry : ptr_SpellDataValues->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                SpellDataValues.emplace(yordle::data::meta::deserialize<yordle::data::meta::SpellDataValue>(ptr_entry, 5245094u));
            }
        }
    }
}

yordle::data::meta::PlatformSpellInfo::PlatformSpellInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAvatarLevelRequired = prop->cast_prop<yordle::data::prop::int32_prop>(2455804356u);
    if (ptr_mAvatarLevelRequired != nullptr) {
        mAvatarLevelRequired = ptr_mAvatarLevelRequired->value;
    }

    auto ptr_mSpellID = prop->cast_prop<yordle::data::prop::int32_prop>(3985478495u);
    if (ptr_mSpellID != nullptr) {
        mSpellID = ptr_mSpellID->value;
    }

    auto ptr_mPlatformEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(4218525160u);
    if (ptr_mPlatformEnabled != nullptr) {
        mPlatformEnabled = ptr_mPlatformEnabled->value;
    }

    auto ptr_mGameModes = prop->cast_prop<yordle::data::prop::set_prop>(879198374u);
    if (ptr_mGameModes != nullptr) {
        for (const auto &entry : ptr_mGameModes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mGameModes.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ISplineInfo::ISplineInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStartPositionOffset = prop->cast_prop<yordle::data::prop::vector_prop>(1590625292u);
    if (ptr_mStartPositionOffset != nullptr) {
        mStartPositionOffset = ptr_mStartPositionOffset->value;
    }

    auto ptr_mUseMissilePositionAsOrigin = prop->cast_prop<yordle::data::prop::bool_prop>(542848600u);
    if (ptr_mUseMissilePositionAsOrigin != nullptr) {
        mUseMissilePositionAsOrigin = ptr_mUseMissilePositionAsOrigin->value;
    }
}

yordle::data::meta::HermiteSplineInfo::HermiteSplineInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ISplineInfo(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mControlPoint1 = prop->cast_prop<yordle::data::prop::vector_prop>(2818679128u);
    if (ptr_mControlPoint1 != nullptr) {
        mControlPoint1 = ptr_mControlPoint1->value;
    }

    auto ptr_mControlPoint2 = prop->cast_prop<yordle::data::prop::vector_prop>(2869011985u);
    if (ptr_mControlPoint2 != nullptr) {
        mControlPoint2 = ptr_mControlPoint2->value;
    }
}

yordle::data::meta::OverrideAttackTimeData::OverrideAttackTimeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x20991541 = prop->cast_prop<yordle::data::prop::structure_prop>(546903361u);
    if (ptr_x20991541 != nullptr) {
        x20991541 = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculation>(ptr_x20991541, 389493299u);
    }

    auto ptr_mCastTimePercent = prop->cast_prop<yordle::data::prop::float32_prop>(2238351055u);
    if (ptr_mCastTimePercent != nullptr) {
        mCastTimePercent = ptr_mCastTimePercent->value;
    }
}

yordle::data::meta::UseAutoattackCastTimeData::UseAutoattackCastTimeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAutoattackCastTimeCalculation = prop->cast_prop<yordle::data::prop::structure_prop>(1559208202u);
    if (ptr_mAutoattackCastTimeCalculation != nullptr) {
        mAutoattackCastTimeCalculation = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculation>(ptr_mAutoattackCastTimeCalculation, 389493299u);
    }

    auto ptr_x862fbe94 = prop->cast_prop<yordle::data::prop::bool_prop>(2251275924u);
    if (ptr_x862fbe94 != nullptr) {
        x862fbe94 = ptr_x862fbe94->value;
    }
}

yordle::data::meta::SpellLockDeltaTimeData::SpellLockDeltaTimeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSpellLockDeltaTimeCalculation = prop->cast_prop<yordle::data::prop::structure_prop>(3257162073u);
    if (ptr_mSpellLockDeltaTimeCalculation != nullptr) {
        mSpellLockDeltaTimeCalculation = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculation>(ptr_mSpellLockDeltaTimeCalculation, 389493299u);
    }
}

yordle::data::meta::x7a9e7d89::x7a9e7d89(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x55205acb = prop->cast_prop<yordle::data::prop::float32_prop>(1428183755u);
    if (ptr_x55205acb != nullptr) {
        x55205acb = ptr_x55205acb->value;
    }

    auto ptr_x166d5141 = prop->cast_prop<yordle::data::prop::set_prop>(376262977u);
    if (ptr_x166d5141 != nullptr) {
        for (const auto &entry : ptr_x166d5141->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                x166d5141.emplace(yordle::data::meta::deserialize<yordle::data::meta::ICastRequirement>(ptr_entry, 1550969638u));
            }
        }
    }

    auto ptr_x175e6650 = prop->cast_prop<yordle::data::prop::set_prop>(392062544u);
    if (ptr_x175e6650 != nullptr) {
        for (const auto &entry : ptr_x175e6650->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                x175e6650.emplace(yordle::data::meta::deserialize<yordle::data::meta::ICastRequirement>(ptr_entry, 1550969638u));
            }
        }
    }

    auto ptr_xda83e690 = prop->cast_prop<yordle::data::prop::bool_prop>(3666077328u);
    if (ptr_xda83e690 != nullptr) {
        xda83e690 = ptr_xda83e690->value;
    }

    auto ptr_mAffectsTypeOverride = prop->cast_prop<yordle::data::prop::uint32_prop>(2718222602u);
    if (ptr_mAffectsTypeOverride != nullptr) {
        mAffectsTypeOverride = ptr_mAffectsTypeOverride->value;
    }

    auto ptr_mAffectsStatusOverride = prop->cast_prop<yordle::data::prop::uint32_prop>(1181323540u);
    if (ptr_mAffectsStatusOverride != nullptr) {
        mAffectsStatusOverride = ptr_mAffectsStatusOverride->value;
    }
}

yordle::data::meta::AlternateSpellAssets::AlternateSpellAssets(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAnimationName = prop->cast_prop<yordle::data::prop::string_prop>(4224806837u);
    if (ptr_mAnimationName != nullptr) {
        mAnimationName = ptr_mAnimationName->value;
    }

    auto ptr_mAnimationLoopName = prop->cast_prop<yordle::data::prop::string_prop>(232091943u);
    if (ptr_mAnimationLoopName != nullptr) {
        mAnimationLoopName = ptr_mAnimationLoopName->value;
    }

    auto ptr_mAnimationWinddownName = prop->cast_prop<yordle::data::prop::string_prop>(4009553947u);
    if (ptr_mAnimationWinddownName != nullptr) {
        mAnimationWinddownName = ptr_mAnimationWinddownName->value;
    }

    auto ptr_mAnimationLeadOutName = prop->cast_prop<yordle::data::prop::string_prop>(3242492963u);
    if (ptr_mAnimationLeadOutName != nullptr) {
        mAnimationLeadOutName = ptr_mAnimationLeadOutName->value;
    }

    auto ptr_mUseAnimatorFramerate = prop->cast_prop<yordle::data::prop::bool_prop>(2883554725u);
    if (ptr_mUseAnimatorFramerate != nullptr) {
        mUseAnimatorFramerate = ptr_mUseAnimatorFramerate->value;
    }

    auto ptr_mHitEffectOrientType = prop->cast_prop<yordle::data::prop::uint32_prop>(597649493u);
    if (ptr_mHitEffectOrientType != nullptr) {
        mHitEffectOrientType = ptr_mHitEffectOrientType->value;
    }

    auto ptr_mHaveHitEffect = prop->cast_prop<yordle::data::prop::bool_prop>(3054978970u);
    if (ptr_mHaveHitEffect != nullptr) {
        mHaveHitEffect = ptr_mHaveHitEffect->value;
    }

    auto ptr_mHaveHitBone = prop->cast_prop<yordle::data::prop::bool_prop>(1645205029u);
    if (ptr_mHaveHitBone != nullptr) {
        mHaveHitBone = ptr_mHaveHitBone->value;
    }

    auto ptr_mHitBoneName = prop->cast_prop<yordle::data::prop::string_prop>(1987442212u);
    if (ptr_mHitBoneName != nullptr) {
        mHitBoneName = ptr_mHitBoneName->value;
    }

    auto ptr_mHitEffectKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2073816859u);
    if (ptr_mHitEffectKey != nullptr) {
        mHitEffectKey = ptr_mHitEffectKey->value;
    }

    auto ptr_mHitEffectName = prop->cast_prop<yordle::data::prop::string_prop>(3229736615u);
    if (ptr_mHitEffectName != nullptr) {
        mHitEffectName = ptr_mHitEffectName->value;
    }

    auto ptr_mHitEffectPlayerKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1033543528u);
    if (ptr_mHitEffectPlayerKey != nullptr) {
        mHitEffectPlayerKey = ptr_mHitEffectPlayerKey->value;
    }

    auto ptr_mHitEffectPlayerName = prop->cast_prop<yordle::data::prop::string_prop>(3753364890u);
    if (ptr_mHitEffectPlayerName != nullptr) {
        mHitEffectPlayerName = ptr_mHitEffectPlayerName->value;
    }

    auto ptr_mAfterEffectKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3602710262u);
    if (ptr_mAfterEffectKey != nullptr) {
        mAfterEffectKey = ptr_mAfterEffectKey->value;
    }

    auto ptr_mAfterEffectName = prop->cast_prop<yordle::data::prop::string_prop>(2538046572u);
    if (ptr_mAfterEffectName != nullptr) {
        mAfterEffectName = ptr_mAfterEffectName->value;
    }
}

yordle::data::meta::SpellDataResource::SpellDataResource(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_flags = prop->cast_prop<yordle::data::prop::uint32_prop>(2624027180u);
    if (ptr_flags != nullptr) {
        flags = ptr_flags->value;
    }

    auto ptr_mAffectsTypeFlags = prop->cast_prop<yordle::data::prop::uint32_prop>(3975411853u);
    if (ptr_mAffectsTypeFlags != nullptr) {
        mAffectsTypeFlags = ptr_mAffectsTypeFlags->value;
    }

    auto ptr_mAffectsStatusFlags = prop->cast_prop<yordle::data::prop::uint32_prop>(2434399679u);
    if (ptr_mAffectsStatusFlags != nullptr) {
        mAffectsStatusFlags = ptr_mAffectsStatusFlags->value;
    }

    auto ptr_mRequiredUnitTags = prop->cast_prop<yordle::data::prop::inline_structure_prop>(990703966u);
    if (ptr_mRequiredUnitTags != nullptr) {
        mRequiredUnitTags = yordle::data::meta::deserialize<yordle::data::meta::ObjectTags>(ptr_mRequiredUnitTags, 622921539u);
    }

    auto ptr_mExcludedUnitTags = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2460402589u);
    if (ptr_mExcludedUnitTags != nullptr) {
        mExcludedUnitTags = yordle::data::meta::deserialize<yordle::data::meta::ObjectTags>(ptr_mExcludedUnitTags, 622921539u);
    }

    auto ptr_mCastRequirementsCaster = prop->cast_prop<yordle::data::prop::set_prop>(934336299u);
    if (ptr_mCastRequirementsCaster != nullptr) {
        for (const auto &entry : ptr_mCastRequirementsCaster->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mCastRequirementsCaster.emplace(yordle::data::meta::deserialize<yordle::data::meta::ICastRequirement>(ptr_entry, 1550969638u));
            }
        }
    }

    auto ptr_mCastRequirementsTarget = prop->cast_prop<yordle::data::prop::set_prop>(3251632550u);
    if (ptr_mCastRequirementsTarget != nullptr) {
        for (const auto &entry : ptr_mCastRequirementsTarget->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mCastRequirementsTarget.emplace(yordle::data::meta::deserialize<yordle::data::meta::ICastRequirement>(ptr_entry, 1550969638u));
            }
        }
    }

    auto ptr_mPlatformSpellInfo = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2500445979u);
    if (ptr_mPlatformSpellInfo != nullptr) {
        mPlatformSpellInfo = yordle::data::meta::deserialize<yordle::data::meta::PlatformSpellInfo>(ptr_mPlatformSpellInfo, 1523572560u);
    }

    auto ptr_mAlternateName = prop->cast_prop<yordle::data::prop::string_prop>(1152903389u);
    if (ptr_mAlternateName != nullptr) {
        mAlternateName = ptr_mAlternateName->value;
    }

    auto ptr_mSpellTags = prop->cast_prop<yordle::data::prop::set_prop>(1042209755u);
    if (ptr_mSpellTags != nullptr) {
        for (const auto &entry : ptr_mSpellTags->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mSpellTags.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mEffectAmount = prop->cast_prop<yordle::data::prop::set_prop>(622481957u);
    if (ptr_mEffectAmount != nullptr) {
        for (const auto &entry : ptr_mEffectAmount->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mEffectAmount.emplace(yordle::data::meta::deserialize<yordle::data::meta::SpellEffectAmount>(ptr_entry, 2463406204u));
            }
        }
    }

    auto ptr_mDataValues = prop->cast_prop<yordle::data::prop::set_prop>(525148326u);
    if (ptr_mDataValues != nullptr) {
        for (const auto &entry : ptr_mDataValues->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mDataValues.emplace(yordle::data::meta::deserialize<yordle::data::meta::SpellDataValue>(ptr_entry, 5245094u));
            }
        }
    }

    auto ptr_xfb56608c = prop->cast_prop<yordle::data::prop::map_prop>(4216742028u);
    if (ptr_xfb56608c != nullptr) {
        for (const auto &pair : ptr_xfb56608c->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                xfb56608c[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::SpellDataValueVector>(ptr_value, 1798273677u);
            }
        }
    }

    auto ptr_mSpellCalculations = prop->cast_prop<yordle::data::prop::map_prop>(2488738436u);
    if (ptr_mSpellCalculations != nullptr) {
        for (const auto &pair : ptr_mSpellCalculations->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mSpellCalculations[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::IGameCalculation>(ptr_value, 389493299u);
            }
        }
    }

    auto ptr_mCoefficient = prop->cast_prop<yordle::data::prop::float32_prop>(693905545u);
    if (ptr_mCoefficient != nullptr) {
        mCoefficient = ptr_mCoefficient->value;
    }

    auto ptr_mCoefficient2 = prop->cast_prop<yordle::data::prop::float32_prop>(3608419937u);
    if (ptr_mCoefficient2 != nullptr) {
        mCoefficient2 = ptr_mCoefficient2->value;
    }

    auto ptr_mAlternateSpellAssets = prop->cast_prop<yordle::data::prop::set_prop>(3464567601u);
    if (ptr_mAlternateSpellAssets != nullptr) {
        for (const auto &entry : ptr_mAlternateSpellAssets->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mAlternateSpellAssets.emplace(yordle::data::meta::deserialize<yordle::data::meta::AlternateSpellAssets>(ptr_entry, 609301268u));
            }
        }
    }

    auto ptr_mAnimationName = prop->cast_prop<yordle::data::prop::string_prop>(4224806837u);
    if (ptr_mAnimationName != nullptr) {
        mAnimationName = ptr_mAnimationName->value;
    }

    auto ptr_mAnimationLoopName = prop->cast_prop<yordle::data::prop::string_prop>(232091943u);
    if (ptr_mAnimationLoopName != nullptr) {
        mAnimationLoopName = ptr_mAnimationLoopName->value;
    }

    auto ptr_mAnimationWinddownName = prop->cast_prop<yordle::data::prop::string_prop>(4009553947u);
    if (ptr_mAnimationWinddownName != nullptr) {
        mAnimationWinddownName = ptr_mAnimationWinddownName->value;
    }

    auto ptr_mAnimationLeadOutName = prop->cast_prop<yordle::data::prop::string_prop>(3242492963u);
    if (ptr_mAnimationLeadOutName != nullptr) {
        mAnimationLeadOutName = ptr_mAnimationLeadOutName->value;
    }

    auto ptr_mImgIconName = prop->cast_prop<yordle::data::prop::set_prop>(4007034069u);
    if (ptr_mImgIconName != nullptr) {
        for (const auto &entry : ptr_mImgIconName->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mImgIconName.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mMinimapIconName = prop->cast_prop<yordle::data::prop::string_prop>(2116383141u);
    if (ptr_mMinimapIconName != nullptr) {
        mMinimapIconName = ptr_mMinimapIconName->value;
    }

    auto ptr_mKeywordWhenAcquired = prop->cast_prop<yordle::data::prop::string_prop>(2669850935u);
    if (ptr_mKeywordWhenAcquired != nullptr) {
        mKeywordWhenAcquired = ptr_mKeywordWhenAcquired->value;
    }

    auto ptr_mCastTime = prop->cast_prop<yordle::data::prop::float32_prop>(2432370038u);
    if (ptr_mCastTime != nullptr) {
        mCastTime = ptr_mCastTime->value;
    }

    auto ptr_mChannelDuration = prop->cast_prop<yordle::data::prop::set_prop>(418680967u);
    if (ptr_mChannelDuration != nullptr) {
        for (const auto &entry : ptr_mChannelDuration->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mChannelDuration.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_cooldownTime = prop->cast_prop<yordle::data::prop::set_prop>(2664088481u);
    if (ptr_cooldownTime != nullptr) {
        for (const auto &entry : ptr_cooldownTime->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                cooldownTime.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_delayCastOffsetPercent = prop->cast_prop<yordle::data::prop::float32_prop>(405997925u);
    if (ptr_delayCastOffsetPercent != nullptr) {
        delayCastOffsetPercent = ptr_delayCastOffsetPercent->value;
    }

    auto ptr_delayTotalTimePercent = prop->cast_prop<yordle::data::prop::float32_prop>(978077328u);
    if (ptr_delayTotalTimePercent != nullptr) {
        delayTotalTimePercent = ptr_delayTotalTimePercent->value;
    }

    auto ptr_mPreCastLockoutDeltaTime = prop->cast_prop<yordle::data::prop::float32_prop>(4048276222u);
    if (ptr_mPreCastLockoutDeltaTime != nullptr) {
        mPreCastLockoutDeltaTime = ptr_mPreCastLockoutDeltaTime->value;
    }

    auto ptr_mPreCastLockoutDeltaTimeData = prop->cast_prop<yordle::data::prop::structure_prop>(1870394526u);
    if (ptr_mPreCastLockoutDeltaTimeData != nullptr) {
        mPreCastLockoutDeltaTimeData = yordle::data::meta::deserialize<yordle::data::meta::SpellLockDeltaTimeData>(ptr_mPreCastLockoutDeltaTimeData, 3565606633u);
    }

    auto ptr_mPostCastLockoutDeltaTime = prop->cast_prop<yordle::data::prop::float32_prop>(2785650565u);
    if (ptr_mPostCastLockoutDeltaTime != nullptr) {
        mPostCastLockoutDeltaTime = ptr_mPostCastLockoutDeltaTime->value;
    }

    auto ptr_mPostCastLockoutDeltaTimeData = prop->cast_prop<yordle::data::prop::structure_prop>(1498177893u);
    if (ptr_mPostCastLockoutDeltaTimeData != nullptr) {
        mPostCastLockoutDeltaTimeData = yordle::data::meta::deserialize<yordle::data::meta::SpellLockDeltaTimeData>(ptr_mPostCastLockoutDeltaTimeData, 3565606633u);
    }

    auto ptr_mIsDelayedByCastLocked = prop->cast_prop<yordle::data::prop::bool_prop>(580001390u);
    if (ptr_mIsDelayedByCastLocked != nullptr) {
        mIsDelayedByCastLocked = ptr_mIsDelayedByCastLocked->value;
    }

    auto ptr_mStartCooldown = prop->cast_prop<yordle::data::prop::float32_prop>(125931661u);
    if (ptr_mStartCooldown != nullptr) {
        mStartCooldown = ptr_mStartCooldown->value;
    }

    auto ptr_mCastRangeGrowthMax = prop->cast_prop<yordle::data::prop::set_prop>(3165566675u);
    if (ptr_mCastRangeGrowthMax != nullptr) {
        for (const auto &entry : ptr_mCastRangeGrowthMax->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mCastRangeGrowthMax.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mCastRangeGrowthStartTime = prop->cast_prop<yordle::data::prop::set_prop>(2764169136u);
    if (ptr_mCastRangeGrowthStartTime != nullptr) {
        for (const auto &entry : ptr_mCastRangeGrowthStartTime->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mCastRangeGrowthStartTime.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mCastRangeGrowthDuration = prop->cast_prop<yordle::data::prop::set_prop>(23505855u);
    if (ptr_mCastRangeGrowthDuration != nullptr) {
        for (const auto &entry : ptr_mCastRangeGrowthDuration->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mCastRangeGrowthDuration.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mChargeUpdateInterval = prop->cast_prop<yordle::data::prop::float32_prop>(4145291048u);
    if (ptr_mChargeUpdateInterval != nullptr) {
        mChargeUpdateInterval = ptr_mChargeUpdateInterval->value;
    }

    auto ptr_mCancelChargeOnRecastTime = prop->cast_prop<yordle::data::prop::float32_prop>(1511691408u);
    if (ptr_mCancelChargeOnRecastTime != nullptr) {
        mCancelChargeOnRecastTime = ptr_mCancelChargeOnRecastTime->value;
    }

    auto ptr_x3d746f1f = prop->cast_prop<yordle::data::prop::uint8_prop>(1031040799u);
    if (ptr_x3d746f1f != nullptr) {
        x3d746f1f = ptr_x3d746f1f->value;
    }

    auto ptr_x1632f6fc = prop->cast_prop<yordle::data::prop::set_prop>(372438780u);
    if (ptr_x1632f6fc != nullptr) {
        for (const auto &entry : ptr_x1632f6fc->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                x1632f6fc.emplace(yordle::data::meta::deserialize<yordle::data::meta::SpellPassiveData>(ptr_entry, 3562978890u));
            }
        }
    }

    auto ptr_mCharacterPassiveBuffs = prop->cast_prop<yordle::data::prop::set_prop>(3138631806u);
    if (ptr_mCharacterPassiveBuffs != nullptr) {
        for (const auto &entry : ptr_mCharacterPassiveBuffs->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mCharacterPassiveBuffs.emplace(yordle::data::meta::deserialize<yordle::data::meta::CharacterPassiveData>(ptr_entry, 2393107013u));
            }
        }
    }

    auto ptr_mMaxAmmo = prop->cast_prop<yordle::data::prop::set_prop>(1489691856u);
    if (ptr_mMaxAmmo != nullptr) {
        for (const auto &entry : ptr_mMaxAmmo->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(entry);
            if (ptr_entry != nullptr) {
                mMaxAmmo.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mAmmoUsed = prop->cast_prop<yordle::data::prop::set_prop>(2354913055u);
    if (ptr_mAmmoUsed != nullptr) {
        for (const auto &entry : ptr_mAmmoUsed->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(entry);
            if (ptr_entry != nullptr) {
                mAmmoUsed.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mAmmoRechargeTime = prop->cast_prop<yordle::data::prop::set_prop>(3667180802u);
    if (ptr_mAmmoRechargeTime != nullptr) {
        for (const auto &entry : ptr_mAmmoRechargeTime->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mAmmoRechargeTime.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mAmmoNotAffectedByCDR = prop->cast_prop<yordle::data::prop::bool_prop>(2714842049u);
    if (ptr_mAmmoNotAffectedByCDR != nullptr) {
        mAmmoNotAffectedByCDR = ptr_mAmmoNotAffectedByCDR->value;
    }

    auto ptr_mCooldownNotAffectedByCDR = prop->cast_prop<yordle::data::prop::bool_prop>(2871283782u);
    if (ptr_mCooldownNotAffectedByCDR != nullptr) {
        mCooldownNotAffectedByCDR = ptr_mCooldownNotAffectedByCDR->value;
    }

    auto ptr_mAmmoCountHiddenInUI = prop->cast_prop<yordle::data::prop::bool_prop>(2117865532u);
    if (ptr_mAmmoCountHiddenInUI != nullptr) {
        mAmmoCountHiddenInUI = ptr_mAmmoCountHiddenInUI->value;
    }

    auto ptr_mCostAlwaysShownInUI = prop->cast_prop<yordle::data::prop::bool_prop>(3135575252u);
    if (ptr_mCostAlwaysShownInUI != nullptr) {
        mCostAlwaysShownInUI = ptr_mCostAlwaysShownInUI->value;
    }

    auto ptr_x9fb86dc4 = prop->cast_prop<yordle::data::prop::bool_prop>(2679664068u);
    if (ptr_x9fb86dc4 != nullptr) {
        x9fb86dc4 = ptr_x9fb86dc4->value;
    }

    auto ptr_cannotBeSuppressed = prop->cast_prop<yordle::data::prop::bool_prop>(216511841u);
    if (ptr_cannotBeSuppressed != nullptr) {
        cannotBeSuppressed = ptr_cannotBeSuppressed->value;
    }

    auto ptr_canCastWhileDisabled = prop->cast_prop<yordle::data::prop::bool_prop>(3680711203u);
    if (ptr_canCastWhileDisabled != nullptr) {
        canCastWhileDisabled = ptr_canCastWhileDisabled->value;
    }

    auto ptr_mCanTriggerChargeSpellWhileDisabled = prop->cast_prop<yordle::data::prop::bool_prop>(3058956361u);
    if (ptr_mCanTriggerChargeSpellWhileDisabled != nullptr) {
        mCanTriggerChargeSpellWhileDisabled = ptr_mCanTriggerChargeSpellWhileDisabled->value;
    }

    auto ptr_canCastOrQueueWhileCasting = prop->cast_prop<yordle::data::prop::bool_prop>(508461680u);
    if (ptr_canCastOrQueueWhileCasting != nullptr) {
        canCastOrQueueWhileCasting = ptr_canCastOrQueueWhileCasting->value;
    }

    auto ptr_canOnlyCastWhileDisabled = prop->cast_prop<yordle::data::prop::bool_prop>(1095615469u);
    if (ptr_canOnlyCastWhileDisabled != nullptr) {
        canOnlyCastWhileDisabled = ptr_canOnlyCastWhileDisabled->value;
    }

    auto ptr_mCantCancelWhileWindingUp = prop->cast_prop<yordle::data::prop::bool_prop>(3810627996u);
    if (ptr_mCantCancelWhileWindingUp != nullptr) {
        mCantCancelWhileWindingUp = ptr_mCantCancelWhileWindingUp->value;
    }

    auto ptr_x7e3432a0 = prop->cast_prop<yordle::data::prop::bool_prop>(2117350048u);
    if (ptr_x7e3432a0 != nullptr) {
        x7e3432a0 = ptr_x7e3432a0->value;
    }

    auto ptr_mCantCancelWhileChanneling = prop->cast_prop<yordle::data::prop::bool_prop>(1427842188u);
    if (ptr_mCantCancelWhileChanneling != nullptr) {
        mCantCancelWhileChanneling = ptr_mCantCancelWhileChanneling->value;
    }

    auto ptr_cantCastWhileRooted = prop->cast_prop<yordle::data::prop::bool_prop>(2282014800u);
    if (ptr_cantCastWhileRooted != nullptr) {
        cantCastWhileRooted = ptr_cantCastWhileRooted->value;
    }

    auto ptr_mChannelIsInterruptedByDisables = prop->cast_prop<yordle::data::prop::bool_prop>(1619262319u);
    if (ptr_mChannelIsInterruptedByDisables != nullptr) {
        mChannelIsInterruptedByDisables = ptr_mChannelIsInterruptedByDisables->value;
    }

    auto ptr_mChannelIsInterruptedByAttacking = prop->cast_prop<yordle::data::prop::bool_prop>(2773480534u);
    if (ptr_mChannelIsInterruptedByAttacking != nullptr) {
        mChannelIsInterruptedByAttacking = ptr_mChannelIsInterruptedByAttacking->value;
    }

    auto ptr_mApplyAttackDamage = prop->cast_prop<yordle::data::prop::bool_prop>(2998674137u);
    if (ptr_mApplyAttackDamage != nullptr) {
        mApplyAttackDamage = ptr_mApplyAttackDamage->value;
    }

    auto ptr_mApplyAttackEffect = prop->cast_prop<yordle::data::prop::bool_prop>(192023593u);
    if (ptr_mApplyAttackEffect != nullptr) {
        mApplyAttackEffect = ptr_mApplyAttackEffect->value;
    }

    auto ptr_mApplyMaterialOnHitSound = prop->cast_prop<yordle::data::prop::bool_prop>(2763567716u);
    if (ptr_mApplyMaterialOnHitSound != nullptr) {
        mApplyMaterialOnHitSound = ptr_mApplyMaterialOnHitSound->value;
    }

    auto ptr_mDoesntBreakChannels = prop->cast_prop<yordle::data::prop::bool_prop>(284984490u);
    if (ptr_mDoesntBreakChannels != nullptr) {
        mDoesntBreakChannels = ptr_mDoesntBreakChannels->value;
    }

    auto ptr_mBelongsToAvatar = prop->cast_prop<yordle::data::prop::bool_prop>(401764204u);
    if (ptr_mBelongsToAvatar != nullptr) {
        mBelongsToAvatar = ptr_mBelongsToAvatar->value;
    }

    auto ptr_mIsDisabledWhileDead = prop->cast_prop<yordle::data::prop::bool_prop>(1731703631u);
    if (ptr_mIsDisabledWhileDead != nullptr) {
        mIsDisabledWhileDead = ptr_mIsDisabledWhileDead->value;
    }

    auto ptr_canOnlyCastWhileDead = prop->cast_prop<yordle::data::prop::bool_prop>(2597305263u);
    if (ptr_canOnlyCastWhileDead != nullptr) {
        canOnlyCastWhileDead = ptr_canOnlyCastWhileDead->value;
    }

    auto ptr_mCursorChangesInGrass = prop->cast_prop<yordle::data::prop::bool_prop>(3203663238u);
    if (ptr_mCursorChangesInGrass != nullptr) {
        mCursorChangesInGrass = ptr_mCursorChangesInGrass->value;
    }

    auto ptr_mCursorChangesInTerrain = prop->cast_prop<yordle::data::prop::bool_prop>(359003581u);
    if (ptr_mCursorChangesInTerrain != nullptr) {
        mCursorChangesInTerrain = ptr_mCursorChangesInTerrain->value;
    }

    auto ptr_mProjectTargetToCastRange = prop->cast_prop<yordle::data::prop::bool_prop>(665175815u);
    if (ptr_mProjectTargetToCastRange != nullptr) {
        mProjectTargetToCastRange = ptr_mProjectTargetToCastRange->value;
    }

    auto ptr_mSpellRevealsChampion = prop->cast_prop<yordle::data::prop::bool_prop>(1397542427u);
    if (ptr_mSpellRevealsChampion != nullptr) {
        mSpellRevealsChampion = ptr_mSpellRevealsChampion->value;
    }

    auto ptr_mUseMinimapTargeting = prop->cast_prop<yordle::data::prop::bool_prop>(3426109973u);
    if (ptr_mUseMinimapTargeting != nullptr) {
        mUseMinimapTargeting = ptr_mUseMinimapTargeting->value;
    }

    auto ptr_castRangeUseBoundingBoxes = prop->cast_prop<yordle::data::prop::bool_prop>(1282909891u);
    if (ptr_castRangeUseBoundingBoxes != nullptr) {
        castRangeUseBoundingBoxes = ptr_castRangeUseBoundingBoxes->value;
    }

    auto ptr_mMinimapIconRotation = prop->cast_prop<yordle::data::prop::bool_prop>(3127854636u);
    if (ptr_mMinimapIconRotation != nullptr) {
        mMinimapIconRotation = ptr_mMinimapIconRotation->value;
    }

    auto ptr_mUseChargeChanneling = prop->cast_prop<yordle::data::prop::bool_prop>(3003226366u);
    if (ptr_mUseChargeChanneling != nullptr) {
        mUseChargeChanneling = ptr_mUseChargeChanneling->value;
    }

    auto ptr_mCanMoveWhileChanneling = prop->cast_prop<yordle::data::prop::bool_prop>(1066124837u);
    if (ptr_mCanMoveWhileChanneling != nullptr) {
        mCanMoveWhileChanneling = ptr_mCanMoveWhileChanneling->value;
    }

    auto ptr_mDisableCastBar = prop->cast_prop<yordle::data::prop::bool_prop>(1887868596u);
    if (ptr_mDisableCastBar != nullptr) {
        mDisableCastBar = ptr_mDisableCastBar->value;
    }

    auto ptr_mShowChannelBar = prop->cast_prop<yordle::data::prop::bool_prop>(2625918045u);
    if (ptr_mShowChannelBar != nullptr) {
        mShowChannelBar = ptr_mShowChannelBar->value;
    }

    auto ptr_alwaysSnapFacing = prop->cast_prop<yordle::data::prop::bool_prop>(3748919522u);
    if (ptr_alwaysSnapFacing != nullptr) {
        alwaysSnapFacing = ptr_alwaysSnapFacing->value;
    }

    auto ptr_useAnimatorFramerate = prop->cast_prop<yordle::data::prop::bool_prop>(3510320392u);
    if (ptr_useAnimatorFramerate != nullptr) {
        useAnimatorFramerate = ptr_useAnimatorFramerate->value;
    }

    auto ptr_bHaveHitEffect = prop->cast_prop<yordle::data::prop::bool_prop>(4101645029u);
    if (ptr_bHaveHitEffect != nullptr) {
        bHaveHitEffect = ptr_bHaveHitEffect->value;
    }

    auto ptr_bIsToggleSpell = prop->cast_prop<yordle::data::prop::bool_prop>(2403475769u);
    if (ptr_bIsToggleSpell != nullptr) {
        bIsToggleSpell = ptr_bIsToggleSpell->value;
    }

    auto ptr_mDoNotNeedToFaceTarget = prop->cast_prop<yordle::data::prop::bool_prop>(1065114547u);
    if (ptr_mDoNotNeedToFaceTarget != nullptr) {
        mDoNotNeedToFaceTarget = ptr_mDoNotNeedToFaceTarget->value;
    }

    auto ptr_mTurnSpeedScalar = prop->cast_prop<yordle::data::prop::float32_prop>(1349258242u);
    if (ptr_mTurnSpeedScalar != nullptr) {
        mTurnSpeedScalar = ptr_mTurnSpeedScalar->value;
    }

    auto ptr_mNoWinddownIfCancelled = prop->cast_prop<yordle::data::prop::bool_prop>(2678716365u);
    if (ptr_mNoWinddownIfCancelled != nullptr) {
        mNoWinddownIfCancelled = ptr_mNoWinddownIfCancelled->value;
    }

    auto ptr_mIgnoreRangeCheck = prop->cast_prop<yordle::data::prop::bool_prop>(980649705u);
    if (ptr_mIgnoreRangeCheck != nullptr) {
        mIgnoreRangeCheck = ptr_mIgnoreRangeCheck->value;
    }

    auto ptr_mOrientRadiusTextureFromPlayer = prop->cast_prop<yordle::data::prop::bool_prop>(3109350027u);
    if (ptr_mOrientRadiusTextureFromPlayer != nullptr) {
        mOrientRadiusTextureFromPlayer = ptr_mOrientRadiusTextureFromPlayer->value;
    }

    auto ptr_mOverrideAttackTime = prop->cast_prop<yordle::data::prop::structure_prop>(3579459509u);
    if (ptr_mOverrideAttackTime != nullptr) {
        mOverrideAttackTime = yordle::data::meta::deserialize<yordle::data::meta::OverrideAttackTimeData>(ptr_mOverrideAttackTime, 1471545228u);
    }

    auto ptr_mUseAutoattackCastTimeData = prop->cast_prop<yordle::data::prop::structure_prop>(4119453258u);
    if (ptr_mUseAutoattackCastTimeData != nullptr) {
        mUseAutoattackCastTimeData = yordle::data::meta::deserialize<yordle::data::meta::UseAutoattackCastTimeData>(ptr_mUseAutoattackCastTimeData, 868276581u);
    }

    auto ptr_mIgnoreAnimContinueUntilCastFrame = prop->cast_prop<yordle::data::prop::bool_prop>(3420962994u);
    if (ptr_mIgnoreAnimContinueUntilCastFrame != nullptr) {
        mIgnoreAnimContinueUntilCastFrame = ptr_mIgnoreAnimContinueUntilCastFrame->value;
    }

    auto ptr_mHideRangeIndicatorWhenCasting = prop->cast_prop<yordle::data::prop::bool_prop>(1658987763u);
    if (ptr_mHideRangeIndicatorWhenCasting != nullptr) {
        mHideRangeIndicatorWhenCasting = ptr_mHideRangeIndicatorWhenCasting->value;
    }

    auto ptr_mUpdateRotationWhenCasting = prop->cast_prop<yordle::data::prop::bool_prop>(2593314464u);
    if (ptr_mUpdateRotationWhenCasting != nullptr) {
        mUpdateRotationWhenCasting = ptr_mUpdateRotationWhenCasting->value;
    }

    auto ptr_mPingableWhileDisabled = prop->cast_prop<yordle::data::prop::bool_prop>(4074816557u);
    if (ptr_mPingableWhileDisabled != nullptr) {
        mPingableWhileDisabled = ptr_mPingableWhileDisabled->value;
    }

    auto ptr_mConsideredAsAutoAttack = prop->cast_prop<yordle::data::prop::bool_prop>(3740303549u);
    if (ptr_mConsideredAsAutoAttack != nullptr) {
        mConsideredAsAutoAttack = ptr_mConsideredAsAutoAttack->value;
    }

    auto ptr_mDoesNotConsumeMana = prop->cast_prop<yordle::data::prop::bool_prop>(2317807787u);
    if (ptr_mDoesNotConsumeMana != nullptr) {
        mDoesNotConsumeMana = ptr_mDoesNotConsumeMana->value;
    }

    auto ptr_mDoesNotConsumeCooldown = prop->cast_prop<yordle::data::prop::bool_prop>(2764917413u);
    if (ptr_mDoesNotConsumeCooldown != nullptr) {
        mDoesNotConsumeCooldown = ptr_mDoesNotConsumeCooldown->value;
    }

    auto ptr_mLockedSpellOriginationCastID = prop->cast_prop<yordle::data::prop::bool_prop>(4013500057u);
    if (ptr_mLockedSpellOriginationCastID != nullptr) {
        mLockedSpellOriginationCastID = ptr_mLockedSpellOriginationCastID->value;
    }

    auto ptr_x898fbad4 = prop->cast_prop<yordle::data::prop::bool_prop>(2307898068u);
    if (ptr_x898fbad4 != nullptr) {
        x898fbad4 = ptr_x898fbad4->value;
    }

    auto ptr_mMinimapIconDisplayFlag = prop->cast_prop<yordle::data::prop::uint16_prop>(1053814478u);
    if (ptr_mMinimapIconDisplayFlag != nullptr) {
        mMinimapIconDisplayFlag = ptr_mMinimapIconDisplayFlag->value;
    }

    auto ptr_castRange = prop->cast_prop<yordle::data::prop::set_prop>(463256987u);
    if (ptr_castRange != nullptr) {
        for (const auto &entry : ptr_castRange->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                castRange.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_castRangeDisplayOverride = prop->cast_prop<yordle::data::prop::set_prop>(3569497011u);
    if (ptr_castRangeDisplayOverride != nullptr) {
        for (const auto &entry : ptr_castRangeDisplayOverride->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                castRangeDisplayOverride.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_castRadius = prop->cast_prop<yordle::data::prop::set_prop>(3072658204u);
    if (ptr_castRadius != nullptr) {
        for (const auto &entry : ptr_castRadius->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                castRadius.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_castRadiusSecondary = prop->cast_prop<yordle::data::prop::set_prop>(2406432998u);
    if (ptr_castRadiusSecondary != nullptr) {
        for (const auto &entry : ptr_castRadiusSecondary->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                castRadiusSecondary.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_castConeAngle = prop->cast_prop<yordle::data::prop::float32_prop>(2000202280u);
    if (ptr_castConeAngle != nullptr) {
        castConeAngle = ptr_castConeAngle->value;
    }

    auto ptr_castConeDistance = prop->cast_prop<yordle::data::prop::float32_prop>(1548149394u);
    if (ptr_castConeDistance != nullptr) {
        castConeDistance = ptr_castConeDistance->value;
    }

    auto ptr_castTargetAdditionalUnitsRadius = prop->cast_prop<yordle::data::prop::float32_prop>(1323940639u);
    if (ptr_castTargetAdditionalUnitsRadius != nullptr) {
        castTargetAdditionalUnitsRadius = ptr_castTargetAdditionalUnitsRadius->value;
    }

    auto ptr_luaOnMissileUpdateDistanceInterval = prop->cast_prop<yordle::data::prop::float32_prop>(2307656887u);
    if (ptr_luaOnMissileUpdateDistanceInterval != nullptr) {
        luaOnMissileUpdateDistanceInterval = ptr_luaOnMissileUpdateDistanceInterval->value;
    }

    auto ptr_mMissileSpec = prop->cast_prop<yordle::data::prop::structure_prop>(234317787u);
    if (ptr_mMissileSpec != nullptr) {
        mMissileSpec = yordle::data::meta::deserialize<yordle::data::meta::MissileSpecification>(ptr_mMissileSpec, 3221008892u);
    }

    auto ptr_mCastType = prop->cast_prop<yordle::data::prop::uint32_prop>(981403711u);
    if (ptr_mCastType != nullptr) {
        mCastType = ptr_mCastType->value;
    }

    auto ptr_castFrame = prop->cast_prop<yordle::data::prop::float32_prop>(1313281055u);
    if (ptr_castFrame != nullptr) {
        castFrame = ptr_castFrame->value;
    }

    auto ptr_missileSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(375260702u);
    if (ptr_missileSpeed != nullptr) {
        missileSpeed = ptr_missileSpeed->value;
    }

    auto ptr_mMissileEffectKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2319204568u);
    if (ptr_mMissileEffectKey != nullptr) {
        mMissileEffectKey = ptr_mMissileEffectKey->value;
    }

    auto ptr_mMissileEffectName = prop->cast_prop<yordle::data::prop::string_prop>(4099123210u);
    if (ptr_mMissileEffectName != nullptr) {
        mMissileEffectName = ptr_mMissileEffectName->value;
    }

    auto ptr_mMissileEffectPlayerKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(84065675u);
    if (ptr_mMissileEffectPlayerKey != nullptr) {
        mMissileEffectPlayerKey = ptr_mMissileEffectPlayerKey->value;
    }

    auto ptr_mMissileEffectPlayerName = prop->cast_prop<yordle::data::prop::string_prop>(2108197591u);
    if (ptr_mMissileEffectPlayerName != nullptr) {
        mMissileEffectPlayerName = ptr_mMissileEffectPlayerName->value;
    }

    auto ptr_mMissileEffectEnemyKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3737963574u);
    if (ptr_mMissileEffectEnemyKey != nullptr) {
        mMissileEffectEnemyKey = ptr_mMissileEffectEnemyKey->value;
    }

    auto ptr_mMissileEffectEnemyName = prop->cast_prop<yordle::data::prop::string_prop>(602797228u);
    if (ptr_mMissileEffectEnemyName != nullptr) {
        mMissileEffectEnemyName = ptr_mMissileEffectEnemyName->value;
    }

    auto ptr_mLineWidth = prop->cast_prop<yordle::data::prop::float32_prop>(438624862u);
    if (ptr_mLineWidth != nullptr) {
        mLineWidth = ptr_mLineWidth->value;
    }

    auto ptr_mLineDragLength = prop->cast_prop<yordle::data::prop::float32_prop>(3445030800u);
    if (ptr_mLineDragLength != nullptr) {
        mLineDragLength = ptr_mLineDragLength->value;
    }

    auto ptr_mLookAtPolicy = prop->cast_prop<yordle::data::prop::uint32_prop>(2492184944u);
    if (ptr_mLookAtPolicy != nullptr) {
        mLookAtPolicy = ptr_mLookAtPolicy->value;
    }

    auto ptr_mHitEffectOrientType = prop->cast_prop<yordle::data::prop::uint32_prop>(597649493u);
    if (ptr_mHitEffectOrientType != nullptr) {
        mHitEffectOrientType = ptr_mHitEffectOrientType->value;
    }

    auto ptr_mResourceResolvers = prop->cast_prop<yordle::data::prop::set_prop>(2460302967u);
    if (ptr_mResourceResolvers != nullptr) {
        for (const auto &entry : ptr_mResourceResolvers->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mResourceResolvers.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mHitEffectKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2073816859u);
    if (ptr_mHitEffectKey != nullptr) {
        mHitEffectKey = ptr_mHitEffectKey->value;
    }

    auto ptr_mHitEffectName = prop->cast_prop<yordle::data::prop::string_prop>(3229736615u);
    if (ptr_mHitEffectName != nullptr) {
        mHitEffectName = ptr_mHitEffectName->value;
    }

    auto ptr_mHitEffectPlayerKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1033543528u);
    if (ptr_mHitEffectPlayerKey != nullptr) {
        mHitEffectPlayerKey = ptr_mHitEffectPlayerKey->value;
    }

    auto ptr_mHitEffectPlayerName = prop->cast_prop<yordle::data::prop::string_prop>(3753364890u);
    if (ptr_mHitEffectPlayerName != nullptr) {
        mHitEffectPlayerName = ptr_mHitEffectPlayerName->value;
    }

    auto ptr_mAfterEffectKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3602710262u);
    if (ptr_mAfterEffectKey != nullptr) {
        mAfterEffectKey = ptr_mAfterEffectKey->value;
    }

    auto ptr_mAfterEffectName = prop->cast_prop<yordle::data::prop::string_prop>(2538046572u);
    if (ptr_mAfterEffectName != nullptr) {
        mAfterEffectName = ptr_mAfterEffectName->value;
    }

    auto ptr_bHaveHitBone = prop->cast_prop<yordle::data::prop::bool_prop>(2431864418u);
    if (ptr_bHaveHitBone != nullptr) {
        bHaveHitBone = ptr_bHaveHitBone->value;
    }

    auto ptr_mHitBoneName = prop->cast_prop<yordle::data::prop::string_prop>(1987442212u);
    if (ptr_mHitBoneName != nullptr) {
        mHitBoneName = ptr_mHitBoneName->value;
    }

    auto ptr_mParticleStartOffset = prop->cast_prop<yordle::data::prop::vector_prop>(1769109117u);
    if (ptr_mParticleStartOffset != nullptr) {
        mParticleStartOffset = ptr_mParticleStartOffset->value;
    }

    auto ptr_mFloatVarsDecimals = prop->cast_prop<yordle::data::prop::set_prop>(439122960u);
    if (ptr_mFloatVarsDecimals != nullptr) {
        for (const auto &entry : ptr_mFloatVarsDecimals->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(entry);
            if (ptr_entry != nullptr) {
                mFloatVarsDecimals.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mana = prop->cast_prop<yordle::data::prop::set_prop>(3650585354u);
    if (ptr_mana != nullptr) {
        for (const auto &entry : ptr_mana->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mana.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_manaUiOverride = prop->cast_prop<yordle::data::prop::set_prop>(3262238676u);
    if (ptr_manaUiOverride != nullptr) {
        for (const auto &entry : ptr_manaUiOverride->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                manaUiOverride.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_selectionPriority = prop->cast_prop<yordle::data::prop::uint32_prop>(2008676409u);
    if (ptr_selectionPriority != nullptr) {
        selectionPriority = ptr_selectionPriority->value;
    }

    auto ptr_mTargetingTypeData = prop->cast_prop<yordle::data::prop::structure_prop>(1564898895u);
    if (ptr_mTargetingTypeData != nullptr) {
        mTargetingTypeData = yordle::data::meta::deserialize<yordle::data::meta::TargetingTypeData>(ptr_mTargetingTypeData, 2144288560u);
    }

    auto ptr_x7a9e7d89 = prop->cast_prop<yordle::data::prop::set_prop>(2057207177u);
    if (ptr_x7a9e7d89 != nullptr) {
        for (const auto &entry : ptr_x7a9e7d89->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                x7a9e7d89.emplace(yordle::data::meta::deserialize<yordle::data::meta::x7a9e7d89>(ptr_entry, 2057207177u));
            }
        }
    }

    auto ptr_mVOEventCategory = prop->cast_prop<yordle::data::prop::string_prop>(2105186057u);
    if (ptr_mVOEventCategory != nullptr) {
        mVOEventCategory = ptr_mVOEventCategory->value;
    }

    auto ptr_mAIData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3834433366u);
    if (ptr_mAIData != nullptr) {
        mAIData = yordle::data::meta::deserialize<yordle::data::meta::AISpellData>(ptr_mAIData, 4010062211u);
    }

    auto ptr_mSpellCooldownOrSealedQueueThreshold = prop->cast_prop<yordle::data::prop::optional_prop>(2085334492u);
    if (ptr_mSpellCooldownOrSealedQueueThreshold != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_mSpellCooldownOrSealedQueueThreshold->value);
        if(ptr_entry != nullptr) {
            mSpellCooldownOrSealedQueueThreshold = ptr_entry->value;
        }
    }

    auto ptr_x3f432a6 = prop->cast_prop<yordle::data::prop::uint8_prop>(66335398u);
    if (ptr_x3f432a6 != nullptr) {
        x3f432a6 = ptr_x3f432a6->value;
    }

    auto ptr_xf7e5bc = prop->cast_prop<yordle::data::prop::bool_prop>(16246204u);
    if (ptr_xf7e5bc != nullptr) {
        xf7e5bc = ptr_xf7e5bc->value;
    }

    auto ptr_x39381720 = prop->cast_prop<yordle::data::prop::bool_prop>(959977248u);
    if (ptr_x39381720 != nullptr) {
        x39381720 = ptr_x39381720->value;
    }

    auto ptr_xa8eb09d1 = prop->cast_prop<yordle::data::prop::bool_prop>(2833975761u);
    if (ptr_xa8eb09d1 != nullptr) {
        xa8eb09d1 = ptr_xa8eb09d1->value;
    }

    auto ptr_x24b763c2 = prop->cast_prop<yordle::data::prop::bool_prop>(615998402u);
    if (ptr_x24b763c2 != nullptr) {
        x24b763c2 = ptr_x24b763c2->value;
    }

    auto ptr_mClientData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(75847679u);
    if (ptr_mClientData != nullptr) {
        mClientData = yordle::data::meta::deserialize<yordle::data::meta::SpellDataResourceClient>(ptr_mClientData, 2110892290u);
    }
}

yordle::data::meta::SpellPassiveData::SpellPassiveData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBuff = prop->cast_prop<yordle::data::prop::reference_prop>(2131712633u);
    if (ptr_mBuff != nullptr) {
        mBuff = ptr_mBuff->value;
    }

    auto ptr_x8692e24a = prop->cast_prop<yordle::data::prop::uint32_prop>(2257773130u);
    if (ptr_x8692e24a != nullptr) {
        x8692e24a = ptr_x8692e24a->value;
    }

    auto ptr_x76b67bcc = prop->cast_prop<yordle::data::prop::bool_prop>(1991670732u);
    if (ptr_x76b67bcc != nullptr) {
        x76b67bcc = ptr_x76b67bcc->value;
    }

    auto ptr_xcbdf3af2 = prop->cast_prop<yordle::data::prop::bool_prop>(3420404466u);
    if (ptr_xcbdf3af2 != nullptr) {
        xcbdf3af2 = ptr_xcbdf3af2->value;
    }

    auto ptr_xf862632b = prop->cast_prop<yordle::data::prop::bool_prop>(4167197483u);
    if (ptr_xf862632b != nullptr) {
        xf862632b = ptr_xf862632b->value;
    }

    auto ptr_x7aa0fed6 = prop->cast_prop<yordle::data::prop::bool_prop>(2057371350u);
    if (ptr_x7aa0fed6 != nullptr) {
        x7aa0fed6 = ptr_x7aa0fed6->value;
    }

    auto ptr_mDisplayFlags = prop->cast_prop<yordle::data::prop::uint8_prop>(933770753u);
    if (ptr_mDisplayFlags != nullptr) {
        mDisplayFlags = ptr_mDisplayFlags->value;
    }
}

yordle::data::meta::CustomTargeterDefinitions::CustomTargeterDefinitions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTargeterDefinitions = prop->cast_prop<yordle::data::prop::set_prop>(641444200u);
    if (ptr_mTargeterDefinitions != nullptr) {
        for (const auto &entry : ptr_mTargeterDefinitions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mTargeterDefinitions.emplace(yordle::data::meta::deserialize<yordle::data::meta::TargeterDefinition>(ptr_entry, 1278600786u));
            }
        }
    }
}

yordle::data::meta::SpellDataResourceClient::SpellDataResourceClient(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x375656dd = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(928405213u);
    if (ptr_x375656dd != nullptr) {
        x375656dd = ptr_x375656dd->value;
    }

    auto ptr_x7d4a0e6e = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2102005358u);
    if (ptr_x7d4a0e6e != nullptr) {
        x7d4a0e6e = ptr_x7d4a0e6e->value;
    }

    auto ptr_mTooltipData = prop->cast_prop<yordle::data::prop::structure_prop>(674324571u);
    if (ptr_mTooltipData != nullptr) {
        mTooltipData = yordle::data::meta::deserialize<yordle::data::meta::TooltipInstanceSpell>(ptr_mTooltipData, 2766224215u);
    }

    auto ptr_mSpawningUIDefinition = prop->cast_prop<yordle::data::prop::structure_prop>(2955245810u);
    if (ptr_mSpawningUIDefinition != nullptr) {
        mSpawningUIDefinition = yordle::data::meta::deserialize<yordle::data::meta::SpawningUIDefinition>(ptr_mSpawningUIDefinition, 1607774867u);
    }

    auto ptr_mTargeterDefinitions = prop->cast_prop<yordle::data::prop::set_prop>(641444200u);
    if (ptr_mTargeterDefinitions != nullptr) {
        for (const auto &entry : ptr_mTargeterDefinitions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mTargeterDefinitions.emplace(yordle::data::meta::deserialize<yordle::data::meta::TargeterDefinition>(ptr_entry, 1278600786u));
            }
        }
    }

    auto ptr_mCustomTargeterDefinitions = prop->cast_prop<yordle::data::prop::map_prop>(3988614197u);
    if (ptr_mCustomTargeterDefinitions != nullptr) {
        for (const auto &pair : ptr_mCustomTargeterDefinitions->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mCustomTargeterDefinitions[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::CustomTargeterDefinitions>(ptr_value, 3174223914u);
            }
        }
    }

    auto ptr_mMissileTargeterDefinitions = prop->cast_prop<yordle::data::prop::set_prop>(4113746976u);
    if (ptr_mMissileTargeterDefinitions != nullptr) {
        for (const auto &entry : ptr_mMissileTargeterDefinitions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mMissileTargeterDefinitions.emplace(yordle::data::meta::deserialize<yordle::data::meta::MissileAttachedTargetingDefinition>(ptr_entry, 3701578183u));
            }
        }
    }

    auto ptr_mLeftClickSpellAction = prop->cast_prop<yordle::data::prop::uint32_prop>(2262432213u);
    if (ptr_mLeftClickSpellAction != nullptr) {
        mLeftClickSpellAction = ptr_mLeftClickSpellAction->value;
    }

    auto ptr_mRightClickSpellAction = prop->cast_prop<yordle::data::prop::uint32_prop>(705830166u);
    if (ptr_mRightClickSpellAction != nullptr) {
        mRightClickSpellAction = ptr_mRightClickSpellAction->value;
    }
}

yordle::data::meta::SpawningUIDefinition::SpawningUIDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_buffNameFilter = prop->cast_prop<yordle::data::prop::string_prop>(1853285473u);
    if (ptr_buffNameFilter != nullptr) {
        buffNameFilter = ptr_buffNameFilter->value;
    }

    auto ptr_maxNumberOfUnits = prop->cast_prop<yordle::data::prop::int32_prop>(4244095436u);
    if (ptr_maxNumberOfUnits != nullptr) {
        maxNumberOfUnits = ptr_maxNumberOfUnits->value;
    }
}

yordle::data::meta::IScriptPreload::IScriptPreload(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ScriptPreloadCharacter::ScriptPreloadCharacter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PreloadResourceName = prop->cast_prop<yordle::data::prop::string_prop>(1873738781u);
    if (ptr_PreloadResourceName != nullptr) {
        PreloadResourceName = ptr_PreloadResourceName->value;
    }
}

yordle::data::meta::ScriptPreloadSpell::ScriptPreloadSpell(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PreloadResourceName = prop->cast_prop<yordle::data::prop::string_prop>(1873738781u);
    if (ptr_PreloadResourceName != nullptr) {
        PreloadResourceName = ptr_PreloadResourceName->value;
    }
}

yordle::data::meta::ScriptPreloadModule::ScriptPreloadModule(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PreloadResourceName = prop->cast_prop<yordle::data::prop::string_prop>(1873738781u);
    if (ptr_PreloadResourceName != nullptr) {
        PreloadResourceName = ptr_PreloadResourceName->value;
    }
}

yordle::data::meta::ScriptPreloadParticle::ScriptPreloadParticle(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PreloadResourceName = prop->cast_prop<yordle::data::prop::string_prop>(1873738781u);
    if (ptr_PreloadResourceName != nullptr) {
        PreloadResourceName = ptr_PreloadResourceName->value;
    }
}

yordle::data::meta::LoLSpellPreloadData::LoLSpellPreloadData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CharacterPreloads = prop->cast_prop<yordle::data::prop::set_prop>(2895584866u);
    if (ptr_CharacterPreloads != nullptr) {
        for (const auto &entry : ptr_CharacterPreloads->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                CharacterPreloads.emplace(yordle::data::meta::deserialize<yordle::data::meta::ScriptPreloadCharacter>(ptr_entry, 796426082u));
            }
        }
    }

    auto ptr_SpellPreloads = prop->cast_prop<yordle::data::prop::set_prop>(373987811u);
    if (ptr_SpellPreloads != nullptr) {
        for (const auto &entry : ptr_SpellPreloads->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                SpellPreloads.emplace(yordle::data::meta::deserialize<yordle::data::meta::ScriptPreloadSpell>(ptr_entry, 2709224959u));
            }
        }
    }

    auto ptr_ModulePreloads = prop->cast_prop<yordle::data::prop::set_prop>(311703527u);
    if (ptr_ModulePreloads != nullptr) {
        for (const auto &entry : ptr_ModulePreloads->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                ModulePreloads.emplace(yordle::data::meta::deserialize<yordle::data::meta::ScriptPreloadModule>(ptr_entry, 1322354127u));
            }
        }
    }

    auto ptr_ParticlePreloads = prop->cast_prop<yordle::data::prop::set_prop>(915091477u);
    if (ptr_ParticlePreloads != nullptr) {
        for (const auto &entry : ptr_ParticlePreloads->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                ParticlePreloads.emplace(yordle::data::meta::deserialize<yordle::data::meta::ScriptPreloadParticle>(ptr_entry, 3450289597u));
            }
        }
    }
}

yordle::data::meta::ScriptGlobalProperties::ScriptGlobalProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PersistsThroughDeath = prop->cast_prop<yordle::data::prop::bool_prop>(3054398033u);
    if (ptr_PersistsThroughDeath != nullptr) {
        PersistsThroughDeath = ptr_PersistsThroughDeath->value;
    }

    auto ptr_NonDispellable = prop->cast_prop<yordle::data::prop::bool_prop>(1211160827u);
    if (ptr_NonDispellable != nullptr) {
        NonDispellable = ptr_NonDispellable->value;
    }

    auto ptr_OnPreDamagePriority = prop->cast_prop<yordle::data::prop::int32_prop>(2487562380u);
    if (ptr_OnPreDamagePriority != nullptr) {
        OnPreDamagePriority = ptr_OnPreDamagePriority->value;
    }

    auto ptr_DeathEventType = prop->cast_prop<yordle::data::prop::uint32_prop>(2482122943u);
    if (ptr_DeathEventType != nullptr) {
        DeathEventType = ptr_DeathEventType->value;
    }

    auto ptr_CastTime = prop->cast_prop<yordle::data::prop::float32_prop>(1713729607u);
    if (ptr_CastTime != nullptr) {
        CastTime = ptr_CastTime->value;
    }

    auto ptr_ChannelDuration = prop->cast_prop<yordle::data::prop::float32_prop>(717692108u);
    if (ptr_ChannelDuration != nullptr) {
        ChannelDuration = ptr_ChannelDuration->value;
    }

    auto ptr_buffName = prop->cast_prop<yordle::data::prop::string_prop>(2465532423u);
    if (ptr_buffName != nullptr) {
        buffName = ptr_buffName->value;
    }

    auto ptr_buffTextureName = prop->cast_prop<yordle::data::prop::string_prop>(2595383076u);
    if (ptr_buffTextureName != nullptr) {
        buffTextureName = ptr_buffTextureName->value;
    }

    auto ptr_displayName = prop->cast_prop<yordle::data::prop::string_prop>(1339365942u);
    if (ptr_displayName != nullptr) {
        displayName = ptr_displayName->value;
    }

    auto ptr_AutoBuffActivateEffects = prop->cast_prop<yordle::data::prop::set_prop>(2136791520u);
    if (ptr_AutoBuffActivateEffects != nullptr) {
        for (const auto &entry : ptr_AutoBuffActivateEffects->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                AutoBuffActivateEffects.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_AutoBuffActivateAttachBoneNames = prop->cast_prop<yordle::data::prop::set_prop>(4136547399u);
    if (ptr_AutoBuffActivateAttachBoneNames != nullptr) {
        for (const auto &entry : ptr_AutoBuffActivateAttachBoneNames->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                AutoBuffActivateAttachBoneNames.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_IsDeathRecapSource = prop->cast_prop<yordle::data::prop::bool_prop>(710885829u);
    if (ptr_IsDeathRecapSource != nullptr) {
        IsDeathRecapSource = ptr_IsDeathRecapSource->value;
    }

    auto ptr_SpellToggleSlot = prop->cast_prop<yordle::data::prop::uint32_prop>(2334814861u);
    if (ptr_SpellToggleSlot != nullptr) {
        SpellToggleSlot = ptr_SpellToggleSlot->value;
    }

    auto ptr_IsItemToggled = prop->cast_prop<yordle::data::prop::bool_prop>(3691183534u);
    if (ptr_IsItemToggled != nullptr) {
        IsItemToggled = ptr_IsItemToggled->value;
    }

    auto ptr_SpellFXOverrideSkins = prop->cast_prop<yordle::data::prop::set_prop>(3662744943u);
    if (ptr_SpellFXOverrideSkins != nullptr) {
        for (const auto &entry : ptr_SpellFXOverrideSkins->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                SpellFXOverrideSkins.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_SpellVOOverrideSkins = prop->cast_prop<yordle::data::prop::set_prop>(3891931920u);
    if (ptr_SpellVOOverrideSkins != nullptr) {
        for (const auto &entry : ptr_SpellVOOverrideSkins->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                SpellVOOverrideSkins.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_PopupMessages = prop->cast_prop<yordle::data::prop::set_prop>(3324279901u);
    if (ptr_PopupMessages != nullptr) {
        for (const auto &entry : ptr_PopupMessages->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                PopupMessages.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ILineIndicatorType::ILineIndicatorType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::IndicatorTypeLocal::IndicatorTypeLocal(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ILineIndicatorType(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::IndicatorTypeGlobal::IndicatorTypeGlobal(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ILineIndicatorType(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mIsFloating = prop->cast_prop<yordle::data::prop::bool_prop>(3804467094u);
    if (ptr_mIsFloating != nullptr) {
        mIsFloating = ptr_mIsFloating->value;
    }
}

yordle::data::meta::ITargeterFadeBehavior::ITargeterFadeBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::FadeOverTimeBehavior::FadeOverTimeBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ITargeterFadeBehavior(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTimeStart = prop->cast_prop<yordle::data::prop::float32_prop>(4100262179u);
    if (ptr_mTimeStart != nullptr) {
        mTimeStart = ptr_mTimeStart->value;
    }

    auto ptr_mTimeEnd = prop->cast_prop<yordle::data::prop::float32_prop>(1177779478u);
    if (ptr_mTimeEnd != nullptr) {
        mTimeEnd = ptr_mTimeEnd->value;
    }

    auto ptr_mStartAlpha = prop->cast_prop<yordle::data::prop::float32_prop>(502522360u);
    if (ptr_mStartAlpha != nullptr) {
        mStartAlpha = ptr_mStartAlpha->value;
    }

    auto ptr_mEndAlpha = prop->cast_prop<yordle::data::prop::float32_prop>(162914355u);
    if (ptr_mEndAlpha != nullptr) {
        mEndAlpha = ptr_mEndAlpha->value;
    }
}

yordle::data::meta::FadeByMouseRangeBehavior::FadeByMouseRangeBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ITargeterFadeBehavior(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x76a72ad1 = prop->cast_prop<yordle::data::prop::float32_prop>(1990666961u);
    if (ptr_x76a72ad1 != nullptr) {
        x76a72ad1 = ptr_x76a72ad1->value;
    }

    auto ptr_x65183440 = prop->cast_prop<yordle::data::prop::float32_prop>(1696085056u);
    if (ptr_x65183440 != nullptr) {
        x65183440 = ptr_x65183440->value;
    }

    auto ptr_mStartAlpha = prop->cast_prop<yordle::data::prop::float32_prop>(502522360u);
    if (ptr_mStartAlpha != nullptr) {
        mStartAlpha = ptr_mStartAlpha->value;
    }

    auto ptr_mEndAlpha = prop->cast_prop<yordle::data::prop::float32_prop>(162914355u);
    if (ptr_mEndAlpha != nullptr) {
        mEndAlpha = ptr_mEndAlpha->value;
    }
}

yordle::data::meta::FadeToExplicitValueBehavior::FadeToExplicitValueBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ITargeterFadeBehavior(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAlpha = prop->cast_prop<yordle::data::prop::float32_prop>(3246681660u);
    if (ptr_mAlpha != nullptr) {
        mAlpha = ptr_mAlpha->value;
    }
}

yordle::data::meta::x29dfd7ad::x29dfd7ad(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xaeebcbdd = prop->cast_prop<yordle::data::prop::float32_prop>(2934688733u);
    if (ptr_xaeebcbdd != nullptr) {
        xaeebcbdd = ptr_xaeebcbdd->value;
    }

    auto ptr_xa8a2f6c7 = prop->cast_prop<yordle::data::prop::float32_prop>(2829252295u);
    if (ptr_xa8a2f6c7 != nullptr) {
        xa8a2f6c7 = ptr_xa8a2f6c7->value;
    }

    auto ptr_x64e4f9f9 = prop->cast_prop<yordle::data::prop::float32_prop>(1692727801u);
    if (ptr_x64e4f9f9 != nullptr) {
        x64e4f9f9 = ptr_x64e4f9f9->value;
    }
}

yordle::data::meta::FloatPerSpellLevel::FloatPerSpellLevel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPerLevelValues = prop->cast_prop<yordle::data::prop::set_prop>(4236608981u);
    if (ptr_mPerLevelValues != nullptr) {
        for (const auto &entry : ptr_mPerLevelValues->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mPerLevelValues.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mValueType = prop->cast_prop<yordle::data::prop::uint32_prop>(2409216993u);
    if (ptr_mValueType != nullptr) {
        mValueType = ptr_mValueType->value;
    }
}

yordle::data::meta::DrawablePositionLocator::DrawablePositionLocator(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_basePosition = prop->cast_prop<yordle::data::prop::uint32_prop>(1659129451u);
    if (ptr_basePosition != nullptr) {
        basePosition = ptr_basePosition->value;
    }

    auto ptr_distanceOffset = prop->cast_prop<yordle::data::prop::float32_prop>(1895875429u);
    if (ptr_distanceOffset != nullptr) {
        distanceOffset = ptr_distanceOffset->value;
    }

    auto ptr_angleOffsetRadian = prop->cast_prop<yordle::data::prop::float32_prop>(1699656118u);
    if (ptr_angleOffsetRadian != nullptr) {
        angleOffsetRadian = ptr_angleOffsetRadian->value;
    }

    auto ptr_orientationType = prop->cast_prop<yordle::data::prop::uint32_prop>(1260641385u);
    if (ptr_orientationType != nullptr) {
        orientationType = ptr_orientationType->value;
    }
}

yordle::data::meta::TargeterDefinition::TargeterDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFadeBehavior = prop->cast_prop<yordle::data::prop::structure_prop>(3384398744u);
    if (ptr_mFadeBehavior != nullptr) {
        mFadeBehavior = yordle::data::meta::deserialize<yordle::data::meta::ITargeterFadeBehavior>(ptr_mFadeBehavior, 1348413282u);
    }
}

yordle::data::meta::TargeterDefinitionAoe::TargeterDefinitionAoe(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargeterDefinition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_centerLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3558690766u);
    if (ptr_centerLocator != nullptr) {
        centerLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_centerLocator, 3451066870u);
    }

    auto ptr_textureOrientation = prop->cast_prop<yordle::data::prop::uint32_prop>(381832190u);
    if (ptr_textureOrientation != nullptr) {
        textureOrientation = ptr_textureOrientation->value;
    }

    auto ptr_isConstrainedToRange = prop->cast_prop<yordle::data::prop::bool_prop>(1895138867u);
    if (ptr_isConstrainedToRange != nullptr) {
        isConstrainedToRange = ptr_isConstrainedToRange->value;
    }

    auto ptr_constraintPosLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2096633570u);
    if (ptr_constraintPosLocator != nullptr) {
        constraintPosLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_constraintPosLocator, 3451066870u);
    }

    auto ptr_constraintRange = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1790621383u);
    if (ptr_constraintRange != nullptr) {
        constraintRange = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_constraintRange, 508250748u);
    }

    auto ptr_overrideRadius = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3263025179u);
    if (ptr_overrideRadius != nullptr) {
        overrideRadius = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_overrideRadius, 508250748u);
    }

    auto ptr_x2acbb00b = prop->cast_prop<yordle::data::prop::inline_structure_prop>(717991947u);
    if (ptr_x2acbb00b != nullptr) {
        x2acbb00b = yordle::data::meta::deserialize<yordle::data::meta::x29dfd7ad>(ptr_x2acbb00b, 702535597u);
    }

    auto ptr_textureRadiusOverrideName = prop->cast_prop<yordle::data::prop::string_prop>(1662110281u);
    if (ptr_textureRadiusOverrideName != nullptr) {
        textureRadiusOverrideName = ptr_textureRadiusOverrideName->value;
    }
}

yordle::data::meta::TargeterDefinitionArc::TargeterDefinitionArc(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargeterDefinition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_startLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3361525483u);
    if (ptr_startLocator != nullptr) {
        startLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_startLocator, 3451066870u);
    }

    auto ptr_endLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1328338192u);
    if (ptr_endLocator != nullptr) {
        endLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_endLocator, 3451066870u);
    }

    auto ptr_isClockwiseArc = prop->cast_prop<yordle::data::prop::bool_prop>(1368166107u);
    if (ptr_isClockwiseArc != nullptr) {
        isClockwiseArc = ptr_isClockwiseArc->value;
    }

    auto ptr_isConstrainedToRange = prop->cast_prop<yordle::data::prop::bool_prop>(1895138867u);
    if (ptr_isConstrainedToRange != nullptr) {
        isConstrainedToRange = ptr_isConstrainedToRange->value;
    }

    auto ptr_constraintRange = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1790621383u);
    if (ptr_constraintRange != nullptr) {
        constraintRange = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_constraintRange, 508250748u);
    }

    auto ptr_overrideRadius = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3263025179u);
    if (ptr_overrideRadius != nullptr) {
        overrideRadius = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_overrideRadius, 508250748u);
    }

    auto ptr_textureArcOverrideName = prop->cast_prop<yordle::data::prop::string_prop>(2181720239u);
    if (ptr_textureArcOverrideName != nullptr) {
        textureArcOverrideName = ptr_textureArcOverrideName->value;
    }

    auto ptr_thicknessOffset = prop->cast_prop<yordle::data::prop::float32_prop>(1447347738u);
    if (ptr_thicknessOffset != nullptr) {
        thicknessOffset = ptr_thicknessOffset->value;
    }
}

yordle::data::meta::TargeterDefinitionCone::TargeterDefinitionCone(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargeterDefinition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_startLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3361525483u);
    if (ptr_startLocator != nullptr) {
        startLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_startLocator, 3451066870u);
    }

    auto ptr_endLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1328338192u);
    if (ptr_endLocator != nullptr) {
        endLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_endLocator, 3451066870u);
    }

    auto ptr_fallbackDirection = prop->cast_prop<yordle::data::prop::uint32_prop>(2088943252u);
    if (ptr_fallbackDirection != nullptr) {
        fallbackDirection = ptr_fallbackDirection->value;
    }

    auto ptr_hasMaxGrowRange = prop->cast_prop<yordle::data::prop::bool_prop>(3759385365u);
    if (ptr_hasMaxGrowRange != nullptr) {
        hasMaxGrowRange = ptr_hasMaxGrowRange->value;
    }

    auto ptr_coneFollowsEnd = prop->cast_prop<yordle::data::prop::bool_prop>(941368513u);
    if (ptr_coneFollowsEnd != nullptr) {
        coneFollowsEnd = ptr_coneFollowsEnd->value;
    }

    auto ptr_coneAngleDegrees = prop->cast_prop<yordle::data::prop::optional_prop>(4266228274u);
    if (ptr_coneAngleDegrees != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_coneAngleDegrees->value);
        if(ptr_entry != nullptr) {
            coneAngleDegrees = ptr_entry->value;
        }
    }

    auto ptr_coneRange = prop->cast_prop<yordle::data::prop::optional_prop>(3946108375u);
    if (ptr_coneRange != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_coneRange->value);
        if(ptr_entry != nullptr) {
            coneRange = ptr_entry->value;
        }
    }

    auto ptr_rangeGrowthStartTime = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2675367698u);
    if (ptr_rangeGrowthStartTime != nullptr) {
        rangeGrowthStartTime = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_rangeGrowthStartTime, 508250748u);
    }

    auto ptr_rangeGrowthDuration = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1883948697u);
    if (ptr_rangeGrowthDuration != nullptr) {
        rangeGrowthDuration = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_rangeGrowthDuration, 508250748u);
    }

    auto ptr_rangeGrowthMax = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1220882573u);
    if (ptr_rangeGrowthMax != nullptr) {
        rangeGrowthMax = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_rangeGrowthMax, 508250748u);
    }

    auto ptr_textureConeOverrideName = prop->cast_prop<yordle::data::prop::string_prop>(3706097804u);
    if (ptr_textureConeOverrideName != nullptr) {
        textureConeOverrideName = ptr_textureConeOverrideName->value;
    }

    auto ptr_textureConeMaxGrowName = prop->cast_prop<yordle::data::prop::string_prop>(4089832751u);
    if (ptr_textureConeMaxGrowName != nullptr) {
        textureConeMaxGrowName = ptr_textureConeMaxGrowName->value;
    }
}

yordle::data::meta::TargeterDefinitionLine::TargeterDefinitionLine(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargeterDefinition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_indicatorType = prop->cast_prop<yordle::data::prop::structure_prop>(1086768030u);
    if (ptr_indicatorType != nullptr) {
        indicatorType = yordle::data::meta::deserialize<yordle::data::meta::ILineIndicatorType>(ptr_indicatorType, 4153143643u);
    }

    auto ptr_startLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3361525483u);
    if (ptr_startLocator != nullptr) {
        startLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_startLocator, 3451066870u);
    }

    auto ptr_endLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1328338192u);
    if (ptr_endLocator != nullptr) {
        endLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_endLocator, 3451066870u);
    }

    auto ptr_fallbackDirection = prop->cast_prop<yordle::data::prop::uint32_prop>(2088943252u);
    if (ptr_fallbackDirection != nullptr) {
        fallbackDirection = ptr_fallbackDirection->value;
    }

    auto ptr_alwaysDraw = prop->cast_prop<yordle::data::prop::bool_prop>(1856153190u);
    if (ptr_alwaysDraw != nullptr) {
        alwaysDraw = ptr_alwaysDraw->value;
    }

    auto ptr_hasMaxGrowRange = prop->cast_prop<yordle::data::prop::bool_prop>(3759385365u);
    if (ptr_hasMaxGrowRange != nullptr) {
        hasMaxGrowRange = ptr_hasMaxGrowRange->value;
    }

    auto ptr_useGlobalLineIndicator = prop->cast_prop<yordle::data::prop::bool_prop>(592043826u);
    if (ptr_useGlobalLineIndicator != nullptr) {
        useGlobalLineIndicator = ptr_useGlobalLineIndicator->value;
    }

    auto ptr_lineStopsAtEndPosition = prop->cast_prop<yordle::data::prop::optional_prop>(1556474465u);
    if (ptr_lineStopsAtEndPosition != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_lineStopsAtEndPosition->value);
        if(ptr_entry != nullptr) {
            lineStopsAtEndPosition = ptr_entry->value;
        }
    }

    auto ptr_minimumDisplayedRange = prop->cast_prop<yordle::data::prop::float32_prop>(3002479787u);
    if (ptr_minimumDisplayedRange != nullptr) {
        minimumDisplayedRange = ptr_minimumDisplayedRange->value;
    }

    auto ptr_arrowSize = prop->cast_prop<yordle::data::prop::float32_prop>(2436454279u);
    if (ptr_arrowSize != nullptr) {
        arrowSize = ptr_arrowSize->value;
    }

    auto ptr_lineWidth = prop->cast_prop<yordle::data::prop::inline_structure_prop>(493533321u);
    if (ptr_lineWidth != nullptr) {
        lineWidth = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_lineWidth, 508250748u);
    }

    auto ptr_overrideBaseRange = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3722194981u);
    if (ptr_overrideBaseRange != nullptr) {
        overrideBaseRange = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_overrideBaseRange, 508250748u);
    }

    auto ptr_rangeGrowthStartTime = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2675367698u);
    if (ptr_rangeGrowthStartTime != nullptr) {
        rangeGrowthStartTime = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_rangeGrowthStartTime, 508250748u);
    }

    auto ptr_rangeGrowthDuration = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1883948697u);
    if (ptr_rangeGrowthDuration != nullptr) {
        rangeGrowthDuration = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_rangeGrowthDuration, 508250748u);
    }

    auto ptr_rangeGrowthMax = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1220882573u);
    if (ptr_rangeGrowthMax != nullptr) {
        rangeGrowthMax = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_rangeGrowthMax, 508250748u);
    }

    auto ptr_textureBaseOverrideName = prop->cast_prop<yordle::data::prop::string_prop>(675003658u);
    if (ptr_textureBaseOverrideName != nullptr) {
        textureBaseOverrideName = ptr_textureBaseOverrideName->value;
    }

    auto ptr_textureTargetOverrideName = prop->cast_prop<yordle::data::prop::string_prop>(1144444726u);
    if (ptr_textureTargetOverrideName != nullptr) {
        textureTargetOverrideName = ptr_textureTargetOverrideName->value;
    }

    auto ptr_textureBaseMaxGrowName = prop->cast_prop<yordle::data::prop::string_prop>(567372513u);
    if (ptr_textureBaseMaxGrowName != nullptr) {
        textureBaseMaxGrowName = ptr_textureBaseMaxGrowName->value;
    }

    auto ptr_textureTargetMaxGrowName = prop->cast_prop<yordle::data::prop::string_prop>(3763232381u);
    if (ptr_textureTargetMaxGrowName != nullptr) {
        textureTargetMaxGrowName = ptr_textureTargetMaxGrowName->value;
    }

    auto ptr_mAngleLineToEndpointHeight = prop->cast_prop<yordle::data::prop::bool_prop>(1985309574u);
    if (ptr_mAngleLineToEndpointHeight != nullptr) {
        mAngleLineToEndpointHeight = ptr_mAngleLineToEndpointHeight->value;
    }

    auto ptr_mCenterArrowToEndPoint = prop->cast_prop<yordle::data::prop::bool_prop>(707983506u);
    if (ptr_mCenterArrowToEndPoint != nullptr) {
        mCenterArrowToEndPoint = ptr_mCenterArrowToEndPoint->value;
    }

    auto ptr_facingLine = prop->cast_prop<yordle::data::prop::bool_prop>(1545619181u);
    if (ptr_facingLine != nullptr) {
        facingLine = ptr_facingLine->value;
    }

    auto ptr_minAngle = prop->cast_prop<yordle::data::prop::float32_prop>(4213342782u);
    if (ptr_minAngle != nullptr) {
        minAngle = ptr_minAngle->value;
    }

    auto ptr_maxAngle = prop->cast_prop<yordle::data::prop::float32_prop>(1921139316u);
    if (ptr_maxAngle != nullptr) {
        maxAngle = ptr_maxAngle->value;
    }

    auto ptr_minAngleRangeFactor = prop->cast_prop<yordle::data::prop::float32_prop>(467973444u);
    if (ptr_minAngleRangeFactor != nullptr) {
        minAngleRangeFactor = ptr_minAngleRangeFactor->value;
    }

    auto ptr_maxAngleRangeFactor = prop->cast_prop<yordle::data::prop::float32_prop>(118180130u);
    if (ptr_maxAngleRangeFactor != nullptr) {
        maxAngleRangeFactor = ptr_maxAngleRangeFactor->value;
    }

    auto ptr_fade = prop->cast_prop<yordle::data::prop::bool_prop>(4050486291u);
    if (ptr_fade != nullptr) {
        fade = ptr_fade->value;
    }

    auto ptr_fadeAngle = prop->cast_prop<yordle::data::prop::float32_prop>(498271314u);
    if (ptr_fadeAngle != nullptr) {
        fadeAngle = ptr_fadeAngle->value;
    }
}

yordle::data::meta::TargeterDefinitionMinimap::TargeterDefinitionMinimap(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargeterDefinition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_centerLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3558690766u);
    if (ptr_centerLocator != nullptr) {
        centerLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_centerLocator, 3451066870u);
    }

    auto ptr_useCasterBoundingBox = prop->cast_prop<yordle::data::prop::optional_prop>(2821831873u);
    if (ptr_useCasterBoundingBox != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_useCasterBoundingBox->value);
        if(ptr_entry != nullptr) {
            useCasterBoundingBox = ptr_entry->value;
        }
    }

    auto ptr_overrideBaseRange = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3722194981u);
    if (ptr_overrideBaseRange != nullptr) {
        overrideBaseRange = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_overrideBaseRange, 508250748u);
    }
}

yordle::data::meta::TargeterDefinitionRange::TargeterDefinitionRange(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargeterDefinition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_centerLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3558690766u);
    if (ptr_centerLocator != nullptr) {
        centerLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_centerLocator, 3451066870u);
    }

    auto ptr_textureOrientation = prop->cast_prop<yordle::data::prop::uint32_prop>(381832190u);
    if (ptr_textureOrientation != nullptr) {
        textureOrientation = ptr_textureOrientation->value;
    }

    auto ptr_hideWithLineIndicator = prop->cast_prop<yordle::data::prop::bool_prop>(3188452976u);
    if (ptr_hideWithLineIndicator != nullptr) {
        hideWithLineIndicator = ptr_hideWithLineIndicator->value;
    }

    auto ptr_hasMaxGrowRange = prop->cast_prop<yordle::data::prop::bool_prop>(3759385365u);
    if (ptr_hasMaxGrowRange != nullptr) {
        hasMaxGrowRange = ptr_hasMaxGrowRange->value;
    }

    auto ptr_useCasterBoundingBox = prop->cast_prop<yordle::data::prop::optional_prop>(2821831873u);
    if (ptr_useCasterBoundingBox != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_useCasterBoundingBox->value);
        if(ptr_entry != nullptr) {
            useCasterBoundingBox = ptr_entry->value;
        }
    }

    auto ptr_overrideBaseRange = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3722194981u);
    if (ptr_overrideBaseRange != nullptr) {
        overrideBaseRange = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_overrideBaseRange, 508250748u);
    }

    auto ptr_rangeGrowthStartTime = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2675367698u);
    if (ptr_rangeGrowthStartTime != nullptr) {
        rangeGrowthStartTime = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_rangeGrowthStartTime, 508250748u);
    }

    auto ptr_rangeGrowthDuration = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1883948697u);
    if (ptr_rangeGrowthDuration != nullptr) {
        rangeGrowthDuration = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_rangeGrowthDuration, 508250748u);
    }

    auto ptr_rangeGrowthMax = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1220882573u);
    if (ptr_rangeGrowthMax != nullptr) {
        rangeGrowthMax = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_rangeGrowthMax, 508250748u);
    }

    auto ptr_textureOverrideName = prop->cast_prop<yordle::data::prop::string_prop>(2486224599u);
    if (ptr_textureOverrideName != nullptr) {
        textureOverrideName = ptr_textureOverrideName->value;
    }

    auto ptr_textureMaxGrowName = prop->cast_prop<yordle::data::prop::string_prop>(1515258286u);
    if (ptr_textureMaxGrowName != nullptr) {
        textureMaxGrowName = ptr_textureMaxGrowName->value;
    }
}

yordle::data::meta::TargeterDefinitionWall::TargeterDefinitionWall(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargeterDefinition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_centerLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3558690766u);
    if (ptr_centerLocator != nullptr) {
        centerLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_centerLocator, 3451066870u);
    }

    auto ptr_wallOrientation = prop->cast_prop<yordle::data::prop::uint32_prop>(352573681u);
    if (ptr_wallOrientation != nullptr) {
        wallOrientation = ptr_wallOrientation->value;
    }

    auto ptr_wallRotation = prop->cast_prop<yordle::data::prop::float32_prop>(2088878927u);
    if (ptr_wallRotation != nullptr) {
        wallRotation = ptr_wallRotation->value;
    }

    auto ptr_thickness = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1829741845u);
    if (ptr_thickness != nullptr) {
        thickness = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_thickness, 508250748u);
    }

    auto ptr_length = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2211460629u);
    if (ptr_length != nullptr) {
        length = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_length, 508250748u);
    }

    auto ptr_textureWallOverrideName = prop->cast_prop<yordle::data::prop::string_prop>(3253697459u);
    if (ptr_textureWallOverrideName != nullptr) {
        textureWallOverrideName = ptr_textureWallOverrideName->value;
    }
}

yordle::data::meta::TargeterDefinitionMultiAOE::TargeterDefinitionMultiAOE(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargeterDefinition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_centerLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3558690766u);
    if (ptr_centerLocator != nullptr) {
        centerLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_centerLocator, 3451066870u);
    }

    auto ptr_overrideAOERadius = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3284550930u);
    if (ptr_overrideAOERadius != nullptr) {
        overrideAOERadius = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_overrideAOERadius, 508250748u);
    }

    auto ptr_overrideMinCastRange = prop->cast_prop<yordle::data::prop::inline_structure_prop>(691238949u);
    if (ptr_overrideMinCastRange != nullptr) {
        overrideMinCastRange = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_overrideMinCastRange, 508250748u);
    }

    auto ptr_overrideMaxCastRange = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3803788367u);
    if (ptr_overrideMaxCastRange != nullptr) {
        overrideMaxCastRange = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_overrideMaxCastRange, 508250748u);
    }

    auto ptr_angelOffsetRadian = prop->cast_prop<yordle::data::prop::float32_prop>(607438176u);
    if (ptr_angelOffsetRadian != nullptr) {
        angelOffsetRadian = ptr_angelOffsetRadian->value;
    }

    auto ptr_numOfInnerAOE = prop->cast_prop<yordle::data::prop::uint32_prop>(4233797121u);
    if (ptr_numOfInnerAOE != nullptr) {
        numOfInnerAOE = ptr_numOfInnerAOE->value;
    }

    auto ptr_leftTextureName = prop->cast_prop<yordle::data::prop::string_prop>(2717583856u);
    if (ptr_leftTextureName != nullptr) {
        leftTextureName = ptr_leftTextureName->value;
    }

    auto ptr_rightTextureName = prop->cast_prop<yordle::data::prop::string_prop>(2583486863u);
    if (ptr_rightTextureName != nullptr) {
        rightTextureName = ptr_rightTextureName->value;
    }

    auto ptr_innerTextureName = prop->cast_prop<yordle::data::prop::string_prop>(1790616037u);
    if (ptr_innerTextureName != nullptr) {
        innerTextureName = ptr_innerTextureName->value;
    }
}

yordle::data::meta::TargeterDefinitionSpline::TargeterDefinitionSpline(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargeterDefinition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_startLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3361525483u);
    if (ptr_startLocator != nullptr) {
        startLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_startLocator, 3451066870u);
    }

    auto ptr_endLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1328338192u);
    if (ptr_endLocator != nullptr) {
        endLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_endLocator, 3451066870u);
    }

    auto ptr_baseTextureName = prop->cast_prop<yordle::data::prop::string_prop>(4190853208u);
    if (ptr_baseTextureName != nullptr) {
        baseTextureName = ptr_baseTextureName->value;
    }

    auto ptr_frontTextureName = prop->cast_prop<yordle::data::prop::string_prop>(598787416u);
    if (ptr_frontTextureName != nullptr) {
        frontTextureName = ptr_frontTextureName->value;
    }

    auto ptr_splineWidth = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2252555208u);
    if (ptr_splineWidth != nullptr) {
        splineWidth = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_splineWidth, 508250748u);
    }

    auto ptr_overrideSpline = prop->cast_prop<yordle::data::prop::structure_prop>(2684812452u);
    if (ptr_overrideSpline != nullptr) {
        overrideSpline = yordle::data::meta::deserialize<yordle::data::meta::ISplineInfo>(ptr_overrideSpline, 771419981u);
    }

    auto ptr_minSegmentCount = prop->cast_prop<yordle::data::prop::uint32_prop>(3295854343u);
    if (ptr_minSegmentCount != nullptr) {
        minSegmentCount = ptr_minSegmentCount->value;
    }

    auto ptr_maxSegmentLength = prop->cast_prop<yordle::data::prop::float32_prop>(4215783158u);
    if (ptr_maxSegmentLength != nullptr) {
        maxSegmentLength = ptr_maxSegmentLength->value;
    }

    auto ptr_isConstrainedToRange = prop->cast_prop<yordle::data::prop::bool_prop>(1895138867u);
    if (ptr_isConstrainedToRange != nullptr) {
        isConstrainedToRange = ptr_isConstrainedToRange->value;
    }

    auto ptr_constraintRange = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1790621383u);
    if (ptr_constraintRange != nullptr) {
        constraintRange = yordle::data::meta::deserialize<yordle::data::meta::FloatPerSpellLevel>(ptr_constraintRange, 508250748u);
    }
}

yordle::data::meta::TargeterDefinitionSkipTerrain::TargeterDefinitionSkipTerrain(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargeterDefinition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStartLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3634648910u);
    if (ptr_mStartLocator != nullptr) {
        mStartLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_mStartLocator, 3451066870u);
    }

    auto ptr_mEndLocator = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2397022261u);
    if (ptr_mEndLocator != nullptr) {
        mEndLocator = yordle::data::meta::deserialize<yordle::data::meta::DrawablePositionLocator>(ptr_mEndLocator, 3451066870u);
    }

    auto ptr_mBaseTextureName = prop->cast_prop<yordle::data::prop::string_prop>(333363335u);
    if (ptr_mBaseTextureName != nullptr) {
        mBaseTextureName = ptr_mBaseTextureName->value;
    }

    auto ptr_mTerrainTextureName = prop->cast_prop<yordle::data::prop::string_prop>(879479115u);
    if (ptr_mTerrainTextureName != nullptr) {
        mTerrainTextureName = ptr_mTerrainTextureName->value;
    }

    auto ptr_mTargetTextureName = prop->cast_prop<yordle::data::prop::string_prop>(660582227u);
    if (ptr_mTargetTextureName != nullptr) {
        mTargetTextureName = ptr_mTargetTextureName->value;
    }

    auto ptr_mTargetTextureRadius = prop->cast_prop<yordle::data::prop::float32_prop>(3197780438u);
    if (ptr_mTargetTextureRadius != nullptr) {
        mTargetTextureRadius = ptr_mTargetTextureRadius->value;
    }

    auto ptr_mFallbackDirection = prop->cast_prop<yordle::data::prop::uint32_prop>(2611595251u);
    if (ptr_mFallbackDirection != nullptr) {
        mFallbackDirection = ptr_mFallbackDirection->value;
    }
}

yordle::data::meta::TargetingTypeData::TargetingTypeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::Self::Self(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::Target::Target(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x6f92d6b3 = prop->cast_prop<yordle::data::prop::bool_prop>(1871894195u);
    if (ptr_x6f92d6b3 != nullptr) {
        x6f92d6b3 = ptr_x6f92d6b3->value;
    }
}

yordle::data::meta::Area::Area(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::Cone::Cone(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::SelfAoe::SelfAoe(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TargetOrLocation::TargetOrLocation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::Location::Location(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::Direction::Direction(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::DragDirection::DragDirection(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::LineTargetToCaster::LineTargetToCaster(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::AreaClamped::AreaClamped(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::LocationClamped::LocationClamped(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TerrainLocation::TerrainLocation(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TerrainType::TerrainType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TargetingTypeData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBrushCursor = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2298569642u);
    if (ptr_mBrushCursor != nullptr) {
        mBrushCursor = yordle::data::meta::deserialize<yordle::data::meta::CursorData>(ptr_mBrushCursor, 187557783u);
    }

    auto ptr_mRiverCursor = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4284297968u);
    if (ptr_mRiverCursor != nullptr) {
        mRiverCursor = yordle::data::meta::deserialize<yordle::data::meta::CursorData>(ptr_mRiverCursor, 187557783u);
    }

    auto ptr_mWallCursor = prop->cast_prop<yordle::data::prop::inline_structure_prop>(987524814u);
    if (ptr_mWallCursor != nullptr) {
        mWallCursor = yordle::data::meta::deserialize<yordle::data::meta::CursorData>(ptr_mWallCursor, 187557783u);
    }
}

yordle::data::meta::StatFormulaData::StatFormulaData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_StatComponents = prop->cast_prop<yordle::data::prop::map_prop>(3897551059u);
    if (ptr_StatComponents != nullptr) {
        for (const auto &pair : ptr_StatComponents->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                StatComponents[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::StatFormulaDataList::StatFormulaDataList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_StatFormulas = prop->cast_prop<yordle::data::prop::map_prop>(3017488444u);
    if (ptr_StatFormulas != nullptr) {
        for (const auto &pair : ptr_StatFormulas->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                StatFormulas[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::StatFormulaData>(ptr_value, 3086678927u);
            }
        }
    }
}

yordle::data::meta::GameModeDefaultStats::GameModeDefaultStats(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_DefaultCharacterStats = prop->cast_prop<yordle::data::prop::inline_structure_prop>(364887592u);
    if (ptr_DefaultCharacterStats != nullptr) {
        DefaultCharacterStats = yordle::data::meta::deserialize<yordle::data::meta::StatFormulaDataList>(ptr_DefaultCharacterStats, 1250314967u);
    }
}

yordle::data::meta::TftSurrenderCheat::TftSurrenderCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TftChangeDamageSkinCheat::TftChangeDamageSkinCheat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : Cheat(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TftMapCharacterRecordData::TftMapCharacterRecordData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_tier = prop->cast_prop<yordle::data::prop::uint8_prop>(1548858633u);
    if (ptr_tier != nullptr) {
        tier = ptr_tier->value;
    }
}

yordle::data::meta::TftMapCharacterSkinData::TftMapCharacterSkinData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_SquareIconTexturePath = prop->cast_prop<yordle::data::prop::string_prop>(3735203329u);
    if (ptr_SquareIconTexturePath != nullptr) {
        SquareIconTexturePath = ptr_SquareIconTexturePath->value;
    }
}

yordle::data::meta::TftMapCharacterData::TftMapCharacterData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_SkinData = prop->cast_prop<yordle::data::prop::set_prop>(1648598176u);
    if (ptr_SkinData != nullptr) {
        for (const auto &entry : ptr_SkinData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                SkinData.emplace(yordle::data::meta::deserialize<yordle::data::meta::TftMapCharacterSkinData>(ptr_entry, 2653184481u));
            }
        }
    }

    auto ptr_charData = prop->cast_prop<yordle::data::prop::set_prop>(2641908381u);
    if (ptr_charData != nullptr) {
        for (const auto &entry : ptr_charData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                charData.emplace(yordle::data::meta::deserialize<yordle::data::meta::TftMapCharacterRecordData>(ptr_entry, 229654189u));
            }
        }
    }
}

yordle::data::meta::TftMapCharacterList::TftMapCharacterList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ListName = prop->cast_prop<yordle::data::prop::string_prop>(1867824378u);
    if (ptr_ListName != nullptr) {
        ListName = ptr_ListName->value;
    }

    auto ptr_characters = prop->cast_prop<yordle::data::prop::set_prop>(2421522649u);
    if (ptr_characters != nullptr) {
        for (const auto &entry : ptr_characters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                characters.emplace(yordle::data::meta::deserialize<yordle::data::meta::TftMapCharacterData>(ptr_entry, 2155905376u));
            }
        }
    }
}

yordle::data::meta::TFTMapCharacterLists::TFTMapCharacterLists(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_MapName = prop->cast_prop<yordle::data::prop::string_prop>(381973866u);
    if (ptr_MapName != nullptr) {
        MapName = ptr_MapName->value;
    }

    auto ptr_characterLists = prop->cast_prop<yordle::data::prop::set_prop>(137362161u);
    if (ptr_characterLists != nullptr) {
        for (const auto &entry : ptr_characterLists->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                characterLists.emplace(yordle::data::meta::deserialize<yordle::data::meta::TftMapCharacterList>(ptr_entry, 2927874496u));
            }
        }
    }
}

yordle::data::meta::TFTAnnouncementData::TFTAnnouncementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mIconPath = prop->cast_prop<yordle::data::prop::string_prop>(2347641202u);
    if (ptr_mIconPath != nullptr) {
        mIconPath = ptr_mIconPath->value;
    }

    auto ptr_mTitleTra = prop->cast_prop<yordle::data::prop::string_prop>(3280235327u);
    if (ptr_mTitleTra != nullptr) {
        mTitleTra = ptr_mTitleTra->value;
    }

    auto ptr_mDuration = prop->cast_prop<yordle::data::prop::float32_prop>(2247611592u);
    if (ptr_mDuration != nullptr) {
        mDuration = ptr_mDuration->value;
    }

    auto ptr_mDelay = prop->cast_prop<yordle::data::prop::float32_prop>(904417079u);
    if (ptr_mDelay != nullptr) {
        mDelay = ptr_mDelay->value;
    }
}

yordle::data::meta::TFTAttachmentSlotStyleData::TFTAttachmentSlotStyleData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mOverlayIconPath = prop->cast_prop<yordle::data::prop::string_prop>(1689854402u);
    if (ptr_mOverlayIconPath != nullptr) {
        mOverlayIconPath = ptr_mOverlayIconPath->value;
    }

    auto ptr_mSubtextTra = prop->cast_prop<yordle::data::prop::string_prop>(2049301906u);
    if (ptr_mSubtextTra != nullptr) {
        mSubtextTra = ptr_mSubtextTra->value;
    }
}

yordle::data::meta::TFTCharacterRecord::TFTCharacterRecord(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : CharacterRecord(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PortraitIcon = prop->cast_prop<yordle::data::prop::string_prop>(4072749943u);
    if (ptr_PortraitIcon != nullptr) {
        PortraitIcon = ptr_PortraitIcon->value;
    }

    auto ptr_tier = prop->cast_prop<yordle::data::prop::uint8_prop>(1548858633u);
    if (ptr_tier != nullptr) {
        tier = ptr_tier->value;
    }

    auto ptr_mLinkedTraits = prop->cast_prop<yordle::data::prop::set_prop>(452446892u);
    if (ptr_mLinkedTraits != nullptr) {
        for (const auto &entry : ptr_mLinkedTraits->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mLinkedTraits.emplace(yordle::data::meta::deserialize<yordle::data::meta::TFTTraitContributionData>(ptr_entry, 3758614261u));
            }
        }
    }

    auto ptr_mMoveInterval = prop->cast_prop<yordle::data::prop::float32_prop>(3840243640u);
    if (ptr_mMoveInterval != nullptr) {
        mMoveInterval = ptr_mMoveInterval->value;
    }

    auto ptr_mMoveProximity = prop->cast_prop<yordle::data::prop::float32_prop>(378679778u);
    if (ptr_mMoveProximity != nullptr) {
        mMoveProximity = ptr_mMoveProximity->value;
    }

    auto ptr_mMoveRange = prop->cast_prop<yordle::data::prop::float32_prop>(1899884562u);
    if (ptr_mMoveRange != nullptr) {
        mMoveRange = ptr_mMoveRange->value;
    }

    auto ptr_mMoveHeight = prop->cast_prop<yordle::data::prop::float32_prop>(2993301378u);
    if (ptr_mMoveHeight != nullptr) {
        mMoveHeight = ptr_mMoveHeight->value;
    }

    auto ptr_mInitialMana = prop->cast_prop<yordle::data::prop::float32_prop>(1472619211u);
    if (ptr_mInitialMana != nullptr) {
        mInitialMana = ptr_mInitialMana->value;
    }

    auto ptr_mShopData = prop->cast_prop<yordle::data::prop::reference_prop>(3840361068u);
    if (ptr_mShopData != nullptr) {
        mShopData = ptr_mShopData->value;
    }

    auto ptr_x4e28a666 = prop->cast_prop<yordle::data::prop::string_prop>(1311286886u);
    if (ptr_x4e28a666 != nullptr) {
        x4e28a666 = ptr_x4e28a666->value;
    }

    auto ptr_xd9439003 = prop->cast_prop<yordle::data::prop::vector_prop>(3645083651u);
    if (ptr_xd9439003 != nullptr) {
        xd9439003 = ptr_xd9439003->value;
    }

    auto ptr_x4a52410b = prop->cast_prop<yordle::data::prop::bool_prop>(1246904587u);
    if (ptr_x4a52410b != nullptr) {
        x4a52410b = ptr_x4a52410b->value;
    }

    auto ptr_xef57098f = prop->cast_prop<yordle::data::prop::bool_prop>(4015458703u);
    if (ptr_xef57098f != nullptr) {
        xef57098f = ptr_xef57098f->value;
    }

    auto ptr_xbb71cb89 = prop->cast_prop<yordle::data::prop::bool_prop>(3144797065u);
    if (ptr_xbb71cb89 != nullptr) {
        xbb71cb89 = ptr_xbb71cb89->value;
    }

    auto ptr_x7cbc4762 = prop->cast_prop<yordle::data::prop::float32_prop>(2092713826u);
    if (ptr_x7cbc4762 != nullptr) {
        x7cbc4762 = ptr_x7cbc4762->value;
    }
}

yordle::data::meta::TFTDragData::TFTDragData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mHoldToHover = prop->cast_prop<yordle::data::prop::bool_prop>(3857069222u);
    if (ptr_mHoldToHover != nullptr) {
        mHoldToHover = ptr_mHoldToHover->value;
    }

    auto ptr_mHoldToDrag = prop->cast_prop<yordle::data::prop::bool_prop>(3420603526u);
    if (ptr_mHoldToDrag != nullptr) {
        mHoldToDrag = ptr_mHoldToDrag->value;
    }

    auto ptr_x44ab329e = prop->cast_prop<yordle::data::prop::bool_prop>(1152070302u);
    if (ptr_x44ab329e != nullptr) {
        x44ab329e = ptr_x44ab329e->value;
    }

    auto ptr_xd1296e95 = prop->cast_prop<yordle::data::prop::float32_prop>(3509153429u);
    if (ptr_xd1296e95 != nullptr) {
        xd1296e95 = ptr_xd1296e95->value;
    }

    auto ptr_x6d90172b = prop->cast_prop<yordle::data::prop::float32_prop>(1838159659u);
    if (ptr_x6d90172b != nullptr) {
        x6d90172b = ptr_x6d90172b->value;
    }

    auto ptr_x59129cbe = prop->cast_prop<yordle::data::prop::float32_prop>(1494391998u);
    if (ptr_x59129cbe != nullptr) {
        x59129cbe = ptr_x59129cbe->value;
    }

    auto ptr_xe2567252 = prop->cast_prop<yordle::data::prop::float32_prop>(3797316178u);
    if (ptr_xe2567252 != nullptr) {
        xe2567252 = ptr_xe2567252->value;
    }

    auto ptr_mDragBlendTime = prop->cast_prop<yordle::data::prop::float32_prop>(3110014664u);
    if (ptr_mDragBlendTime != nullptr) {
        mDragBlendTime = ptr_mDragBlendTime->value;
    }

    auto ptr_mDragPickupHeight = prop->cast_prop<yordle::data::prop::float32_prop>(1275098597u);
    if (ptr_mDragPickupHeight != nullptr) {
        mDragPickupHeight = ptr_mDragPickupHeight->value;
    }

    auto ptr_mDragPickupDuration = prop->cast_prop<yordle::data::prop::float32_prop>(141215298u);
    if (ptr_mDragPickupDuration != nullptr) {
        mDragPickupDuration = ptr_mDragPickupDuration->value;
    }

    auto ptr_mDragReleaseDuration = prop->cast_prop<yordle::data::prop::float32_prop>(1243173199u);
    if (ptr_mDragReleaseDuration != nullptr) {
        mDragReleaseDuration = ptr_mDragReleaseDuration->value;
    }

    auto ptr_mDragOvershootDuration = prop->cast_prop<yordle::data::prop::float32_prop>(1869864963u);
    if (ptr_mDragOvershootDuration != nullptr) {
        mDragOvershootDuration = ptr_mDragOvershootDuration->value;
    }

    auto ptr_mDragOvershootHeight = prop->cast_prop<yordle::data::prop::float32_prop>(1708904904u);
    if (ptr_mDragOvershootHeight != nullptr) {
        mDragOvershootHeight = ptr_mDragOvershootHeight->value;
    }

    auto ptr_mDragSoundEvent = prop->cast_prop<yordle::data::prop::string_prop>(52406491u);
    if (ptr_mDragSoundEvent != nullptr) {
        mDragSoundEvent = ptr_mDragSoundEvent->value;
    }

    auto ptr_mDropSoundEvent = prop->cast_prop<yordle::data::prop::string_prop>(1682447548u);
    if (ptr_mDropSoundEvent != nullptr) {
        mDropSoundEvent = ptr_mDropSoundEvent->value;
    }
}

yordle::data::meta::TftDropRates::TftDropRates(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDropRatesByTier = prop->cast_prop<yordle::data::prop::set_prop>(856294557u);
    if (ptr_mDropRatesByTier != nullptr) {
        for (const auto &entry : ptr_mDropRatesByTier->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mDropRatesByTier.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::xf260c3ae::xf260c3ae(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDropRatesByLevel = prop->cast_prop<yordle::data::prop::set_prop>(3135361857u);
    if (ptr_mDropRatesByLevel != nullptr) {
        for (const auto &entry : ptr_mDropRatesByLevel->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mDropRatesByLevel.emplace(yordle::data::meta::deserialize<yordle::data::meta::TftDropRates>(ptr_entry, 4070851979u));
            }
        }
    }
}

yordle::data::meta::TftEffectAmount::TftEffectAmount(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::float32_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = ptr_value->value;
    }

    auto ptr_formatString = prop->cast_prop<yordle::data::prop::string_prop>(878246187u);
    if (ptr_formatString != nullptr) {
        formatString = ptr_formatString->value;
    }
}

yordle::data::meta::TftItemComposition::TftItemComposition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mComponents = prop->cast_prop<yordle::data::prop::set_prop>(2943176860u);
    if (ptr_mComponents != nullptr) {
        for (const auto &entry : ptr_mComponents->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mComponents.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::TftItemData::TftItemData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mId = prop->cast_prop<yordle::data::prop::int32_prop>(3280944101u);
    if (ptr_mId != nullptr) {
        mId = ptr_mId->value;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mBuffName = prop->cast_prop<yordle::data::prop::string_prop>(38338834u);
    if (ptr_mBuffName != nullptr) {
        mBuffName = ptr_mBuffName->value;
    }

    auto ptr_mIsUnique = prop->cast_prop<yordle::data::prop::bool_prop>(2509677447u);
    if (ptr_mIsUnique != nullptr) {
        mIsUnique = ptr_mIsUnique->value;
    }

    auto ptr_mComposition = prop->cast_prop<yordle::data::prop::set_prop>(2340665994u);
    if (ptr_mComposition != nullptr) {
        for (const auto &entry : ptr_mComposition->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mComposition.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_xa3ac84d8 = prop->cast_prop<yordle::data::prop::set_prop>(2745992408u);
    if (ptr_xa3ac84d8 != nullptr) {
        for (const auto &entry : ptr_xa3ac84d8->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                xa3ac84d8.emplace(yordle::data::meta::deserialize<yordle::data::meta::TftItemComposition>(ptr_entry, 1707263328u));
            }
        }
    }

    auto ptr_x6752c795 = prop->cast_prop<yordle::data::prop::set_prop>(1733478293u);
    if (ptr_x6752c795 != nullptr) {
        for (const auto &entry : ptr_x6752c795->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                x6752c795.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_effectAmounts = prop->cast_prop<yordle::data::prop::set_prop>(3242028337u);
    if (ptr_effectAmounts != nullptr) {
        for (const auto &entry : ptr_effectAmounts->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                effectAmounts.emplace(yordle::data::meta::deserialize<yordle::data::meta::TftEffectAmount>(ptr_entry, 1660895988u));
            }
        }
    }

    auto ptr_ItemTags = prop->cast_prop<yordle::data::prop::set_prop>(2759486175u);
    if (ptr_ItemTags != nullptr) {
        for (const auto &entry : ptr_ItemTags->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                ItemTags.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mDisplayNameTra = prop->cast_prop<yordle::data::prop::string_prop>(3272883558u);
    if (ptr_mDisplayNameTra != nullptr) {
        mDisplayNameTra = ptr_mDisplayNameTra->value;
    }

    auto ptr_mDescriptionNameTra = prop->cast_prop<yordle::data::prop::string_prop>(1985943770u);
    if (ptr_mDescriptionNameTra != nullptr) {
        mDescriptionNameTra = ptr_mDescriptionNameTra->value;
    }

    auto ptr_mIconPath = prop->cast_prop<yordle::data::prop::string_prop>(2347641202u);
    if (ptr_mIconPath != nullptr) {
        mIconPath = ptr_mIconPath->value;
    }

    auto ptr_mColor = prop->cast_prop<yordle::data::prop::optional_prop>(1399972751u);
    if (ptr_mColor != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::color_prop>(ptr_mColor->value);
        if(ptr_entry != nullptr) {
            mColor = ptr_entry->value;
        }
    }

    auto ptr_x91d75dff = prop->cast_prop<yordle::data::prop::point_prop>(2446810623u);
    if (ptr_x91d75dff != nullptr) {
        x91d75dff = ptr_x91d75dff->value;
    }

    auto ptr_mVfxSystem = prop->cast_prop<yordle::data::prop::reference_prop>(992664269u);
    if (ptr_mVfxSystem != nullptr) {
        mVfxSystem = ptr_mVfxSystem->value;
    }

    auto ptr_x6d8fceed = prop->cast_prop<yordle::data::prop::int32_prop>(1838141165u);
    if (ptr_x6d8fceed != nullptr) {
        x6d8fceed = ptr_x6d8fceed->value;
    }
}

yordle::data::meta::TFTItemList::TFTItemList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mItems = prop->cast_prop<yordle::data::prop::set_prop>(2972511644u);
    if (ptr_mItems != nullptr) {
        for (const auto &entry : ptr_mItems->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mItems.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_VfxResourceResolver = prop->cast_prop<yordle::data::prop::reference_prop>(2679170533u);
    if (ptr_VfxResourceResolver != nullptr) {
        VfxResourceResolver = ptr_VfxResourceResolver->value;
    }
}

yordle::data::meta::x3604b3e3::x3604b3e3(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x79dafa57 = prop->cast_prop<yordle::data::prop::uint32_prop>(2044394071u);
    if (ptr_x79dafa57 != nullptr) {
        x79dafa57 = ptr_x79dafa57->value;
    }

    auto ptr_xae9687e = prop->cast_prop<yordle::data::prop::float32_prop>(183068798u);
    if (ptr_xae9687e != nullptr) {
        xae9687e = ptr_xae9687e->value;
    }
}

yordle::data::meta::TFTModeData::TFTModeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDefaultSetData = prop->cast_prop<yordle::data::prop::reference_prop>(749352059u);
    if (ptr_mDefaultSetData != nullptr) {
        mDefaultSetData = ptr_mDefaultSetData->value;
    }

    auto ptr_mDragData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3020870234u);
    if (ptr_mDragData != nullptr) {
        mDragData = yordle::data::meta::deserialize<yordle::data::meta::TFTDragData>(ptr_mDragData, 1414729207u);
    }

    auto ptr_mMobileDragData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3126367348u);
    if (ptr_mMobileDragData != nullptr) {
        mMobileDragData = yordle::data::meta::deserialize<yordle::data::meta::TFTDragData>(ptr_mMobileDragData, 1414729207u);
    }

    auto ptr_x3caeb7b4 = prop->cast_prop<yordle::data::prop::float32_prop>(1018083252u);
    if (ptr_x3caeb7b4 != nullptr) {
        x3caeb7b4 = ptr_x3caeb7b4->value;
    }

    auto ptr_x4a191241 = prop->cast_prop<yordle::data::prop::reference_prop>(1243157057u);
    if (ptr_x4a191241 != nullptr) {
        x4a191241 = ptr_x4a191241->value;
    }

    auto ptr_mTftMapSkinDefault = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(753102698u);
    if (ptr_mTftMapSkinDefault != nullptr) {
        mTftMapSkinDefault = ptr_mTftMapSkinDefault->value;
    }

    auto ptr_mTftDamageSkinDefault = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1092711647u);
    if (ptr_mTftDamageSkinDefault != nullptr) {
        mTftDamageSkinDefault = ptr_mTftDamageSkinDefault->value;
    }

    auto ptr_mDefaultTftCompanion = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3095986257u);
    if (ptr_mDefaultTftCompanion != nullptr) {
        mDefaultTftCompanion = ptr_mDefaultTftCompanion->value;
    }

    auto ptr_mTutorialTftCompanion = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2781118562u);
    if (ptr_mTutorialTftCompanion != nullptr) {
        mTutorialTftCompanion = ptr_mTutorialTftCompanion->value;
    }

    auto ptr_xb75a7951 = prop->cast_prop<yordle::data::prop::float32_prop>(3076159825u);
    if (ptr_xb75a7951 != nullptr) {
        xb75a7951 = ptr_xb75a7951->value;
    }

    auto ptr_xe13c7aa = prop->cast_prop<yordle::data::prop::set_prop>(236177322u);
    if (ptr_xe13c7aa != nullptr) {
        for (const auto &entry : ptr_xe13c7aa->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                xe13c7aa.emplace(yordle::data::meta::deserialize<yordle::data::meta::x3604b3e3>(ptr_entry, 906277859u));
            }
        }
    }

    auto ptr_x12aaf1d8 = prop->cast_prop<yordle::data::prop::set_prop>(313192920u);
    if (ptr_x12aaf1d8 != nullptr) {
        for (const auto &entry : ptr_x12aaf1d8->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                x12aaf1d8.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::TFTGameVariationData::TFTGameVariationData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mStageIconPath = prop->cast_prop<yordle::data::prop::string_prop>(4287681780u);
    if (ptr_mStageIconPath != nullptr) {
        mStageIconPath = ptr_mStageIconPath->value;
    }

    auto ptr_mTooltipIconPath = prop->cast_prop<yordle::data::prop::string_prop>(1454904977u);
    if (ptr_mTooltipIconPath != nullptr) {
        mTooltipIconPath = ptr_mTooltipIconPath->value;
    }

    auto ptr_mTooltipDescriptionTra = prop->cast_prop<yordle::data::prop::string_prop>(2648100384u);
    if (ptr_mTooltipDescriptionTra != nullptr) {
        mTooltipDescriptionTra = ptr_mTooltipDescriptionTra->value;
    }

    auto ptr_mTooltipTitleTra = prop->cast_prop<yordle::data::prop::string_prop>(1539123372u);
    if (ptr_mTooltipTitleTra != nullptr) {
        mTooltipTitleTra = ptr_mTooltipTitleTra->value;
    }

    auto ptr_mAnnouncementData = prop->cast_prop<yordle::data::prop::reference_prop>(1220847671u);
    if (ptr_mAnnouncementData != nullptr) {
        mAnnouncementData = ptr_mAnnouncementData->value;
    }
}

yordle::data::meta::TFTNotificationData::TFTNotificationData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mDurationSeconds = prop->cast_prop<yordle::data::prop::float32_prop>(103528693u);
    if (ptr_mDurationSeconds != nullptr) {
        mDurationSeconds = ptr_mDurationSeconds->value;
    }

    auto ptr_mToplineTra = prop->cast_prop<yordle::data::prop::string_prop>(3973906906u);
    if (ptr_mToplineTra != nullptr) {
        mToplineTra = ptr_mToplineTra->value;
    }

    auto ptr_mBottomlineTra = prop->cast_prop<yordle::data::prop::string_prop>(4079192626u);
    if (ptr_mBottomlineTra != nullptr) {
        mBottomlineTra = ptr_mBottomlineTra->value;
    }

    auto ptr_mIconPath = prop->cast_prop<yordle::data::prop::string_prop>(2347641202u);
    if (ptr_mIconPath != nullptr) {
        mIconPath = ptr_mIconPath->value;
    }

    auto ptr_x1e7fffb0 = prop->cast_prop<yordle::data::prop::string_prop>(511705008u);
    if (ptr_x1e7fffb0 != nullptr) {
        x1e7fffb0 = ptr_x1e7fffb0->value;
    }

    auto ptr_xde5be189 = prop->cast_prop<yordle::data::prop::string_prop>(3730563465u);
    if (ptr_xde5be189 != nullptr) {
        xde5be189 = ptr_xde5be189->value;
    }

    auto ptr_xa6874a6e = prop->cast_prop<yordle::data::prop::string_prop>(2793884270u);
    if (ptr_xa6874a6e != nullptr) {
        xa6874a6e = ptr_xa6874a6e->value;
    }
}

yordle::data::meta::TFTPhaseData::TFTPhaseData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(1239023785u);
    if (ptr_mEnabled != nullptr) {
        mEnabled = ptr_mEnabled->value;
    }

    auto ptr_mDuration = prop->cast_prop<yordle::data::prop::float32_prop>(2247611592u);
    if (ptr_mDuration != nullptr) {
        mDuration = ptr_mDuration->value;
    }

    auto ptr_mDisplay = prop->cast_prop<yordle::data::prop::uint32_prop>(1016163334u);
    if (ptr_mDisplay != nullptr) {
        mDisplay = ptr_mDisplay->value;
    }

    auto ptr_mLabel = prop->cast_prop<yordle::data::prop::string_prop>(3319925574u);
    if (ptr_mLabel != nullptr) {
        mLabel = ptr_mLabel->value;
    }

    auto ptr_mAnnouncementData = prop->cast_prop<yordle::data::prop::reference_prop>(1220847671u);
    if (ptr_mAnnouncementData != nullptr) {
        mAnnouncementData = ptr_mAnnouncementData->value;
    }
}

yordle::data::meta::TFTRoundData::TFTRoundData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mIconPath = prop->cast_prop<yordle::data::prop::string_prop>(2347641202u);
    if (ptr_mIconPath != nullptr) {
        mIconPath = ptr_mIconPath->value;
    }

    auto ptr_mDisplayNameTra = prop->cast_prop<yordle::data::prop::string_prop>(3272883558u);
    if (ptr_mDisplayNameTra != nullptr) {
        mDisplayNameTra = ptr_mDisplayNameTra->value;
    }

    auto ptr_mDescriptionTra = prop->cast_prop<yordle::data::prop::string_prop>(3159300275u);
    if (ptr_mDescriptionTra != nullptr) {
        mDescriptionTra = ptr_mDescriptionTra->value;
    }

    auto ptr_mDefaultTooltipTra = prop->cast_prop<yordle::data::prop::string_prop>(4074052049u);
    if (ptr_mDefaultTooltipTra != nullptr) {
        mDefaultTooltipTra = ptr_mDefaultTooltipTra->value;
    }

    auto ptr_mStateTooltipsTra = prop->cast_prop<yordle::data::prop::map_prop>(1630940802u);
    if (ptr_mStateTooltipsTra != nullptr) {
        for (const auto &pair : ptr_mStateTooltipsTra->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mStateTooltipsTra[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_xd20054c0 = prop->cast_prop<yordle::data::prop::string_prop>(3523237056u);
    if (ptr_xd20054c0 != nullptr) {
        xd20054c0 = ptr_xd20054c0->value;
    }

    auto ptr_x304b0330 = prop->cast_prop<yordle::data::prop::string_prop>(810222384u);
    if (ptr_x304b0330 != nullptr) {
        x304b0330 = ptr_x304b0330->value;
    }

    auto ptr_xf862cc05 = prop->cast_prop<yordle::data::prop::string_prop>(4167224325u);
    if (ptr_xf862cc05 != nullptr) {
        xf862cc05 = ptr_xf862cc05->value;
    }

    auto ptr_xcb830e67 = prop->cast_prop<yordle::data::prop::string_prop>(3414363751u);
    if (ptr_xcb830e67 != nullptr) {
        xcb830e67 = ptr_xcb830e67->value;
    }

    auto ptr_mTftDamageSidewall = prop->cast_prop<yordle::data::prop::string_prop>(3373210076u);
    if (ptr_mTftDamageSidewall != nullptr) {
        mTftDamageSidewall = ptr_mTftDamageSidewall->value;
    }

    auto ptr_x4cb318cd = prop->cast_prop<yordle::data::prop::string_prop>(1286805709u);
    if (ptr_x4cb318cd != nullptr) {
        x4cb318cd = ptr_x4cb318cd->value;
    }

    auto ptr_mDraftArrival = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1260326368u);
    if (ptr_mDraftArrival != nullptr) {
        mDraftArrival = yordle::data::meta::deserialize<yordle::data::meta::TFTPhaseData>(ptr_mDraftArrival, 634061068u);
    }

    auto ptr_mDraft = prop->cast_prop<yordle::data::prop::inline_structure_prop>(976200171u);
    if (ptr_mDraft != nullptr) {
        mDraft = yordle::data::meta::deserialize<yordle::data::meta::TFTPhaseData>(ptr_mDraft, 634061068u);
    }

    auto ptr_mDraftDeparture = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1545148161u);
    if (ptr_mDraftDeparture != nullptr) {
        mDraftDeparture = yordle::data::meta::deserialize<yordle::data::meta::TFTPhaseData>(ptr_mDraftDeparture, 634061068u);
    }

    auto ptr_mPlanningArrival = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2085312542u);
    if (ptr_mPlanningArrival != nullptr) {
        mPlanningArrival = yordle::data::meta::deserialize<yordle::data::meta::TFTPhaseData>(ptr_mPlanningArrival, 634061068u);
    }

    auto ptr_mPlanning = prop->cast_prop<yordle::data::prop::inline_structure_prop>(185263865u);
    if (ptr_mPlanning != nullptr) {
        mPlanning = yordle::data::meta::deserialize<yordle::data::meta::TFTPhaseData>(ptr_mPlanning, 634061068u);
    }

    auto ptr_mPlanningDeparture = prop->cast_prop<yordle::data::prop::inline_structure_prop>(125206803u);
    if (ptr_mPlanningDeparture != nullptr) {
        mPlanningDeparture = yordle::data::meta::deserialize<yordle::data::meta::TFTPhaseData>(ptr_mPlanningDeparture, 634061068u);
    }

    auto ptr_mCombatArrival = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2740827293u);
    if (ptr_mCombatArrival != nullptr) {
        mCombatArrival = yordle::data::meta::deserialize<yordle::data::meta::TFTPhaseData>(ptr_mCombatArrival, 634061068u);
    }

    auto ptr_mCombat = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4253486376u);
    if (ptr_mCombat != nullptr) {
        mCombat = yordle::data::meta::deserialize<yordle::data::meta::TFTPhaseData>(ptr_mCombat, 634061068u);
    }

    auto ptr_mCombatDeparture = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4165626500u);
    if (ptr_mCombatDeparture != nullptr) {
        mCombatDeparture = yordle::data::meta::deserialize<yordle::data::meta::TFTPhaseData>(ptr_mCombatDeparture, 634061068u);
    }

    auto ptr_mScriptData = prop->cast_prop<yordle::data::prop::map_prop>(2029389651u);
    if (ptr_mScriptData != nullptr) {
        for (const auto &pair : ptr_mScriptData->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mScriptData[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::GameModeConstant>(ptr_value, 1670770484u);
            }
        }
    }
}

yordle::data::meta::TFTStageData::TFTStageData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mRounds = prop->cast_prop<yordle::data::prop::set_prop>(548140649u);
    if (ptr_mRounds != nullptr) {
        for (const auto &entry : ptr_mRounds->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mRounds.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::TFTSetData::TFTSetData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TftGameType = prop->cast_prop<yordle::data::prop::uint32_prop>(2833009347u);
    if (ptr_TftGameType != nullptr) {
        TftGameType = ptr_TftGameType->value;
    }

    auto ptr_number = prop->cast_prop<yordle::data::prop::uint32_prop>(467038368u);
    if (ptr_number != nullptr) {
        number = ptr_number->value;
    }

    auto ptr_Mutator = prop->cast_prop<yordle::data::prop::string_prop>(3473488713u);
    if (ptr_Mutator != nullptr) {
        Mutator = ptr_Mutator->value;
    }

    auto ptr_DebugCharacterLists = prop->cast_prop<yordle::data::prop::set_prop>(1919625892u);
    if (ptr_DebugCharacterLists != nullptr) {
        for (const auto &entry : ptr_DebugCharacterLists->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                DebugCharacterLists.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_characterLists = prop->cast_prop<yordle::data::prop::set_prop>(137362161u);
    if (ptr_characterLists != nullptr) {
        for (const auto &entry : ptr_characterLists->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                characterLists.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_itemLists = prop->cast_prop<yordle::data::prop::set_prop>(1298046227u);
    if (ptr_itemLists != nullptr) {
        for (const auto &entry : ptr_itemLists->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                itemLists.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_traitList = prop->cast_prop<yordle::data::prop::reference_prop>(2970411059u);
    if (ptr_traitList != nullptr) {
        traitList = ptr_traitList->value;
    }

    auto ptr_traits = prop->cast_prop<yordle::data::prop::set_prop>(2288068616u);
    if (ptr_traits != nullptr) {
        for (const auto &entry : ptr_traits->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                traits.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_DropRateTables = prop->cast_prop<yordle::data::prop::map_prop>(721831827u);
    if (ptr_DropRateTables != nullptr) {
        for (const auto &pair : ptr_DropRateTables->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                DropRateTables[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_ScriptData = prop->cast_prop<yordle::data::prop::map_prop>(3528691290u);
    if (ptr_ScriptData != nullptr) {
        for (const auto &pair : ptr_ScriptData->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                ScriptData[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::GameModeConstant>(ptr_value, 1670770484u);
            }
        }
    }

    auto ptr_stages = prop->cast_prop<yordle::data::prop::set_prop>(77660666u);
    if (ptr_stages != nullptr) {
        for (const auto &entry : ptr_stages->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                stages.emplace(yordle::data::meta::deserialize<yordle::data::meta::TFTStageData>(ptr_entry, 4147633913u));
            }
        }
    }

    auto ptr_UnitUpgrades = prop->cast_prop<yordle::data::prop::set_prop>(1739760738u);
    if (ptr_UnitUpgrades != nullptr) {
        for (const auto &entry : ptr_UnitUpgrades->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                UnitUpgrades.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_ScriptDataObjectLists = prop->cast_prop<yordle::data::prop::set_prop>(2288422058u);
    if (ptr_ScriptDataObjectLists != nullptr) {
        for (const auto &entry : ptr_ScriptDataObjectLists->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                ScriptDataObjectLists.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_VfxResourceResolver = prop->cast_prop<yordle::data::prop::reference_prop>(2679170533u);
    if (ptr_VfxResourceResolver != nullptr) {
        VfxResourceResolver = ptr_VfxResourceResolver->value;
    }
}

yordle::data::meta::TftShopData::TftShopData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mRarity = prop->cast_prop<yordle::data::prop::uint8_prop>(520217347u);
    if (ptr_mRarity != nullptr) {
        mRarity = ptr_mRarity->value;
    }

    auto ptr_mPortraitIconPath = prop->cast_prop<yordle::data::prop::string_prop>(1676803177u);
    if (ptr_mPortraitIconPath != nullptr) {
        mPortraitIconPath = ptr_mPortraitIconPath->value;
    }

    auto ptr_mIconPath = prop->cast_prop<yordle::data::prop::string_prop>(2347641202u);
    if (ptr_mIconPath != nullptr) {
        mIconPath = ptr_mIconPath->value;
    }

    auto ptr_mMobileIconPath = prop->cast_prop<yordle::data::prop::string_prop>(1673645048u);
    if (ptr_mMobileIconPath != nullptr) {
        mMobileIconPath = ptr_mMobileIconPath->value;
    }

    auto ptr_mMobileSmallIconPath = prop->cast_prop<yordle::data::prop::string_prop>(584007147u);
    if (ptr_mMobileSmallIconPath != nullptr) {
        mMobileSmallIconPath = ptr_mMobileSmallIconPath->value;
    }

    auto ptr_mDisplayNameTra = prop->cast_prop<yordle::data::prop::string_prop>(3272883558u);
    if (ptr_mDisplayNameTra != nullptr) {
        mDisplayNameTra = ptr_mDisplayNameTra->value;
    }

    auto ptr_mAbilityNameTra = prop->cast_prop<yordle::data::prop::string_prop>(2275842654u);
    if (ptr_mAbilityNameTra != nullptr) {
        mAbilityNameTra = ptr_mAbilityNameTra->value;
    }

    auto ptr_mDescriptionTra = prop->cast_prop<yordle::data::prop::string_prop>(3159300275u);
    if (ptr_mDescriptionTra != nullptr) {
        mDescriptionTra = ptr_mDescriptionTra->value;
    }
}

yordle::data::meta::TFTStatData::TFTStatData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mType = prop->cast_prop<yordle::data::prop::uint32_prop>(2280500912u);
    if (ptr_mType != nullptr) {
        mType = ptr_mType->value;
    }

    auto ptr_mContext = prop->cast_prop<yordle::data::prop::uint32_prop>(4095106763u);
    if (ptr_mContext != nullptr) {
        mContext = ptr_mContext->value;
    }

    auto ptr_mLifetime = prop->cast_prop<yordle::data::prop::uint32_prop>(3878970827u);
    if (ptr_mLifetime != nullptr) {
        mLifetime = ptr_mLifetime->value;
    }

    auto ptr_xf3a339c = prop->cast_prop<yordle::data::prop::int32_prop>(255472540u);
    if (ptr_xf3a339c != nullptr) {
        xf3a339c = ptr_xf3a339c->value;
    }
}

yordle::data::meta::TFTStreak::TFTStreak(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMinimumStreakLength = prop->cast_prop<yordle::data::prop::optional_prop>(2940314578u);
    if (ptr_mMinimumStreakLength != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(ptr_mMinimumStreakLength->value);
        if(ptr_entry != nullptr) {
            mMinimumStreakLength = ptr_entry->value;
        }
    }

    auto ptr_mMaximumStreakLength = prop->cast_prop<yordle::data::prop::optional_prop>(3076655600u);
    if (ptr_mMaximumStreakLength != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(ptr_mMaximumStreakLength->value);
        if(ptr_entry != nullptr) {
            mMaximumStreakLength = ptr_entry->value;
        }
    }

    auto ptr_mGoldRewardAmount = prop->cast_prop<yordle::data::prop::uint32_prop>(3278832061u);
    if (ptr_mGoldRewardAmount != nullptr) {
        mGoldRewardAmount = ptr_mGoldRewardAmount->value;
    }

    auto ptr_mStreakFormat = prop->cast_prop<yordle::data::prop::string_prop>(3234469753u);
    if (ptr_mStreakFormat != nullptr) {
        mStreakFormat = ptr_mStreakFormat->value;
    }
}

yordle::data::meta::TFTStreakData::TFTStreakData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xc3f540ed = prop->cast_prop<yordle::data::prop::set_prop>(3287630061u);
    if (ptr_xc3f540ed != nullptr) {
        for (const auto &entry : ptr_xc3f540ed->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                xc3f540ed.emplace(yordle::data::meta::deserialize<yordle::data::meta::TFTStreak>(ptr_entry, 646351631u));
            }
        }
    }

    auto ptr_mLossStreaks = prop->cast_prop<yordle::data::prop::set_prop>(3004055014u);
    if (ptr_mLossStreaks != nullptr) {
        for (const auto &entry : ptr_mLossStreaks->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mLossStreaks.emplace(yordle::data::meta::deserialize<yordle::data::meta::TFTStreak>(ptr_entry, 646351631u));
            }
        }
    }
}

yordle::data::meta::TFTTraitContributionData::TFTTraitContributionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TraitData = prop->cast_prop<yordle::data::prop::reference_prop>(87695155u);
    if (ptr_TraitData != nullptr) {
        TraitData = ptr_TraitData->value;
    }

    auto ptr_Amount = prop->cast_prop<yordle::data::prop::int32_prop>(4152741449u);
    if (ptr_Amount != nullptr) {
        Amount = ptr_Amount->value;
    }

    auto ptr_xa91037f5 = prop->cast_prop<yordle::data::prop::bool_prop>(2836412405u);
    if (ptr_xa91037f5 != nullptr) {
        xa91037f5 = ptr_xa91037f5->value;
    }
}

yordle::data::meta::TFTTraitSetData::TFTTraitSetData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMinUnits = prop->cast_prop<yordle::data::prop::uint32_prop>(1956555563u);
    if (ptr_mMinUnits != nullptr) {
        mMinUnits = ptr_mMinUnits->value;
    }

    auto ptr_mMaxUnits = prop->cast_prop<yordle::data::prop::optional_prop>(1685855689u);
    if (ptr_mMaxUnits != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(ptr_mMaxUnits->value);
        if(ptr_entry != nullptr) {
            mMaxUnits = ptr_entry->value;
        }
    }

    auto ptr_mTeamToBuff = prop->cast_prop<yordle::data::prop::uint8_prop>(75743297u);
    if (ptr_mTeamToBuff != nullptr) {
        mTeamToBuff = ptr_mTeamToBuff->value;
    }

    auto ptr_mTargetStrategy = prop->cast_prop<yordle::data::prop::uint8_prop>(2516677504u);
    if (ptr_mTargetStrategy != nullptr) {
        mTargetStrategy = ptr_mTargetStrategy->value;
    }

    auto ptr_xa8c51db0 = prop->cast_prop<yordle::data::prop::optional_prop>(2831490480u);
    if (ptr_xa8c51db0 != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(ptr_xa8c51db0->value);
        if(ptr_entry != nullptr) {
            xa8c51db0 = ptr_entry->value;
        }
    }

    auto ptr_mStyle = prop->cast_prop<yordle::data::prop::uint8_prop>(4070665549u);
    if (ptr_mStyle != nullptr) {
        mStyle = ptr_mStyle->value;
    }

    auto ptr_mBuffName = prop->cast_prop<yordle::data::prop::string_prop>(38338834u);
    if (ptr_mBuffName != nullptr) {
        mBuffName = ptr_mBuffName->value;
    }

    auto ptr_mActivatedBuffName = prop->cast_prop<yordle::data::prop::string_prop>(1435427873u);
    if (ptr_mActivatedBuffName != nullptr) {
        mActivatedBuffName = ptr_mActivatedBuffName->value;
    }

    auto ptr_effectAmounts = prop->cast_prop<yordle::data::prop::set_prop>(3242028337u);
    if (ptr_effectAmounts != nullptr) {
        for (const auto &entry : ptr_effectAmounts->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                effectAmounts.emplace(yordle::data::meta::deserialize<yordle::data::meta::TftEffectAmount>(ptr_entry, 1660895988u));
            }
        }
    }
}

yordle::data::meta::TftTraitData::TftTraitData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mDisplayNameTra = prop->cast_prop<yordle::data::prop::string_prop>(3272883558u);
    if (ptr_mDisplayNameTra != nullptr) {
        mDisplayNameTra = ptr_mDisplayNameTra->value;
    }

    auto ptr_mUnitSectionTra = prop->cast_prop<yordle::data::prop::string_prop>(3805595466u);
    if (ptr_mUnitSectionTra != nullptr) {
        mUnitSectionTra = ptr_mUnitSectionTra->value;
    }

    auto ptr_mDescriptionNameTra = prop->cast_prop<yordle::data::prop::string_prop>(1985943770u);
    if (ptr_mDescriptionNameTra != nullptr) {
        mDescriptionNameTra = ptr_mDescriptionNameTra->value;
    }

    auto ptr_mDisplayNameIcon = prop->cast_prop<yordle::data::prop::string_prop>(3071677840u);
    if (ptr_mDisplayNameIcon != nullptr) {
        mDisplayNameIcon = ptr_mDisplayNameIcon->value;
    }

    auto ptr_mIconPath = prop->cast_prop<yordle::data::prop::string_prop>(2347641202u);
    if (ptr_mIconPath != nullptr) {
        mIconPath = ptr_mIconPath->value;
    }

    auto ptr_mTraitSets = prop->cast_prop<yordle::data::prop::set_prop>(2651522645u);
    if (ptr_mTraitSets != nullptr) {
        for (const auto &entry : ptr_mTraitSets->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mTraitSets.emplace(yordle::data::meta::deserialize<yordle::data::meta::TFTTraitSetData>(ptr_entry, 3241198053u));
            }
        }
    }
}

yordle::data::meta::TftTraitList::TftTraitList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTraits = prop->cast_prop<yordle::data::prop::set_prop>(1367954925u);
    if (ptr_mTraits != nullptr) {
        for (const auto &entry : ptr_mTraits->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mTraits.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_VfxResourceResolver = prop->cast_prop<yordle::data::prop::reference_prop>(2679170533u);
    if (ptr_VfxResourceResolver != nullptr) {
        VfxResourceResolver = ptr_VfxResourceResolver->value;
    }
}

yordle::data::meta::TFTUnitUpgradeData::TFTUnitUpgradeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_xd6debdbe = prop->cast_prop<yordle::data::prop::uint8_prop>(3604921790u);
    if (ptr_xd6debdbe != nullptr) {
        xd6debdbe = ptr_xd6debdbe->value;
    }
}

yordle::data::meta::TFTHudAnnouncementData::TFTHudAnnouncementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSceneTransitionIn = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3145355184u);
    if (ptr_mSceneTransitionIn != nullptr) {
        mSceneTransitionIn = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mSceneTransitionIn, 3273533950u);
    }

    auto ptr_mSceneTransitionOut = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3336154325u);
    if (ptr_mSceneTransitionOut != nullptr) {
        mSceneTransitionOut = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mSceneTransitionOut, 3273533950u);
    }
}

yordle::data::meta::TFTHudCombatRecapData::TFTHudCombatRecapData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPanelTransition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3747431117u);
    if (ptr_mPanelTransition != nullptr) {
        mPanelTransition = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mPanelTransition, 3273533950u);
    }

    auto ptr_x4544719b = prop->cast_prop<yordle::data::prop::float32_prop>(1162113435u);
    if (ptr_x4544719b != nullptr) {
        x4544719b = ptr_x4544719b->value;
    }
}

yordle::data::meta::TFTHudNotificationsData::TFTHudNotificationsData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSceneTransitionIn = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3145355184u);
    if (ptr_mSceneTransitionIn != nullptr) {
        mSceneTransitionIn = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mSceneTransitionIn, 3273533950u);
    }

    auto ptr_mSceneTransitionOut = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3336154325u);
    if (ptr_mSceneTransitionOut != nullptr) {
        mSceneTransitionOut = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mSceneTransitionOut, 3273533950u);
    }
}

yordle::data::meta::xda3c6dc6::xda3c6dc6(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSceneTransitionIn = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3145355184u);
    if (ptr_mSceneTransitionIn != nullptr) {
        mSceneTransitionIn = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mSceneTransitionIn, 3273533950u);
    }

    auto ptr_mSceneTransitionOut = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3336154325u);
    if (ptr_mSceneTransitionOut != nullptr) {
        mSceneTransitionOut = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mSceneTransitionOut, 3273533950u);
    }
}

yordle::data::meta::TFTHudScoreboardData::TFTHudScoreboardData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x840f5062 = prop->cast_prop<yordle::data::prop::float32_prop>(2215596130u);
    if (ptr_x840f5062 != nullptr) {
        x840f5062 = ptr_x840f5062->value;
    }

    auto ptr_x254c8137 = prop->cast_prop<yordle::data::prop::float32_prop>(625770807u);
    if (ptr_x254c8137 != nullptr) {
        x254c8137 = ptr_x254c8137->value;
    }

    auto ptr_xf504817a = prop->cast_prop<yordle::data::prop::float32_prop>(4110713210u);
    if (ptr_xf504817a != nullptr) {
        xf504817a = ptr_xf504817a->value;
    }
}

yordle::data::meta::TFTHudStageData::TFTHudStageData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xa11246b8 = prop->cast_prop<yordle::data::prop::float32_prop>(2702329528u);
    if (ptr_xa11246b8 != nullptr) {
        xa11246b8 = ptr_xa11246b8->value;
    }
}

yordle::data::meta::TFTHudUnitShopData::TFTHudUnitShopData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x88606883 = prop->cast_prop<yordle::data::prop::float32_prop>(2288019587u);
    if (ptr_x88606883 != nullptr) {
        x88606883 = ptr_x88606883->value;
    }

    auto ptr_xc38c6ba9 = prop->cast_prop<yordle::data::prop::float32_prop>(3280759721u);
    if (ptr_xc38c6ba9 != nullptr) {
        xc38c6ba9 = ptr_xc38c6ba9->value;
    }
}

yordle::data::meta::TFTHudMobileDownscaleData::TFTHudMobileDownscaleData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xd4d2ea52 = prop->cast_prop<yordle::data::prop::float32_prop>(3570592338u);
    if (ptr_xd4d2ea52 != nullptr) {
        xd4d2ea52 = ptr_xd4d2ea52->value;
    }

    auto ptr_mDownscale = prop->cast_prop<yordle::data::prop::float32_prop>(2798263326u);
    if (ptr_mDownscale != nullptr) {
        mDownscale = ptr_mDownscale->value;
    }
}

yordle::data::meta::TFTHudTunables::TFTHudTunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAnnouncementData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1220847671u);
    if (ptr_mAnnouncementData != nullptr) {
        mAnnouncementData = yordle::data::meta::deserialize<yordle::data::meta::TFTHudAnnouncementData>(ptr_mAnnouncementData, 305388529u);
    }

    auto ptr_mCombatRecapData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(36378503u);
    if (ptr_mCombatRecapData != nullptr) {
        mCombatRecapData = yordle::data::meta::deserialize<yordle::data::meta::TFTHudCombatRecapData>(ptr_mCombatRecapData, 1573027425u);
    }

    auto ptr_mNotificationsData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4040593892u);
    if (ptr_mNotificationsData != nullptr) {
        mNotificationsData = yordle::data::meta::deserialize<yordle::data::meta::TFTHudNotificationsData>(ptr_mNotificationsData, 2068371646u);
    }

    auto ptr_mZoomTransitionData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1719092004u);
    if (ptr_mZoomTransitionData != nullptr) {
        mZoomTransitionData = yordle::data::meta::deserialize<yordle::data::meta::xda3c6dc6>(ptr_mZoomTransitionData, 3661393350u);
    }

    auto ptr_mScoreboardData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(53570106u);
    if (ptr_mScoreboardData != nullptr) {
        mScoreboardData = yordle::data::meta::deserialize<yordle::data::meta::TFTHudScoreboardData>(ptr_mScoreboardData, 1850343160u);
    }

    auto ptr_mStageData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(272066278u);
    if (ptr_mStageData != nullptr) {
        mStageData = yordle::data::meta::deserialize<yordle::data::meta::TFTHudStageData>(ptr_mStageData, 1839038444u);
    }

    auto ptr_x249fe588 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(614458760u);
    if (ptr_x249fe588 != nullptr) {
        x249fe588 = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_x249fe588, 3273533950u);
    }

    auto ptr_mMobileDownscaleData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(731802664u);
    if (ptr_mMobileDownscaleData != nullptr) {
        mMobileDownscaleData = yordle::data::meta::deserialize<yordle::data::meta::TFTHudMobileDownscaleData>(ptr_mMobileDownscaleData, 3672021242u);
    }

    auto ptr_mUnitShopData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1666522042u);
    if (ptr_mUnitShopData != nullptr) {
        mUnitShopData = yordle::data::meta::deserialize<yordle::data::meta::TFTHudUnitShopData>(ptr_mUnitShopData, 924097896u);
    }
}

yordle::data::meta::x2610e5a7::x2610e5a7(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xfa144e3e = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4195634750u);
    if (ptr_xfa144e3e != nullptr) {
        xfa144e3e = ptr_xfa144e3e->value;
    }

    auto ptr_ItemIcon = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3708628627u);
    if (ptr_ItemIcon != nullptr) {
        ItemIcon = ptr_ItemIcon->value;
    }

    auto ptr_xbdcceafd = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3184323325u);
    if (ptr_xbdcceafd != nullptr) {
        xbdcceafd = ptr_xbdcceafd->value;
    }

    auto ptr_x7af87ddd = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2063105501u);
    if (ptr_x7af87ddd != nullptr) {
        x7af87ddd = ptr_x7af87ddd->value;
    }

    auto ptr_x791b47a2 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2031830946u);
    if (ptr_x791b47a2 != nullptr) {
        x791b47a2 = ptr_x791b47a2->value;
    }

    auto ptr_x30145a7e = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(806640254u);
    if (ptr_x30145a7e != nullptr) {
        x30145a7e = ptr_x30145a7e->value;
    }
}

yordle::data::meta::x2781ed6b::x2781ed6b(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TitleKey = prop->cast_prop<yordle::data::prop::string_prop>(2320850208u);
    if (ptr_TitleKey != nullptr) {
        TitleKey = ptr_TitleKey->value;
    }

    auto ptr_BodyKey = prop->cast_prop<yordle::data::prop::string_prop>(2280769820u);
    if (ptr_BodyKey != nullptr) {
        BodyKey = ptr_BodyKey->value;
    }
}

yordle::data::meta::ObjectTags::ObjectTags(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTagList = prop->cast_prop<yordle::data::prop::string_prop>(3361814064u);
    if (ptr_mTagList != nullptr) {
        mTagList = ptr_mTagList->value;
    }
}

yordle::data::meta::NumberFormattingBehavior::NumberFormattingBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x6a015824 = prop->cast_prop<yordle::data::prop::uint32_prop>(1778472996u);
    if (ptr_x6a015824 != nullptr) {
        x6a015824 = ptr_x6a015824->value;
    }

    auto ptr_x9892a348 = prop->cast_prop<yordle::data::prop::bool_prop>(2559746888u);
    if (ptr_x9892a348 != nullptr) {
        x9892a348 = ptr_x9892a348->value;
    }

    auto ptr_x35feae85 = prop->cast_prop<yordle::data::prop::bool_prop>(905883269u);
    if (ptr_x35feae85 != nullptr) {
        x35feae85 = ptr_x35feae85->value;
    }
}

yordle::data::meta::NumberFormattingData::NumberFormattingData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x5b862d47 = prop->cast_prop<yordle::data::prop::string_prop>(1535520071u);
    if (ptr_x5b862d47 != nullptr) {
        x5b862d47 = ptr_x5b862d47->value;
    }

    auto ptr_xd183213b = prop->cast_prop<yordle::data::prop::string_prop>(3515031867u);
    if (ptr_xd183213b != nullptr) {
        xd183213b = ptr_xd183213b->value;
    }

    auto ptr_xb995fb1f = prop->cast_prop<yordle::data::prop::string_prop>(3113614111u);
    if (ptr_xb995fb1f != nullptr) {
        xb995fb1f = ptr_xb995fb1f->value;
    }

    auto ptr_x40f5bd16 = prop->cast_prop<yordle::data::prop::string_prop>(1089846550u);
    if (ptr_x40f5bd16 != nullptr) {
        x40f5bd16 = ptr_x40f5bd16->value;
    }

    auto ptr_xedd8ea83 = prop->cast_prop<yordle::data::prop::string_prop>(3990416003u);
    if (ptr_xedd8ea83 != nullptr) {
        xedd8ea83 = ptr_xedd8ea83->value;
    }

    auto ptr_x31169dff = prop->cast_prop<yordle::data::prop::string_prop>(823565823u);
    if (ptr_x31169dff != nullptr) {
        x31169dff = ptr_x31169dff->value;
    }

    auto ptr_xe4f5bdce = prop->cast_prop<yordle::data::prop::string_prop>(3841310158u);
    if (ptr_xe4f5bdce != nullptr) {
        xe4f5bdce = ptr_xe4f5bdce->value;
    }

    auto ptr_x12de6ec = prop->cast_prop<yordle::data::prop::string_prop>(19785452u);
    if (ptr_x12de6ec != nullptr) {
        x12de6ec = ptr_x12de6ec->value;
    }

    auto ptr_x70177bf1 = prop->cast_prop<yordle::data::prop::string_prop>(1880587249u);
    if (ptr_x70177bf1 != nullptr) {
        x70177bf1 = ptr_x70177bf1->value;
    }

    auto ptr_xb0c63265 = prop->cast_prop<yordle::data::prop::string_prop>(2965779045u);
    if (ptr_xb0c63265 != nullptr) {
        xb0c63265 = ptr_xb0c63265->value;
    }

    auto ptr_x89a709fb = prop->cast_prop<yordle::data::prop::string_prop>(2309425659u);
    if (ptr_x89a709fb != nullptr) {
        x89a709fb = ptr_x89a709fb->value;
    }

    auto ptr_xf3ee8811 = prop->cast_prop<yordle::data::prop::string_prop>(4092495889u);
    if (ptr_xf3ee8811 != nullptr) {
        xf3ee8811 = ptr_xf3ee8811->value;
    }

    auto ptr_xef853971 = prop->cast_prop<yordle::data::prop::string_prop>(4018485617u);
    if (ptr_xef853971 != nullptr) {
        xef853971 = ptr_xef853971->value;
    }

    auto ptr_xfd7c73b7 = prop->cast_prop<yordle::data::prop::string_prop>(4252791735u);
    if (ptr_xfd7c73b7 != nullptr) {
        xfd7c73b7 = ptr_xfd7c73b7->value;
    }

    auto ptr_xdd2fcd42 = prop->cast_prop<yordle::data::prop::string_prop>(3710897474u);
    if (ptr_xdd2fcd42 != nullptr) {
        xdd2fcd42 = ptr_xdd2fcd42->value;
    }

    auto ptr_xc3310cda = prop->cast_prop<yordle::data::prop::string_prop>(3274771674u);
    if (ptr_xc3310cda != nullptr) {
        xc3310cda = ptr_xc3310cda->value;
    }

    auto ptr_x7a4d89bb = prop->cast_prop<yordle::data::prop::map_prop>(2051901883u);
    if (ptr_x7a4d89bb != nullptr) {
        for (const auto &pair : ptr_x7a4d89bb->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                x7a4d89bb[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::AnnouncementDefinitionData::AnnouncementDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_priority = prop->cast_prop<yordle::data::prop::uint16_prop>(2498028297u);
    if (ptr_priority != nullptr) {
        priority = ptr_priority->value;
    }

    auto ptr_CanBeMadeObsolete = prop->cast_prop<yordle::data::prop::bool_prop>(1684268630u);
    if (ptr_CanBeMadeObsolete != nullptr) {
        CanBeMadeObsolete = ptr_CanBeMadeObsolete->value;
    }

    auto ptr_MakeLowerPriorityEventsObsolete = prop->cast_prop<yordle::data::prop::bool_prop>(704574230u);
    if (ptr_MakeLowerPriorityEventsObsolete != nullptr) {
        MakeLowerPriorityEventsObsolete = ptr_MakeLowerPriorityEventsObsolete->value;
    }

    auto ptr_Style = prop->cast_prop<yordle::data::prop::reference_prop>(2888859350u);
    if (ptr_Style != nullptr) {
        Style = ptr_Style->value;
    }

    auto ptr_TextKey = prop->cast_prop<yordle::data::prop::string_prop>(1816208293u);
    if (ptr_TextKey != nullptr) {
        TextKey = ptr_TextKey->value;
    }

    auto ptr_ChatMessageKey = prop->cast_prop<yordle::data::prop::string_prop>(2210678585u);
    if (ptr_ChatMessageKey != nullptr) {
        ChatMessageKey = ptr_ChatMessageKey->value;
    }

    auto ptr_SoundKey = prop->cast_prop<yordle::data::prop::string_prop>(1828480563u);
    if (ptr_SoundKey != nullptr) {
        SoundKey = ptr_SoundKey->value;
    }

    auto ptr_SpectatorSoundKey = prop->cast_prop<yordle::data::prop::string_prop>(2746786216u);
    if (ptr_SpectatorSoundKey != nullptr) {
        SpectatorSoundKey = ptr_SpectatorSoundKey->value;
    }

    auto ptr_CommonElements = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(352267005u);
    if (ptr_CommonElements != nullptr) {
        CommonElements = ptr_CommonElements->value;
    }

    auto ptr_AlliedElements = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1645338247u);
    if (ptr_AlliedElements != nullptr) {
        AlliedElements = ptr_AlliedElements->value;
    }

    auto ptr_EnemyElements = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3771082250u);
    if (ptr_EnemyElements != nullptr) {
        EnemyElements = ptr_EnemyElements->value;
    }
}

yordle::data::meta::AnnouncementDefinition::AnnouncementDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_DefaultData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2389500030u);
    if (ptr_DefaultData != nullptr) {
        DefaultData = yordle::data::meta::deserialize<yordle::data::meta::AnnouncementDefinitionData>(ptr_DefaultData, 502828211u);
    }

    auto ptr_MutatorOverrides = prop->cast_prop<yordle::data::prop::map_prop>(2269448734u);
    if (ptr_MutatorOverrides != nullptr) {
        for (const auto &pair : ptr_MutatorOverrides->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                MutatorOverrides[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::AnnouncementDefinitionData>(ptr_value, 502828211u);
            }
        }
    }
}

yordle::data::meta::x78387eb5::x78387eb5(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : AnnouncementDefinition(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::AnnouncementStyleBasic::AnnouncementStyleBasic(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TextField = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(363657258u);
    if (ptr_TextField != nullptr) {
        TextField = ptr_TextField->value;
    }

    auto ptr_MinAnnouncementDuration = prop->cast_prop<yordle::data::prop::float32_prop>(2089552092u);
    if (ptr_MinAnnouncementDuration != nullptr) {
        MinAnnouncementDuration = ptr_MinAnnouncementDuration->value;
    }

    auto ptr_x3f43172e = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1061361454u);
    if (ptr_x3f43172e != nullptr) {
        x3f43172e = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_x3f43172e, 3273533950u);
    }

    auto ptr_xcc99a2db = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3432620763u);
    if (ptr_xcc99a2db != nullptr) {
        xcc99a2db = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_xcc99a2db, 3273533950u);
    }
}

yordle::data::meta::x48c9ff38::x48c9ff38(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : AnnouncementStyleBasic(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_SourceIcon = prop->cast_prop<yordle::data::prop::reference_prop>(2120735593u);
    if (ptr_SourceIcon != nullptr) {
        SourceIcon = ptr_SourceIcon->value;
    }
}

yordle::data::meta::xaa95a271::xaa95a271(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : AnnouncementStyleBasic(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_LeftIcon = prop->cast_prop<yordle::data::prop::reference_prop>(4062313265u);
    if (ptr_LeftIcon != nullptr) {
        LeftIcon = ptr_LeftIcon->value;
    }

    auto ptr_RightIcon = prop->cast_prop<yordle::data::prop::reference_prop>(2055625488u);
    if (ptr_RightIcon != nullptr) {
        RightIcon = ptr_RightIcon->value;
    }
}

yordle::data::meta::AnnouncementIcon::AnnouncementIcon(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x108e8710 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(277776144u);
    if (ptr_x108e8710 != nullptr) {
        x108e8710 = ptr_x108e8710->value;
    }

    auto ptr_xc2e2a2df = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3269632735u);
    if (ptr_xc2e2a2df != nullptr) {
        xc2e2a2df = ptr_xc2e2a2df->value;
    }

    auto ptr_x3e37c63b = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1043842619u);
    if (ptr_x3e37c63b != nullptr) {
        x3e37c63b = ptr_x3e37c63b->value;
    }

    auto ptr_AlliedElementGroup = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(338274625u);
    if (ptr_AlliedElementGroup != nullptr) {
        AlliedElementGroup = ptr_AlliedElementGroup->value;
    }

    auto ptr_EnemyElementGroup = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3979920804u);
    if (ptr_EnemyElementGroup != nullptr) {
        EnemyElementGroup = ptr_EnemyElementGroup->value;
    }

    auto ptr_xdd749512 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3715405074u);
    if (ptr_xdd749512 != nullptr) {
        xdd749512 = ptr_xdd749512->value;
    }

    auto ptr_xde7496a5 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3732182693u);
    if (ptr_xde7496a5 != nullptr) {
        xde7496a5 = ptr_xde7496a5->value;
    }

    auto ptr_xdb7491ec = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3681849836u);
    if (ptr_xdb7491ec != nullptr) {
        xdb7491ec = ptr_xdb7491ec->value;
    }

    auto ptr_xdc74937f = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3698627455u);
    if (ptr_xdc74937f != nullptr) {
        xdc74937f = ptr_xdc74937f->value;
    }
}

yordle::data::meta::AnnouncementMap::AnnouncementMap(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ParentList = prop->cast_prop<yordle::data::prop::reference_prop>(3825086553u);
    if (ptr_ParentList != nullptr) {
        ParentList = ptr_ParentList->value;
    }

    auto ptr_x81082e4b = prop->cast_prop<yordle::data::prop::string_prop>(2164797003u);
    if (ptr_x81082e4b != nullptr) {
        x81082e4b = ptr_x81082e4b->value;
    }

    auto ptr_x79175e85 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2031574661u);
    if (ptr_x79175e85 != nullptr) {
        x79175e85 = ptr_x79175e85->value;
    }

    auto ptr_xcf8c591b = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3482081563u);
    if (ptr_xcf8c591b != nullptr) {
        xcf8c591b = ptr_xcf8c591b->value;
    }

    auto ptr_Announcements = prop->cast_prop<yordle::data::prop::map_prop>(502292043u);
    if (ptr_Announcements != nullptr) {
        for (const auto &pair : ptr_Announcements->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                Announcements[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::CursorData::CursorData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mHotSpot = prop->cast_prop<yordle::data::prop::point_prop>(2987032723u);
    if (ptr_mHotSpot != nullptr) {
        mHotSpot = ptr_mHotSpot->value;
    }

    auto ptr_mTextureName = prop->cast_prop<yordle::data::prop::string_prop>(4185004664u);
    if (ptr_mTextureName != nullptr) {
        mTextureName = ptr_mTextureName->value;
    }

    auto ptr_mColorblindTextureName = prop->cast_prop<yordle::data::prop::string_prop>(1703356166u);
    if (ptr_mColorblindTextureName != nullptr) {
        mColorblindTextureName = ptr_mColorblindTextureName->value;
    }

    auto ptr_xd240ce4f = prop->cast_prop<yordle::data::prop::string_prop>(3527462479u);
    if (ptr_xd240ce4f != nullptr) {
        xd240ce4f = ptr_xd240ce4f->value;
    }

    auto ptr_xf6536c51 = prop->cast_prop<yordle::data::prop::string_prop>(4132662353u);
    if (ptr_xf6536c51 != nullptr) {
        xf6536c51 = ptr_xf6536c51->value;
    }
}

yordle::data::meta::CursorDataTeamContext::CursorDataTeamContext(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mData = prop->cast_prop<yordle::data::prop::set_prop>(2114832992u);
    if (ptr_mData != nullptr) {
        for (const auto &entry : ptr_mData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mData.emplace(yordle::data::meta::deserialize<yordle::data::meta::CursorData>(ptr_entry, 187557783u));
            }
        }
    }
}

yordle::data::meta::CursorDataCaptureCooldownContext::CursorDataCaptureCooldownContext(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mData = prop->cast_prop<yordle::data::prop::set_prop>(2114832992u);
    if (ptr_mData != nullptr) {
        for (const auto &entry : ptr_mData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mData.emplace(yordle::data::meta::deserialize<yordle::data::meta::CursorData>(ptr_entry, 187557783u));
            }
        }
    }
}

yordle::data::meta::CursorConfig::CursorConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSingleContextCursors = prop->cast_prop<yordle::data::prop::set_prop>(1665835266u);
    if (ptr_mSingleContextCursors != nullptr) {
        for (const auto &entry : ptr_mSingleContextCursors->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mSingleContextCursors.emplace(yordle::data::meta::deserialize<yordle::data::meta::CursorData>(ptr_entry, 187557783u));
            }
        }
    }

    auto ptr_mTeamContextCursors = prop->cast_prop<yordle::data::prop::set_prop>(85309099u);
    if (ptr_mTeamContextCursors != nullptr) {
        for (const auto &entry : ptr_mTeamContextCursors->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mTeamContextCursors.emplace(yordle::data::meta::deserialize<yordle::data::meta::CursorDataTeamContext>(ptr_entry, 4014870449u));
            }
        }
    }

    auto ptr_mHoverNotUseableCursor = prop->cast_prop<yordle::data::prop::inline_structure_prop>(403642880u);
    if (ptr_mHoverNotUseableCursor != nullptr) {
        mHoverNotUseableCursor = yordle::data::meta::deserialize<yordle::data::meta::CursorDataCaptureCooldownContext>(ptr_mHoverNotUseableCursor, 3454621813u);
    }
}

yordle::data::meta::HealthbarImageInfo::HealthbarImageInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTextureName = prop->cast_prop<yordle::data::prop::string_prop>(4185004664u);
    if (ptr_mTextureName != nullptr) {
        mTextureName = ptr_mTextureName->value;
    }

    auto ptr_mOffset = prop->cast_prop<yordle::data::prop::point_prop>(651939147u);
    if (ptr_mOffset != nullptr) {
        mOffset = ptr_mOffset->value;
    }

    auto ptr_mTextureUvs = prop->cast_prop<yordle::data::prop::quaternion_prop>(2191654893u);
    if (ptr_mTextureUvs != nullptr) {
        mTextureUvs = ptr_mTextureUvs->value;
    }
}

yordle::data::meta::UnitStatusData::UnitStatusData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_locType = prop->cast_prop<yordle::data::prop::uint32_prop>(3384118261u);
    if (ptr_locType != nullptr) {
        locType = ptr_locType->value;
    }

    auto ptr_attackableUnitStatusType = prop->cast_prop<yordle::data::prop::uint32_prop>(631562497u);
    if (ptr_attackableUnitStatusType != nullptr) {
        attackableUnitStatusType = ptr_attackableUnitStatusType->value;
    }

    auto ptr_statusName = prop->cast_prop<yordle::data::prop::string_prop>(55791596u);
    if (ptr_statusName != nullptr) {
        statusName = ptr_statusName->value;
    }

    auto ptr_textColor = prop->cast_prop<yordle::data::prop::optional_prop>(1244254369u);
    if (ptr_textColor != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::color_prop>(ptr_textColor->value);
        if(ptr_entry != nullptr) {
            textColor = ptr_entry->value;
        }
    }

    auto ptr_imageInfo = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3345994882u);
    if (ptr_imageInfo != nullptr) {
        imageInfo = yordle::data::meta::deserialize<yordle::data::meta::HealthbarImageInfo>(ptr_imageInfo, 1743182461u);
    }
}

yordle::data::meta::UnitStatusPriorityList::UnitStatusPriorityList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMinimumDisplayTime = prop->cast_prop<yordle::data::prop::float32_prop>(1013538651u);
    if (ptr_mMinimumDisplayTime != nullptr) {
        mMinimumDisplayTime = ptr_mMinimumDisplayTime->value;
    }

    auto ptr_mPrioritizedUnitStatusData = prop->cast_prop<yordle::data::prop::set_prop>(1787851071u);
    if (ptr_mPrioritizedUnitStatusData != nullptr) {
        for (const auto &entry : ptr_mPrioritizedUnitStatusData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mPrioritizedUnitStatusData.emplace(yordle::data::meta::deserialize<yordle::data::meta::UnitStatusData>(ptr_entry, 1273755329u));
            }
        }
    }
}

yordle::data::meta::FloatTextIconData::FloatTextIconData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mIconFileName = prop->cast_prop<yordle::data::prop::string_prop>(273906444u);
    if (ptr_mIconFileName != nullptr) {
        mIconFileName = ptr_mIconFileName->value;
    }

    auto ptr_mColor = prop->cast_prop<yordle::data::prop::color_prop>(1399972751u);
    if (ptr_mColor != nullptr) {
        mColor = ptr_mColor->value;
    }

    auto ptr_mDisplaySize = prop->cast_prop<yordle::data::prop::point_prop>(3546641671u);
    if (ptr_mDisplaySize != nullptr) {
        mDisplaySize = ptr_mDisplaySize->value;
    }

    auto ptr_mOffset = prop->cast_prop<yordle::data::prop::point_prop>(651939147u);
    if (ptr_mOffset != nullptr) {
        mOffset = ptr_mOffset->value;
    }

    auto ptr_mAlignment = prop->cast_prop<yordle::data::prop::uint32_prop>(4041529037u);
    if (ptr_mAlignment != nullptr) {
        mAlignment = ptr_mAlignment->value;
    }
}

yordle::data::meta::FloatTextDisplayOverrides::FloatTextDisplayOverrides(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_priority = prop->cast_prop<yordle::data::prop::optional_prop>(2498028297u);
    if (ptr_priority != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(ptr_priority->value);
        if(ptr_entry != nullptr) {
            priority = ptr_entry->value;
        }
    }

    auto ptr_maxInstances = prop->cast_prop<yordle::data::prop::optional_prop>(1406454799u);
    if (ptr_maxInstances != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(ptr_maxInstances->value);
        if(ptr_entry != nullptr) {
            maxInstances = ptr_entry->value;
        }
    }

    auto ptr_isAnimated = prop->cast_prop<yordle::data::prop::optional_prop>(3272805804u);
    if (ptr_isAnimated != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_isAnimated->value);
        if(ptr_entry != nullptr) {
            isAnimated = ptr_entry->value;
        }
    }

    auto ptr_disableHorizontalReverse = prop->cast_prop<yordle::data::prop::optional_prop>(296058719u);
    if (ptr_disableHorizontalReverse != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_disableHorizontalReverse->value);
        if(ptr_entry != nullptr) {
            disableHorizontalReverse = ptr_entry->value;
        }
    }

    auto ptr_disableVerticalReverse = prop->cast_prop<yordle::data::prop::optional_prop>(3542364389u);
    if (ptr_disableVerticalReverse != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_disableVerticalReverse->value);
        if(ptr_entry != nullptr) {
            disableVerticalReverse = ptr_entry->value;
        }
    }

    auto ptr_momentumFromHit = prop->cast_prop<yordle::data::prop::optional_prop>(202591156u);
    if (ptr_momentumFromHit != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_momentumFromHit->value);
        if(ptr_entry != nullptr) {
            momentumFromHit = ptr_entry->value;
        }
    }

    auto ptr_followSource = prop->cast_prop<yordle::data::prop::optional_prop>(3615228949u);
    if (ptr_followSource != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_followSource->value);
        if(ptr_entry != nullptr) {
            followSource = ptr_entry->value;
        }
    }

    auto ptr_ignoreCombineRules = prop->cast_prop<yordle::data::prop::optional_prop>(765471835u);
    if (ptr_ignoreCombineRules != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_ignoreCombineRules->value);
        if(ptr_entry != nullptr) {
            ignoreCombineRules = ptr_entry->value;
        }
    }

    auto ptr_ignoreQueue = prop->cast_prop<yordle::data::prop::optional_prop>(3901908578u);
    if (ptr_ignoreQueue != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_ignoreQueue->value);
        if(ptr_entry != nullptr) {
            ignoreQueue = ptr_entry->value;
        }
    }

    auto ptr_alternateRightLeft = prop->cast_prop<yordle::data::prop::optional_prop>(3343255752u);
    if (ptr_alternateRightLeft != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_alternateRightLeft->value);
        if(ptr_entry != nullptr) {
            alternateRightLeft = ptr_entry->value;
        }
    }

    auto ptr_combinableCounterDisplay = prop->cast_prop<yordle::data::prop::optional_prop>(1085616689u);
    if (ptr_combinableCounterDisplay != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_combinableCounterDisplay->value);
        if(ptr_entry != nullptr) {
            combinableCounterDisplay = ptr_entry->value;
        }
    }

    auto ptr_combinableCounterCategory = prop->cast_prop<yordle::data::prop::optional_prop>(1105170965u);
    if (ptr_combinableCounterCategory != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(ptr_combinableCounterCategory->value);
        if(ptr_entry != nullptr) {
            combinableCounterCategory = ptr_entry->value;
        }
    }

    auto ptr_overwritePreviousNumber = prop->cast_prop<yordle::data::prop::optional_prop>(1354636454u);
    if (ptr_overwritePreviousNumber != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_overwritePreviousNumber->value);
        if(ptr_entry != nullptr) {
            overwritePreviousNumber = ptr_entry->value;
        }
    }

    auto ptr_extendTimeOnNewDamage = prop->cast_prop<yordle::data::prop::optional_prop>(1459141968u);
    if (ptr_extendTimeOnNewDamage != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_extendTimeOnNewDamage->value);
        if(ptr_entry != nullptr) {
            extendTimeOnNewDamage = ptr_entry->value;
        }
    }

    auto ptr_maxLifeTime = prop->cast_prop<yordle::data::prop::optional_prop>(2637798290u);
    if (ptr_maxLifeTime != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_maxLifeTime->value);
        if(ptr_entry != nullptr) {
            maxLifeTime = ptr_entry->value;
        }
    }

    auto ptr_colorOffsetR = prop->cast_prop<yordle::data::prop::optional_prop>(4063022363u);
    if (ptr_colorOffsetR != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(ptr_colorOffsetR->value);
        if(ptr_entry != nullptr) {
            colorOffsetR = ptr_entry->value;
        }
    }

    auto ptr_colorOffsetG = prop->cast_prop<yordle::data::prop::optional_prop>(3844913316u);
    if (ptr_colorOffsetG != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(ptr_colorOffsetG->value);
        if(ptr_entry != nullptr) {
            colorOffsetG = ptr_entry->value;
        }
    }

    auto ptr_colorOffsetB = prop->cast_prop<yordle::data::prop::optional_prop>(3794580459u);
    if (ptr_colorOffsetB != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(ptr_colorOffsetB->value);
        if(ptr_entry != nullptr) {
            colorOffsetB = ptr_entry->value;
        }
    }

    auto ptr_scale = prop->cast_prop<yordle::data::prop::optional_prop>(2190941297u);
    if (ptr_scale != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_scale->value);
        if(ptr_entry != nullptr) {
            scale = ptr_entry->value;
        }
    }

    auto ptr_decay = prop->cast_prop<yordle::data::prop::optional_prop>(3541427549u);
    if (ptr_decay != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_decay->value);
        if(ptr_entry != nullptr) {
            decay = ptr_entry->value;
        }
    }

    auto ptr_decayDelay = prop->cast_prop<yordle::data::prop::optional_prop>(3417245824u);
    if (ptr_decayDelay != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_decayDelay->value);
        if(ptr_entry != nullptr) {
            decayDelay = ptr_entry->value;
        }
    }

    auto ptr_shrinkTime = prop->cast_prop<yordle::data::prop::optional_prop>(2788916873u);
    if (ptr_shrinkTime != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_shrinkTime->value);
        if(ptr_entry != nullptr) {
            shrinkTime = ptr_entry->value;
        }
    }

    auto ptr_shrinkScale = prop->cast_prop<yordle::data::prop::optional_prop>(3132959154u);
    if (ptr_shrinkScale != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_shrinkScale->value);
        if(ptr_entry != nullptr) {
            shrinkScale = ptr_entry->value;
        }
    }

    auto ptr_hangTime = prop->cast_prop<yordle::data::prop::optional_prop>(2368716048u);
    if (ptr_hangTime != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_hangTime->value);
        if(ptr_entry != nullptr) {
            hangTime = ptr_entry->value;
        }
    }

    auto ptr_randomOffsetMinX = prop->cast_prop<yordle::data::prop::optional_prop>(3528603037u);
    if (ptr_randomOffsetMinX != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_randomOffsetMinX->value);
        if(ptr_entry != nullptr) {
            randomOffsetMinX = ptr_entry->value;
        }
    }

    auto ptr_randomOffsetMaxX = prop->cast_prop<yordle::data::prop::optional_prop>(758398547u);
    if (ptr_randomOffsetMaxX != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_randomOffsetMaxX->value);
        if(ptr_entry != nullptr) {
            randomOffsetMaxX = ptr_entry->value;
        }
    }

    auto ptr_randomOffsetMinY = prop->cast_prop<yordle::data::prop::optional_prop>(3511825418u);
    if (ptr_randomOffsetMinY != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_randomOffsetMinY->value);
        if(ptr_entry != nullptr) {
            randomOffsetMinY = ptr_entry->value;
        }
    }

    auto ptr_randomOffsetMaxY = prop->cast_prop<yordle::data::prop::optional_prop>(741620928u);
    if (ptr_randomOffsetMaxY != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_randomOffsetMaxY->value);
        if(ptr_entry != nullptr) {
            randomOffsetMaxY = ptr_entry->value;
        }
    }

    auto ptr_startOffsetX = prop->cast_prop<yordle::data::prop::optional_prop>(3170333012u);
    if (ptr_startOffsetX != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_startOffsetX->value);
        if(ptr_entry != nullptr) {
            startOffsetX = ptr_entry->value;
        }
    }

    auto ptr_startOffsetY = prop->cast_prop<yordle::data::prop::optional_prop>(3187110631u);
    if (ptr_startOffsetY != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_startOffsetY->value);
        if(ptr_entry != nullptr) {
            startOffsetY = ptr_entry->value;
        }
    }

    auto ptr_relativeOffsetMin = prop->cast_prop<yordle::data::prop::optional_prop>(1011761094u);
    if (ptr_relativeOffsetMin != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_relativeOffsetMin->value);
        if(ptr_entry != nullptr) {
            relativeOffsetMin = ptr_entry->value;
        }
    }

    auto ptr_relativeOffsetMax = prop->cast_prop<yordle::data::prop::optional_prop>(1315038164u);
    if (ptr_relativeOffsetMax != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_relativeOffsetMax->value);
        if(ptr_entry != nullptr) {
            relativeOffsetMax = ptr_entry->value;
        }
    }

    auto ptr_minXVelocity = prop->cast_prop<yordle::data::prop::optional_prop>(2016356458u);
    if (ptr_minXVelocity != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_minXVelocity->value);
        if(ptr_entry != nullptr) {
            minXVelocity = ptr_entry->value;
        }
    }

    auto ptr_maxXVelocity = prop->cast_prop<yordle::data::prop::optional_prop>(2577084868u);
    if (ptr_maxXVelocity != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_maxXVelocity->value);
        if(ptr_entry != nullptr) {
            maxXVelocity = ptr_entry->value;
        }
    }

    auto ptr_minYVelocity = prop->cast_prop<yordle::data::prop::optional_prop>(871508849u);
    if (ptr_minYVelocity != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_minYVelocity->value);
        if(ptr_entry != nullptr) {
            minYVelocity = ptr_entry->value;
        }
    }

    auto ptr_maxYVelocity = prop->cast_prop<yordle::data::prop::optional_prop>(3339261459u);
    if (ptr_maxYVelocity != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_maxYVelocity->value);
        if(ptr_entry != nullptr) {
            maxYVelocity = ptr_entry->value;
        }
    }

    auto ptr_continualForceX = prop->cast_prop<yordle::data::prop::optional_prop>(3136461269u);
    if (ptr_continualForceX != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_continualForceX->value);
        if(ptr_entry != nullptr) {
            continualForceX = ptr_entry->value;
        }
    }

    auto ptr_continualForceY = prop->cast_prop<yordle::data::prop::optional_prop>(3119683650u);
    if (ptr_continualForceY != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_continualForceY->value);
        if(ptr_entry != nullptr) {
            continualForceY = ptr_entry->value;
        }
    }

    auto ptr_growthXScalar = prop->cast_prop<yordle::data::prop::optional_prop>(3578687498u);
    if (ptr_growthXScalar != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_growthXScalar->value);
        if(ptr_entry != nullptr) {
            growthXScalar = ptr_entry->value;
        }
    }

    auto ptr_growthYScalar = prop->cast_prop<yordle::data::prop::optional_prop>(1351440085u);
    if (ptr_growthYScalar != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_growthYScalar->value);
        if(ptr_entry != nullptr) {
            growthYScalar = ptr_entry->value;
        }
    }
}

yordle::data::meta::FloatingTextTunables::FloatingTextTunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMaxFloatingTextItems = prop->cast_prop<yordle::data::prop::uint32_prop>(2487653149u);
    if (ptr_mMaxFloatingTextItems != nullptr) {
        mMaxFloatingTextItems = ptr_mMaxFloatingTextItems->value;
    }

    auto ptr_mIntervalInPix = prop->cast_prop<yordle::data::prop::float32_prop>(2800577007u);
    if (ptr_mIntervalInPix != nullptr) {
        mIntervalInPix = ptr_mIntervalInPix->value;
    }

    auto ptr_mScrollSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(2355189124u);
    if (ptr_mScrollSpeed != nullptr) {
        mScrollSpeed = ptr_mScrollSpeed->value;
    }

    auto ptr_mAnimatedTextQueueDelay = prop->cast_prop<yordle::data::prop::float32_prop>(622457048u);
    if (ptr_mAnimatedTextQueueDelay != nullptr) {
        mAnimatedTextQueueDelay = ptr_mAnimatedTextQueueDelay->value;
    }

    auto ptr_mYResolutionBaseline = prop->cast_prop<yordle::data::prop::float32_prop>(2278655158u);
    if (ptr_mYResolutionBaseline != nullptr) {
        mYResolutionBaseline = ptr_mYResolutionBaseline->value;
    }

    auto ptr_mMinimumDynamicScale = prop->cast_prop<yordle::data::prop::float32_prop>(4054174049u);
    if (ptr_mMinimumDynamicScale != nullptr) {
        mMinimumDynamicScale = ptr_mMinimumDynamicScale->value;
    }

    auto ptr_mMaximumDynamicScale = prop->cast_prop<yordle::data::prop::float32_prop>(2824160075u);
    if (ptr_mMaximumDynamicScale != nullptr) {
        mMaximumDynamicScale = ptr_mMaximumDynamicScale->value;
    }

    auto ptr_xccf713a7 = prop->cast_prop<yordle::data::prop::float32_prop>(3438744487u);
    if (ptr_xccf713a7 != nullptr) {
        xccf713a7 = ptr_xccf713a7->value;
    }

    auto ptr_xf56f095c = prop->cast_prop<yordle::data::prop::float32_prop>(4117694812u);
    if (ptr_xf56f095c != nullptr) {
        xf56f095c = ptr_xf56f095c->value;
    }

    auto ptr_mMinionComparisonMultiplier = prop->cast_prop<yordle::data::prop::float32_prop>(1922080280u);
    if (ptr_mMinionComparisonMultiplier != nullptr) {
        mMinionComparisonMultiplier = ptr_mMinionComparisonMultiplier->value;
    }

    auto ptr_mLocalPlayerHealthComparison = prop->cast_prop<yordle::data::prop::float32_prop>(2266147961u);
    if (ptr_mLocalPlayerHealthComparison != nullptr) {
        mLocalPlayerHealthComparison = ptr_mLocalPlayerHealthComparison->value;
    }

    auto ptr_mComparisonByLevel = prop->cast_prop<yordle::data::prop::set_prop>(3428794766u);
    if (ptr_mComparisonByLevel != nullptr) {
        for (const auto &entry : ptr_mComparisonByLevel->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mComparisonByLevel.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::FloatingTextDamageDisplayTypeList::FloatingTextDamageDisplayTypeList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Default = prop->cast_prop<yordle::data::prop::reference_prop>(2470140894u);
    if (ptr_Default != nullptr) {
        Default = ptr_Default->value;
    }

    auto ptr_Impact = prop->cast_prop<yordle::data::prop::reference_prop>(510767767u);
    if (ptr_Impact != nullptr) {
        Impact = ptr_Impact->value;
    }

    auto ptr_Zone = prop->cast_prop<yordle::data::prop::reference_prop>(59825223u);
    if (ptr_Zone != nullptr) {
        Zone = ptr_Zone->value;
    }

    auto ptr_Ult = prop->cast_prop<yordle::data::prop::reference_prop>(919599552u);
    if (ptr_Ult != nullptr) {
        Ult = ptr_Ult->value;
    }

    auto ptr_DotNoCombine = prop->cast_prop<yordle::data::prop::reference_prop>(4090306952u);
    if (ptr_DotNoCombine != nullptr) {
        DotNoCombine = ptr_DotNoCombine->value;
    }

    auto ptr_Dot = prop->cast_prop<yordle::data::prop::reference_prop>(3546849056u);
    if (ptr_Dot != nullptr) {
        Dot = ptr_Dot->value;
    }

    auto ptr_DotSlow = prop->cast_prop<yordle::data::prop::reference_prop>(3664779365u);
    if (ptr_DotSlow != nullptr) {
        DotSlow = ptr_DotSlow->value;
    }

    auto ptr_Multistrike = prop->cast_prop<yordle::data::prop::reference_prop>(1471176024u);
    if (ptr_Multistrike != nullptr) {
        Multistrike = ptr_Multistrike->value;
    }

    auto ptr_MultistrikeFast = prop->cast_prop<yordle::data::prop::reference_prop>(137644102u);
    if (ptr_MultistrikeFast != nullptr) {
        MultistrikeFast = ptr_MultistrikeFast->value;
    }

    auto ptr_MultistrikeSlow = prop->cast_prop<yordle::data::prop::reference_prop>(3099832765u);
    if (ptr_MultistrikeSlow != nullptr) {
        MultistrikeSlow = ptr_MultistrikeSlow->value;
    }

    auto ptr_PlayerMinion = prop->cast_prop<yordle::data::prop::reference_prop>(3503492138u);
    if (ptr_PlayerMinion != nullptr) {
        PlayerMinion = ptr_PlayerMinion->value;
    }

    auto ptr_BarrackMinion = prop->cast_prop<yordle::data::prop::reference_prop>(2724336455u);
    if (ptr_BarrackMinion != nullptr) {
        BarrackMinion = ptr_BarrackMinion->value;
    }

    auto ptr_Mini = prop->cast_prop<yordle::data::prop::reference_prop>(2324299930u);
    if (ptr_Mini != nullptr) {
        Mini = ptr_Mini->value;
    }

    auto ptr_SelfTrueDamageCounter = prop->cast_prop<yordle::data::prop::reference_prop>(2460767130u);
    if (ptr_SelfTrueDamageCounter != nullptr) {
        SelfTrueDamageCounter = ptr_SelfTrueDamageCounter->value;
    }

    auto ptr_SelfPhysicalDamageCounter = prop->cast_prop<yordle::data::prop::reference_prop>(1331041905u);
    if (ptr_SelfPhysicalDamageCounter != nullptr) {
        SelfPhysicalDamageCounter = ptr_SelfPhysicalDamageCounter->value;
    }

    auto ptr_SelfMagicalDamageCounter = prop->cast_prop<yordle::data::prop::reference_prop>(118015774u);
    if (ptr_SelfMagicalDamageCounter != nullptr) {
        SelfMagicalDamageCounter = ptr_SelfMagicalDamageCounter->value;
    }
}

yordle::data::meta::FloatTextFormattingData::FloatTextFormattingData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTypeName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3680924211u);
    if (ptr_mTypeName != nullptr) {
        mTypeName = ptr_mTypeName->value;
    }

    auto ptr_colorOffsetR = prop->cast_prop<yordle::data::prop::int32_prop>(4063022363u);
    if (ptr_colorOffsetR != nullptr) {
        colorOffsetR = ptr_colorOffsetR->value;
    }

    auto ptr_colorOffsetG = prop->cast_prop<yordle::data::prop::int32_prop>(3844913316u);
    if (ptr_colorOffsetG != nullptr) {
        colorOffsetG = ptr_colorOffsetG->value;
    }

    auto ptr_colorOffsetB = prop->cast_prop<yordle::data::prop::int32_prop>(3794580459u);
    if (ptr_colorOffsetB != nullptr) {
        colorOffsetB = ptr_colorOffsetB->value;
    }

    auto ptr_mFontDescription = prop->cast_prop<yordle::data::prop::reference_prop>(2221319337u);
    if (ptr_mFontDescription != nullptr) {
        mFontDescription = ptr_mFontDescription->value;
    }

    auto ptr_ignoreCombineRules = prop->cast_prop<yordle::data::prop::bool_prop>(765471835u);
    if (ptr_ignoreCombineRules != nullptr) {
        ignoreCombineRules = ptr_ignoreCombineRules->value;
    }

    auto ptr_combinableNumberFormat = prop->cast_prop<yordle::data::prop::string_prop>(2444496965u);
    if (ptr_combinableNumberFormat != nullptr) {
        combinableNumberFormat = ptr_combinableNumberFormat->value;
    }

    auto ptr_combinableNegativeNumberFormat = prop->cast_prop<yordle::data::prop::string_prop>(233173502u);
    if (ptr_combinableNegativeNumberFormat != nullptr) {
        combinableNegativeNumberFormat = ptr_combinableNegativeNumberFormat->value;
    }

    auto ptr_priority = prop->cast_prop<yordle::data::prop::int32_prop>(2498028297u);
    if (ptr_priority != nullptr) {
        priority = ptr_priority->value;
    }

    auto ptr_height = prop->cast_prop<yordle::data::prop::float32_prop>(3585981250u);
    if (ptr_height != nullptr) {
        height = ptr_height->value;
    }

    auto ptr_decay = prop->cast_prop<yordle::data::prop::float32_prop>(3541427549u);
    if (ptr_decay != nullptr) {
        decay = ptr_decay->value;
    }

    auto ptr_decayDelay = prop->cast_prop<yordle::data::prop::float32_prop>(3417245824u);
    if (ptr_decayDelay != nullptr) {
        decayDelay = ptr_decayDelay->value;
    }

    auto ptr_disabled = prop->cast_prop<yordle::data::prop::bool_prop>(871591685u);
    if (ptr_disabled != nullptr) {
        disabled = ptr_disabled->value;
    }

    auto ptr_isAnimated = prop->cast_prop<yordle::data::prop::bool_prop>(3272805804u);
    if (ptr_isAnimated != nullptr) {
        isAnimated = ptr_isAnimated->value;
    }

    auto ptr_momentumFromHit = prop->cast_prop<yordle::data::prop::bool_prop>(202591156u);
    if (ptr_momentumFromHit != nullptr) {
        momentumFromHit = ptr_momentumFromHit->value;
    }

    auto ptr_followSource = prop->cast_prop<yordle::data::prop::bool_prop>(3615228949u);
    if (ptr_followSource != nullptr) {
        followSource = ptr_followSource->value;
    }

    auto ptr_disableHorizontalReverse = prop->cast_prop<yordle::data::prop::bool_prop>(296058719u);
    if (ptr_disableHorizontalReverse != nullptr) {
        disableHorizontalReverse = ptr_disableHorizontalReverse->value;
    }

    auto ptr_disableVerticalReverse = prop->cast_prop<yordle::data::prop::bool_prop>(3542364389u);
    if (ptr_disableVerticalReverse != nullptr) {
        disableVerticalReverse = ptr_disableVerticalReverse->value;
    }

    auto ptr_combinableCounterDisplay = prop->cast_prop<yordle::data::prop::bool_prop>(1085616689u);
    if (ptr_combinableCounterDisplay != nullptr) {
        combinableCounterDisplay = ptr_combinableCounterDisplay->value;
    }

    auto ptr_combinableCounterCategory = prop->cast_prop<yordle::data::prop::int32_prop>(1105170965u);
    if (ptr_combinableCounterCategory != nullptr) {
        combinableCounterCategory = ptr_combinableCounterCategory->value;
    }

    auto ptr_overwritePreviousNumber = prop->cast_prop<yordle::data::prop::bool_prop>(1354636454u);
    if (ptr_overwritePreviousNumber != nullptr) {
        overwritePreviousNumber = ptr_overwritePreviousNumber->value;
    }

    auto ptr_minXVelocity = prop->cast_prop<yordle::data::prop::float32_prop>(2016356458u);
    if (ptr_minXVelocity != nullptr) {
        minXVelocity = ptr_minXVelocity->value;
    }

    auto ptr_maxXVelocity = prop->cast_prop<yordle::data::prop::float32_prop>(2577084868u);
    if (ptr_maxXVelocity != nullptr) {
        maxXVelocity = ptr_maxXVelocity->value;
    }

    auto ptr_minYVelocity = prop->cast_prop<yordle::data::prop::float32_prop>(871508849u);
    if (ptr_minYVelocity != nullptr) {
        minYVelocity = ptr_minYVelocity->value;
    }

    auto ptr_maxYVelocity = prop->cast_prop<yordle::data::prop::float32_prop>(3339261459u);
    if (ptr_maxYVelocity != nullptr) {
        maxYVelocity = ptr_maxYVelocity->value;
    }

    auto ptr_startOffsetX = prop->cast_prop<yordle::data::prop::float32_prop>(3170333012u);
    if (ptr_startOffsetX != nullptr) {
        startOffsetX = ptr_startOffsetX->value;
    }

    auto ptr_startOffsetY = prop->cast_prop<yordle::data::prop::float32_prop>(3187110631u);
    if (ptr_startOffsetY != nullptr) {
        startOffsetY = ptr_startOffsetY->value;
    }

    auto ptr_hangTime = prop->cast_prop<yordle::data::prop::float32_prop>(2368716048u);
    if (ptr_hangTime != nullptr) {
        hangTime = ptr_hangTime->value;
    }

    auto ptr_randomStartOffsetMinX = prop->cast_prop<yordle::data::prop::float32_prop>(2667645605u);
    if (ptr_randomStartOffsetMinX != nullptr) {
        randomStartOffsetMinX = ptr_randomStartOffsetMinX->value;
    }

    auto ptr_randomStartOffsetMaxX = prop->cast_prop<yordle::data::prop::float32_prop>(744751275u);
    if (ptr_randomStartOffsetMaxX != nullptr) {
        randomStartOffsetMaxX = ptr_randomStartOffsetMaxX->value;
    }

    auto ptr_randomStartOffsetMinY = prop->cast_prop<yordle::data::prop::float32_prop>(2650867986u);
    if (ptr_randomStartOffsetMinY != nullptr) {
        randomStartOffsetMinY = ptr_randomStartOffsetMinY->value;
    }

    auto ptr_randomStartOffsetMaxY = prop->cast_prop<yordle::data::prop::float32_prop>(727973656u);
    if (ptr_randomStartOffsetMaxY != nullptr) {
        randomStartOffsetMaxY = ptr_randomStartOffsetMaxY->value;
    }

    auto ptr_growthYScalar = prop->cast_prop<yordle::data::prop::float32_prop>(1351440085u);
    if (ptr_growthYScalar != nullptr) {
        growthYScalar = ptr_growthYScalar->value;
    }

    auto ptr_growthXScalar = prop->cast_prop<yordle::data::prop::float32_prop>(3578687498u);
    if (ptr_growthXScalar != nullptr) {
        growthXScalar = ptr_growthXScalar->value;
    }

    auto ptr_relativeOffsetMin = prop->cast_prop<yordle::data::prop::float32_prop>(1011761094u);
    if (ptr_relativeOffsetMin != nullptr) {
        relativeOffsetMin = ptr_relativeOffsetMin->value;
    }

    auto ptr_relativeOffsetMax = prop->cast_prop<yordle::data::prop::float32_prop>(1315038164u);
    if (ptr_relativeOffsetMax != nullptr) {
        relativeOffsetMax = ptr_relativeOffsetMax->value;
    }

    auto ptr_continualForceX = prop->cast_prop<yordle::data::prop::float32_prop>(3136461269u);
    if (ptr_continualForceX != nullptr) {
        continualForceX = ptr_continualForceX->value;
    }

    auto ptr_continualForceY = prop->cast_prop<yordle::data::prop::float32_prop>(3119683650u);
    if (ptr_continualForceY != nullptr) {
        continualForceY = ptr_continualForceY->value;
    }

    auto ptr_continualForceXBase = prop->cast_prop<yordle::data::prop::float32_prop>(2127470984u);
    if (ptr_continualForceXBase != nullptr) {
        continualForceXBase = ptr_continualForceXBase->value;
    }

    auto ptr_continualForceYBase = prop->cast_prop<yordle::data::prop::float32_prop>(1848540447u);
    if (ptr_continualForceYBase != nullptr) {
        continualForceYBase = ptr_continualForceYBase->value;
    }

    auto ptr_shrinkTime = prop->cast_prop<yordle::data::prop::float32_prop>(2788916873u);
    if (ptr_shrinkTime != nullptr) {
        shrinkTime = ptr_shrinkTime->value;
    }

    auto ptr_scale = prop->cast_prop<yordle::data::prop::float32_prop>(2190941297u);
    if (ptr_scale != nullptr) {
        scale = ptr_scale->value;
    }

    auto ptr_extendTimeOnNewDamage = prop->cast_prop<yordle::data::prop::float32_prop>(1459141968u);
    if (ptr_extendTimeOnNewDamage != nullptr) {
        extendTimeOnNewDamage = ptr_extendTimeOnNewDamage->value;
    }

    auto ptr_maxLifeTime = prop->cast_prop<yordle::data::prop::float32_prop>(2637798290u);
    if (ptr_maxLifeTime != nullptr) {
        maxLifeTime = ptr_maxLifeTime->value;
    }

    auto ptr_ignoreQueue = prop->cast_prop<yordle::data::prop::bool_prop>(3901908578u);
    if (ptr_ignoreQueue != nullptr) {
        ignoreQueue = ptr_ignoreQueue->value;
    }

    auto ptr_alternateRightLeft = prop->cast_prop<yordle::data::prop::bool_prop>(3343255752u);
    if (ptr_alternateRightLeft != nullptr) {
        alternateRightLeft = ptr_alternateRightLeft->value;
    }

    auto ptr_maxInstances = prop->cast_prop<yordle::data::prop::int32_prop>(1406454799u);
    if (ptr_maxInstances != nullptr) {
        maxInstances = ptr_maxInstances->value;
    }

    auto ptr_shrinkScale = prop->cast_prop<yordle::data::prop::float32_prop>(3132959154u);
    if (ptr_shrinkScale != nullptr) {
        shrinkScale = ptr_shrinkScale->value;
    }

    auto ptr_refreshExisting = prop->cast_prop<yordle::data::prop::bool_prop>(1698832793u);
    if (ptr_refreshExisting != nullptr) {
        refreshExisting = ptr_refreshExisting->value;
    }

    auto ptr_attachToHealthBar = prop->cast_prop<yordle::data::prop::bool_prop>(218806424u);
    if (ptr_attachToHealthBar != nullptr) {
        attachToHealthBar = ptr_attachToHealthBar->value;
    }

    auto ptr_offsetByBoundingBox = prop->cast_prop<yordle::data::prop::bool_prop>(1251907752u);
    if (ptr_offsetByBoundingBox != nullptr) {
        offsetByBoundingBox = ptr_offsetByBoundingBox->value;
    }

    auto ptr_horizontalAlignment = prop->cast_prop<yordle::data::prop::uint8_prop>(4102451730u);
    if (ptr_horizontalAlignment != nullptr) {
        horizontalAlignment = ptr_horizontalAlignment->value;
    }

    auto ptr_verticalAlignment = prop->cast_prop<yordle::data::prop::uint8_prop>(310398740u);
    if (ptr_verticalAlignment != nullptr) {
        verticalAlignment = ptr_verticalAlignment->value;
    }

    auto ptr_icons = prop->cast_prop<yordle::data::prop::set_prop>(4192329017u);
    if (ptr_icons != nullptr) {
        for (const auto &entry : ptr_icons->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                icons.emplace(yordle::data::meta::deserialize<yordle::data::meta::FloatTextIconData>(ptr_entry, 383291203u));
            }
        }
    }
}

yordle::data::meta::FloatingTextTypeList::FloatingTextTypeList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Invulnerable = prop->cast_prop<yordle::data::prop::reference_prop>(1927465506u);
    if (ptr_Invulnerable != nullptr) {
        Invulnerable = ptr_Invulnerable->value;
    }

    auto ptr_Special = prop->cast_prop<yordle::data::prop::reference_prop>(3644904752u);
    if (ptr_Special != nullptr) {
        Special = ptr_Special->value;
    }

    auto ptr_Heal = prop->cast_prop<yordle::data::prop::reference_prop>(979982427u);
    if (ptr_Heal != nullptr) {
        Heal = ptr_Heal->value;
    }

    auto ptr_ManaHeal = prop->cast_prop<yordle::data::prop::reference_prop>(245179340u);
    if (ptr_ManaHeal != nullptr) {
        ManaHeal = ptr_ManaHeal->value;
    }

    auto ptr_ManaDamage = prop->cast_prop<yordle::data::prop::reference_prop>(1411283879u);
    if (ptr_ManaDamage != nullptr) {
        ManaDamage = ptr_ManaDamage->value;
    }

    auto ptr_Dodge = prop->cast_prop<yordle::data::prop::reference_prop>(590107600u);
    if (ptr_Dodge != nullptr) {
        Dodge = ptr_Dodge->value;
    }

    auto ptr_PhysicalDamageCritical = prop->cast_prop<yordle::data::prop::reference_prop>(2470704884u);
    if (ptr_PhysicalDamageCritical != nullptr) {
        PhysicalDamageCritical = ptr_PhysicalDamageCritical->value;
    }

    auto ptr_MagicalDamageCritical = prop->cast_prop<yordle::data::prop::reference_prop>(1910857453u);
    if (ptr_MagicalDamageCritical != nullptr) {
        MagicalDamageCritical = ptr_MagicalDamageCritical->value;
    }

    auto ptr_TrueDamageCritical = prop->cast_prop<yordle::data::prop::reference_prop>(3587055937u);
    if (ptr_TrueDamageCritical != nullptr) {
        TrueDamageCritical = ptr_TrueDamageCritical->value;
    }

    auto ptr_Experience = prop->cast_prop<yordle::data::prop::reference_prop>(2465329961u);
    if (ptr_Experience != nullptr) {
        Experience = ptr_Experience->value;
    }

    auto ptr_Gold = prop->cast_prop<yordle::data::prop::reference_prop>(3966162835u);
    if (ptr_Gold != nullptr) {
        Gold = ptr_Gold->value;
    }

    auto ptr_level = prop->cast_prop<yordle::data::prop::reference_prop>(2610554845u);
    if (ptr_level != nullptr) {
        level = ptr_level->value;
    }

    auto ptr_Disable = prop->cast_prop<yordle::data::prop::reference_prop>(3454897251u);
    if (ptr_Disable != nullptr) {
        Disable = ptr_Disable->value;
    }

    auto ptr_QuestReceived = prop->cast_prop<yordle::data::prop::reference_prop>(185844506u);
    if (ptr_QuestReceived != nullptr) {
        QuestReceived = ptr_QuestReceived->value;
    }

    auto ptr_QuestComplete = prop->cast_prop<yordle::data::prop::reference_prop>(3451657002u);
    if (ptr_QuestComplete != nullptr) {
        QuestComplete = ptr_QuestComplete->value;
    }

    auto ptr_Score = prop->cast_prop<yordle::data::prop::reference_prop>(3526332565u);
    if (ptr_Score != nullptr) {
        Score = ptr_Score->value;
    }

    auto ptr_PhysicalDamage = prop->cast_prop<yordle::data::prop::reference_prop>(4058842065u);
    if (ptr_PhysicalDamage != nullptr) {
        PhysicalDamage = ptr_PhysicalDamage->value;
    }

    auto ptr_MagicalDamage = prop->cast_prop<yordle::data::prop::reference_prop>(36583052u);
    if (ptr_MagicalDamage != nullptr) {
        MagicalDamage = ptr_MagicalDamage->value;
    }

    auto ptr_TrueDamage = prop->cast_prop<yordle::data::prop::reference_prop>(3795953760u);
    if (ptr_TrueDamage != nullptr) {
        TrueDamage = ptr_TrueDamage->value;
    }

    auto ptr_EnemyPhysicalDamage = prop->cast_prop<yordle::data::prop::reference_prop>(2441685467u);
    if (ptr_EnemyPhysicalDamage != nullptr) {
        EnemyPhysicalDamage = ptr_EnemyPhysicalDamage->value;
    }

    auto ptr_EnemyMagicalDamage = prop->cast_prop<yordle::data::prop::reference_prop>(357588466u);
    if (ptr_EnemyMagicalDamage != nullptr) {
        EnemyMagicalDamage = ptr_EnemyMagicalDamage->value;
    }

    auto ptr_EnemyTrueDamage = prop->cast_prop<yordle::data::prop::reference_prop>(2631516950u);
    if (ptr_EnemyTrueDamage != nullptr) {
        EnemyTrueDamage = ptr_EnemyTrueDamage->value;
    }

    auto ptr_EnemyPhysicalDamageCritical = prop->cast_prop<yordle::data::prop::reference_prop>(3481416186u);
    if (ptr_EnemyPhysicalDamageCritical != nullptr) {
        EnemyPhysicalDamageCritical = ptr_EnemyPhysicalDamageCritical->value;
    }

    auto ptr_EnemyMagicalDamageCritical = prop->cast_prop<yordle::data::prop::reference_prop>(1901617551u);
    if (ptr_EnemyMagicalDamageCritical != nullptr) {
        EnemyMagicalDamageCritical = ptr_EnemyMagicalDamageCritical->value;
    }

    auto ptr_EnemyTrueDamageCritical = prop->cast_prop<yordle::data::prop::reference_prop>(1869743891u);
    if (ptr_EnemyTrueDamageCritical != nullptr) {
        EnemyTrueDamageCritical = ptr_EnemyTrueDamageCritical->value;
    }

    auto ptr_Countdown = prop->cast_prop<yordle::data::prop::reference_prop>(3162485024u);
    if (ptr_Countdown != nullptr) {
        Countdown = ptr_Countdown->value;
    }

    auto ptr_OMW = prop->cast_prop<yordle::data::prop::reference_prop>(3157224410u);
    if (ptr_OMW != nullptr) {
        OMW = ptr_OMW->value;
    }

    auto ptr_Absorbed = prop->cast_prop<yordle::data::prop::reference_prop>(2346867193u);
    if (ptr_Absorbed != nullptr) {
        Absorbed = ptr_Absorbed->value;
    }

    auto ptr_Debug = prop->cast_prop<yordle::data::prop::reference_prop>(1483009432u);
    if (ptr_Debug != nullptr) {
        Debug = ptr_Debug->value;
    }

    auto ptr_PracticeToolTotal = prop->cast_prop<yordle::data::prop::reference_prop>(1241007236u);
    if (ptr_PracticeToolTotal != nullptr) {
        PracticeToolTotal = ptr_PracticeToolTotal->value;
    }

    auto ptr_PracticeToolLastHit = prop->cast_prop<yordle::data::prop::reference_prop>(3680004783u);
    if (ptr_PracticeToolLastHit != nullptr) {
        PracticeToolLastHit = ptr_PracticeToolLastHit->value;
    }

    auto ptr_PracticeToolDPS = prop->cast_prop<yordle::data::prop::reference_prop>(2475078983u);
    if (ptr_PracticeToolDPS != nullptr) {
        PracticeToolDPS = ptr_PracticeToolDPS->value;
    }

    auto ptr_ScoreDarkStar = prop->cast_prop<yordle::data::prop::reference_prop>(2022449025u);
    if (ptr_ScoreDarkStar != nullptr) {
        ScoreDarkStar = ptr_ScoreDarkStar->value;
    }

    auto ptr_ScoreProject0 = prop->cast_prop<yordle::data::prop::reference_prop>(568230618u);
    if (ptr_ScoreProject0 != nullptr) {
        ScoreProject0 = ptr_ScoreProject0->value;
    }

    auto ptr_ScoreProject1 = prop->cast_prop<yordle::data::prop::reference_prop>(585008237u);
    if (ptr_ScoreProject1 != nullptr) {
        ScoreProject1 = ptr_ScoreProject1->value;
    }

    auto ptr_ShieldBonusDamage = prop->cast_prop<yordle::data::prop::reference_prop>(3895931270u);
    if (ptr_ShieldBonusDamage != nullptr) {
        ShieldBonusDamage = ptr_ShieldBonusDamage->value;
    }

    auto ptr_TFTUnitLabel = prop->cast_prop<yordle::data::prop::reference_prop>(897531011u);
    if (ptr_TFTUnitLabel != nullptr) {
        TFTUnitLabel = ptr_TFTUnitLabel->value;
    }
}

yordle::data::meta::FloatingTextGlobalConfig::FloatingTextGlobalConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTunables = prop->cast_prop<yordle::data::prop::inline_structure_prop>(924866144u);
    if (ptr_mTunables != nullptr) {
        mTunables = yordle::data::meta::deserialize<yordle::data::meta::FloatingTextTunables>(ptr_mTunables, 395898060u);
    }

    auto ptr_mDamageDisplayTypes = prop->cast_prop<yordle::data::prop::inline_structure_prop>(832004862u);
    if (ptr_mDamageDisplayTypes != nullptr) {
        mDamageDisplayTypes = yordle::data::meta::deserialize<yordle::data::meta::FloatingTextDamageDisplayTypeList>(ptr_mDamageDisplayTypes, 3119478897u);
    }

    auto ptr_mFloatingTextTypes = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3127990322u);
    if (ptr_mFloatingTextTypes != nullptr) {
        mFloatingTextTypes = yordle::data::meta::deserialize<yordle::data::meta::FloatingTextTypeList>(ptr_mFloatingTextTypes, 46628140u);
    }
}

yordle::data::meta::FloatingTextOverride::FloatingTextOverride(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_OverriddenFloatingTextTypes = prop->cast_prop<yordle::data::prop::map_prop>(1397360953u);
    if (ptr_OverriddenFloatingTextTypes != nullptr) {
        for (const auto &pair : ptr_OverriddenFloatingTextTypes->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                OverriddenFloatingTextTypes[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::HudColorData::HudColorData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSelfColor = prop->cast_prop<yordle::data::prop::color_prop>(1192402645u);
    if (ptr_mSelfColor != nullptr) {
        mSelfColor = ptr_mSelfColor->value;
    }

    auto ptr_mFriendlyColor = prop->cast_prop<yordle::data::prop::color_prop>(3586640006u);
    if (ptr_mFriendlyColor != nullptr) {
        mFriendlyColor = ptr_mFriendlyColor->value;
    }

    auto ptr_mEnemyColor = prop->cast_prop<yordle::data::prop::color_prop>(645545979u);
    if (ptr_mEnemyColor != nullptr) {
        mEnemyColor = ptr_mEnemyColor->value;
    }

    auto ptr_mNeutralColor = prop->cast_prop<yordle::data::prop::color_prop>(4121441318u);
    if (ptr_mNeutralColor != nullptr) {
        mNeutralColor = ptr_mNeutralColor->value;
    }

    auto ptr_mOrderColor = prop->cast_prop<yordle::data::prop::color_prop>(555991047u);
    if (ptr_mOrderColor != nullptr) {
        mOrderColor = ptr_mOrderColor->value;
    }

    auto ptr_mChaosColor = prop->cast_prop<yordle::data::prop::color_prop>(4178986439u);
    if (ptr_mChaosColor != nullptr) {
        mChaosColor = ptr_mChaosColor->value;
    }

    auto ptr_mJunglePlantColor = prop->cast_prop<yordle::data::prop::color_prop>(1067360129u);
    if (ptr_mJunglePlantColor != nullptr) {
        mJunglePlantColor = ptr_mJunglePlantColor->value;
    }

    auto ptr_mFriendlyLaneMinionBarColor = prop->cast_prop<yordle::data::prop::color_prop>(4262399179u);
    if (ptr_mFriendlyLaneMinionBarColor != nullptr) {
        mFriendlyLaneMinionBarColor = ptr_mFriendlyLaneMinionBarColor->value;
    }

    auto ptr_mEnemyLaneMinionBarColor = prop->cast_prop<yordle::data::prop::color_prop>(3302236852u);
    if (ptr_mEnemyLaneMinionBarColor != nullptr) {
        mEnemyLaneMinionBarColor = ptr_mEnemyLaneMinionBarColor->value;
    }

    auto ptr_mDeathFriendlyTeamColor = prop->cast_prop<yordle::data::prop::color_prop>(1575417427u);
    if (ptr_mDeathFriendlyTeamColor != nullptr) {
        mDeathFriendlyTeamColor = ptr_mDeathFriendlyTeamColor->value;
    }

    auto ptr_mDeathEnemyTeamColor = prop->cast_prop<yordle::data::prop::color_prop>(4195942494u);
    if (ptr_mDeathEnemyTeamColor != nullptr) {
        mDeathEnemyTeamColor = ptr_mDeathEnemyTeamColor->value;
    }

    auto ptr_mDeathOrderColor = prop->cast_prop<yordle::data::prop::color_prop>(251663461u);
    if (ptr_mDeathOrderColor != nullptr) {
        mDeathOrderColor = ptr_mDeathOrderColor->value;
    }

    auto ptr_mDeathChaosColor = prop->cast_prop<yordle::data::prop::color_prop>(2567889765u);
    if (ptr_mDeathChaosColor != nullptr) {
        mDeathChaosColor = ptr_mDeathChaosColor->value;
    }

    auto ptr_mInputChatColor = prop->cast_prop<yordle::data::prop::color_prop>(1069907981u);
    if (ptr_mInputChatColor != nullptr) {
        mInputChatColor = ptr_mInputChatColor->value;
    }

    auto ptr_mShadowChatColor = prop->cast_prop<yordle::data::prop::color_prop>(3166993789u);
    if (ptr_mShadowChatColor != nullptr) {
        mShadowChatColor = ptr_mShadowChatColor->value;
    }

    auto ptr_mFriendlyChatColor = prop->cast_prop<yordle::data::prop::color_prop>(3591684716u);
    if (ptr_mFriendlyChatColor != nullptr) {
        mFriendlyChatColor = ptr_mFriendlyChatColor->value;
    }

    auto ptr_mAllChatColor = prop->cast_prop<yordle::data::prop::color_prop>(2648085688u);
    if (ptr_mAllChatColor != nullptr) {
        mAllChatColor = ptr_mAllChatColor->value;
    }

    auto ptr_mEnemyChatColor = prop->cast_prop<yordle::data::prop::color_prop>(450695077u);
    if (ptr_mEnemyChatColor != nullptr) {
        mEnemyChatColor = ptr_mEnemyChatColor->value;
    }

    auto ptr_mNeutralChatColor = prop->cast_prop<yordle::data::prop::color_prop>(635203084u);
    if (ptr_mNeutralChatColor != nullptr) {
        mNeutralChatColor = ptr_mNeutralChatColor->value;
    }

    auto ptr_mPingChatColor = prop->cast_prop<yordle::data::prop::color_prop>(808639689u);
    if (ptr_mPingChatColor != nullptr) {
        mPingChatColor = ptr_mPingChatColor->value;
    }

    auto ptr_mTeamChatColor = prop->cast_prop<yordle::data::prop::color_prop>(948768078u);
    if (ptr_mTeamChatColor != nullptr) {
        mTeamChatColor = ptr_mTeamChatColor->value;
    }

    auto ptr_mNetworkChatColor = prop->cast_prop<yordle::data::prop::color_prop>(3347876279u);
    if (ptr_mNetworkChatColor != nullptr) {
        mNetworkChatColor = ptr_mNetworkChatColor->value;
    }

    auto ptr_mOrderChatColor = prop->cast_prop<yordle::data::prop::color_prop>(918286601u);
    if (ptr_mOrderChatColor != nullptr) {
        mOrderChatColor = ptr_mOrderChatColor->value;
    }

    auto ptr_mChaosChatColor = prop->cast_prop<yordle::data::prop::color_prop>(1904924105u);
    if (ptr_mChaosChatColor != nullptr) {
        mChaosChatColor = ptr_mChaosChatColor->value;
    }

    auto ptr_mGoldChatColor = prop->cast_prop<yordle::data::prop::color_prop>(4122398983u);
    if (ptr_mGoldChatColor != nullptr) {
        mGoldChatColor = ptr_mGoldChatColor->value;
    }

    auto ptr_mTimestampChatColor = prop->cast_prop<yordle::data::prop::color_prop>(2780839185u);
    if (ptr_mTimestampChatColor != nullptr) {
        mTimestampChatColor = ptr_mTimestampChatColor->value;
    }

    auto ptr_mWhisperColor = prop->cast_prop<yordle::data::prop::color_prop>(3020315909u);
    if (ptr_mWhisperColor != nullptr) {
        mWhisperColor = ptr_mWhisperColor->value;
    }

    auto ptr_mPartyChatColor = prop->cast_prop<yordle::data::prop::color_prop>(3970923453u);
    if (ptr_mPartyChatColor != nullptr) {
        mPartyChatColor = ptr_mPartyChatColor->value;
    }

    auto ptr_mPlatformChatColor = prop->cast_prop<yordle::data::prop::color_prop>(1708461344u);
    if (ptr_mPlatformChatColor != nullptr) {
        mPlatformChatColor = ptr_mPlatformChatColor->value;
    }

    auto ptr_mFeedbackChatColor = prop->cast_prop<yordle::data::prop::color_prop>(3202775812u);
    if (ptr_mFeedbackChatColor != nullptr) {
        mFeedbackChatColor = ptr_mFeedbackChatColor->value;
    }

    auto ptr_mItemCalloutBodyColor = prop->cast_prop<yordle::data::prop::color_prop>(1683368604u);
    if (ptr_mItemCalloutBodyColor != nullptr) {
        mItemCalloutBodyColor = ptr_mItemCalloutBodyColor->value;
    }

    auto ptr_mItemCalloutItemColor = prop->cast_prop<yordle::data::prop::color_prop>(2376985845u);
    if (ptr_mItemCalloutItemColor != nullptr) {
        mItemCalloutItemColor = ptr_mItemCalloutItemColor->value;
    }

    auto ptr_mMarkedIndicatorColor = prop->cast_prop<yordle::data::prop::color_prop>(2691213620u);
    if (ptr_mMarkedIndicatorColor != nullptr) {
        mMarkedIndicatorColor = ptr_mMarkedIndicatorColor->value;
    }

    auto ptr_mSelectedIndicatorColor = prop->cast_prop<yordle::data::prop::color_prop>(368116005u);
    if (ptr_mSelectedIndicatorColor != nullptr) {
        mSelectedIndicatorColor = ptr_mSelectedIndicatorColor->value;
    }

    auto ptr_mHighlightedIndicatorColor = prop->cast_prop<yordle::data::prop::color_prop>(2673467485u);
    if (ptr_mHighlightedIndicatorColor != nullptr) {
        mHighlightedIndicatorColor = ptr_mHighlightedIndicatorColor->value;
    }

    auto ptr_mItemHotKeyEnabledColor = prop->cast_prop<yordle::data::prop::color_prop>(4125247401u);
    if (ptr_mItemHotKeyEnabledColor != nullptr) {
        mItemHotKeyEnabledColor = ptr_mItemHotKeyEnabledColor->value;
    }

    auto ptr_mItemHotKeyDisabledColor = prop->cast_prop<yordle::data::prop::color_prop>(1791980528u);
    if (ptr_mItemHotKeyDisabledColor != nullptr) {
        mItemHotKeyDisabledColor = ptr_mItemHotKeyDisabledColor->value;
    }

    auto ptr_mSpellHotKeyEnabledColor = prop->cast_prop<yordle::data::prop::color_prop>(65647696u);
    if (ptr_mSpellHotKeyEnabledColor != nullptr) {
        mSpellHotKeyEnabledColor = ptr_mSpellHotKeyEnabledColor->value;
    }

    auto ptr_mSpellHotKeyDisabledColor = prop->cast_prop<yordle::data::prop::color_prop>(1104317883u);
    if (ptr_mSpellHotKeyDisabledColor != nullptr) {
        mSpellHotKeyDisabledColor = ptr_mSpellHotKeyDisabledColor->value;
    }

    auto ptr_mStatNormalColor = prop->cast_prop<yordle::data::prop::color_prop>(4233504860u);
    if (ptr_mStatNormalColor != nullptr) {
        mStatNormalColor = ptr_mStatNormalColor->value;
    }

    auto ptr_mStatBoostedColor = prop->cast_prop<yordle::data::prop::color_prop>(2496655319u);
    if (ptr_mStatBoostedColor != nullptr) {
        mStatBoostedColor = ptr_mStatBoostedColor->value;
    }

    auto ptr_mLevelUpColor = prop->cast_prop<yordle::data::prop::color_prop>(1196531458u);
    if (ptr_mLevelUpColor != nullptr) {
        mLevelUpColor = ptr_mLevelUpColor->value;
    }

    auto ptr_mEvolutionColor = prop->cast_prop<yordle::data::prop::color_prop>(1470233756u);
    if (ptr_mEvolutionColor != nullptr) {
        mEvolutionColor = ptr_mEvolutionColor->value;
    }

    auto ptr_mSummonerNameDeadColor = prop->cast_prop<yordle::data::prop::color_prop>(905234520u);
    if (ptr_mSummonerNameDeadColor != nullptr) {
        mSummonerNameDeadColor = ptr_mSummonerNameDeadColor->value;
    }

    auto ptr_mSummonerNameDefaultColor = prop->cast_prop<yordle::data::prop::color_prop>(2357705419u);
    if (ptr_mSummonerNameDefaultColor != nullptr) {
        mSummonerNameDefaultColor = ptr_mSummonerNameDefaultColor->value;
    }

    auto ptr_mSummonerNameSelfColor = prop->cast_prop<yordle::data::prop::color_prop>(242419728u);
    if (ptr_mSummonerNameSelfColor != nullptr) {
        mSummonerNameSelfColor = ptr_mSummonerNameSelfColor->value;
    }

    auto ptr_mClubTagFriendlyChatColor = prop->cast_prop<yordle::data::prop::color_prop>(228357512u);
    if (ptr_mClubTagFriendlyChatColor != nullptr) {
        mClubTagFriendlyChatColor = ptr_mClubTagFriendlyChatColor->value;
    }

    auto ptr_mClubTagEnemyChatColor = prop->cast_prop<yordle::data::prop::color_prop>(2496948033u);
    if (ptr_mClubTagEnemyChatColor != nullptr) {
        mClubTagEnemyChatColor = ptr_mClubTagEnemyChatColor->value;
    }

    auto ptr_mClubTagNeutralChatColor = prop->cast_prop<yordle::data::prop::color_prop>(500753888u);
    if (ptr_mClubTagNeutralChatColor != nullptr) {
        mClubTagNeutralChatColor = ptr_mClubTagNeutralChatColor->value;
    }

    auto ptr_mClubTagOrderChatColor = prop->cast_prop<yordle::data::prop::color_prop>(2693779357u);
    if (ptr_mClubTagOrderChatColor != nullptr) {
        mClubTagOrderChatColor = ptr_mClubTagOrderChatColor->value;
    }

    auto ptr_mClubTagChaosChatColor = prop->cast_prop<yordle::data::prop::color_prop>(506825357u);
    if (ptr_mClubTagChaosChatColor != nullptr) {
        mClubTagChaosChatColor = ptr_mClubTagChaosChatColor->value;
    }

    auto ptr_mVoiceChatDefaultTextColor = prop->cast_prop<yordle::data::prop::color_prop>(3848369557u);
    if (ptr_mVoiceChatDefaultTextColor != nullptr) {
        mVoiceChatDefaultTextColor = ptr_mVoiceChatDefaultTextColor->value;
    }

    auto ptr_mVoiceChatHoverTextColor = prop->cast_prop<yordle::data::prop::color_prop>(1891336240u);
    if (ptr_mVoiceChatHoverTextColor != nullptr) {
        mVoiceChatHoverTextColor = ptr_mVoiceChatHoverTextColor->value;
    }

    auto ptr_mVoiceChatHaloTextureColor = prop->cast_prop<yordle::data::prop::color_prop>(1398541792u);
    if (ptr_mVoiceChatHaloTextureColor != nullptr) {
        mVoiceChatHaloTextureColor = ptr_mVoiceChatHaloTextureColor->value;
    }

    auto ptr_x3ca4e54 = prop->cast_prop<yordle::data::prop::color_prop>(63589972u);
    if (ptr_x3ca4e54 != nullptr) {
        x3ca4e54 = ptr_x3ca4e54->value;
    }

    auto ptr_xdfd9f7a0 = prop->cast_prop<yordle::data::prop::color_prop>(3755603872u);
    if (ptr_xdfd9f7a0 != nullptr) {
        xdfd9f7a0 = ptr_xdfd9f7a0->value;
    }

    auto ptr_xd614aa57 = prop->cast_prop<yordle::data::prop::color_prop>(3591678551u);
    if (ptr_xd614aa57 != nullptr) {
        xd614aa57 = ptr_xd614aa57->value;
    }

    auto ptr_VoteEmptyColor = prop->cast_prop<yordle::data::prop::color_prop>(1139757985u);
    if (ptr_VoteEmptyColor != nullptr) {
        VoteEmptyColor = ptr_VoteEmptyColor->value;
    }

    auto ptr_x51c13ad7 = prop->cast_prop<yordle::data::prop::color_prop>(1371618007u);
    if (ptr_x51c13ad7 != nullptr) {
        x51c13ad7 = ptr_x51c13ad7->value;
    }

    auto ptr_VoteNocolor = prop->cast_prop<yordle::data::prop::color_prop>(3154015837u);
    if (ptr_VoteNocolor != nullptr) {
        VoteNocolor = ptr_VoteNocolor->value;
    }

    auto ptr_xc14d71dc = prop->cast_prop<yordle::data::prop::color_prop>(3243078108u);
    if (ptr_xc14d71dc != nullptr) {
        xc14d71dc = ptr_xc14d71dc->value;
    }

    auto ptr_xcd9cb6c5 = prop->cast_prop<yordle::data::prop::color_prop>(3449599685u);
    if (ptr_xcd9cb6c5 != nullptr) {
        xcd9cb6c5 = ptr_xcd9cb6c5->value;
    }

    auto ptr_x3f68efb8 = prop->cast_prop<yordle::data::prop::color_prop>(1063841720u);
    if (ptr_x3f68efb8 != nullptr) {
        x3f68efb8 = ptr_x3f68efb8->value;
    }

    auto ptr_x9487808b = prop->cast_prop<yordle::data::prop::color_prop>(2491908235u);
    if (ptr_x9487808b != nullptr) {
        x9487808b = ptr_x9487808b->value;
    }

    auto ptr_xfc46842 = prop->cast_prop<yordle::data::prop::color_prop>(264529986u);
    if (ptr_xfc46842 != nullptr) {
        xfc46842 = ptr_xfc46842->value;
    }

    auto ptr_x3b64dfe3 = prop->cast_prop<yordle::data::prop::color_prop>(996466659u);
    if (ptr_x3b64dfe3 != nullptr) {
        x3b64dfe3 = ptr_x3b64dfe3->value;
    }

    auto ptr_x672ccd56 = prop->cast_prop<yordle::data::prop::color_prop>(1730989398u);
    if (ptr_x672ccd56 != nullptr) {
        x672ccd56 = ptr_x672ccd56->value;
    }

    auto ptr_x9316f661 = prop->cast_prop<yordle::data::prop::set_prop>(2467755617u);
    if (ptr_x9316f661 != nullptr) {
        for (const auto &entry : ptr_x9316f661->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::color_prop>(entry);
            if (ptr_entry != nullptr) {
                x9316f661.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x30c22182 = prop->cast_prop<yordle::data::prop::color_prop>(818028930u);
    if (ptr_x30c22182 != nullptr) {
        x30c22182 = ptr_x30c22182->value;
    }

    auto ptr_xee9a2886 = prop->cast_prop<yordle::data::prop::color_prop>(4003080326u);
    if (ptr_xee9a2886 != nullptr) {
        xee9a2886 = ptr_xee9a2886->value;
    }

    auto ptr_xc09ccdd8 = prop->cast_prop<yordle::data::prop::color_prop>(3231501784u);
    if (ptr_xc09ccdd8 != nullptr) {
        xc09ccdd8 = ptr_xc09ccdd8->value;
    }

    auto ptr_x24eb55a3 = prop->cast_prop<yordle::data::prop::color_prop>(619402659u);
    if (ptr_x24eb55a3 != nullptr) {
        x24eb55a3 = ptr_x24eb55a3->value;
    }

    auto ptr_x2f02af61 = prop->cast_prop<yordle::data::prop::color_prop>(788705121u);
    if (ptr_x2f02af61 != nullptr) {
        x2f02af61 = ptr_x2f02af61->value;
    }

    auto ptr_xca1d9872 = prop->cast_prop<yordle::data::prop::color_prop>(3390937202u);
    if (ptr_xca1d9872 != nullptr) {
        xca1d9872 = ptr_xca1d9872->value;
    }
}

yordle::data::meta::HudFeedbackDamageData::HudFeedbackDamageData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPercentageDamageForFlash = prop->cast_prop<yordle::data::prop::float32_prop>(3645574558u);
    if (ptr_mPercentageDamageForFlash != nullptr) {
        mPercentageDamageForFlash = ptr_mPercentageDamageForFlash->value;
    }

    auto ptr_mOverTimeForFlashSeconds = prop->cast_prop<yordle::data::prop::float32_prop>(498199049u);
    if (ptr_mOverTimeForFlashSeconds != nullptr) {
        mOverTimeForFlashSeconds = ptr_mOverTimeForFlashSeconds->value;
    }

    auto ptr_mMaxPercentageForMostReadHealth = prop->cast_prop<yordle::data::prop::float32_prop>(2071128520u);
    if (ptr_mMaxPercentageForMostReadHealth != nullptr) {
        mMaxPercentageForMostReadHealth = ptr_mMaxPercentageForMostReadHealth->value;
    }

    auto ptr_mFlashDuration = prop->cast_prop<yordle::data::prop::float32_prop>(4241544798u);
    if (ptr_mFlashDuration != nullptr) {
        mFlashDuration = ptr_mFlashDuration->value;
    }

    auto ptr_mStartFlashAlpha = prop->cast_prop<yordle::data::prop::float32_prop>(3486215150u);
    if (ptr_mStartFlashAlpha != nullptr) {
        mStartFlashAlpha = ptr_mStartFlashAlpha->value;
    }

    auto ptr_mLowHealthFlashThresholdPercentage = prop->cast_prop<yordle::data::prop::float32_prop>(3923424629u);
    if (ptr_mLowHealthFlashThresholdPercentage != nullptr) {
        mLowHealthFlashThresholdPercentage = ptr_mLowHealthFlashThresholdPercentage->value;
    }

    auto ptr_mLowHealthFlashDuration = prop->cast_prop<yordle::data::prop::float32_prop>(3327966486u);
    if (ptr_mLowHealthFlashDuration != nullptr) {
        mLowHealthFlashDuration = ptr_mLowHealthFlashDuration->value;
    }

    auto ptr_mLowHealthFlashOpacityStrength = prop->cast_prop<yordle::data::prop::float32_prop>(2076980446u);
    if (ptr_mLowHealthFlashOpacityStrength != nullptr) {
        mLowHealthFlashOpacityStrength = ptr_mLowHealthFlashOpacityStrength->value;
    }
}

yordle::data::meta::TeamScoreMeterUITunables::TeamScoreMeterUITunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSceneTransition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1728738979u);
    if (ptr_mSceneTransition != nullptr) {
        mSceneTransition = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mSceneTransition, 3273533950u);
    }

    auto ptr_mTeamScoreMeterProperties = prop->cast_prop<yordle::data::prop::set_prop>(2975799563u);
    if (ptr_mTeamScoreMeterProperties != nullptr) {
        for (const auto &entry : ptr_mTeamScoreMeterProperties->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mTeamScoreMeterProperties.emplace(yordle::data::meta::deserialize<yordle::data::meta::HudTeamScoreMeterProperties>(ptr_entry, 3303051661u));
            }
        }
    }

    auto ptr_mTeamScoreMeterMaxRoundsPerTeam = prop->cast_prop<yordle::data::prop::uint32_prop>(1582934121u);
    if (ptr_mTeamScoreMeterMaxRoundsPerTeam != nullptr) {
        mTeamScoreMeterMaxRoundsPerTeam = ptr_mTeamScoreMeterMaxRoundsPerTeam->value;
    }

    auto ptr_mAllowDynamicVisibility = prop->cast_prop<yordle::data::prop::bool_prop>(4265136050u);
    if (ptr_mAllowDynamicVisibility != nullptr) {
        mAllowDynamicVisibility = ptr_mAllowDynamicVisibility->value;
    }

    auto ptr_mCountdownTimer = prop->cast_prop<yordle::data::prop::bool_prop>(2269398584u);
    if (ptr_mCountdownTimer != nullptr) {
        mCountdownTimer = ptr_mCountdownTimer->value;
    }

    auto ptr_xdff2794f = prop->cast_prop<yordle::data::prop::uint8_prop>(3757209935u);
    if (ptr_xdff2794f != nullptr) {
        xdff2794f = ptr_xdff2794f->value;
    }
}

yordle::data::meta::HudTeamScoreMeterProperties::HudTeamScoreMeterProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTeamScoreMeterType = prop->cast_prop<yordle::data::prop::uint8_prop>(2332216382u);
    if (ptr_mTeamScoreMeterType != nullptr) {
        mTeamScoreMeterType = ptr_mTeamScoreMeterType->value;
    }

    auto ptr_mShowScoreText = prop->cast_prop<yordle::data::prop::bool_prop>(3397650234u);
    if (ptr_mShowScoreText != nullptr) {
        mShowScoreText = ptr_mShowScoreText->value;
    }

    auto ptr_x86864fbc = prop->cast_prop<yordle::data::prop::string_prop>(2256949180u);
    if (ptr_x86864fbc != nullptr) {
        x86864fbc = ptr_x86864fbc->value;
    }

    auto ptr_x6044a790 = prop->cast_prop<yordle::data::prop::string_prop>(1615112080u);
    if (ptr_x6044a790 != nullptr) {
        x6044a790 = ptr_x6044a790->value;
    }
}

yordle::data::meta::EncounterUITunables::EncounterUITunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSceneTransition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1728738979u);
    if (ptr_mSceneTransition != nullptr) {
        mSceneTransition = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mSceneTransition, 3273533950u);
    }

    auto ptr_mProgressBarEaseRate = prop->cast_prop<yordle::data::prop::float32_prop>(1632401484u);
    if (ptr_mProgressBarEaseRate != nullptr) {
        mProgressBarEaseRate = ptr_mProgressBarEaseRate->value;
    }

    auto ptr_mProgressMeterSuffix = prop->cast_prop<yordle::data::prop::string_prop>(822033641u);
    if (ptr_mProgressMeterSuffix != nullptr) {
        mProgressMeterSuffix = ptr_mProgressMeterSuffix->value;
    }

    auto ptr_mTimerMeterSuffix = prop->cast_prop<yordle::data::prop::string_prop>(3286494379u);
    if (ptr_mTimerMeterSuffix != nullptr) {
        mTimerMeterSuffix = ptr_mTimerMeterSuffix->value;
    }

    auto ptr_mUnitBarFadeSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(2781284956u);
    if (ptr_mUnitBarFadeSpeed != nullptr) {
        mUnitBarFadeSpeed = ptr_mUnitBarFadeSpeed->value;
    }

    auto ptr_x3fc8ecec = prop->cast_prop<yordle::data::prop::bool_prop>(1070132460u);
    if (ptr_x3fc8ecec != nullptr) {
        x3fc8ecec = ptr_x3fc8ecec->value;
    }

    auto ptr_mProgressMeterHoverText = prop->cast_prop<yordle::data::prop::string_prop>(3428022377u);
    if (ptr_mProgressMeterHoverText != nullptr) {
        mProgressMeterHoverText = ptr_mProgressMeterHoverText->value;
    }

    auto ptr_mProgressMeterPingText = prop->cast_prop<yordle::data::prop::string_prop>(1663411567u);
    if (ptr_mProgressMeterPingText != nullptr) {
        mProgressMeterPingText = ptr_mProgressMeterPingText->value;
    }

    auto ptr_mPipsHoverText = prop->cast_prop<yordle::data::prop::string_prop>(3538704343u);
    if (ptr_mPipsHoverText != nullptr) {
        mPipsHoverText = ptr_mPipsHoverText->value;
    }
}

yordle::data::meta::QuestUITunables::QuestUITunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSceneTransition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1728738979u);
    if (ptr_mSceneTransition != nullptr) {
        mSceneTransition = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mSceneTransition, 3273533950u);
    }
}

yordle::data::meta::DragonUITunables::DragonUITunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSlots = prop->cast_prop<yordle::data::prop::uint8_prop>(2443691253u);
    if (ptr_mSlots != nullptr) {
        mSlots = ptr_mSlots->value;
    }

    auto ptr_mDragonBaseNames = prop->cast_prop<yordle::data::prop::set_prop>(314664954u);
    if (ptr_mDragonBaseNames != nullptr) {
        for (const auto &entry : ptr_mDragonBaseNames->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mDragonBaseNames.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::HudGameModeScoreData::HudGameModeScoreData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTeamScoreElementTypes = prop->cast_prop<yordle::data::prop::set_prop>(127415360u);
    if (ptr_mTeamScoreElementTypes != nullptr) {
        for (const auto &entry : ptr_mTeamScoreElementTypes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(entry);
            if (ptr_entry != nullptr) {
                mTeamScoreElementTypes.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mIndividualScoreElementTypes = prop->cast_prop<yordle::data::prop::set_prop>(846367950u);
    if (ptr_mIndividualScoreElementTypes != nullptr) {
        for (const auto &entry : ptr_mIndividualScoreElementTypes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(entry);
            if (ptr_entry != nullptr) {
                mIndividualScoreElementTypes.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mModeKeyName = prop->cast_prop<yordle::data::prop::string_prop>(246610201u);
    if (ptr_mModeKeyName != nullptr) {
        mModeKeyName = ptr_mModeKeyName->value;
    }

    auto ptr_mTeamGameScorePingMessage = prop->cast_prop<yordle::data::prop::string_prop>(3008691026u);
    if (ptr_mTeamGameScorePingMessage != nullptr) {
        mTeamGameScorePingMessage = ptr_mTeamGameScorePingMessage->value;
    }

    auto ptr_mTeamScoreMeterUi = prop->cast_prop<yordle::data::prop::structure_prop>(2321304744u);
    if (ptr_mTeamScoreMeterUi != nullptr) {
        mTeamScoreMeterUi = yordle::data::meta::deserialize<yordle::data::meta::TeamScoreMeterUITunables>(ptr_mTeamScoreMeterUi, 4180972365u);
    }

    auto ptr_mEncounterUi = prop->cast_prop<yordle::data::prop::structure_prop>(527990547u);
    if (ptr_mEncounterUi != nullptr) {
        mEncounterUi = yordle::data::meta::deserialize<yordle::data::meta::EncounterUITunables>(ptr_mEncounterUi, 60771964u);
    }

    auto ptr_mTeamFightUi = prop->cast_prop<yordle::data::prop::structure_prop>(618622443u);
    if (ptr_mTeamFightUi != nullptr) {
        mTeamFightUi = yordle::data::meta::deserialize<yordle::data::meta::HudTeamFightData>(ptr_mTeamFightUi, 3784622423u);
    }

    auto ptr_mQuestUi = prop->cast_prop<yordle::data::prop::structure_prop>(2770289004u);
    if (ptr_mQuestUi != nullptr) {
        mQuestUi = yordle::data::meta::deserialize<yordle::data::meta::QuestUITunables>(ptr_mQuestUi, 3365626407u);
    }

    auto ptr_mDragonUi = prop->cast_prop<yordle::data::prop::structure_prop>(157616145u);
    if (ptr_mDragonUi != nullptr) {
        mDragonUi = yordle::data::meta::deserialize<yordle::data::meta::DragonUITunables>(ptr_mDragonUi, 3440211024u);
    }

    auto ptr_mOptionalBins = prop->cast_prop<yordle::data::prop::set_prop>(936257914u);
    if (ptr_mOptionalBins != nullptr) {
        for (const auto &entry : ptr_mOptionalBins->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mOptionalBins.emplace(yordle::data::meta::deserialize<yordle::data::meta::HudOptionalBinData>(ptr_entry, 3920544379u));
            }
        }
    }
}

yordle::data::meta::MinimapIconTextureData::MinimapIconTextureData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBase = prop->cast_prop<yordle::data::prop::string_prop>(1963651933u);
    if (ptr_mBase != nullptr) {
        mBase = ptr_mBase->value;
    }

    auto ptr_mColorblind = prop->cast_prop<yordle::data::prop::optional_prop>(3786188562u);
    if (ptr_mColorblind != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(ptr_mColorblind->value);
        if(ptr_entry != nullptr) {
            mColorblind = ptr_entry->value;
        }
    }
}

yordle::data::meta::MinimapIconColorData::MinimapIconColorData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBase = prop->cast_prop<yordle::data::prop::color_prop>(1963651933u);
    if (ptr_mBase != nullptr) {
        mBase = ptr_mBase->value;
    }

    auto ptr_mColorblind = prop->cast_prop<yordle::data::prop::optional_prop>(3786188562u);
    if (ptr_mColorblind != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::color_prop>(ptr_mColorblind->value);
        if(ptr_entry != nullptr) {
            mColorblind = ptr_entry->value;
        }
    }
}

yordle::data::meta::MinimapIcon::MinimapIcon(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mRelativeTeams = prop->cast_prop<yordle::data::prop::bool_prop>(487980894u);
    if (ptr_mRelativeTeams != nullptr) {
        mRelativeTeams = ptr_mRelativeTeams->value;
    }

    auto ptr_mSize = prop->cast_prop<yordle::data::prop::point_prop>(1663564297u);
    if (ptr_mSize != nullptr) {
        mSize = ptr_mSize->value;
    }

    auto ptr_mMinScale = prop->cast_prop<yordle::data::prop::float32_prop>(3647017262u);
    if (ptr_mMinScale != nullptr) {
        mMinScale = ptr_mMinScale->value;
    }

    auto ptr_mMaxScale = prop->cast_prop<yordle::data::prop::float32_prop>(4248423316u);
    if (ptr_mMaxScale != nullptr) {
        mMaxScale = ptr_mMaxScale->value;
    }

    auto ptr_mBaseTexture = prop->cast_prop<yordle::data::prop::inline_structure_prop>(301885260u);
    if (ptr_mBaseTexture != nullptr) {
        mBaseTexture = yordle::data::meta::deserialize<yordle::data::meta::MinimapIconTextureData>(ptr_mBaseTexture, 3732824828u);
    }

    auto ptr_mTeamTextures = prop->cast_prop<yordle::data::prop::map_prop>(1068735961u);
    if (ptr_mTeamTextures != nullptr) {
        for (const auto &pair : ptr_mTeamTextures->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mTeamTextures[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MinimapIconTextureData>(ptr_value, 3732824828u);
            }
        }
    }

    auto ptr_mBaseColor = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3070941424u);
    if (ptr_mBaseColor != nullptr) {
        mBaseColor = yordle::data::meta::deserialize<yordle::data::meta::MinimapIconColorData>(ptr_mBaseColor, 59888480u);
    }

    auto ptr_mTeamColors = prop->cast_prop<yordle::data::prop::map_prop>(2670666677u);
    if (ptr_mTeamColors != nullptr) {
        for (const auto &pair : ptr_mTeamColors->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mTeamColors[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MinimapIconColorData>(ptr_value, 59888480u);
            }
        }
    }
}

yordle::data::meta::MinimapData::MinimapData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mIcons = prop->cast_prop<yordle::data::prop::map_prop>(3577153550u);
    if (ptr_mIcons != nullptr) {
        for (const auto &pair : ptr_mIcons->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mIcons[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MinimapIcon>(ptr_value, 525225061u);
            }
        }
    }

    auto ptr_mCustomIcons = prop->cast_prop<yordle::data::prop::map_prop>(377978355u);
    if (ptr_mCustomIcons != nullptr) {
        for (const auto &pair : ptr_mCustomIcons->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mCustomIcons[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MinimapIcon>(ptr_value, 525225061u);
            }
        }
    }
}

yordle::data::meta::HudOptionalBinData::HudOptionalBinData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mPriority = prop->cast_prop<yordle::data::prop::uint32_prop>(259093296u);
    if (ptr_mPriority != nullptr) {
        mPriority = ptr_mPriority->value;
    }
}

yordle::data::meta::HudTunables::HudTunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mScaleSettings = prop->cast_prop<yordle::data::prop::inline_structure_prop>(45469471u);
    if (ptr_mScaleSettings != nullptr) {
        mScaleSettings = yordle::data::meta::deserialize<yordle::data::meta::HudScaleSettingsData>(ptr_mScaleSettings, 2979455577u);
    }

    auto ptr_mLevelUpTransitionData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(762988596u);
    if (ptr_mLevelUpTransitionData != nullptr) {
        mLevelUpTransitionData = yordle::data::meta::deserialize<yordle::data::meta::HudLevelUpData>(ptr_mLevelUpTransitionData, 2124320233u);
    }

    auto ptr_mGameScoreboardTransitionData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(316400827u);
    if (ptr_mGameScoreboardTransitionData != nullptr) {
        mGameScoreboardTransitionData = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mGameScoreboardTransitionData, 3273533950u);
    }

    auto ptr_mReplayScoreboardTransitionData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3348672342u);
    if (ptr_mReplayScoreboardTransitionData != nullptr) {
        mReplayScoreboardTransitionData = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mReplayScoreboardTransitionData, 3273533950u);
    }

    auto ptr_mReplayGameStatsTransitionData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2165066103u);
    if (ptr_mReplayGameStatsTransitionData != nullptr) {
        mReplayGameStatsTransitionData = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mReplayGameStatsTransitionData, 3273533950u);
    }

    auto ptr_x9cec9ff0 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2632753136u);
    if (ptr_x9cec9ff0 != nullptr) {
        x9cec9ff0 = yordle::data::meta::deserialize<yordle::data::meta::HudBannerData>(ptr_x9cec9ff0, 2731869740u);
    }

    auto ptr_x4e7d3049 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1316827209u);
    if (ptr_x4e7d3049 != nullptr) {
        x4e7d3049 = yordle::data::meta::deserialize<yordle::data::meta::HudAbilityPromptData>(ptr_x4e7d3049, 4291825122u);
    }

    auto ptr_mElementalSelectionAnimationData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2877628373u);
    if (ptr_mElementalSelectionAnimationData != nullptr) {
        mElementalSelectionAnimationData = yordle::data::meta::deserialize<yordle::data::meta::HudElementalSectionUIData>(ptr_mElementalSelectionAnimationData, 3553075624u);
    }

    auto ptr_mEmotePopupData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(877012050u);
    if (ptr_mEmotePopupData != nullptr) {
        mEmotePopupData = yordle::data::meta::deserialize<yordle::data::meta::HudEmotePopupData>(ptr_mEmotePopupData, 440468936u);
    }

    auto ptr_mGearSelectionData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3357629991u);
    if (ptr_mGearSelectionData != nullptr) {
        mGearSelectionData = yordle::data::meta::deserialize<yordle::data::meta::HudGearSelectionUIData>(ptr_mGearSelectionData, 1288133231u);
    }

    auto ptr_mRadailWheelData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(677840474u);
    if (ptr_mRadailWheelData != nullptr) {
        mRadailWheelData = yordle::data::meta::deserialize<yordle::data::meta::HudRadialWheelData>(ptr_mRadailWheelData, 1493463692u);
    }

    auto ptr_mReplayData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(608425855u);
    if (ptr_mReplayData != nullptr) {
        mReplayData = yordle::data::meta::deserialize<yordle::data::meta::HudReplayData>(ptr_mReplayData, 2809029825u);
    }

    auto ptr_mCheatMenuData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3768340056u);
    if (ptr_mCheatMenuData != nullptr) {
        mCheatMenuData = yordle::data::meta::deserialize<yordle::data::meta::HudCheatMenuData>(ptr_mCheatMenuData, 2036195162u);
    }

    auto ptr_mPingData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2964416024u);
    if (ptr_mPingData != nullptr) {
        mPingData = yordle::data::meta::deserialize<yordle::data::meta::HudPingData>(ptr_mPingData, 3598370238u);
    }

    auto ptr_mVoiceChatData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2781484004u);
    if (ptr_mVoiceChatData != nullptr) {
        mVoiceChatData = yordle::data::meta::deserialize<yordle::data::meta::HudVoiceChatData>(ptr_mVoiceChatData, 929479566u);
    }

    auto ptr_mInputBoxData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3892654213u);
    if (ptr_mInputBoxData != nullptr) {
        mInputBoxData = yordle::data::meta::deserialize<yordle::data::meta::HudInputBoxData>(ptr_mInputBoxData, 4284799695u);
    }

    auto ptr_mHealthBarData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(701559135u);
    if (ptr_mHealthBarData != nullptr) {
        mHealthBarData = yordle::data::meta::deserialize<yordle::data::meta::HudHealthBarData>(ptr_mHealthBarData, 85573057u);
    }

    auto ptr_mHudSpellSlotResetFeedbackData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3877885579u);
    if (ptr_mHudSpellSlotResetFeedbackData != nullptr) {
        mHudSpellSlotResetFeedbackData = yordle::data::meta::deserialize<yordle::data::meta::HudSpellSlotResetFeedbackData>(ptr_mHudSpellSlotResetFeedbackData, 1323252584u);
    }

    auto ptr_mLoadingScreenData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(217938168u);
    if (ptr_mLoadingScreenData != nullptr) {
        mLoadingScreenData = yordle::data::meta::deserialize<yordle::data::meta::HudLoadingScreenData>(ptr_mLoadingScreenData, 4205759190u);
    }

    auto ptr_mStatPanelStatStoneData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2076079679u);
    if (ptr_mStatPanelStatStoneData != nullptr) {
        mStatPanelStatStoneData = yordle::data::meta::deserialize<yordle::data::meta::HudStatPanelStatStoneData>(ptr_mStatPanelStatStoneData, 2341739189u);
    }

    auto ptr_mStatStoneData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4210907615u);
    if (ptr_mStatStoneData != nullptr) {
        mStatStoneData = yordle::data::meta::deserialize<yordle::data::meta::HudStatStoneData>(ptr_mStatStoneData, 2137884073u);
    }

    auto ptr_mStatStoneDeathRecapData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3128315546u);
    if (ptr_mStatStoneDeathRecapData != nullptr) {
        mStatStoneDeathRecapData = yordle::data::meta::deserialize<yordle::data::meta::HudStatStoneDeathRecapData>(ptr_mStatStoneDeathRecapData, 1887734700u);
    }

    auto ptr_StatStoneMilestoneData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(106443622u);
    if (ptr_StatStoneMilestoneData != nullptr) {
        StatStoneMilestoneData = yordle::data::meta::deserialize<yordle::data::meta::HudStatStoneMilestoneData>(ptr_StatStoneMilestoneData, 4122721905u);
    }

    auto ptr_mEndOfGameData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3266966018u);
    if (ptr_mEndOfGameData != nullptr) {
        mEndOfGameData = yordle::data::meta::deserialize<yordle::data::meta::HudEndOfGameData>(ptr_mEndOfGameData, 3009378484u);
    }

    auto ptr_x86402adf = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2252352223u);
    if (ptr_x86402adf != nullptr) {
        x86402adf = yordle::data::meta::deserialize<yordle::data::meta::HudMessageDisplayData>(ptr_x86402adf, 1269294773u);
    }

    auto ptr_x48c75042 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1221021762u);
    if (ptr_x48c75042 != nullptr) {
        x48c75042 = yordle::data::meta::deserialize<yordle::data::meta::HudMessageDisplayData>(ptr_x48c75042, 1269294773u);
    }

    auto ptr_DamageDisplayData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1116989102u);
    if (ptr_DamageDisplayData != nullptr) {
        DamageDisplayData = yordle::data::meta::deserialize<yordle::data::meta::HudDamageDisplayData>(ptr_DamageDisplayData, 1645499771u);
    }

    auto ptr_FightRecapUiData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3882694614u);
    if (ptr_FightRecapUiData != nullptr) {
        FightRecapUiData = yordle::data::meta::deserialize<yordle::data::meta::HudFightRecapUIData>(ptr_FightRecapUiData, 3305259773u);
    }
}

yordle::data::meta::HudScaleSettingsData::HudScaleSettingsData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_maximumGlobalScale = prop->cast_prop<yordle::data::prop::float32_prop>(1488544768u);
    if (ptr_maximumGlobalScale != nullptr) {
        maximumGlobalScale = ptr_maximumGlobalScale->value;
    }

    auto ptr_minimumGlobalScale = prop->cast_prop<yordle::data::prop::float32_prop>(67517766u);
    if (ptr_minimumGlobalScale != nullptr) {
        minimumGlobalScale = ptr_minimumGlobalScale->value;
    }

    auto ptr_maximumMinimapScale = prop->cast_prop<yordle::data::prop::float32_prop>(742591506u);
    if (ptr_maximumMinimapScale != nullptr) {
        maximumMinimapScale = ptr_maximumMinimapScale->value;
    }

    auto ptr_minimumMinimapScale = prop->cast_prop<yordle::data::prop::float32_prop>(851421276u);
    if (ptr_minimumMinimapScale != nullptr) {
        minimumMinimapScale = ptr_minimumMinimapScale->value;
    }

    auto ptr_x6b8896b6 = prop->cast_prop<yordle::data::prop::float32_prop>(1804113590u);
    if (ptr_x6b8896b6 != nullptr) {
        x6b8896b6 = ptr_x6b8896b6->value;
    }

    auto ptr_xb565cf40 = prop->cast_prop<yordle::data::prop::float32_prop>(3043348288u);
    if (ptr_xb565cf40 != nullptr) {
        xb565cf40 = ptr_xb565cf40->value;
    }

    auto ptr_maximumPracticeToolScale = prop->cast_prop<yordle::data::prop::float32_prop>(1058706468u);
    if (ptr_maximumPracticeToolScale != nullptr) {
        maximumPracticeToolScale = ptr_maximumPracticeToolScale->value;
    }

    auto ptr_minimumPracticeToolScale = prop->cast_prop<yordle::data::prop::float32_prop>(2642489786u);
    if (ptr_minimumPracticeToolScale != nullptr) {
        minimumPracticeToolScale = ptr_minimumPracticeToolScale->value;
    }

    auto ptr_maximumChatScale = prop->cast_prop<yordle::data::prop::float32_prop>(3569638079u);
    if (ptr_maximumChatScale != nullptr) {
        maximumChatScale = ptr_maximumChatScale->value;
    }

    auto ptr_minimumChatScale = prop->cast_prop<yordle::data::prop::float32_prop>(1949160637u);
    if (ptr_minimumChatScale != nullptr) {
        minimumChatScale = ptr_minimumChatScale->value;
    }
}

yordle::data::meta::HudLevelUpData::HudLevelUpData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_minAlpha = prop->cast_prop<yordle::data::prop::uint8_prop>(2109053225u);
    if (ptr_minAlpha != nullptr) {
        minAlpha = ptr_minAlpha->value;
    }

    auto ptr_maxAlpha = prop->cast_prop<yordle::data::prop::uint8_prop>(2984524207u);
    if (ptr_maxAlpha != nullptr) {
        maxAlpha = ptr_maxAlpha->value;
    }

    auto ptr_maxOffset = prop->cast_prop<yordle::data::prop::float32_prop>(3151581574u);
    if (ptr_maxOffset != nullptr) {
        maxOffset = ptr_maxOffset->value;
    }

    auto ptr_animTime = prop->cast_prop<yordle::data::prop::float32_prop>(2238245353u);
    if (ptr_animTime != nullptr) {
        animTime = ptr_animTime->value;
    }

    auto ptr_delay = prop->cast_prop<yordle::data::prop::float32_prop>(1322381784u);
    if (ptr_delay != nullptr) {
        delay = ptr_delay->value;
    }

    auto ptr_overshoot = prop->cast_prop<yordle::data::prop::float32_prop>(2583336794u);
    if (ptr_overshoot != nullptr) {
        overshoot = ptr_overshoot->value;
    }

    auto ptr_inertia = prop->cast_prop<yordle::data::prop::float32_prop>(3447918833u);
    if (ptr_inertia != nullptr) {
        inertia = ptr_inertia->value;
    }

    auto ptr_playerBuffsOffset = prop->cast_prop<yordle::data::prop::float32_prop>(3391265297u);
    if (ptr_playerBuffsOffset != nullptr) {
        playerBuffsOffset = ptr_playerBuffsOffset->value;
    }

    auto ptr_idleSheenInterval = prop->cast_prop<yordle::data::prop::float32_prop>(1211833377u);
    if (ptr_idleSheenInterval != nullptr) {
        idleSheenInterval = ptr_idleSheenInterval->value;
    }
}

yordle::data::meta::HudBannerData::HudBannerData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_transitionTime = prop->cast_prop<yordle::data::prop::float32_prop>(646358147u);
    if (ptr_transitionTime != nullptr) {
        transitionTime = ptr_transitionTime->value;
    }

    auto ptr_TransitionMinAlpha = prop->cast_prop<yordle::data::prop::uint8_prop>(2449524942u);
    if (ptr_TransitionMinAlpha != nullptr) {
        TransitionMinAlpha = ptr_TransitionMinAlpha->value;
    }

    auto ptr_TransitionMaxAlpha = prop->cast_prop<yordle::data::prop::uint8_prop>(2960635160u);
    if (ptr_TransitionMaxAlpha != nullptr) {
        TransitionMaxAlpha = ptr_TransitionMaxAlpha->value;
    }

    auto ptr_transitionOffset = prop->cast_prop<yordle::data::prop::point_prop>(2824715749u);
    if (ptr_transitionOffset != nullptr) {
        transitionOffset = ptr_transitionOffset->value;
    }

    auto ptr_pulseOffset = prop->cast_prop<yordle::data::prop::point_prop>(4045513993u);
    if (ptr_pulseOffset != nullptr) {
        pulseOffset = ptr_pulseOffset->value;
    }

    auto ptr_pulseTime = prop->cast_prop<yordle::data::prop::float32_prop>(1284438647u);
    if (ptr_pulseTime != nullptr) {
        pulseTime = ptr_pulseTime->value;
    }

    auto ptr_pulseDuration = prop->cast_prop<yordle::data::prop::float32_prop>(229098546u);
    if (ptr_pulseDuration != nullptr) {
        pulseDuration = ptr_pulseDuration->value;
    }

    auto ptr_pulseInterval = prop->cast_prop<yordle::data::prop::float32_prop>(427443163u);
    if (ptr_pulseInterval != nullptr) {
        pulseInterval = ptr_pulseInterval->value;
    }
}

yordle::data::meta::HudAbilityPromptData::HudAbilityPromptData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PulseStartColor = prop->cast_prop<yordle::data::prop::color_prop>(3136505745u);
    if (ptr_PulseStartColor != nullptr) {
        PulseStartColor = ptr_PulseStartColor->value;
    }

    auto ptr_PulseEndColor = prop->cast_prop<yordle::data::prop::color_prop>(1649820186u);
    if (ptr_PulseEndColor != nullptr) {
        PulseEndColor = ptr_PulseEndColor->value;
    }

    auto ptr_pulseOffset = prop->cast_prop<yordle::data::prop::point_prop>(4045513993u);
    if (ptr_pulseOffset != nullptr) {
        pulseOffset = ptr_pulseOffset->value;
    }

    auto ptr_pulseTime = prop->cast_prop<yordle::data::prop::float32_prop>(1284438647u);
    if (ptr_pulseTime != nullptr) {
        pulseTime = ptr_pulseTime->value;
    }

    auto ptr_pulseInterval = prop->cast_prop<yordle::data::prop::float32_prop>(427443163u);
    if (ptr_pulseInterval != nullptr) {
        pulseInterval = ptr_pulseInterval->value;
    }
}

yordle::data::meta::HudMenuTransitionData::HudMenuTransitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_transitionTime = prop->cast_prop<yordle::data::prop::float32_prop>(646358147u);
    if (ptr_transitionTime != nullptr) {
        transitionTime = ptr_transitionTime->value;
    }

    auto ptr_minAlpha = prop->cast_prop<yordle::data::prop::uint8_prop>(2109053225u);
    if (ptr_minAlpha != nullptr) {
        minAlpha = ptr_minAlpha->value;
    }

    auto ptr_maxAlpha = prop->cast_prop<yordle::data::prop::uint8_prop>(2984524207u);
    if (ptr_maxAlpha != nullptr) {
        maxAlpha = ptr_maxAlpha->value;
    }

    auto ptr_EasingType = prop->cast_prop<yordle::data::prop::uint8_prop>(1933980160u);
    if (ptr_EasingType != nullptr) {
        EasingType = ptr_EasingType->value;
    }
}

yordle::data::meta::HudElementalSectionUIData::HudElementalSectionUIData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_airColoration = prop->cast_prop<yordle::data::prop::color_prop>(3232379543u);
    if (ptr_airColoration != nullptr) {
        airColoration = ptr_airColoration->value;
    }

    auto ptr_fireColoration = prop->cast_prop<yordle::data::prop::color_prop>(596794249u);
    if (ptr_fireColoration != nullptr) {
        fireColoration = ptr_fireColoration->value;
    }

    auto ptr_earthColoration = prop->cast_prop<yordle::data::prop::color_prop>(8218199u);
    if (ptr_earthColoration != nullptr) {
        earthColoration = ptr_earthColoration->value;
    }

    auto ptr_waterColoration = prop->cast_prop<yordle::data::prop::color_prop>(2712337484u);
    if (ptr_waterColoration != nullptr) {
        waterColoration = ptr_waterColoration->value;
    }

    auto ptr_darkColoration = prop->cast_prop<yordle::data::prop::color_prop>(787344869u);
    if (ptr_darkColoration != nullptr) {
        darkColoration = ptr_darkColoration->value;
    }

    auto ptr_fairyColoration = prop->cast_prop<yordle::data::prop::color_prop>(747845866u);
    if (ptr_fairyColoration != nullptr) {
        fairyColoration = ptr_fairyColoration->value;
    }

    auto ptr_iceColoration = prop->cast_prop<yordle::data::prop::color_prop>(66680764u);
    if (ptr_iceColoration != nullptr) {
        iceColoration = ptr_iceColoration->value;
    }

    auto ptr_lightColoration = prop->cast_prop<yordle::data::prop::color_prop>(2648437455u);
    if (ptr_lightColoration != nullptr) {
        lightColoration = ptr_lightColoration->value;
    }

    auto ptr_magmaColoration = prop->cast_prop<yordle::data::prop::color_prop>(1493148090u);
    if (ptr_magmaColoration != nullptr) {
        magmaColoration = ptr_magmaColoration->value;
    }

    auto ptr_stormColoration = prop->cast_prop<yordle::data::prop::color_prop>(304888450u);
    if (ptr_stormColoration != nullptr) {
        stormColoration = ptr_stormColoration->value;
    }

    auto ptr_meterFilledButtonFadeInDelay = prop->cast_prop<yordle::data::prop::float32_prop>(1240892982u);
    if (ptr_meterFilledButtonFadeInDelay != nullptr) {
        meterFilledButtonFadeInDelay = ptr_meterFilledButtonFadeInDelay->value;
    }

    auto ptr_firstSelectionAnimationDelay = prop->cast_prop<yordle::data::prop::float32_prop>(699822532u);
    if (ptr_firstSelectionAnimationDelay != nullptr) {
        firstSelectionAnimationDelay = ptr_firstSelectionAnimationDelay->value;
    }

    auto ptr_secondSelectionAnimationDelay = prop->cast_prop<yordle::data::prop::float32_prop>(3261887224u);
    if (ptr_secondSelectionAnimationDelay != nullptr) {
        secondSelectionAnimationDelay = ptr_secondSelectionAnimationDelay->value;
    }

    auto ptr_glowingRingCycleTime = prop->cast_prop<yordle::data::prop::float32_prop>(1009699793u);
    if (ptr_glowingRingCycleTime != nullptr) {
        glowingRingCycleTime = ptr_glowingRingCycleTime->value;
    }
}

yordle::data::meta::HudEmotePopupData::HudEmotePopupData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEmotePopupTransitionIntro = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3640140445u);
    if (ptr_mEmotePopupTransitionIntro != nullptr) {
        mEmotePopupTransitionIntro = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mEmotePopupTransitionIntro, 3273533950u);
    }

    auto ptr_mEmotePopupTransitionOutro = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1857823356u);
    if (ptr_mEmotePopupTransitionOutro != nullptr) {
        mEmotePopupTransitionOutro = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mEmotePopupTransitionOutro, 3273533950u);
    }

    auto ptr_mUiSound = prop->cast_prop<yordle::data::prop::string_prop>(1567183921u);
    if (ptr_mUiSound != nullptr) {
        mUiSound = ptr_mUiSound->value;
    }

    auto ptr_mEmotePopupDisplayTime = prop->cast_prop<yordle::data::prop::float32_prop>(2147385345u);
    if (ptr_mEmotePopupDisplayTime != nullptr) {
        mEmotePopupDisplayTime = ptr_mEmotePopupDisplayTime->value;
    }

    auto ptr_x728d935f = prop->cast_prop<yordle::data::prop::float32_prop>(1921880927u);
    if (ptr_x728d935f != nullptr) {
        x728d935f = ptr_x728d935f->value;
    }

    auto ptr_x7cd0d83 = prop->cast_prop<yordle::data::prop::float32_prop>(130878851u);
    if (ptr_x7cd0d83 != nullptr) {
        x7cd0d83 = ptr_x7cd0d83->value;
    }

    auto ptr_x75d54c28 = prop->cast_prop<yordle::data::prop::float32_prop>(1976912936u);
    if (ptr_x75d54c28 != nullptr) {
        x75d54c28 = ptr_x75d54c28->value;
    }

    auto ptr_xf680b7d9 = prop->cast_prop<yordle::data::prop::float32_prop>(4135630809u);
    if (ptr_xf680b7d9 != nullptr) {
        xf680b7d9 = ptr_xf680b7d9->value;
    }

    auto ptr_x6bd76883 = prop->cast_prop<yordle::data::prop::float32_prop>(1809279107u);
    if (ptr_x6bd76883 != nullptr) {
        x6bd76883 = ptr_x6bd76883->value;
    }

    auto ptr_mEmoteFloatEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(248167911u);
    if (ptr_mEmoteFloatEnabled != nullptr) {
        mEmoteFloatEnabled = ptr_mEmoteFloatEnabled->value;
    }
}

yordle::data::meta::HudGearSelectionUIData::HudGearSelectionUIData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mGearSelectionTransitionIntro = prop->cast_prop<yordle::data::prop::inline_structure_prop>(655349522u);
    if (ptr_mGearSelectionTransitionIntro != nullptr) {
        mGearSelectionTransitionIntro = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mGearSelectionTransitionIntro, 3273533950u);
    }

    auto ptr_mGearSelectionTransitionOutro = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1491976327u);
    if (ptr_mGearSelectionTransitionOutro != nullptr) {
        mGearSelectionTransitionOutro = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mGearSelectionTransitionOutro, 3273533950u);
    }

    auto ptr_selectionButtonDelayTime = prop->cast_prop<yordle::data::prop::float32_prop>(877220725u);
    if (ptr_selectionButtonDelayTime != nullptr) {
        selectionButtonDelayTime = ptr_selectionButtonDelayTime->value;
    }

    auto ptr_timerEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(309223887u);
    if (ptr_timerEnabled != nullptr) {
        timerEnabled = ptr_timerEnabled->value;
    }

    auto ptr_timerCountdownDuration = prop->cast_prop<yordle::data::prop::float32_prop>(2174396537u);
    if (ptr_timerCountdownDuration != nullptr) {
        timerCountdownDuration = ptr_timerCountdownDuration->value;
    }

    auto ptr_timerCountdownWarningStart = prop->cast_prop<yordle::data::prop::float32_prop>(770840841u);
    if (ptr_timerCountdownWarningStart != nullptr) {
        timerCountdownWarningStart = ptr_timerCountdownWarningStart->value;
    }
}

yordle::data::meta::HudRadialWheelData::HudRadialWheelData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mRadialWheelUITransitionData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1359803215u);
    if (ptr_mRadialWheelUITransitionData != nullptr) {
        mRadialWheelUITransitionData = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mRadialWheelUITransitionData, 3273533950u);
    }

    auto ptr_mRadialWheelButtonTransitionIntro = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2484979997u);
    if (ptr_mRadialWheelButtonTransitionIntro != nullptr) {
        mRadialWheelButtonTransitionIntro = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mRadialWheelButtonTransitionIntro, 3273533950u);
    }

    auto ptr_mRadialWheelButtonTransitionOutro = prop->cast_prop<yordle::data::prop::inline_structure_prop>(702662908u);
    if (ptr_mRadialWheelButtonTransitionOutro != nullptr) {
        mRadialWheelButtonTransitionOutro = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mRadialWheelButtonTransitionOutro, 3273533950u);
    }

    auto ptr_activateWheelDelayTime = prop->cast_prop<yordle::data::prop::float32_prop>(2209102647u);
    if (ptr_activateWheelDelayTime != nullptr) {
        activateWheelDelayTime = ptr_activateWheelDelayTime->value;
    }
}

yordle::data::meta::HudTeamFightOffScreenDifferentiationData::HudTeamFightOffScreenDifferentiationData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x40e3864f = prop->cast_prop<yordle::data::prop::float32_prop>(1088652879u);
    if (ptr_x40e3864f != nullptr) {
        x40e3864f = ptr_x40e3864f->value;
    }

    auto ptr_x3f035ddd = prop->cast_prop<yordle::data::prop::float32_prop>(1057185245u);
    if (ptr_x3f035ddd != nullptr) {
        x3f035ddd = ptr_x3f035ddd->value;
    }

    auto ptr_x23086737 = prop->cast_prop<yordle::data::prop::uint8_prop>(587753271u);
    if (ptr_x23086737 != nullptr) {
        x23086737 = ptr_x23086737->value;
    }
}

yordle::data::meta::HudTeamFightData::HudTeamFightData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSceneTransition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1728738979u);
    if (ptr_mSceneTransition != nullptr) {
        mSceneTransition = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mSceneTransition, 3273533950u);
    }

    auto ptr_mStyleFlags = prop->cast_prop<yordle::data::prop::uint32_prop>(529870772u);
    if (ptr_mStyleFlags != nullptr) {
        mStyleFlags = ptr_mStyleFlags->value;
    }

    auto ptr_xa7620c86 = prop->cast_prop<yordle::data::prop::structure_prop>(2808220806u);
    if (ptr_xa7620c86 != nullptr) {
        xa7620c86 = yordle::data::meta::deserialize<yordle::data::meta::HudTeamFightOffScreenDifferentiationData>(ptr_xa7620c86, 4224366477u);
    }
}

yordle::data::meta::HudReplayData::HudReplayData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_messageVisibleTime = prop->cast_prop<yordle::data::prop::float32_prop>(3881658399u);
    if (ptr_messageVisibleTime != nullptr) {
        messageVisibleTime = ptr_messageVisibleTime->value;
    }

    auto ptr_TeamFightData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3478055546u);
    if (ptr_TeamFightData != nullptr) {
        TeamFightData = yordle::data::meta::deserialize<yordle::data::meta::HudTeamFightData>(ptr_TeamFightData, 3784622423u);
    }
}

yordle::data::meta::HudCheatMenuData::HudCheatMenuData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_tooltipDelay = prop->cast_prop<yordle::data::prop::float32_prop>(3472129343u);
    if (ptr_tooltipDelay != nullptr) {
        tooltipDelay = ptr_tooltipDelay->value;
    }

    auto ptr_groupDividerGapSize = prop->cast_prop<yordle::data::prop::float32_prop>(3975522998u);
    if (ptr_groupDividerGapSize != nullptr) {
        groupDividerGapSize = ptr_groupDividerGapSize->value;
    }

    auto ptr_groupDividerIndex = prop->cast_prop<yordle::data::prop::uint8_prop>(3825175867u);
    if (ptr_groupDividerIndex != nullptr) {
        groupDividerIndex = ptr_groupDividerIndex->value;
    }
}

yordle::data::meta::HudPingData::HudPingData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_distanceToNotTrollPingCorpses = prop->cast_prop<yordle::data::prop::float32_prop>(1697979168u);
    if (ptr_distanceToNotTrollPingCorpses != nullptr) {
        distanceToNotTrollPingCorpses = ptr_distanceToNotTrollPingCorpses->value;
    }

    auto ptr_timeToNotTrollPingCorpses = prop->cast_prop<yordle::data::prop::float32_prop>(2077527886u);
    if (ptr_timeToNotTrollPingCorpses != nullptr) {
        timeToNotTrollPingCorpses = ptr_timeToNotTrollPingCorpses->value;
    }
}

yordle::data::meta::HudVoiceChatData::HudVoiceChatData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_highlightTimeoutSeconds = prop->cast_prop<yordle::data::prop::float32_prop>(2968454671u);
    if (ptr_highlightTimeoutSeconds != nullptr) {
        highlightTimeoutSeconds = ptr_highlightTimeoutSeconds->value;
    }
}

yordle::data::meta::HudInputBoxData::HudInputBoxData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_inputTextLengthMax = prop->cast_prop<yordle::data::prop::uint8_prop>(194632462u);
    if (ptr_inputTextLengthMax != nullptr) {
        inputTextLengthMax = ptr_inputTextLengthMax->value;
    }

    auto ptr_caretAlphaMax = prop->cast_prop<yordle::data::prop::float32_prop>(3528023626u);
    if (ptr_caretAlphaMax != nullptr) {
        caretAlphaMax = ptr_caretAlphaMax->value;
    }

    auto ptr_caretBlinkTime = prop->cast_prop<yordle::data::prop::float32_prop>(2567001615u);
    if (ptr_caretBlinkTime != nullptr) {
        caretBlinkTime = ptr_caretBlinkTime->value;
    }

    auto ptr_markedOffsetY = prop->cast_prop<yordle::data::prop::float32_prop>(1153216453u);
    if (ptr_markedOffsetY != nullptr) {
        markedOffsetY = ptr_markedOffsetY->value;
    }

    auto ptr_markedLineSizePx = prop->cast_prop<yordle::data::prop::float32_prop>(1490444466u);
    if (ptr_markedLineSizePx != nullptr) {
        markedLineSizePx = ptr_markedLineSizePx->value;
    }

    auto ptr_selectedOffsetY = prop->cast_prop<yordle::data::prop::float32_prop>(1507409826u);
    if (ptr_selectedOffsetY != nullptr) {
        selectedOffsetY = ptr_selectedOffsetY->value;
    }

    auto ptr_selectedLineSizePx = prop->cast_prop<yordle::data::prop::float32_prop>(729582647u);
    if (ptr_selectedLineSizePx != nullptr) {
        selectedLineSizePx = ptr_selectedLineSizePx->value;
    }

    auto ptr_xbeabf2d8 = prop->cast_prop<yordle::data::prop::float32_prop>(3198939864u);
    if (ptr_xbeabf2d8 != nullptr) {
        xbeabf2d8 = ptr_xbeabf2d8->value;
    }
}

yordle::data::meta::HudHealthBarBurstData::HudHealthBarBurstData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_burstTimeWindow = prop->cast_prop<yordle::data::prop::float32_prop>(2502566532u);
    if (ptr_burstTimeWindow != nullptr) {
        burstTimeWindow = ptr_burstTimeWindow->value;
    }

    auto ptr_burstTriggerPercent = prop->cast_prop<yordle::data::prop::float32_prop>(675252892u);
    if (ptr_burstTriggerPercent != nullptr) {
        burstTriggerPercent = ptr_burstTriggerPercent->value;
    }

    auto ptr_flashTriggerPercent = prop->cast_prop<yordle::data::prop::float32_prop>(1718791172u);
    if (ptr_flashTriggerPercent != nullptr) {
        flashTriggerPercent = ptr_flashTriggerPercent->value;
    }

    auto ptr_flashDuration = prop->cast_prop<yordle::data::prop::float32_prop>(2431648873u);
    if (ptr_flashDuration != nullptr) {
        flashDuration = ptr_flashDuration->value;
    }

    auto ptr_shakeDuration = prop->cast_prop<yordle::data::prop::float32_prop>(3059219037u);
    if (ptr_shakeDuration != nullptr) {
        shakeDuration = ptr_shakeDuration->value;
    }

    auto ptr_shakeBox = prop->cast_prop<yordle::data::prop::point_prop>(3788691298u);
    if (ptr_shakeBox != nullptr) {
        shakeBox = ptr_shakeBox->value;
    }

    auto ptr_shakeReferenceResolution = prop->cast_prop<yordle::data::prop::point_prop>(3869039728u);
    if (ptr_shakeReferenceResolution != nullptr) {
        shakeReferenceResolution = ptr_shakeReferenceResolution->value;
    }

    auto ptr_shakeTriggerPercent = prop->cast_prop<yordle::data::prop::float32_prop>(2434350880u);
    if (ptr_shakeTriggerPercent != nullptr) {
        shakeTriggerPercent = ptr_shakeTriggerPercent->value;
    }

    auto ptr_shakeFrequency = prop->cast_prop<yordle::data::prop::float32_prop>(3739545617u);
    if (ptr_shakeFrequency != nullptr) {
        shakeFrequency = ptr_shakeFrequency->value;
    }

    auto ptr_fadeSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(3958232910u);
    if (ptr_fadeSpeed != nullptr) {
        fadeSpeed = ptr_fadeSpeed->value;
    }

    auto ptr_fadeAcceleration = prop->cast_prop<yordle::data::prop::float32_prop>(960041359u);
    if (ptr_fadeAcceleration != nullptr) {
        fadeAcceleration = ptr_fadeAcceleration->value;
    }

    auto ptr_fadeHoldTime = prop->cast_prop<yordle::data::prop::float32_prop>(2386438435u);
    if (ptr_fadeHoldTime != nullptr) {
        fadeHoldTime = ptr_fadeHoldTime->value;
    }
}

yordle::data::meta::HudHealthBarFadeData::HudHealthBarFadeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_fadeSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(3958232910u);
    if (ptr_fadeSpeed != nullptr) {
        fadeSpeed = ptr_fadeSpeed->value;
    }

    auto ptr_fadeAcceleration = prop->cast_prop<yordle::data::prop::float32_prop>(960041359u);
    if (ptr_fadeAcceleration != nullptr) {
        fadeAcceleration = ptr_fadeAcceleration->value;
    }

    auto ptr_fadeHoldTime = prop->cast_prop<yordle::data::prop::float32_prop>(2386438435u);
    if (ptr_fadeHoldTime != nullptr) {
        fadeHoldTime = ptr_fadeHoldTime->value;
    }
}

yordle::data::meta::HudHealthBarDefenseModifierData::HudHealthBarDefenseModifierData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_defenseUpPercent = prop->cast_prop<yordle::data::prop::float32_prop>(1186716767u);
    if (ptr_defenseUpPercent != nullptr) {
        defenseUpPercent = ptr_defenseUpPercent->value;
    }

    auto ptr_defenseDownL1Percent = prop->cast_prop<yordle::data::prop::float32_prop>(2497395721u);
    if (ptr_defenseDownL1Percent != nullptr) {
        defenseDownL1Percent = ptr_defenseDownL1Percent->value;
    }

    auto ptr_defenseDownL2Percent = prop->cast_prop<yordle::data::prop::float32_prop>(1230871326u);
    if (ptr_defenseDownL2Percent != nullptr) {
        defenseDownL2Percent = ptr_defenseDownL2Percent->value;
    }

    auto ptr_defenseDownL3Percent = prop->cast_prop<yordle::data::prop::float32_prop>(517480215u);
    if (ptr_defenseDownL3Percent != nullptr) {
        defenseDownL3Percent = ptr_defenseDownL3Percent->value;
    }
}

yordle::data::meta::HudHealthBarBurstHealData::HudHealthBarBurstHealData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_healTimeWindow = prop->cast_prop<yordle::data::prop::float32_prop>(2204724990u);
    if (ptr_healTimeWindow != nullptr) {
        healTimeWindow = ptr_healTimeWindow->value;
    }

    auto ptr_healTriggerPercent = prop->cast_prop<yordle::data::prop::float32_prop>(149443610u);
    if (ptr_healTriggerPercent != nullptr) {
        healTriggerPercent = ptr_healTriggerPercent->value;
    }

    auto ptr_healFadeDuration = prop->cast_prop<yordle::data::prop::float32_prop>(132008365u);
    if (ptr_healFadeDuration != nullptr) {
        healFadeDuration = ptr_healFadeDuration->value;
    }
}

yordle::data::meta::HudHealthBarDefenseIconData::HudHealthBarDefenseIconData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_enlargeTime = prop->cast_prop<yordle::data::prop::float32_prop>(3259361652u);
    if (ptr_enlargeTime != nullptr) {
        enlargeTime = ptr_enlargeTime->value;
    }

    auto ptr_enlargeSize = prop->cast_prop<yordle::data::prop::float32_prop>(1648765196u);
    if (ptr_enlargeSize != nullptr) {
        enlargeSize = ptr_enlargeSize->value;
    }

    auto ptr_settleTime = prop->cast_prop<yordle::data::prop::float32_prop>(1864079291u);
    if (ptr_settleTime != nullptr) {
        settleTime = ptr_settleTime->value;
    }
}

yordle::data::meta::MicroTicksPerTickData::MicroTicksPerTickData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_minHealth = prop->cast_prop<yordle::data::prop::float32_prop>(410704417u);
    if (ptr_minHealth != nullptr) {
        minHealth = ptr_minHealth->value;
    }

    auto ptr_microTicksBetween = prop->cast_prop<yordle::data::prop::uint32_prop>(3855547341u);
    if (ptr_microTicksBetween != nullptr) {
        microTicksBetween = ptr_microTicksBetween->value;
    }
}

yordle::data::meta::HudHealthBarProgressiveTickData::HudHealthBarProgressiveTickData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_microTickPerTickData = prop->cast_prop<yordle::data::prop::set_prop>(3633563312u);
    if (ptr_microTickPerTickData != nullptr) {
        for (const auto &entry : ptr_microTickPerTickData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                microTickPerTickData.emplace(yordle::data::meta::deserialize<yordle::data::meta::MicroTicksPerTickData>(ptr_entry, 105644319u));
            }
        }
    }

    auto ptr_healthPerTick = prop->cast_prop<yordle::data::prop::float32_prop>(3149494603u);
    if (ptr_healthPerTick != nullptr) {
        healthPerTick = ptr_healthPerTick->value;
    }
}

yordle::data::meta::HudHealthBarData::HudHealthBarData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_burstData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1020358993u);
    if (ptr_burstData != nullptr) {
        burstData = yordle::data::meta::deserialize<yordle::data::meta::HudHealthBarBurstData>(ptr_burstData, 234651109u);
    }

    auto ptr_towerBurstData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1629775744u);
    if (ptr_towerBurstData != nullptr) {
        towerBurstData = yordle::data::meta::deserialize<yordle::data::meta::HudHealthBarBurstData>(ptr_towerBurstData, 234651109u);
    }

    auto ptr_burstHealData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(845477647u);
    if (ptr_burstHealData != nullptr) {
        burstHealData = yordle::data::meta::deserialize<yordle::data::meta::HudHealthBarBurstHealData>(ptr_burstHealData, 4246198531u);
    }

    auto ptr_championProgressiveTickData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(586300972u);
    if (ptr_championProgressiveTickData != nullptr) {
        championProgressiveTickData = yordle::data::meta::deserialize<yordle::data::meta::HudHealthBarProgressiveTickData>(ptr_championProgressiveTickData, 503820853u);
    }

    auto ptr_fadeData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3172238683u);
    if (ptr_fadeData != nullptr) {
        fadeData = yordle::data::meta::deserialize<yordle::data::meta::HudHealthBarFadeData>(ptr_fadeData, 1035555423u);
    }

    auto ptr_defenseModifierData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1710916258u);
    if (ptr_defenseModifierData != nullptr) {
        defenseModifierData = yordle::data::meta::deserialize<yordle::data::meta::HudHealthBarDefenseModifierData>(ptr_defenseModifierData, 749793326u);
    }

    auto ptr_defenseIconData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1198396770u);
    if (ptr_defenseIconData != nullptr) {
        defenseIconData = yordle::data::meta::deserialize<yordle::data::meta::HudHealthBarDefenseIconData>(ptr_defenseIconData, 937928230u);
    }

    auto ptr_untargetableAlpha = prop->cast_prop<yordle::data::prop::float32_prop>(2553509753u);
    if (ptr_untargetableAlpha != nullptr) {
        untargetableAlpha = ptr_untargetableAlpha->value;
    }

    auto ptr_resurrectingAlpha = prop->cast_prop<yordle::data::prop::float32_prop>(1157731036u);
    if (ptr_resurrectingAlpha != nullptr) {
        resurrectingAlpha = ptr_resurrectingAlpha->value;
    }
}

yordle::data::meta::HudSpellSlotResetFeedbackData::HudSpellSlotResetFeedbackData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_spellResetFlashFadeDuration = prop->cast_prop<yordle::data::prop::float32_prop>(505827072u);
    if (ptr_spellResetFlashFadeDuration != nullptr) {
        spellResetFlashFadeDuration = ptr_spellResetFlashFadeDuration->value;
    }

    auto ptr_spellResetFlashScaleDownDuration = prop->cast_prop<yordle::data::prop::float32_prop>(2088148704u);
    if (ptr_spellResetFlashScaleDownDuration != nullptr) {
        spellResetFlashScaleDownDuration = ptr_spellResetFlashScaleDownDuration->value;
    }

    auto ptr_spellResetScaleMultiplier = prop->cast_prop<yordle::data::prop::float32_prop>(2435287521u);
    if (ptr_spellResetScaleMultiplier != nullptr) {
        spellResetScaleMultiplier = ptr_spellResetScaleMultiplier->value;
    }
}

yordle::data::meta::HudLoadingScreenProgressBarData::HudLoadingScreenProgressBarData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xe4a8e1a9 = prop->cast_prop<yordle::data::prop::float32_prop>(3836273065u);
    if (ptr_xe4a8e1a9 != nullptr) {
        xe4a8e1a9 = ptr_xe4a8e1a9->value;
    }

    auto ptr_xd69543e7 = prop->cast_prop<yordle::data::prop::float32_prop>(3600106471u);
    if (ptr_xd69543e7 != nullptr) {
        xd69543e7 = ptr_xd69543e7->value;
    }

    auto ptr_x9f3d3433 = prop->cast_prop<yordle::data::prop::float32_prop>(2671588403u);
    if (ptr_x9f3d3433 != nullptr) {
        x9f3d3433 = ptr_x9f3d3433->value;
    }

    auto ptr_xb550de8d = prop->cast_prop<yordle::data::prop::float32_prop>(3041975949u);
    if (ptr_xb550de8d != nullptr) {
        xb550de8d = ptr_xb550de8d->value;
    }
}

yordle::data::meta::HudLoadingScreenData::HudLoadingScreenData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mProgressBarData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3969396588u);
    if (ptr_mProgressBarData != nullptr) {
        mProgressBarData = yordle::data::meta::deserialize<yordle::data::meta::HudLoadingScreenProgressBarData>(ptr_mProgressBarData, 464608054u);
    }

    auto ptr_x9d17e9e3 = prop->cast_prop<yordle::data::prop::bool_prop>(2635590115u);
    if (ptr_x9d17e9e3 != nullptr) {
        x9d17e9e3 = ptr_x9d17e9e3->value;
    }

    auto ptr_mLoadingSpinnerSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(1649527380u);
    if (ptr_mLoadingSpinnerSpeed != nullptr) {
        mLoadingSpinnerSpeed = ptr_mLoadingSpinnerSpeed->value;
    }

    auto ptr_mLoadingSpinnerFrames = prop->cast_prop<yordle::data::prop::uint8_prop>(2189949099u);
    if (ptr_mLoadingSpinnerFrames != nullptr) {
        mLoadingSpinnerFrames = ptr_mLoadingSpinnerFrames->value;
    }

    auto ptr_mLoadingSpinnerRows = prop->cast_prop<yordle::data::prop::uint8_prop>(387190268u);
    if (ptr_mLoadingSpinnerRows != nullptr) {
        mLoadingSpinnerRows = ptr_mLoadingSpinnerRows->value;
    }
}

yordle::data::meta::HudStatPanelStatStoneData::HudStatPanelStatStoneData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xca84776a = prop->cast_prop<yordle::data::prop::float32_prop>(3397678954u);
    if (ptr_xca84776a != nullptr) {
        xca84776a = ptr_xca84776a->value;
    }

    auto ptr_xf675a6b7 = prop->cast_prop<yordle::data::prop::float32_prop>(4134905527u);
    if (ptr_xf675a6b7 != nullptr) {
        xf675a6b7 = ptr_xf675a6b7->value;
    }

    auto ptr_mAnimationDelayTime = prop->cast_prop<yordle::data::prop::float32_prop>(1407617488u);
    if (ptr_mAnimationDelayTime != nullptr) {
        mAnimationDelayTime = ptr_mAnimationDelayTime->value;
    }

    auto ptr_x77d83159 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2010657113u);
    if (ptr_x77d83159 != nullptr) {
        x77d83159 = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_x77d83159, 3273533950u);
    }

    auto ptr_x4ae65dfa = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1256611322u);
    if (ptr_x4ae65dfa != nullptr) {
        x4ae65dfa = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_x4ae65dfa, 3273533950u);
    }

    auto ptr_mSlideTransitionIn = prop->cast_prop<yordle::data::prop::inline_structure_prop>(494112949u);
    if (ptr_mSlideTransitionIn != nullptr) {
        mSlideTransitionIn = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mSlideTransitionIn, 3273533950u);
    }

    auto ptr_mSlideTransitionOut = prop->cast_prop<yordle::data::prop::inline_structure_prop>(191273630u);
    if (ptr_mSlideTransitionOut != nullptr) {
        mSlideTransitionOut = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mSlideTransitionOut, 3273533950u);
    }
}

yordle::data::meta::HudStatStoneData::HudStatStoneData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x2dd6b42e = prop->cast_prop<yordle::data::prop::string_prop>(769045550u);
    if (ptr_x2dd6b42e != nullptr) {
        x2dd6b42e = ptr_x2dd6b42e->value;
    }

    auto ptr_x3c8fa9e9 = prop->cast_prop<yordle::data::prop::string_prop>(1016048105u);
    if (ptr_x3c8fa9e9 != nullptr) {
        x3c8fa9e9 = ptr_x3c8fa9e9->value;
    }
}

yordle::data::meta::HudStatStoneDeathRecapData::HudStatStoneDeathRecapData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_MinDisplayTime = prop->cast_prop<yordle::data::prop::float32_prop>(656979086u);
    if (ptr_MinDisplayTime != nullptr) {
        MinDisplayTime = ptr_MinDisplayTime->value;
    }

    auto ptr_MaxDisplayTime = prop->cast_prop<yordle::data::prop::float32_prop>(1115385192u);
    if (ptr_MaxDisplayTime != nullptr) {
        MaxDisplayTime = ptr_MaxDisplayTime->value;
    }

    auto ptr_DetailsTransitionData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2707103634u);
    if (ptr_DetailsTransitionData != nullptr) {
        DetailsTransitionData = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_DetailsTransitionData, 3273533950u);
    }

    auto ptr_DeathRecapTransitionIn = prop->cast_prop<yordle::data::prop::inline_structure_prop>(225474848u);
    if (ptr_DeathRecapTransitionIn != nullptr) {
        DeathRecapTransitionIn = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_DeathRecapTransitionIn, 3273533950u);
    }

    auto ptr_DeathRecapTransitionOut = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1529925733u);
    if (ptr_DeathRecapTransitionOut != nullptr) {
        DeathRecapTransitionOut = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_DeathRecapTransitionOut, 3273533950u);
    }
}

yordle::data::meta::HudStatStoneMilestoneData::HudStatStoneMilestoneData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_UiSound = prop->cast_prop<yordle::data::prop::string_prop>(2938438826u);
    if (ptr_UiSound != nullptr) {
        UiSound = ptr_UiSound->value;
    }

    auto ptr_xedf950c1 = prop->cast_prop<yordle::data::prop::string_prop>(3992539329u);
    if (ptr_xedf950c1 != nullptr) {
        xedf950c1 = ptr_xedf950c1->value;
    }

    auto ptr_x4f7fe3a3 = prop->cast_prop<yordle::data::prop::string_prop>(1333781411u);
    if (ptr_x4f7fe3a3 != nullptr) {
        x4f7fe3a3 = ptr_x4f7fe3a3->value;
    }

    auto ptr_xbb713ae8 = prop->cast_prop<yordle::data::prop::string_prop>(3144760040u);
    if (ptr_xbb713ae8 != nullptr) {
        xbb713ae8 = ptr_xbb713ae8->value;
    }

    auto ptr_MilestoneDisplayTime = prop->cast_prop<yordle::data::prop::float32_prop>(1043625708u);
    if (ptr_MilestoneDisplayTime != nullptr) {
        MilestoneDisplayTime = ptr_MilestoneDisplayTime->value;
    }

    auto ptr_xdd1c30ab = prop->cast_prop<yordle::data::prop::float32_prop>(3709612203u);
    if (ptr_xdd1c30ab != nullptr) {
        xdd1c30ab = ptr_xdd1c30ab->value;
    }

    auto ptr_MilestoneSelfIntroTime = prop->cast_prop<yordle::data::prop::float32_prop>(776943490u);
    if (ptr_MilestoneSelfIntroTime != nullptr) {
        MilestoneSelfIntroTime = ptr_MilestoneSelfIntroTime->value;
    }

    auto ptr_MilestoneOtherIntroTime = prop->cast_prop<yordle::data::prop::float32_prop>(2107277216u);
    if (ptr_MilestoneOtherIntroTime != nullptr) {
        MilestoneOtherIntroTime = ptr_MilestoneOtherIntroTime->value;
    }

    auto ptr_PersonalBestIntroTime = prop->cast_prop<yordle::data::prop::float32_prop>(3541856466u);
    if (ptr_PersonalBestIntroTime != nullptr) {
        PersonalBestIntroTime = ptr_PersonalBestIntroTime->value;
    }

    auto ptr_x39fecf93 = prop->cast_prop<yordle::data::prop::float32_prop>(973000595u);
    if (ptr_x39fecf93 != nullptr) {
        x39fecf93 = ptr_x39fecf93->value;
    }

    auto ptr_xdb4c4cf = prop->cast_prop<yordle::data::prop::uint32_prop>(229950671u);
    if (ptr_xdb4c4cf != nullptr) {
        xdb4c4cf = ptr_xdb4c4cf->value;
    }

    auto ptr_xa6d1b459 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2798761049u);
    if (ptr_xa6d1b459 != nullptr) {
        xa6d1b459 = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_xa6d1b459, 3273533950u);
    }

    auto ptr_MilestoneTransitionIn = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3053429941u);
    if (ptr_MilestoneTransitionIn != nullptr) {
        MilestoneTransitionIn = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_MilestoneTransitionIn, 3273533950u);
    }

    auto ptr_MilestoneTransitionOut = prop->cast_prop<yordle::data::prop::inline_structure_prop>(803870366u);
    if (ptr_MilestoneTransitionOut != nullptr) {
        MilestoneTransitionOut = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_MilestoneTransitionOut, 3273533950u);
    }

    auto ptr_x4ea59d14 = prop->cast_prop<yordle::data::prop::bool_prop>(1319476500u);
    if (ptr_x4ea59d14 != nullptr) {
        x4ea59d14 = ptr_x4ea59d14->value;
    }
}

yordle::data::meta::HudEndOfGameData::HudEndOfGameData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mVictoryTransitionIn = prop->cast_prop<yordle::data::prop::inline_structure_prop>(730945406u);
    if (ptr_mVictoryTransitionIn != nullptr) {
        mVictoryTransitionIn = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mVictoryTransitionIn, 3273533950u);
    }

    auto ptr_mDefeatTransitionIn = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3856555387u);
    if (ptr_mDefeatTransitionIn != nullptr) {
        mDefeatTransitionIn = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_mDefeatTransitionIn, 3273533950u);
    }
}

yordle::data::meta::HudMessageDisplayData::HudMessageDisplayData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TransitionIn = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2407574701u);
    if (ptr_TransitionIn != nullptr) {
        TransitionIn = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_TransitionIn, 3273533950u);
    }

    auto ptr_MessageDuration = prop->cast_prop<yordle::data::prop::float32_prop>(3756733196u);
    if (ptr_MessageDuration != nullptr) {
        MessageDuration = ptr_MessageDuration->value;
    }

    auto ptr_messageCount = prop->cast_prop<yordle::data::prop::uint32_prop>(415023739u);
    if (ptr_messageCount != nullptr) {
        messageCount = ptr_messageCount->value;
    }
}

yordle::data::meta::HudDamageDisplayData::HudDamageDisplayData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xdfcea7db = prop->cast_prop<yordle::data::prop::float32_prop>(3754862555u);
    if (ptr_xdfcea7db != nullptr) {
        xdfcea7db = ptr_xdfcea7db->value;
    }
}

yordle::data::meta::HudFightRecapUIData::HudFightRecapUIData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBasicAttackIconTextureName = prop->cast_prop<yordle::data::prop::string_prop>(2847772997u);
    if (ptr_mBasicAttackIconTextureName != nullptr) {
        mBasicAttackIconTextureName = ptr_mBasicAttackIconTextureName->value;
    }

    auto ptr_mUnknownDamageIconTextureName = prop->cast_prop<yordle::data::prop::string_prop>(404749450u);
    if (ptr_mUnknownDamageIconTextureName != nullptr) {
        mUnknownDamageIconTextureName = ptr_mUnknownDamageIconTextureName->value;
    }

    auto ptr_mItemDamageIconTextureName = prop->cast_prop<yordle::data::prop::string_prop>(2846050793u);
    if (ptr_mItemDamageIconTextureName != nullptr) {
        mItemDamageIconTextureName = ptr_mItemDamageIconTextureName->value;
    }

    auto ptr_mRuneDamageIconTextureName = prop->cast_prop<yordle::data::prop::string_prop>(3439137196u);
    if (ptr_mRuneDamageIconTextureName != nullptr) {
        mRuneDamageIconTextureName = ptr_mRuneDamageIconTextureName->value;
    }
}

yordle::data::meta::MinimapPingEffectDefinition::MinimapPingEffectDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_alphaStart = prop->cast_prop<yordle::data::prop::uint32_prop>(3560002185u);
    if (ptr_alphaStart != nullptr) {
        alphaStart = ptr_alphaStart->value;
    }

    auto ptr_alphaFadeSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(3907506576u);
    if (ptr_alphaFadeSpeed != nullptr) {
        alphaFadeSpeed = ptr_alphaFadeSpeed->value;
    }

    auto ptr_scaleStart = prop->cast_prop<yordle::data::prop::float32_prop>(2814322371u);
    if (ptr_scaleStart != nullptr) {
        scaleStart = ptr_scaleStart->value;
    }

    auto ptr_scaleSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(2253960972u);
    if (ptr_scaleSpeed != nullptr) {
        scaleSpeed = ptr_scaleSpeed->value;
    }

    auto ptr_startDelay = prop->cast_prop<yordle::data::prop::float32_prop>(2188171614u);
    if (ptr_startDelay != nullptr) {
        startDelay = ptr_startDelay->value;
    }

    auto ptr_life = prop->cast_prop<yordle::data::prop::float32_prop>(3888595679u);
    if (ptr_life != nullptr) {
        life = ptr_life->value;
    }

    auto ptr_onDeathFadeSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(3604665695u);
    if (ptr_onDeathFadeSpeed != nullptr) {
        onDeathFadeSpeed = ptr_onDeathFadeSpeed->value;
    }

    auto ptr_repeatCount = prop->cast_prop<yordle::data::prop::uint32_prop>(2251296609u);
    if (ptr_repeatCount != nullptr) {
        repeatCount = ptr_repeatCount->value;
    }

    auto ptr_blendWithAlpha = prop->cast_prop<yordle::data::prop::bool_prop>(3409444004u);
    if (ptr_blendWithAlpha != nullptr) {
        blendWithAlpha = ptr_blendWithAlpha->value;
    }
}

yordle::data::meta::TextureAndColorData::TextureAndColorData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_textureFile = prop->cast_prop<yordle::data::prop::string_prop>(2247501442u);
    if (ptr_textureFile != nullptr) {
        textureFile = ptr_textureFile->value;
    }

    auto ptr_color = prop->cast_prop<yordle::data::prop::color_prop>(1031692888u);
    if (ptr_color != nullptr) {
        color = ptr_color->value;
    }

    auto ptr_colorblindTextureFile = prop->cast_prop<yordle::data::prop::string_prop>(479687344u);
    if (ptr_colorblindTextureFile != nullptr) {
        colorblindTextureFile = ptr_colorblindTextureFile->value;
    }

    auto ptr_colorblindColor = prop->cast_prop<yordle::data::prop::optional_prop>(4042010374u);
    if (ptr_colorblindColor != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::color_prop>(ptr_colorblindColor->value);
        if(ptr_entry != nullptr) {
            colorblindColor = ptr_entry->value;
        }
    }
}

yordle::data::meta::MinimapPingEffectAndTextureData::MinimapPingEffectAndTextureData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(1239023785u);
    if (ptr_mEnabled != nullptr) {
        mEnabled = ptr_mEnabled->value;
    }

    auto ptr_mEffect = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3808773609u);
    if (ptr_mEffect != nullptr) {
        mEffect = yordle::data::meta::deserialize<yordle::data::meta::MinimapPingEffectDefinition>(ptr_mEffect, 1803253536u);
    }

    auto ptr_mDefault = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3960646101u);
    if (ptr_mDefault != nullptr) {
        mDefault = yordle::data::meta::deserialize<yordle::data::meta::TextureAndColorData>(ptr_mDefault, 4009176784u);
    }

    auto ptr_mOrder = prop->cast_prop<yordle::data::prop::structure_prop>(1310541936u);
    if (ptr_mOrder != nullptr) {
        mOrder = yordle::data::meta::deserialize<yordle::data::meta::TextureAndColorData>(ptr_mOrder, 4009176784u);
    }

    auto ptr_mChaos = prop->cast_prop<yordle::data::prop::structure_prop>(3036614192u);
    if (ptr_mChaos != nullptr) {
        mChaos = yordle::data::meta::deserialize<yordle::data::meta::TextureAndColorData>(ptr_mChaos, 4009176784u);
    }
}

yordle::data::meta::MinimapPingTypeContainer::MinimapPingTypeContainer(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_pingEffectList = prop->cast_prop<yordle::data::prop::set_prop>(3589196360u);
    if (ptr_pingEffectList != nullptr) {
        for (const auto &entry : ptr_pingEffectList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                pingEffectList.emplace(yordle::data::meta::deserialize<yordle::data::meta::MinimapPingEffectAndTextureData>(ptr_entry, 2136503545u));
            }
        }
    }
}

yordle::data::meta::MinimapPingData::MinimapPingData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mOMWPingRangeCutoffs = prop->cast_prop<yordle::data::prop::map_prop>(1244758992u);
    if (ptr_mOMWPingRangeCutoffs != nullptr) {
        for (const auto &pair : ptr_mOMWPingRangeCutoffs->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mOMWPingRangeCutoffs[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_mPings = prop->cast_prop<yordle::data::prop::set_prop>(2255329913u);
    if (ptr_mPings != nullptr) {
        for (const auto &entry : ptr_mPings->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mPings.emplace(yordle::data::meta::deserialize<yordle::data::meta::MinimapPingTypeContainer>(ptr_entry, 3823129339u));
            }
        }
    }
}

yordle::data::meta::ISecondaryResourceDisplayData::ISecondaryResourceDisplayData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::SecondaryResourceDisplayFractional::SecondaryResourceDisplayFractional(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ISecondaryResourceDisplayData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::LoadingScreenRankedProperties::LoadingScreenRankedProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDescriptor = prop->cast_prop<yordle::data::prop::string_prop>(2039624121u);
    if (ptr_mDescriptor != nullptr) {
        mDescriptor = ptr_mDescriptor->value;
    }

    auto ptr_mDivision = prop->cast_prop<yordle::data::prop::uint8_prop>(2454433267u);
    if (ptr_mDivision != nullptr) {
        mDivision = ptr_mDivision->value;
    }
}

yordle::data::meta::LoadingScreenRankedData::LoadingScreenRankedData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mRankedData = prop->cast_prop<yordle::data::prop::map_prop>(1751568959u);
    if (ptr_mRankedData != nullptr) {
        for (const auto &pair : ptr_mRankedData->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mRankedData[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::LoadingScreenRankedProperties>(ptr_value, 1700895677u);
            }
        }
    }
}

yordle::data::meta::QualitySetting::QualitySetting(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_x33eb38d = prop->cast_prop<yordle::data::prop::float32_prop>(54440845u);
    if (ptr_x33eb38d != nullptr) {
        x33eb38d = ptr_x33eb38d->value;
    }

    auto ptr_mFrameCap = prop->cast_prop<yordle::data::prop::uint32_prop>(502492027u);
    if (ptr_mFrameCap != nullptr) {
        mFrameCap = ptr_mFrameCap->value;
    }

    auto ptr_mEnvironmentQuality = prop->cast_prop<yordle::data::prop::uint32_prop>(2980703562u);
    if (ptr_mEnvironmentQuality != nullptr) {
        mEnvironmentQuality = ptr_mEnvironmentQuality->value;
    }

    auto ptr_xa8d99737 = prop->cast_prop<yordle::data::prop::uint32_prop>(2832832311u);
    if (ptr_xa8d99737 != nullptr) {
        xa8d99737 = ptr_xa8d99737->value;
    }

    auto ptr_mEffectsQuality = prop->cast_prop<yordle::data::prop::uint32_prop>(2879143307u);
    if (ptr_mEffectsQuality != nullptr) {
        mEffectsQuality = ptr_mEffectsQuality->value;
    }

    auto ptr_mShadowQuality = prop->cast_prop<yordle::data::prop::uint32_prop>(2814229565u);
    if (ptr_mShadowQuality != nullptr) {
        mShadowQuality = ptr_mShadowQuality->value;
    }

    auto ptr_mFxAa = prop->cast_prop<yordle::data::prop::bool_prop>(484066796u);
    if (ptr_mFxAa != nullptr) {
        mFxAa = ptr_mFxAa->value;
    }
}

yordle::data::meta::IOptionItem::IOptionItem(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_LiveUpdate = prop->cast_prop<yordle::data::prop::bool_prop>(1090655294u);
    if (ptr_LiveUpdate != nullptr) {
        LiveUpdate = ptr_LiveUpdate->value;
    }

    auto ptr_ShowOnPlatform = prop->cast_prop<yordle::data::prop::uint8_prop>(1210455602u);
    if (ptr_ShowOnPlatform != nullptr) {
        ShowOnPlatform = ptr_ShowOnPlatform->value;
    }

    auto ptr_Filter = prop->cast_prop<yordle::data::prop::structure_prop>(3353438327u);
    if (ptr_Filter != nullptr) {
        Filter = yordle::data::meta::deserialize<yordle::data::meta::IOptionItemFilter>(ptr_Filter, 3415079880u);
    }
}

yordle::data::meta::IOptionTemplate::IOptionTemplate(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_boundsElement = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1564656176u);
    if (ptr_boundsElement != nullptr) {
        boundsElement = ptr_boundsElement->value;
    }
}

yordle::data::meta::OptionItemBorder::OptionItemBorder(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItem(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr__template = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1766500875u);
    if (ptr__template != nullptr) {
        _template = ptr__template->value;
    }

    auto ptr_items = prop->cast_prop<yordle::data::prop::set_prop>(981021583u);
    if (ptr_items != nullptr) {
        for (const auto &entry : ptr_items->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                items.emplace(yordle::data::meta::deserialize<yordle::data::meta::IOptionItem>(ptr_entry, 2037513198u));
            }
        }
    }
}

yordle::data::meta::OptionItemCheckbox::OptionItemCheckbox(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItem(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_option = prop->cast_prop<yordle::data::prop::uint16_prop>(3890322324u);
    if (ptr_option != nullptr) {
        option = ptr_option->value;
    }

    auto ptr_Negate = prop->cast_prop<yordle::data::prop::bool_prop>(1971108699u);
    if (ptr_Negate != nullptr) {
        Negate = ptr_Negate->value;
    }

    auto ptr__template = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1766500875u);
    if (ptr__template != nullptr) {
        _template = ptr__template->value;
    }

    auto ptr_LabelTraKey = prop->cast_prop<yordle::data::prop::string_prop>(3389946293u);
    if (ptr_LabelTraKey != nullptr) {
        LabelTraKey = ptr_LabelTraKey->value;
    }

    auto ptr_TooltipTraKey = prop->cast_prop<yordle::data::prop::string_prop>(1609595816u);
    if (ptr_TooltipTraKey != nullptr) {
        TooltipTraKey = ptr_TooltipTraKey->value;
    }
}

yordle::data::meta::OptionItemColumns::OptionItemColumns(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItem(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ItemsEither = prop->cast_prop<yordle::data::prop::set_prop>(655852410u);
    if (ptr_ItemsEither != nullptr) {
        for (const auto &entry : ptr_ItemsEither->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                ItemsEither.emplace(yordle::data::meta::deserialize<yordle::data::meta::IOptionItem>(ptr_entry, 2037513198u));
            }
        }
    }

    auto ptr_itemsLeft = prop->cast_prop<yordle::data::prop::set_prop>(2948583814u);
    if (ptr_itemsLeft != nullptr) {
        for (const auto &entry : ptr_itemsLeft->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                itemsLeft.emplace(yordle::data::meta::deserialize<yordle::data::meta::IOptionItem>(ptr_entry, 2037513198u));
            }
        }
    }

    auto ptr_itemsRight = prop->cast_prop<yordle::data::prop::set_prop>(1825392187u);
    if (ptr_itemsRight != nullptr) {
        for (const auto &entry : ptr_itemsRight->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                itemsRight.emplace(yordle::data::meta::deserialize<yordle::data::meta::IOptionItem>(ptr_entry, 2037513198u));
            }
        }
    }
}

yordle::data::meta::OptionItemDropdownItem::OptionItemDropdownItem(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TraKey = prop->cast_prop<yordle::data::prop::string_prop>(2975295581u);
    if (ptr_TraKey != nullptr) {
        TraKey = ptr_TraKey->value;
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::int32_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = ptr_value->value;
    }
}

yordle::data::meta::OptionItemDropdown::OptionItemDropdown(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItem(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_option = prop->cast_prop<yordle::data::prop::uint16_prop>(3890322324u);
    if (ptr_option != nullptr) {
        option = ptr_option->value;
    }

    auto ptr__template = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1766500875u);
    if (ptr__template != nullptr) {
        _template = ptr__template->value;
    }

    auto ptr_LabelTraKey = prop->cast_prop<yordle::data::prop::string_prop>(3389946293u);
    if (ptr_LabelTraKey != nullptr) {
        LabelTraKey = ptr_LabelTraKey->value;
    }

    auto ptr_TooltipTraKey = prop->cast_prop<yordle::data::prop::string_prop>(1609595816u);
    if (ptr_TooltipTraKey != nullptr) {
        TooltipTraKey = ptr_TooltipTraKey->value;
    }

    auto ptr_items = prop->cast_prop<yordle::data::prop::set_prop>(981021583u);
    if (ptr_items != nullptr) {
        for (const auto &entry : ptr_items->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                items.emplace(yordle::data::meta::deserialize<yordle::data::meta::OptionItemDropdownItem>(ptr_entry, 1128087393u));
            }
        }
    }
}

yordle::data::meta::IOptionItemFilter::IOptionItemFilter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::xa6743a7::xa6743a7(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItemFilter(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Filters = prop->cast_prop<yordle::data::prop::set_prop>(2882977356u);
    if (ptr_Filters != nullptr) {
        for (const auto &entry : ptr_Filters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                Filters.emplace(yordle::data::meta::deserialize<yordle::data::meta::IOptionItemFilter>(ptr_entry, 3415079880u));
            }
        }
    }
}

yordle::data::meta::xcd391c99::xcd391c99(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItemFilter(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ShowInLolGame = prop->cast_prop<yordle::data::prop::bool_prop>(1107783316u);
    if (ptr_ShowInLolGame != nullptr) {
        ShowInLolGame = ptr_ShowInLolGame->value;
    }

    auto ptr_ShowInLolReplay = prop->cast_prop<yordle::data::prop::bool_prop>(1143239913u);
    if (ptr_ShowInLolReplay != nullptr) {
        ShowInLolReplay = ptr_ShowInLolReplay->value;
    }

    auto ptr_ShowInTftGame = prop->cast_prop<yordle::data::prop::bool_prop>(1108101821u);
    if (ptr_ShowInTftGame != nullptr) {
        ShowInTftGame = ptr_ShowInTftGame->value;
    }

    auto ptr_ShowInTftReplay = prop->cast_prop<yordle::data::prop::bool_prop>(501119360u);
    if (ptr_ShowInTftReplay != nullptr) {
        ShowInTftReplay = ptr_ShowInTftReplay->value;
    }
}

yordle::data::meta::x3e59e2ca::x3e59e2ca(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItemFilter(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x7b98ffdd = prop->cast_prop<yordle::data::prop::bool_prop>(2073624541u);
    if (ptr_x7b98ffdd != nullptr) {
        x7b98ffdd = ptr_x7b98ffdd->value;
    }

    auto ptr_x812748a2 = prop->cast_prop<yordle::data::prop::bool_prop>(2166835362u);
    if (ptr_x812748a2 != nullptr) {
        x812748a2 = ptr_x812748a2->value;
    }

    auto ptr_x37985b59 = prop->cast_prop<yordle::data::prop::bool_prop>(932731737u);
    if (ptr_x37985b59 != nullptr) {
        x37985b59 = ptr_x37985b59->value;
    }
}

yordle::data::meta::xd90e7018::xd90e7018(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItemFilter(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Map = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3751997361u);
    if (ptr_Map != nullptr) {
        Map = ptr_Map->value;
    }
}

yordle::data::meta::xee4d1304::xee4d1304(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItemFilter(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Mutator = prop->cast_prop<yordle::data::prop::string_prop>(3473488713u);
    if (ptr_Mutator != nullptr) {
        Mutator = ptr_Mutator->value;
    }
}

yordle::data::meta::xf8026218::xf8026218(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItemFilter(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::xa4941383::xa4941383(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItemFilter(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::xc58386::xc58386(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItemFilter(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xc77c4866 = prop->cast_prop<yordle::data::prop::bool_prop>(3346810982u);
    if (ptr_xc77c4866 != nullptr) {
        xc77c4866 = ptr_xc77c4866->value;
    }
}

yordle::data::meta::xa6a54243::xa6a54243(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItemFilter(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::OptionItemGroup::OptionItemGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItem(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr__template = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1766500875u);
    if (ptr__template != nullptr) {
        _template = ptr__template->value;
    }

    auto ptr_LabelTraKey = prop->cast_prop<yordle::data::prop::string_prop>(3389946293u);
    if (ptr_LabelTraKey != nullptr) {
        LabelTraKey = ptr_LabelTraKey->value;
    }

    auto ptr_ExpandedByDefault = prop->cast_prop<yordle::data::prop::bool_prop>(3831960366u);
    if (ptr_ExpandedByDefault != nullptr) {
        ExpandedByDefault = ptr_ExpandedByDefault->value;
    }

    auto ptr_items = prop->cast_prop<yordle::data::prop::set_prop>(981021583u);
    if (ptr_items != nullptr) {
        for (const auto &entry : ptr_items->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                items.emplace(yordle::data::meta::deserialize<yordle::data::meta::IOptionItem>(ptr_entry, 2037513198u));
            }
        }
    }
}

yordle::data::meta::OptionItemHotkeys::OptionItemHotkeys(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItem(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr__template = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1766500875u);
    if (ptr__template != nullptr) {
        _template = ptr__template->value;
    }
}

yordle::data::meta::OptionItemLabel::OptionItemLabel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItem(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr__template = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1766500875u);
    if (ptr__template != nullptr) {
        _template = ptr__template->value;
    }

    auto ptr_Label1TraKey = prop->cast_prop<yordle::data::prop::string_prop>(3748421612u);
    if (ptr_Label1TraKey != nullptr) {
        Label1TraKey = ptr_Label1TraKey->value;
    }

    auto ptr_Label2TraKey = prop->cast_prop<yordle::data::prop::string_prop>(1578692245u);
    if (ptr_Label2TraKey != nullptr) {
        Label2TraKey = ptr_Label2TraKey->value;
    }
}

yordle::data::meta::OptionItemResolutionDropdown::OptionItemResolutionDropdown(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : OptionItemDropdown(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::x55212361::x55212361(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Column0LabelTraKey = prop->cast_prop<yordle::data::prop::string_prop>(1803962597u);
    if (ptr_Column0LabelTraKey != nullptr) {
        Column0LabelTraKey = ptr_Column0LabelTraKey->value;
    }

    auto ptr_Column1LabelTraKey = prop->cast_prop<yordle::data::prop::string_prop>(1971332848u);
    if (ptr_Column1LabelTraKey != nullptr) {
        Column1LabelTraKey = ptr_Column1LabelTraKey->value;
    }
}

yordle::data::meta::x518d5fc0::x518d5fc0(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_LabelTraKey = prop->cast_prop<yordle::data::prop::string_prop>(3389946293u);
    if (ptr_LabelTraKey != nullptr) {
        LabelTraKey = ptr_LabelTraKey->value;
    }

    auto ptr_EventName = prop->cast_prop<yordle::data::prop::string_prop>(705137820u);
    if (ptr_EventName != nullptr) {
        EventName = ptr_EventName->value;
    }
}

yordle::data::meta::OptionItemSecondaryHotkeys1Column::OptionItemSecondaryHotkeys1Column(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItem(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr__template = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1766500875u);
    if (ptr__template != nullptr) {
        _template = ptr__template->value;
    }

    auto ptr_Header = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3834172512u);
    if (ptr_Header != nullptr) {
        Header = yordle::data::meta::deserialize<yordle::data::meta::x55212361>(ptr_Header, 1428235105u);
    }

    auto ptr_Rows = prop->cast_prop<yordle::data::prop::set_prop>(708293528u);
    if (ptr_Rows != nullptr) {
        for (const auto &entry : ptr_Rows->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                Rows.emplace(yordle::data::meta::deserialize<yordle::data::meta::x518d5fc0>(ptr_entry, 1368219584u));
            }
        }
    }
}

yordle::data::meta::xea321356::xea321356(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Column0LabelTraKey = prop->cast_prop<yordle::data::prop::string_prop>(1803962597u);
    if (ptr_Column0LabelTraKey != nullptr) {
        Column0LabelTraKey = ptr_Column0LabelTraKey->value;
    }

    auto ptr_Column1LabelTraKey = prop->cast_prop<yordle::data::prop::string_prop>(1971332848u);
    if (ptr_Column1LabelTraKey != nullptr) {
        Column1LabelTraKey = ptr_Column1LabelTraKey->value;
    }

    auto ptr_Column2LabelTraKey = prop->cast_prop<yordle::data::prop::string_prop>(885511311u);
    if (ptr_Column2LabelTraKey != nullptr) {
        Column2LabelTraKey = ptr_Column2LabelTraKey->value;
    }
}

yordle::data::meta::x430dd10d::x430dd10d(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_LabelTraKey = prop->cast_prop<yordle::data::prop::string_prop>(3389946293u);
    if (ptr_LabelTraKey != nullptr) {
        LabelTraKey = ptr_LabelTraKey->value;
    }

    auto ptr_EventName = prop->cast_prop<yordle::data::prop::string_prop>(705137820u);
    if (ptr_EventName != nullptr) {
        EventName = ptr_EventName->value;
    }

    auto ptr_Filter = prop->cast_prop<yordle::data::prop::structure_prop>(3353438327u);
    if (ptr_Filter != nullptr) {
        Filter = yordle::data::meta::deserialize<yordle::data::meta::IOptionItemFilter>(ptr_Filter, 3415079880u);
    }
}

yordle::data::meta::OptionItemSecondaryHotkeys2Column::OptionItemSecondaryHotkeys2Column(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItem(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr__template = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1766500875u);
    if (ptr__template != nullptr) {
        _template = ptr__template->value;
    }

    auto ptr_Header = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3834172512u);
    if (ptr_Header != nullptr) {
        Header = yordle::data::meta::deserialize<yordle::data::meta::xea321356>(ptr_Header, 3929150294u);
    }

    auto ptr_Rows = prop->cast_prop<yordle::data::prop::set_prop>(708293528u);
    if (ptr_Rows != nullptr) {
        for (const auto &entry : ptr_Rows->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                Rows.emplace(yordle::data::meta::deserialize<yordle::data::meta::x430dd10d>(ptr_entry, 1124978957u));
            }
        }
    }
}

yordle::data::meta::OptionItemSlider::OptionItemSlider(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionItem(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr__template = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1766500875u);
    if (ptr__template != nullptr) {
        _template = ptr__template->value;
    }

    auto ptr_LabelTraKey = prop->cast_prop<yordle::data::prop::string_prop>(3389946293u);
    if (ptr_LabelTraKey != nullptr) {
        LabelTraKey = ptr_LabelTraKey->value;
    }

    auto ptr_TooltipTraKey = prop->cast_prop<yordle::data::prop::string_prop>(1609595816u);
    if (ptr_TooltipTraKey != nullptr) {
        TooltipTraKey = ptr_TooltipTraKey->value;
    }
}

yordle::data::meta::OptionItemSliderFloat::OptionItemSliderFloat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : OptionItemSlider(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_option = prop->cast_prop<yordle::data::prop::uint16_prop>(3890322324u);
    if (ptr_option != nullptr) {
        option = ptr_option->value;
    }

    auto ptr_UpdateOnDrag = prop->cast_prop<yordle::data::prop::bool_prop>(2142584699u);
    if (ptr_UpdateOnDrag != nullptr) {
        UpdateOnDrag = ptr_UpdateOnDrag->value;
    }

    auto ptr_scale = prop->cast_prop<yordle::data::prop::float32_prop>(2190941297u);
    if (ptr_scale != nullptr) {
        scale = ptr_scale->value;
    }
}

yordle::data::meta::OptionItemSliderGraphicsQuality::OptionItemSliderGraphicsQuality(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : OptionItemSlider(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::OptionItemSliderInt::OptionItemSliderInt(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : OptionItemSlider(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_option = prop->cast_prop<yordle::data::prop::uint16_prop>(3890322324u);
    if (ptr_option != nullptr) {
        option = ptr_option->value;
    }

    auto ptr_optionScale = prop->cast_prop<yordle::data::prop::uint32_prop>(92209806u);
    if (ptr_optionScale != nullptr) {
        optionScale = ptr_optionScale->value;
    }
}

yordle::data::meta::OptionItemSliderVolume::OptionItemSliderVolume(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : OptionItemSliderFloat(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_MuteButtonTemplate = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2758761786u);
    if (ptr_MuteButtonTemplate != nullptr) {
        MuteButtonTemplate = ptr_MuteButtonTemplate->value;
    }

    auto ptr_MuteOption = prop->cast_prop<yordle::data::prop::uint16_prop>(3011713149u);
    if (ptr_MuteOption != nullptr) {
        MuteOption = ptr_MuteOption->value;
    }
}

yordle::data::meta::xf5324e2a::xf5324e2a(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : OptionItemDropdown(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::OptionsTab::OptionsTab(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TabNameTraKey = prop->cast_prop<yordle::data::prop::string_prop>(3806037407u);
    if (ptr_TabNameTraKey != nullptr) {
        TabNameTraKey = ptr_TabNameTraKey->value;
    }

    auto ptr_ShowOn = prop->cast_prop<yordle::data::prop::uint8_prop>(3841823045u);
    if (ptr_ShowOn != nullptr) {
        ShowOn = ptr_ShowOn->value;
    }

    auto ptr_x9255c052 = prop->cast_prop<yordle::data::prop::bool_prop>(2455093330u);
    if (ptr_x9255c052 != nullptr) {
        x9255c052 = ptr_x9255c052->value;
    }

    auto ptr_Filter = prop->cast_prop<yordle::data::prop::structure_prop>(3353438327u);
    if (ptr_Filter != nullptr) {
        Filter = yordle::data::meta::deserialize<yordle::data::meta::IOptionItemFilter>(ptr_Filter, 3415079880u);
    }

    auto ptr_items = prop->cast_prop<yordle::data::prop::set_prop>(981021583u);
    if (ptr_items != nullptr) {
        for (const auto &entry : ptr_items->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                items.emplace(yordle::data::meta::deserialize<yordle::data::meta::IOptionItem>(ptr_entry, 2037513198u));
            }
        }
    }
}

yordle::data::meta::OptionTemplateBorder::OptionTemplateBorder(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionTemplate(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_border = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(525480503u);
    if (ptr_border != nullptr) {
        border = ptr_border->value;
    }
}

yordle::data::meta::OptionTemplateCheckbox::OptionTemplateCheckbox(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionTemplate(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_buttonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3751321492u);
    if (ptr_buttonDefinition != nullptr) {
        buttonDefinition = ptr_buttonDefinition->value;
    }

    auto ptr_labelElement = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3889856367u);
    if (ptr_labelElement != nullptr) {
        labelElement = ptr_labelElement->value;
    }
}

yordle::data::meta::OptionTemplateDropdown::OptionTemplateDropdown(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionTemplate(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_labelElement = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3889856367u);
    if (ptr_labelElement != nullptr) {
        labelElement = ptr_labelElement->value;
    }

    auto ptr_ComboBoxDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4204097927u);
    if (ptr_ComboBoxDefinition != nullptr) {
        ComboBoxDefinition = ptr_ComboBoxDefinition->value;
    }
}

yordle::data::meta::OptionTemplateGroup::OptionTemplateGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionTemplate(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ExpandButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2302996240u);
    if (ptr_ExpandButtonDefinition != nullptr) {
        ExpandButtonDefinition = ptr_ExpandButtonDefinition->value;
    }

    auto ptr_labelElement = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3889856367u);
    if (ptr_labelElement != nullptr) {
        labelElement = ptr_labelElement->value;
    }

    auto ptr_xe76606d7 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3882223319u);
    if (ptr_xe76606d7 != nullptr) {
        xe76606d7 = ptr_xe76606d7->value;
    }

    auto ptr_x999669b3 = prop->cast_prop<yordle::data::prop::float32_prop>(2576771507u);
    if (ptr_x999669b3 != nullptr) {
        x999669b3 = ptr_x999669b3->value;
    }
}

yordle::data::meta::OptionTemplateHotkeysLabel::OptionTemplateHotkeysLabel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Label = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4137097213u);
    if (ptr_Label != nullptr) {
        Label = ptr_Label->value;
    }
}

yordle::data::meta::OptionTemplateHotkeysKey::OptionTemplateHotkeysKey(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_EventName = prop->cast_prop<yordle::data::prop::string_prop>(705137820u);
    if (ptr_EventName != nullptr) {
        EventName = ptr_EventName->value;
    }

    auto ptr_EventNameTraKey = prop->cast_prop<yordle::data::prop::string_prop>(1245960580u);
    if (ptr_EventNameTraKey != nullptr) {
        EventNameTraKey = ptr_EventNameTraKey->value;
    }

    auto ptr_position = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2471448074u);
    if (ptr_position != nullptr) {
        position = ptr_position->value;
    }
}

yordle::data::meta::OptionTemplateHotkeys::OptionTemplateHotkeys(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionTemplate(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_HotkeyButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(165670742u);
    if (ptr_HotkeyButtonDefinition != nullptr) {
        HotkeyButtonDefinition = ptr_HotkeyButtonDefinition->value;
    }

    auto ptr_HotkeyButtonTextSmall = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3331404723u);
    if (ptr_HotkeyButtonTextSmall != nullptr) {
        HotkeyButtonTextSmall = ptr_HotkeyButtonTextSmall->value;
    }

    auto ptr_hotkeyModifierText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1236606745u);
    if (ptr_hotkeyModifierText != nullptr) {
        hotkeyModifierText = ptr_hotkeyModifierText->value;
    }

    auto ptr_HotkeyQuickCastButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3367289996u);
    if (ptr_HotkeyQuickCastButtonDefinition != nullptr) {
        HotkeyQuickCastButtonDefinition = ptr_HotkeyQuickCastButtonDefinition->value;
    }

    auto ptr_CastAllButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2284695756u);
    if (ptr_CastAllButtonDefinition != nullptr) {
        CastAllButtonDefinition = ptr_CastAllButtonDefinition->value;
    }

    auto ptr_x2f11f1cb = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(789705163u);
    if (ptr_x2f11f1cb != nullptr) {
        x2f11f1cb = ptr_x2f11f1cb->value;
    }

    auto ptr_xa8e4f979 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2833578361u);
    if (ptr_xa8e4f979 != nullptr) {
        xa8e4f979 = ptr_xa8e4f979->value;
    }

    auto ptr_Labels = prop->cast_prop<yordle::data::prop::set_prop>(3185185930u);
    if (ptr_Labels != nullptr) {
        for (const auto &entry : ptr_Labels->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                Labels.emplace(yordle::data::meta::deserialize<yordle::data::meta::OptionTemplateHotkeysLabel>(ptr_entry, 1432209297u));
            }
        }
    }

    auto ptr_keys = prop->cast_prop<yordle::data::prop::set_prop>(4182378701u);
    if (ptr_keys != nullptr) {
        for (const auto &entry : ptr_keys->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                keys.emplace(yordle::data::meta::deserialize<yordle::data::meta::OptionTemplateHotkeysKey>(ptr_entry, 3163647920u));
            }
        }
    }
}

yordle::data::meta::OptionTemplateLabel::OptionTemplateLabel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionTemplate(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Label1 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4225398308u);
    if (ptr_Label1 != nullptr) {
        Label1 = ptr_Label1->value;
    }

    auto ptr_Label2 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4275731165u);
    if (ptr_Label2 != nullptr) {
        Label2 = ptr_Label2->value;
    }
}

yordle::data::meta::OptionTemplateMuteButton::OptionTemplateMuteButton(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionTemplate(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_buttonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3751321492u);
    if (ptr_buttonDefinition != nullptr) {
        buttonDefinition = ptr_buttonDefinition->value;
    }
}

yordle::data::meta::xceb70e5a::xceb70e5a(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_backgroundElement = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1272541071u);
    if (ptr_backgroundElement != nullptr) {
        backgroundElement = ptr_backgroundElement->value;
    }

    auto ptr_TextElement = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4005730134u);
    if (ptr_TextElement != nullptr) {
        TextElement = ptr_TextElement->value;
    }
}

yordle::data::meta::x354988a8::x354988a8(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_buttonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3751321492u);
    if (ptr_buttonDefinition != nullptr) {
        buttonDefinition = ptr_buttonDefinition->value;
    }
}

yordle::data::meta::OptionTemplateSecondaryHotkeys1Column::OptionTemplateSecondaryHotkeys1Column(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionTemplate(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x5b59b589 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1532605833u);
    if (ptr_x5b59b589 != nullptr) {
        x5b59b589 = yordle::data::meta::deserialize<yordle::data::meta::xceb70e5a>(ptr_x5b59b589, 3468103258u);
    }

    auto ptr_x5a59b3f6 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1515828214u);
    if (ptr_x5a59b3f6 != nullptr) {
        x5a59b3f6 = yordle::data::meta::deserialize<yordle::data::meta::xceb70e5a>(ptr_x5a59b3f6, 3468103258u);
    }

    auto ptr_xfd31cbcb = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4247899083u);
    if (ptr_xfd31cbcb != nullptr) {
        xfd31cbcb = yordle::data::meta::deserialize<yordle::data::meta::xceb70e5a>(ptr_xfd31cbcb, 3468103258u);
    }

    auto ptr_x545758a8 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1415010472u);
    if (ptr_x545758a8 != nullptr) {
        x545758a8 = yordle::data::meta::deserialize<yordle::data::meta::x354988a8>(ptr_x545758a8, 894011560u);
    }
}

yordle::data::meta::OptionTemplateSecondaryHotkeys2Column::OptionTemplateSecondaryHotkeys2Column(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionTemplate(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x5b59b589 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1532605833u);
    if (ptr_x5b59b589 != nullptr) {
        x5b59b589 = yordle::data::meta::deserialize<yordle::data::meta::xceb70e5a>(ptr_x5b59b589, 3468103258u);
    }

    auto ptr_x5a59b3f6 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1515828214u);
    if (ptr_x5a59b3f6 != nullptr) {
        x5a59b3f6 = yordle::data::meta::deserialize<yordle::data::meta::xceb70e5a>(ptr_x5a59b3f6, 3468103258u);
    }

    auto ptr_x5959b263 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1499050595u);
    if (ptr_x5959b263 != nullptr) {
        x5959b263 = yordle::data::meta::deserialize<yordle::data::meta::xceb70e5a>(ptr_x5959b263, 3468103258u);
    }

    auto ptr_xfd31cbcb = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4247899083u);
    if (ptr_xfd31cbcb != nullptr) {
        xfd31cbcb = yordle::data::meta::deserialize<yordle::data::meta::xceb70e5a>(ptr_xfd31cbcb, 3468103258u);
    }

    auto ptr_x545758a8 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1415010472u);
    if (ptr_x545758a8 != nullptr) {
        x545758a8 = yordle::data::meta::deserialize<yordle::data::meta::x354988a8>(ptr_x545758a8, 894011560u);
    }

    auto ptr_x57575d61 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1465343329u);
    if (ptr_x57575d61 != nullptr) {
        x57575d61 = yordle::data::meta::deserialize<yordle::data::meta::x354988a8>(ptr_x57575d61, 894011560u);
    }
}

yordle::data::meta::OptionTemplateSlider::OptionTemplateSlider(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IOptionTemplate(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_labelElement = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3889856367u);
    if (ptr_labelElement != nullptr) {
        labelElement = ptr_labelElement->value;
    }

    auto ptr_valueElement = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2645057986u);
    if (ptr_valueElement != nullptr) {
        valueElement = ptr_valueElement->value;
    }

    auto ptr_x6a05258c = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1778722188u);
    if (ptr_x6a05258c != nullptr) {
        x6a05258c = ptr_x6a05258c->value;
    }
}

yordle::data::meta::NamedIconData::NamedIconData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_Icon = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3862959600u);
    if (ptr_Icon != nullptr) {
        Icon = ptr_Icon->value;
    }
}

yordle::data::meta::ModeSelectButtonData::ModeSelectButtonData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_queueId = prop->cast_prop<yordle::data::prop::int64_prop>(3917022501u);
    if (ptr_queueId != nullptr) {
        queueId = ptr_queueId->value;
    }

    auto ptr_buttonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3751321492u);
    if (ptr_buttonDefinition != nullptr) {
        buttonDefinition = ptr_buttonDefinition->value;
    }
}

yordle::data::meta::ILoadoutFeatureDataBehavior::ILoadoutFeatureDataBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_DisplayNameTraKey = prop->cast_prop<yordle::data::prop::string_prop>(3441777566u);
    if (ptr_DisplayNameTraKey != nullptr) {
        DisplayNameTraKey = ptr_DisplayNameTraKey->value;
    }

    auto ptr_LoadoutType = prop->cast_prop<yordle::data::prop::uint32_prop>(2358317979u);
    if (ptr_LoadoutType != nullptr) {
        LoadoutType = ptr_LoadoutType->value;
    }

    auto ptr_x4e2c59d6 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1311529430u);
    if (ptr_x4e2c59d6 != nullptr) {
        x4e2c59d6 = ptr_x4e2c59d6->value;
    }

    auto ptr_IllustrationIcon = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1736778658u);
    if (ptr_IllustrationIcon != nullptr) {
        IllustrationIcon = ptr_IllustrationIcon->value;
    }

    auto ptr_Region = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(52100733u);
    if (ptr_Region != nullptr) {
        Region = ptr_Region->value;
    }

    auto ptr_buttonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3751321492u);
    if (ptr_buttonDefinition != nullptr) {
        buttonDefinition = ptr_buttonDefinition->value;
    }
}

yordle::data::meta::QueueDisplayData::QueueDisplayData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_queueId = prop->cast_prop<yordle::data::prop::int64_prop>(3917022501u);
    if (ptr_queueId != nullptr) {
        queueId = ptr_queueId->value;
    }

    auto ptr_xce96bffc = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3465986044u);
    if (ptr_xce96bffc != nullptr) {
        xce96bffc = ptr_xce96bffc->value;
    }

    auto ptr_xf221c7d2 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4062300114u);
    if (ptr_xf221c7d2 != nullptr) {
        xf221c7d2 = ptr_xf221c7d2->value;
    }

    auto ptr_x21eaf8b = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(35565451u);
    if (ptr_x21eaf8b != nullptr) {
        x21eaf8b = ptr_x21eaf8b->value;
    }

    auto ptr_IllustrationIconElement = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2745365850u);
    if (ptr_IllustrationIconElement != nullptr) {
        IllustrationIconElement = ptr_IllustrationIconElement->value;
    }

    auto ptr_DisplayNameTraKey = prop->cast_prop<yordle::data::prop::string_prop>(3441777566u);
    if (ptr_DisplayNameTraKey != nullptr) {
        DisplayNameTraKey = ptr_DisplayNameTraKey->value;
    }
}

yordle::data::meta::xfbd72d16::xfbd72d16(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x4d31ed46 = prop->cast_prop<yordle::data::prop::reference_prop>(1295117638u);
    if (ptr_x4d31ed46 != nullptr) {
        x4d31ed46 = ptr_x4d31ed46->value;
    }
}

yordle::data::meta::StoreCategoryButtonDefinition::StoreCategoryButtonDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_category = prop->cast_prop<yordle::data::prop::uint32_prop>(3475980913u);
    if (ptr_category != nullptr) {
        category = ptr_category->value;
    }

    auto ptr_buttonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3751321492u);
    if (ptr_buttonDefinition != nullptr) {
        buttonDefinition = ptr_buttonDefinition->value;
    }
}

yordle::data::meta::ILoadoutInfoPanel::ILoadoutInfoPanel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ViewPaneDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2330109623u);
    if (ptr_ViewPaneDefinition != nullptr) {
        ViewPaneDefinition = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_ViewPaneDefinition, 2330109623u);
    }
}

yordle::data::meta::NotificationSettings::NotificationSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_defaultSound = prop->cast_prop<yordle::data::prop::string_prop>(939364701u);
    if (ptr_defaultSound != nullptr) {
        defaultSound = ptr_defaultSound->value;
    }

    auto ptr_x89667868 = prop->cast_prop<yordle::data::prop::map_prop>(2305194088u);
    if (ptr_x89667868 != nullptr) {
        for (const auto &pair : ptr_x89667868->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                x89667868[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::QuestDefinition::QuestDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_categoryTitleText = prop->cast_prop<yordle::data::prop::string_prop>(2815783430u);
    if (ptr_categoryTitleText != nullptr) {
        categoryTitleText = ptr_categoryTitleText->value;
    }

    auto ptr_maxViewableQuests = prop->cast_prop<yordle::data::prop::uint32_prop>(3606586263u);
    if (ptr_maxViewableQuests != nullptr) {
        maxViewableQuests = ptr_maxViewableQuests->value;
    }

    auto ptr_recievedSoundPath = prop->cast_prop<yordle::data::prop::string_prop>(892697274u);
    if (ptr_recievedSoundPath != nullptr) {
        recievedSoundPath = ptr_recievedSoundPath->value;
    }

    auto ptr_completedSoundPath = prop->cast_prop<yordle::data::prop::string_prop>(912104930u);
    if (ptr_completedSoundPath != nullptr) {
        completedSoundPath = ptr_completedSoundPath->value;
    }

    auto ptr_failedSoundPath = prop->cast_prop<yordle::data::prop::string_prop>(3646698844u);
    if (ptr_failedSoundPath != nullptr) {
        failedSoundPath = ptr_failedSoundPath->value;
    }
}

yordle::data::meta::x46533086::x46533086(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_primaryQuest = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1450574097u);
    if (ptr_primaryQuest != nullptr) {
        primaryQuest = yordle::data::meta::deserialize<yordle::data::meta::QuestDefinition>(ptr_primaryQuest, 2873675736u);
    }

    auto ptr_secondaryQuest = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1149844633u);
    if (ptr_secondaryQuest != nullptr) {
        secondaryQuest = yordle::data::meta::deserialize<yordle::data::meta::QuestDefinition>(ptr_secondaryQuest, 2873675736u);
    }

    auto ptr_objectiveQuest = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3590991722u);
    if (ptr_objectiveQuest != nullptr) {
        objectiveQuest = yordle::data::meta::deserialize<yordle::data::meta::QuestDefinition>(ptr_objectiveQuest, 2873675736u);
    }

    auto ptr_x56647830 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1449424944u);
    if (ptr_x56647830 != nullptr) {
        x56647830 = yordle::data::meta::deserialize<yordle::data::meta::QuestDefinition>(ptr_x56647830, 2873675736u);
    }

    auto ptr_x6cee1705 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1827542789u);
    if (ptr_x6cee1705 != nullptr) {
        x6cee1705 = yordle::data::meta::deserialize<yordle::data::meta::QuestDefinition>(ptr_x6cee1705, 2873675736u);
    }

    auto ptr_scoreDisplayQuest = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3379408477u);
    if (ptr_scoreDisplayQuest != nullptr) {
        scoreDisplayQuest = yordle::data::meta::deserialize<yordle::data::meta::QuestDefinition>(ptr_scoreDisplayQuest, 2873675736u);
    }
}

yordle::data::meta::GeneralSettingsGroup::GeneralSettingsGroup(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PromoteAccountButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1060839150u);
    if (ptr_PromoteAccountButton != nullptr) {
        PromoteAccountButton = ptr_PromoteAccountButton->value;
    }

    auto ptr_SignOutButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1939712764u);
    if (ptr_SignOutButton != nullptr) {
        SignOutButton = ptr_SignOutButton->value;
    }

    auto ptr_restorePurchaseButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(392875102u);
    if (ptr_restorePurchaseButton != nullptr) {
        restorePurchaseButton = ptr_restorePurchaseButton->value;
    }
}

yordle::data::meta::SurrenderTypeData::SurrenderTypeData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_VoteTimeout = prop->cast_prop<yordle::data::prop::float32_prop>(1387564760u);
    if (ptr_VoteTimeout != nullptr) {
        VoteTimeout = ptr_VoteTimeout->value;
    }

    auto ptr_windowLength = prop->cast_prop<yordle::data::prop::float32_prop>(1172071613u);
    if (ptr_windowLength != nullptr) {
        windowLength = ptr_windowLength->value;
    }

    auto ptr_startTime = prop->cast_prop<yordle::data::prop::float32_prop>(2322632174u);
    if (ptr_startTime != nullptr) {
        startTime = ptr_startTime->value;
    }

    auto ptr_percentageRequired = prop->cast_prop<yordle::data::prop::float32_prop>(1423297552u);
    if (ptr_percentageRequired != nullptr) {
        percentageRequired = ptr_percentageRequired->value;
    }

    auto ptr_x3f72f07a = prop->cast_prop<yordle::data::prop::float32_prop>(1064497274u);
    if (ptr_x3f72f07a != nullptr) {
        x3f72f07a = ptr_x3f72f07a->value;
    }
}

yordle::data::meta::SurrenderData::SurrenderData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x43f7599b = prop->cast_prop<yordle::data::prop::float32_prop>(1140283803u);
    if (ptr_x43f7599b != nullptr) {
        x43f7599b = ptr_x43f7599b->value;
    }

    auto ptr_xe98993c = prop->cast_prop<yordle::data::prop::float32_prop>(244881724u);
    if (ptr_xe98993c != nullptr) {
        xe98993c = ptr_xe98993c->value;
    }

    auto ptr_xcc805103 = prop->cast_prop<yordle::data::prop::float32_prop>(3430961411u);
    if (ptr_xcc805103 != nullptr) {
        xcc805103 = ptr_xcc805103->value;
    }

    auto ptr_x3afeacf3 = prop->cast_prop<yordle::data::prop::float32_prop>(989768947u);
    if (ptr_x3afeacf3 != nullptr) {
        x3afeacf3 = ptr_x3afeacf3->value;
    }

    auto ptr_mTypeData = prop->cast_prop<yordle::data::prop::map_prop>(321593752u);
    if (ptr_mTypeData != nullptr) {
        for (const auto &pair : ptr_mTypeData->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mTypeData[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::SurrenderTypeData>(ptr_value, 740737797u);
            }
        }
    }
}

yordle::data::meta::LoadScreenTip::LoadScreenTip(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mId = prop->cast_prop<yordle::data::prop::uint16_prop>(3280944101u);
    if (ptr_mId != nullptr) {
        mId = ptr_mId->value;
    }

    auto ptr_mHeaderLocalizationKey = prop->cast_prop<yordle::data::prop::string_prop>(1975783559u);
    if (ptr_mHeaderLocalizationKey != nullptr) {
        mHeaderLocalizationKey = ptr_mHeaderLocalizationKey->value;
    }

    auto ptr_mMinimumSummonerLevel = prop->cast_prop<yordle::data::prop::optional_prop>(225965586u);
    if (ptr_mMinimumSummonerLevel != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(ptr_mMinimumSummonerLevel->value);
        if(ptr_entry != nullptr) {
            mMinimumSummonerLevel = ptr_entry->value;
        }
    }

    auto ptr_mMaximumSummonerLevel = prop->cast_prop<yordle::data::prop::optional_prop>(109186948u);
    if (ptr_mMaximumSummonerLevel != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(ptr_mMaximumSummonerLevel->value);
        if(ptr_entry != nullptr) {
            mMaximumSummonerLevel = ptr_entry->value;
        }
    }

    auto ptr_mLocalizationKey = prop->cast_prop<yordle::data::prop::string_prop>(797352128u);
    if (ptr_mLocalizationKey != nullptr) {
        mLocalizationKey = ptr_mLocalizationKey->value;
    }
}

yordle::data::meta::LoadScreenTipSet::LoadScreenTipSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mTips = prop->cast_prop<yordle::data::prop::set_prop>(2918664514u);
    if (ptr_mTips != nullptr) {
        for (const auto &entry : ptr_mTips->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                mTips.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::LoadScreenTipConfiguration::LoadScreenTipConfiguration(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mShowInCustomGames = prop->cast_prop<yordle::data::prop::bool_prop>(870385408u);
    if (ptr_mShowInCustomGames != nullptr) {
        mShowInCustomGames = ptr_mShowInCustomGames->value;
    }

    auto ptr_mShowPBITipsOnLoadingScreen = prop->cast_prop<yordle::data::prop::bool_prop>(1073556611u);
    if (ptr_mShowPBITipsOnLoadingScreen != nullptr) {
        mShowPBITipsOnLoadingScreen = ptr_mShowPBITipsOnLoadingScreen->value;
    }

    auto ptr_mPBITipDurationOnLoadingScreen = prop->cast_prop<yordle::data::prop::float32_prop>(3541289925u);
    if (ptr_mPBITipDurationOnLoadingScreen != nullptr) {
        mPBITipDurationOnLoadingScreen = ptr_mPBITipDurationOnLoadingScreen->value;
    }

    auto ptr_mDurationInGame = prop->cast_prop<yordle::data::prop::float32_prop>(2181567501u);
    if (ptr_mDurationInGame != nullptr) {
        mDurationInGame = ptr_mDurationInGame->value;
    }
}

yordle::data::meta::x9e5aed77::x9e5aed77(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x571a97a3 = prop->cast_prop<yordle::data::prop::int32_prop>(1461360547u);
    if (ptr_x571a97a3 != nullptr) {
        x571a97a3 = ptr_x571a97a3->value;
    }

    auto ptr_x88a45101 = prop->cast_prop<yordle::data::prop::int32_prop>(2292470017u);
    if (ptr_x88a45101 != nullptr) {
        x88a45101 = ptr_x88a45101->value;
    }

    auto ptr_x1a8b3cc8 = prop->cast_prop<yordle::data::prop::int32_prop>(445332680u);
    if (ptr_x1a8b3cc8 != nullptr) {
        x1a8b3cc8 = ptr_x1a8b3cc8->value;
    }

    auto ptr_xbb9129ab = prop->cast_prop<yordle::data::prop::int32_prop>(3146852779u);
    if (ptr_xbb9129ab != nullptr) {
        xbb9129ab = ptr_xbb9129ab->value;
    }

    auto ptr_xe2e4f9c2 = prop->cast_prop<yordle::data::prop::int32_prop>(3806656962u);
    if (ptr_xe2e4f9c2 != nullptr) {
        xe2e4f9c2 = ptr_xe2e4f9c2->value;
    }

    auto ptr_x47bdbbe9 = prop->cast_prop<yordle::data::prop::int32_prop>(1203616745u);
    if (ptr_x47bdbbe9 != nullptr) {
        x47bdbbe9 = ptr_x47bdbbe9->value;
    }
}

yordle::data::meta::ViewController::ViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xb79c86ae = prop->cast_prop<yordle::data::prop::reference_prop>(3080488622u);
    if (ptr_xb79c86ae != nullptr) {
        xb79c86ae = ptr_xb79c86ae->value;
    }
}

yordle::data::meta::VoiceChatViewController::VoiceChatViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PanelSceneHandle = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3915585109u);
    if (ptr_PanelSceneHandle != nullptr) {
        PanelSceneHandle = ptr_PanelSceneHandle->value;
    }

    auto ptr_Backdrop = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2478896375u);
    if (ptr_Backdrop != nullptr) {
        Backdrop = ptr_Backdrop->value;
    }

    auto ptr_errorText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(469739042u);
    if (ptr_errorText != nullptr) {
        errorText = ptr_errorText->value;
    }

    auto ptr_x8c45eb46 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2353392454u);
    if (ptr_x8c45eb46 != nullptr) {
        x8c45eb46 = ptr_x8c45eb46->value;
    }

    auto ptr_x788862bd = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2022204093u);
    if (ptr_x788862bd != nullptr) {
        x788862bd = ptr_x788862bd->value;
    }

    auto ptr_SelfSlot = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3308628427u);
    if (ptr_SelfSlot != nullptr) {
        SelfSlot = yordle::data::meta::deserialize<yordle::data::meta::VoiceChatViewSelfSlot>(ptr_SelfSlot, 2730017800u);
    }

    auto ptr_PlayerGrid = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(20142544u);
    if (ptr_PlayerGrid != nullptr) {
        PlayerGrid = ptr_PlayerGrid->value;
    }

    auto ptr_PlayerSlotData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(316244308u);
    if (ptr_PlayerSlotData != nullptr) {
        PlayerSlotData = yordle::data::meta::deserialize<yordle::data::meta::x86504cef>(ptr_PlayerSlotData, 2253409519u);
    }
}

yordle::data::meta::x86504cef::x86504cef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Group = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1605967500u);
    if (ptr_Group != nullptr) {
        Group = ptr_Group->value;
    }

    auto ptr_Portrait = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(806924506u);
    if (ptr_Portrait != nullptr) {
        Portrait = ptr_Portrait->value;
    }

    auto ptr_Halo = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3485384095u);
    if (ptr_Halo != nullptr) {
        Halo = ptr_Halo->value;
    }

    auto ptr_NameText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3587103093u);
    if (ptr_NameText != nullptr) {
        NameText = ptr_NameText->value;
    }

    auto ptr_VolumeText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1420592184u);
    if (ptr_VolumeText != nullptr) {
        VolumeText = ptr_VolumeText->value;
    }

    auto ptr_VolumeSliderBar = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3411445823u);
    if (ptr_VolumeSliderBar != nullptr) {
        VolumeSliderBar = ptr_VolumeSliderBar->value;
    }

    auto ptr_MuteButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3726201232u);
    if (ptr_MuteButton != nullptr) {
        MuteButton = ptr_MuteButton->value;
    }
}

yordle::data::meta::VoiceChatViewSelfSlot::VoiceChatViewSelfSlot(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Portrait = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(806924506u);
    if (ptr_Portrait != nullptr) {
        Portrait = ptr_Portrait->value;
    }

    auto ptr_Halo = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3485384095u);
    if (ptr_Halo != nullptr) {
        Halo = ptr_Halo->value;
    }

    auto ptr_NameText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3587103093u);
    if (ptr_NameText != nullptr) {
        NameText = ptr_NameText->value;
    }

    auto ptr_MicVolumeText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(714535865u);
    if (ptr_MicVolumeText != nullptr) {
        MicVolumeText = ptr_MicVolumeText->value;
    }

    auto ptr_MicVolumeSliderBar = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(385740432u);
    if (ptr_MicVolumeSliderBar != nullptr) {
        MicVolumeSliderBar = ptr_MicVolumeSliderBar->value;
    }

    auto ptr_MuteButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3726201232u);
    if (ptr_MuteButton != nullptr) {
        MuteButton = ptr_MuteButton->value;
    }

    auto ptr_ConnectionButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(354237261u);
    if (ptr_ConnectionButton != nullptr) {
        ConnectionButton = ptr_ConnectionButton->value;
    }
}

yordle::data::meta::NeutralTimerSourceIconData::NeutralTimerSourceIconData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTooltipName = prop->cast_prop<yordle::data::prop::string_prop>(1770873432u);
    if (ptr_mTooltipName != nullptr) {
        mTooltipName = ptr_mTooltipName->value;
    }

    auto ptr_mIconName = prop->cast_prop<yordle::data::prop::string_prop>(4274981346u);
    if (ptr_mIconName != nullptr) {
        mIconName = ptr_mIconName->value;
    }
}

yordle::data::meta::NeutralTimerData::NeutralTimerData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTimerKeyName = prop->cast_prop<yordle::data::prop::string_prop>(2215458355u);
    if (ptr_mTimerKeyName != nullptr) {
        mTimerKeyName = ptr_mTimerKeyName->value;
    }

    auto ptr_mTooltip = prop->cast_prop<yordle::data::prop::string_prop>(4288851731u);
    if (ptr_mTooltip != nullptr) {
        mTooltip = ptr_mTooltip->value;
    }

    auto ptr_mTooltipCampName = prop->cast_prop<yordle::data::prop::string_prop>(648165165u);
    if (ptr_mTooltipCampName != nullptr) {
        mTooltipCampName = ptr_mTooltipCampName->value;
    }

    auto ptr_mTooltipRespawn = prop->cast_prop<yordle::data::prop::string_prop>(3490465545u);
    if (ptr_mTooltipRespawn != nullptr) {
        mTooltipRespawn = ptr_mTooltipRespawn->value;
    }

    auto ptr_mTooltipChatNameOrder = prop->cast_prop<yordle::data::prop::string_prop>(3747069382u);
    if (ptr_mTooltipChatNameOrder != nullptr) {
        mTooltipChatNameOrder = ptr_mTooltipChatNameOrder->value;
    }

    auto ptr_mTooltipChatNameChaos = prop->cast_prop<yordle::data::prop::string_prop>(2991278406u);
    if (ptr_mTooltipChatNameChaos != nullptr) {
        mTooltipChatNameChaos = ptr_mTooltipChatNameChaos->value;
    }

    auto ptr_mSourceIcons = prop->cast_prop<yordle::data::prop::map_prop>(1512598209u);
    if (ptr_mSourceIcons != nullptr) {
        for (const auto &pair : ptr_mSourceIcons->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mSourceIcons[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::NeutralTimerSourceIconData>(ptr_value, 230608261u);
            }
        }
    }
}

yordle::data::meta::NeutralTimers::NeutralTimers(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSceneName = prop->cast_prop<yordle::data::prop::string_prop>(3978511459u);
    if (ptr_mSceneName != nullptr) {
        mSceneName = ptr_mSceneName->value;
    }

    auto ptr_xee974cae = prop->cast_prop<yordle::data::prop::string_prop>(4002892974u);
    if (ptr_xee974cae != nullptr) {
        xee974cae = ptr_xee974cae->value;
    }

    auto ptr_mTimers = prop->cast_prop<yordle::data::prop::map_prop>(3936695518u);
    if (ptr_mTimers != nullptr) {
        for (const auto &pair : ptr_mTimers->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mTimers[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::NeutralTimerData>(ptr_value, 964506025u);
            }
        }
    }
}

yordle::data::meta::CommonUiTunables::CommonUiTunables(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x472b866d = prop->cast_prop<yordle::data::prop::float32_prop>(1194034797u);
    if (ptr_x472b866d != nullptr) {
        x472b866d = ptr_x472b866d->value;
    }

    auto ptr_xb3f4a621 = prop->cast_prop<yordle::data::prop::uint8_prop>(3019154977u);
    if (ptr_xb3f4a621 != nullptr) {
        xb3f4a621 = ptr_xb3f4a621->value;
    }
}

yordle::data::meta::ViewPaneDefinition::ViewPaneDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x6a05258c = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1778722188u);
    if (ptr_x6a05258c != nullptr) {
        x6a05258c = ptr_x6a05258c->value;
    }

    auto ptr_dragRegionElement = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1179841693u);
    if (ptr_dragRegionElement != nullptr) {
        dragRegionElement = ptr_dragRegionElement->value;
    }

    auto ptr_scrollRegionElement = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3707048936u);
    if (ptr_scrollRegionElement != nullptr) {
        scrollRegionElement = ptr_scrollRegionElement->value;
    }

    auto ptr_scissorRegionElement = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1719874907u);
    if (ptr_scissorRegionElement != nullptr) {
        scissorRegionElement = ptr_scissorRegionElement->value;
    }

    auto ptr_scrollingScene = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2427304548u);
    if (ptr_scrollingScene != nullptr) {
        scrollingScene = ptr_scrollingScene->value;
    }

    auto ptr_scrollDirection = prop->cast_prop<yordle::data::prop::uint8_prop>(3394259485u);
    if (ptr_scrollDirection != nullptr) {
        scrollDirection = ptr_scrollDirection->value;
    }

    auto ptr_objectPath = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(490118185u);
    if (ptr_objectPath != nullptr) {
        objectPath = ptr_objectPath->value;
    }
}

yordle::data::meta::UIButtonState::UIButtonState(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_displayElements = prop->cast_prop<yordle::data::prop::set_prop>(120427356u);
    if (ptr_displayElements != nullptr) {
        for (const auto &entry : ptr_displayElements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                displayElements.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_TextElement = prop->cast_prop<yordle::data::prop::reference_prop>(4005730134u);
    if (ptr_TextElement != nullptr) {
        TextElement = ptr_TextElement->value;
    }
}

yordle::data::meta::UIButtonDefinition::UIButtonDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_defaultStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(469001906u);
    if (ptr_defaultStateElements != nullptr) {
        defaultStateElements = yordle::data::meta::deserialize<yordle::data::meta::UIButtonState>(ptr_defaultStateElements, 2794431892u);
    }

    auto ptr_InactiveStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2025490612u);
    if (ptr_InactiveStateElements != nullptr) {
        InactiveStateElements = yordle::data::meta::deserialize<yordle::data::meta::UIButtonState>(ptr_InactiveStateElements, 2794431892u);
    }

    auto ptr_hoverStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3167879375u);
    if (ptr_hoverStateElements != nullptr) {
        hoverStateElements = yordle::data::meta::deserialize<yordle::data::meta::UIButtonState>(ptr_hoverStateElements, 2794431892u);
    }

    auto ptr_xad0f8882 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2903476354u);
    if (ptr_xad0f8882 != nullptr) {
        xad0f8882 = yordle::data::meta::deserialize<yordle::data::meta::UIButtonState>(ptr_xad0f8882, 2794431892u);
    }

    auto ptr_selectedStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1180059016u);
    if (ptr_selectedStateElements != nullptr) {
        selectedStateElements = yordle::data::meta::deserialize<yordle::data::meta::UIButtonState>(ptr_selectedStateElements, 2794431892u);
    }

    auto ptr_SelectedHoverStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3146987930u);
    if (ptr_SelectedHoverStateElements != nullptr) {
        SelectedHoverStateElements = yordle::data::meta::deserialize<yordle::data::meta::UIButtonState>(ptr_SelectedHoverStateElements, 2794431892u);
    }

    auto ptr_SelectedClickedStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1645717439u);
    if (ptr_SelectedClickedStateElements != nullptr) {
        SelectedClickedStateElements = yordle::data::meta::deserialize<yordle::data::meta::UIButtonState>(ptr_SelectedClickedStateElements, 2794431892u);
    }

    auto ptr_hitRegionElement = prop->cast_prop<yordle::data::prop::reference_prop>(1811093838u);
    if (ptr_hitRegionElement != nullptr) {
        hitRegionElement = ptr_hitRegionElement->value;
    }

    auto ptr_ClickReleaseParticleElement = prop->cast_prop<yordle::data::prop::reference_prop>(2074868558u);
    if (ptr_ClickReleaseParticleElement != nullptr) {
        ClickReleaseParticleElement = ptr_ClickReleaseParticleElement->value;
    }

    auto ptr_soundEvents = prop->cast_prop<yordle::data::prop::structure_prop>(2735039949u);
    if (ptr_soundEvents != nullptr) {
        soundEvents = yordle::data::meta::deserialize<yordle::data::meta::x209b0277>(ptr_soundEvents, 547029623u);
    }

    auto ptr_ActiveTooltipTraKey = prop->cast_prop<yordle::data::prop::string_prop>(2351487734u);
    if (ptr_ActiveTooltipTraKey != nullptr) {
        ActiveTooltipTraKey = ptr_ActiveTooltipTraKey->value;
    }

    auto ptr_InactiveTooltipTraKey = prop->cast_prop<yordle::data::prop::string_prop>(1345521803u);
    if (ptr_InactiveTooltipTraKey != nullptr) {
        InactiveTooltipTraKey = ptr_InactiveTooltipTraKey->value;
    }

    auto ptr_objectPath = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(490118185u);
    if (ptr_objectPath != nullptr) {
        objectPath = ptr_objectPath->value;
    }
}

yordle::data::meta::UIButtonAdditionalState::UIButtonAdditionalState(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_displayElements = prop->cast_prop<yordle::data::prop::set_prop>(120427356u);
    if (ptr_displayElements != nullptr) {
        for (const auto &entry : ptr_displayElements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                displayElements.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::UIButtonAdditionalElements::UIButtonAdditionalElements(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_defaultStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(469001906u);
    if (ptr_defaultStateElements != nullptr) {
        defaultStateElements = yordle::data::meta::deserialize<yordle::data::meta::UIButtonAdditionalState>(ptr_defaultStateElements, 1814739591u);
    }

    auto ptr_InactiveStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2025490612u);
    if (ptr_InactiveStateElements != nullptr) {
        InactiveStateElements = yordle::data::meta::deserialize<yordle::data::meta::UIButtonAdditionalState>(ptr_InactiveStateElements, 1814739591u);
    }

    auto ptr_hoverStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3167879375u);
    if (ptr_hoverStateElements != nullptr) {
        hoverStateElements = yordle::data::meta::deserialize<yordle::data::meta::UIButtonAdditionalState>(ptr_hoverStateElements, 1814739591u);
    }

    auto ptr_xad0f8882 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2903476354u);
    if (ptr_xad0f8882 != nullptr) {
        xad0f8882 = yordle::data::meta::deserialize<yordle::data::meta::UIButtonAdditionalState>(ptr_xad0f8882, 1814739591u);
    }

    auto ptr_selectedStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1180059016u);
    if (ptr_selectedStateElements != nullptr) {
        selectedStateElements = yordle::data::meta::deserialize<yordle::data::meta::UIButtonAdditionalState>(ptr_selectedStateElements, 1814739591u);
    }

    auto ptr_SelectedHoverStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3146987930u);
    if (ptr_SelectedHoverStateElements != nullptr) {
        SelectedHoverStateElements = yordle::data::meta::deserialize<yordle::data::meta::UIButtonAdditionalState>(ptr_SelectedHoverStateElements, 1814739591u);
    }

    auto ptr_SelectedClickedStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1645717439u);
    if (ptr_SelectedClickedStateElements != nullptr) {
        SelectedClickedStateElements = yordle::data::meta::deserialize<yordle::data::meta::UIButtonAdditionalState>(ptr_SelectedClickedStateElements, 1814739591u);
    }
}

yordle::data::meta::x209b0277::x209b0277(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_RolloverEvent = prop->cast_prop<yordle::data::prop::string_prop>(2774166396u);
    if (ptr_RolloverEvent != nullptr) {
        RolloverEvent = ptr_RolloverEvent->value;
    }

    auto ptr_x210ea29e = prop->cast_prop<yordle::data::prop::string_prop>(554607262u);
    if (ptr_x210ea29e != nullptr) {
        x210ea29e = ptr_x210ea29e->value;
    }

    auto ptr_MouseDownEvent = prop->cast_prop<yordle::data::prop::string_prop>(3629002872u);
    if (ptr_MouseDownEvent != nullptr) {
        MouseDownEvent = ptr_MouseDownEvent->value;
    }

    auto ptr_x452034c = prop->cast_prop<yordle::data::prop::string_prop>(72483660u);
    if (ptr_x452034c != nullptr) {
        x452034c = ptr_x452034c->value;
    }

    auto ptr_MouseUpEvent = prop->cast_prop<yordle::data::prop::string_prop>(2226573059u);
    if (ptr_MouseUpEvent != nullptr) {
        MouseUpEvent = ptr_MouseUpEvent->value;
    }

    auto ptr_xb49ca145 = prop->cast_prop<yordle::data::prop::string_prop>(3030163781u);
    if (ptr_xb49ca145 != nullptr) {
        xb49ca145 = ptr_xb49ca145->value;
    }
}

yordle::data::meta::xe262e6be::xe262e6be(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_OnSelectionEvent = prop->cast_prop<yordle::data::prop::string_prop>(2229790538u);
    if (ptr_OnSelectionEvent != nullptr) {
        OnSelectionEvent = ptr_OnSelectionEvent->value;
    }
}

yordle::data::meta::UiComboBoxDefinition::UiComboBoxDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_buttonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3751321492u);
    if (ptr_buttonDefinition != nullptr) {
        buttonDefinition = ptr_buttonDefinition->value;
    }

    auto ptr_xb2a3be3c = prop->cast_prop<yordle::data::prop::reference_prop>(2997075516u);
    if (ptr_xb2a3be3c != nullptr) {
        xb2a3be3c = ptr_xb2a3be3c->value;
    }

    auto ptr_x3487222 = prop->cast_prop<yordle::data::prop::reference_prop>(55079458u);
    if (ptr_x3487222 != nullptr) {
        x3487222 = ptr_x3487222->value;
    }

    auto ptr_x9c4781a2 = prop->cast_prop<yordle::data::prop::reference_prop>(2621931938u);
    if (ptr_x9c4781a2 != nullptr) {
        x9c4781a2 = ptr_x9c4781a2->value;
    }

    auto ptr_x21c9d879 = prop->cast_prop<yordle::data::prop::reference_prop>(566876281u);
    if (ptr_x21c9d879 != nullptr) {
        x21c9d879 = ptr_x21c9d879->value;
    }

    auto ptr_x337b72d4 = prop->cast_prop<yordle::data::prop::reference_prop>(863728340u);
    if (ptr_x337b72d4 != nullptr) {
        x337b72d4 = ptr_x337b72d4->value;
    }

    auto ptr_xeb2b67e = prop->cast_prop<yordle::data::prop::uint8_prop>(246593150u);
    if (ptr_xeb2b67e != nullptr) {
        xeb2b67e = ptr_xeb2b67e->value;
    }

    auto ptr_soundEvents = prop->cast_prop<yordle::data::prop::structure_prop>(2735039949u);
    if (ptr_soundEvents != nullptr) {
        soundEvents = yordle::data::meta::deserialize<yordle::data::meta::xe262e6be>(ptr_soundEvents, 3798132414u);
    }

    auto ptr_objectPath = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(490118185u);
    if (ptr_objectPath != nullptr) {
        objectPath = ptr_objectPath->value;
    }
}

yordle::data::meta::x2da50c9f::x2da50c9f(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xd8073196 = prop->cast_prop<yordle::data::prop::string_prop>(3624350102u);
    if (ptr_xd8073196 != nullptr) {
        xd8073196 = ptr_xd8073196->value;
    }

    auto ptr_x8f1a336d = prop->cast_prop<yordle::data::prop::string_prop>(2400858989u);
    if (ptr_x8f1a336d != nullptr) {
        x8f1a336d = ptr_x8f1a336d->value;
    }

    auto ptr_x73dbef7a = prop->cast_prop<yordle::data::prop::string_prop>(1943793530u);
    if (ptr_x73dbef7a != nullptr) {
        x73dbef7a = ptr_x73dbef7a->value;
    }
}

yordle::data::meta::xf2cfc48c::xf2cfc48c(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_BarBackdrop = prop->cast_prop<yordle::data::prop::reference_prop>(2211737984u);
    if (ptr_BarBackdrop != nullptr) {
        BarBackdrop = ptr_BarBackdrop->value;
    }

    auto ptr_BarFill = prop->cast_prop<yordle::data::prop::reference_prop>(2976871175u);
    if (ptr_BarFill != nullptr) {
        BarFill = ptr_BarFill->value;
    }

    auto ptr_sliderIcon = prop->cast_prop<yordle::data::prop::reference_prop>(4149898573u);
    if (ptr_sliderIcon != nullptr) {
        sliderIcon = ptr_sliderIcon->value;
    }
}

yordle::data::meta::x9d8138a6::x9d8138a6(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_DefaultState = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3680683107u);
    if (ptr_DefaultState != nullptr) {
        DefaultState = yordle::data::meta::deserialize<yordle::data::meta::xf2cfc48c>(ptr_DefaultState, 4073702540u);
    }

    auto ptr_SliderClickedState = prop->cast_prop<yordle::data::prop::inline_structure_prop>(39763638u);
    if (ptr_SliderClickedState != nullptr) {
        SliderClickedState = yordle::data::meta::deserialize<yordle::data::meta::xf2cfc48c>(ptr_SliderClickedState, 4073702540u);
    }

    auto ptr_x5b9cbd0 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(96062416u);
    if (ptr_x5b9cbd0 != nullptr) {
        x5b9cbd0 = yordle::data::meta::deserialize<yordle::data::meta::xf2cfc48c>(ptr_x5b9cbd0, 4073702540u);
    }

    auto ptr_xb4f0cbde = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3035679710u);
    if (ptr_xb4f0cbde != nullptr) {
        xb4f0cbde = yordle::data::meta::deserialize<yordle::data::meta::xf2cfc48c>(ptr_xb4f0cbde, 4073702540u);
    }

    auto ptr_BarHitRegion = prop->cast_prop<yordle::data::prop::reference_prop>(4212105619u);
    if (ptr_BarHitRegion != nullptr) {
        BarHitRegion = ptr_BarHitRegion->value;
    }

    auto ptr_SliderHitRegion = prop->cast_prop<yordle::data::prop::reference_prop>(1034263897u);
    if (ptr_SliderHitRegion != nullptr) {
        SliderHitRegion = ptr_SliderHitRegion->value;
    }

    auto ptr_direction = prop->cast_prop<yordle::data::prop::uint8_prop>(3748513642u);
    if (ptr_direction != nullptr) {
        direction = ptr_direction->value;
    }

    auto ptr_soundEvents = prop->cast_prop<yordle::data::prop::structure_prop>(2735039949u);
    if (ptr_soundEvents != nullptr) {
        soundEvents = yordle::data::meta::deserialize<yordle::data::meta::x2da50c9f>(ptr_soundEvents, 765791391u);
    }

    auto ptr_objectPath = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(490118185u);
    if (ptr_objectPath != nullptr) {
        objectPath = ptr_objectPath->value;
    }
}

yordle::data::meta::xd149dd3f::xd149dd3f(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_FromSlotId = prop->cast_prop<yordle::data::prop::int32_prop>(3997857716u);
    if (ptr_FromSlotId != nullptr) {
        FromSlotId = ptr_FromSlotId->value;
    }

    auto ptr_ToSlotId = prop->cast_prop<yordle::data::prop::int32_prop>(777719909u);
    if (ptr_ToSlotId != nullptr) {
        ToSlotId = ptr_ToSlotId->value;
    }
}

yordle::data::meta::xb35ad9d8::xb35ad9d8(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_items = prop->cast_prop<yordle::data::prop::set_prop>(981021583u);
    if (ptr_items != nullptr) {
        for (const auto &entry : ptr_items->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                items.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_ItemsPerRow = prop->cast_prop<yordle::data::prop::uint32_prop>(4237928370u);
    if (ptr_ItemsPerRow != nullptr) {
        ItemsPerRow = ptr_ItemsPerRow->value;
    }

    auto ptr_xd8bea346 = prop->cast_prop<yordle::data::prop::bool_prop>(3636372294u);
    if (ptr_xd8bea346 != nullptr) {
        xd8bea346 = ptr_xd8bea346->value;
    }

    auto ptr_defaultIndex = prop->cast_prop<yordle::data::prop::int32_prop>(805051330u);
    if (ptr_defaultIndex != nullptr) {
        defaultIndex = ptr_defaultIndex->value;
    }

    auto ptr_SwapData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3202015438u);
    if (ptr_SwapData != nullptr) {
        SwapData = yordle::data::meta::deserialize<yordle::data::meta::xd149dd3f>(ptr_SwapData, 3511278911u);
    }
}

yordle::data::meta::xd20000f6::xd20000f6(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_SceneData = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2867346523u);
    if (ptr_SceneData != nullptr) {
        SceneData = ptr_SceneData->value;
    }

    auto ptr_PinButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1767595216u);
    if (ptr_PinButton != nullptr) {
        PinButton = ptr_PinButton->value;
    }

    auto ptr_x434952b4 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1128878772u);
    if (ptr_x434952b4 != nullptr) {
        x434952b4 = yordle::data::meta::deserialize<yordle::data::meta::xb35ad9d8>(ptr_x434952b4, 3009075672u);
    }
}

yordle::data::meta::xef05ba42::xef05ba42(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ItemIcon = prop->cast_prop<yordle::data::prop::reference_prop>(3708628627u);
    if (ptr_ItemIcon != nullptr) {
        ItemIcon = ptr_ItemIcon->value;
    }

    auto ptr_FrameIcon = prop->cast_prop<yordle::data::prop::reference_prop>(3141101907u);
    if (ptr_FrameIcon != nullptr) {
        FrameIcon = ptr_FrameIcon->value;
    }

    auto ptr_MythicFrameIcon = prop->cast_prop<yordle::data::prop::reference_prop>(162672449u);
    if (ptr_MythicFrameIcon != nullptr) {
        MythicFrameIcon = ptr_MythicFrameIcon->value;
    }

    auto ptr_HoverFrameIcon = prop->cast_prop<yordle::data::prop::reference_prop>(3383292715u);
    if (ptr_HoverFrameIcon != nullptr) {
        HoverFrameIcon = ptr_HoverFrameIcon->value;
    }

    auto ptr_x5b96b3bd = prop->cast_prop<yordle::data::prop::reference_prop>(1536603069u);
    if (ptr_x5b96b3bd != nullptr) {
        x5b96b3bd = ptr_x5b96b3bd->value;
    }

    auto ptr_HoverIcon = prop->cast_prop<yordle::data::prop::reference_prop>(3707442792u);
    if (ptr_HoverIcon != nullptr) {
        HoverIcon = ptr_HoverIcon->value;
    }

    auto ptr_SelectedIcon = prop->cast_prop<yordle::data::prop::reference_prop>(2622578581u);
    if (ptr_SelectedIcon != nullptr) {
        SelectedIcon = ptr_SelectedIcon->value;
    }

    auto ptr_UnpurchaseableOverlay = prop->cast_prop<yordle::data::prop::reference_prop>(3907959463u);
    if (ptr_UnpurchaseableOverlay != nullptr) {
        UnpurchaseableOverlay = ptr_UnpurchaseableOverlay->value;
    }

    auto ptr_PurchasedOverlay = prop->cast_prop<yordle::data::prop::reference_prop>(2999482642u);
    if (ptr_PurchasedOverlay != nullptr) {
        PurchasedOverlay = ptr_PurchasedOverlay->value;
    }

    auto ptr_LockedIcon = prop->cast_prop<yordle::data::prop::reference_prop>(3506185970u);
    if (ptr_LockedIcon != nullptr) {
        LockedIcon = ptr_LockedIcon->value;
    }

    auto ptr_LockedHoverIcon = prop->cast_prop<yordle::data::prop::reference_prop>(394911362u);
    if (ptr_LockedHoverIcon != nullptr) {
        LockedHoverIcon = ptr_LockedHoverIcon->value;
    }

    auto ptr_RecentlyChangedIcon = prop->cast_prop<yordle::data::prop::reference_prop>(1998759362u);
    if (ptr_RecentlyChangedIcon != nullptr) {
        RecentlyChangedIcon = ptr_RecentlyChangedIcon->value;
    }

    auto ptr_PopularIcon = prop->cast_prop<yordle::data::prop::reference_prop>(807661563u);
    if (ptr_PopularIcon != nullptr) {
        PopularIcon = ptr_PopularIcon->value;
    }

    auto ptr_CostText = prop->cast_prop<yordle::data::prop::reference_prop>(4086196895u);
    if (ptr_CostText != nullptr) {
        CostText = ptr_CostText->value;
    }

    auto ptr_CostTextUnpurchaseable = prop->cast_prop<yordle::data::prop::reference_prop>(3538530743u);
    if (ptr_CostTextUnpurchaseable != nullptr) {
        CostTextUnpurchaseable = ptr_CostTextUnpurchaseable->value;
    }

    auto ptr_CostTextSelected = prop->cast_prop<yordle::data::prop::reference_prop>(502750510u);
    if (ptr_CostTextSelected != nullptr) {
        CostTextSelected = ptr_CostTextSelected->value;
    }

    auto ptr_NameText = prop->cast_prop<yordle::data::prop::reference_prop>(3587103093u);
    if (ptr_NameText != nullptr) {
        NameText = ptr_NameText->value;
    }

    auto ptr_HitRegion = prop->cast_prop<yordle::data::prop::reference_prop>(4092291606u);
    if (ptr_HitRegion != nullptr) {
        HitRegion = ptr_HitRegion->value;
    }

    auto ptr_OffsetRegion = prop->cast_prop<yordle::data::prop::reference_prop>(493627190u);
    if (ptr_OffsetRegion != nullptr) {
        OffsetRegion = ptr_OffsetRegion->value;
    }

    auto ptr_SelectedVfx = prop->cast_prop<yordle::data::prop::reference_prop>(3877078440u);
    if (ptr_SelectedVfx != nullptr) {
        SelectedVfx = ptr_SelectedVfx->value;
    }

    auto ptr_x987dd59e = prop->cast_prop<yordle::data::prop::reference_prop>(2558383518u);
    if (ptr_x987dd59e != nullptr) {
        x987dd59e = ptr_x987dd59e->value;
    }

    auto ptr_MythicPurchaseableVfx = prop->cast_prop<yordle::data::prop::reference_prop>(2540444696u);
    if (ptr_MythicPurchaseableVfx != nullptr) {
        MythicPurchaseableVfx = ptr_MythicPurchaseableVfx->value;
    }

    auto ptr_MythicPurchasedVfx = prop->cast_prop<yordle::data::prop::reference_prop>(3246906724u);
    if (ptr_MythicPurchasedVfx != nullptr) {
        MythicPurchasedVfx = ptr_MythicPurchasedVfx->value;
    }
}

yordle::data::meta::x9205b275::x9205b275(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : xef05ba42(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CardDefault = prop->cast_prop<yordle::data::prop::reference_prop>(2208006024u);
    if (ptr_CardDefault != nullptr) {
        CardDefault = ptr_CardDefault->value;
    }

    auto ptr_CardHoverMythic = prop->cast_prop<yordle::data::prop::reference_prop>(558396809u);
    if (ptr_CardHoverMythic != nullptr) {
        CardHoverMythic = ptr_CardHoverMythic->value;
    }

    auto ptr_CardHoverNonMythic = prop->cast_prop<yordle::data::prop::reference_prop>(1260157044u);
    if (ptr_CardHoverNonMythic != nullptr) {
        CardHoverNonMythic = ptr_CardHoverNonMythic->value;
    }

    auto ptr_CardSelectedMythic = prop->cast_prop<yordle::data::prop::reference_prop>(2862131044u);
    if (ptr_CardSelectedMythic != nullptr) {
        CardSelectedMythic = ptr_CardSelectedMythic->value;
    }

    auto ptr_CardSelectedNonMythic = prop->cast_prop<yordle::data::prop::reference_prop>(1210894143u);
    if (ptr_CardSelectedNonMythic != nullptr) {
        CardSelectedNonMythic = ptr_CardSelectedNonMythic->value;
    }

    auto ptr_BriefText = prop->cast_prop<yordle::data::prop::reference_prop>(1482017448u);
    if (ptr_BriefText != nullptr) {
        BriefText = ptr_BriefText->value;
    }

    auto ptr_BriefTextBackdrop = prop->cast_prop<yordle::data::prop::reference_prop>(236594122u);
    if (ptr_BriefTextBackdrop != nullptr) {
        BriefTextBackdrop = ptr_BriefTextBackdrop->value;
    }

    auto ptr_AdviceIconDefault = prop->cast_prop<yordle::data::prop::reference_prop>(3315268305u);
    if (ptr_AdviceIconDefault != nullptr) {
        AdviceIconDefault = ptr_AdviceIconDefault->value;
    }

    auto ptr_x9c2a9d4 = prop->cast_prop<yordle::data::prop::reference_prop>(163752404u);
    if (ptr_x9c2a9d4 != nullptr) {
        x9c2a9d4 = ptr_x9c2a9d4->value;
    }

    auto ptr_xc68c22cf = prop->cast_prop<yordle::data::prop::reference_prop>(3331072719u);
    if (ptr_xc68c22cf != nullptr) {
        xc68c22cf = ptr_xc68c22cf->value;
    }

    auto ptr_AdviceLabel = prop->cast_prop<yordle::data::prop::reference_prop>(334720249u);
    if (ptr_AdviceLabel != nullptr) {
        AdviceLabel = ptr_AdviceLabel->value;
    }

    auto ptr_AdviceCharIcon0 = prop->cast_prop<yordle::data::prop::reference_prop>(4107456060u);
    if (ptr_AdviceCharIcon0 != nullptr) {
        AdviceCharIcon0 = ptr_AdviceCharIcon0->value;
    }

    auto ptr_AdviceCharIcon1 = prop->cast_prop<yordle::data::prop::reference_prop>(4124233679u);
    if (ptr_AdviceCharIcon1 != nullptr) {
        AdviceCharIcon1 = ptr_AdviceCharIcon1->value;
    }

    auto ptr_CardHoverMythicVfx = prop->cast_prop<yordle::data::prop::reference_prop>(2061681547u);
    if (ptr_CardHoverMythicVfx != nullptr) {
        CardHoverMythicVfx = ptr_CardHoverMythicVfx->value;
    }

    auto ptr_CardHoverNonMythicVfx = prop->cast_prop<yordle::data::prop::reference_prop>(189591720u);
    if (ptr_CardHoverNonMythicVfx != nullptr) {
        CardHoverNonMythicVfx = ptr_CardHoverNonMythicVfx->value;
    }

    auto ptr_CardRefreshMythicVfx = prop->cast_prop<yordle::data::prop::reference_prop>(4072014996u);
    if (ptr_CardRefreshMythicVfx != nullptr) {
        CardRefreshMythicVfx = ptr_CardRefreshMythicVfx->value;
    }

    auto ptr_CardRefreshNonMythicVfx = prop->cast_prop<yordle::data::prop::reference_prop>(805495209u);
    if (ptr_CardRefreshNonMythicVfx != nullptr) {
        CardRefreshNonMythicVfx = ptr_CardRefreshNonMythicVfx->value;
    }

    auto ptr_CardSelectedMythicVfx = prop->cast_prop<yordle::data::prop::reference_prop>(3780699960u);
    if (ptr_CardSelectedMythicVfx != nullptr) {
        CardSelectedMythicVfx = ptr_CardSelectedMythicVfx->value;
    }

    auto ptr_CardSelectedNonMythicVfx = prop->cast_prop<yordle::data::prop::reference_prop>(3508721437u);
    if (ptr_CardSelectedNonMythicVfx != nullptr) {
        CardSelectedNonMythicVfx = ptr_CardSelectedNonMythicVfx->value;
    }

    auto ptr_AdviceEmptyIconDefault = prop->cast_prop<yordle::data::prop::reference_prop>(2932130656u);
    if (ptr_AdviceEmptyIconDefault != nullptr) {
        AdviceEmptyIconDefault = ptr_AdviceEmptyIconDefault->value;
    }

    auto ptr_x59fbbd19 = prop->cast_prop<yordle::data::prop::reference_prop>(1509670169u);
    if (ptr_x59fbbd19 != nullptr) {
        x59fbbd19 = ptr_x59fbbd19->value;
    }

    auto ptr_x9566584e = prop->cast_prop<yordle::data::prop::reference_prop>(2506512462u);
    if (ptr_x9566584e != nullptr) {
        x9566584e = ptr_x9566584e->value;
    }

    auto ptr_AdviceEmptyText = prop->cast_prop<yordle::data::prop::reference_prop>(3919620081u);
    if (ptr_AdviceEmptyText != nullptr) {
        AdviceEmptyText = ptr_AdviceEmptyText->value;
    }

    auto ptr_AdviceEmptyTextHover = prop->cast_prop<yordle::data::prop::reference_prop>(801390377u);
    if (ptr_AdviceEmptyTextHover != nullptr) {
        AdviceEmptyTextHover = ptr_AdviceEmptyTextHover->value;
    }

    auto ptr_AdviceCharBorder0 = prop->cast_prop<yordle::data::prop::reference_prop>(3347880489u);
    if (ptr_AdviceCharBorder0 != nullptr) {
        AdviceCharBorder0 = ptr_AdviceCharBorder0->value;
    }

    auto ptr_AdviceCharBorderHover0 = prop->cast_prop<yordle::data::prop::reference_prop>(991943513u);
    if (ptr_AdviceCharBorderHover0 != nullptr) {
        AdviceCharBorderHover0 = ptr_AdviceCharBorderHover0->value;
    }

    auto ptr_AdviceCharBorder1 = prop->cast_prop<yordle::data::prop::reference_prop>(3331102870u);
    if (ptr_AdviceCharBorder1 != nullptr) {
        AdviceCharBorder1 = ptr_AdviceCharBorder1->value;
    }

    auto ptr_AdviceCharBorderHover1 = prop->cast_prop<yordle::data::prop::reference_prop>(975165894u);
    if (ptr_AdviceCharBorderHover1 != nullptr) {
        AdviceCharBorderHover1 = ptr_AdviceCharBorderHover1->value;
    }

    auto ptr_PlusIcon = prop->cast_prop<yordle::data::prop::reference_prop>(3272552544u);
    if (ptr_PlusIcon != nullptr) {
        PlusIcon = ptr_PlusIcon->value;
    }

    auto ptr_BundleItemIcon = prop->cast_prop<yordle::data::prop::reference_prop>(1164634323u);
    if (ptr_BundleItemIcon != nullptr) {
        BundleItemIcon = ptr_BundleItemIcon->value;
    }

    auto ptr_BundleStackText = prop->cast_prop<yordle::data::prop::reference_prop>(1520341320u);
    if (ptr_BundleStackText != nullptr) {
        BundleStackText = ptr_BundleStackText->value;
    }

    auto ptr_BundleItemFrameIcon = prop->cast_prop<yordle::data::prop::reference_prop>(1893937750u);
    if (ptr_BundleItemFrameIcon != nullptr) {
        BundleItemFrameIcon = ptr_BundleItemFrameIcon->value;
    }

    auto ptr_BundleItemFrameHoverIcon = prop->cast_prop<yordle::data::prop::reference_prop>(1575857030u);
    if (ptr_BundleItemFrameHoverIcon != nullptr) {
        BundleItemFrameHoverIcon = ptr_BundleItemFrameHoverIcon->value;
    }
}

yordle::data::meta::x38691790::x38691790(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x837fcf93 = prop->cast_prop<yordle::data::prop::set_prop>(2206191507u);
    if (ptr_x837fcf93 != nullptr) {
        for (const auto &entry : ptr_x837fcf93->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint8_prop>(entry);
            if (ptr_entry != nullptr) {
                x837fcf93.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_groupName = prop->cast_prop<yordle::data::prop::string_prop>(3504806855u);
    if (ptr_groupName != nullptr) {
        groupName = ptr_groupName->value;
    }
}

yordle::data::meta::StatFilterDefinition::StatFilterDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_buttonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3751321492u);
    if (ptr_buttonDefinition != nullptr) {
        buttonDefinition = ptr_buttonDefinition->value;
    }

    auto ptr_MatchingCategories = prop->cast_prop<yordle::data::prop::set_prop>(1733100898u);
    if (ptr_MatchingCategories != nullptr) {
        for (const auto &entry : ptr_MatchingCategories->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                MatchingCategories.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::x77595aa9::x77595aa9(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PhysicalDamage = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4058842065u);
    if (ptr_PhysicalDamage != nullptr) {
        PhysicalDamage = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_PhysicalDamage, 1403141140u);
    }

    auto ptr_CriticalStrike = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3822003586u);
    if (ptr_CriticalStrike != nullptr) {
        CriticalStrike = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_CriticalStrike, 1403141140u);
    }

    auto ptr_attackSpeed = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2048957000u);
    if (ptr_attackSpeed != nullptr) {
        attackSpeed = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_attackSpeed, 1403141140u);
    }

    auto ptr_OnHit = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4046803429u);
    if (ptr_OnHit != nullptr) {
        OnHit = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_OnHit, 1403141140u);
    }

    auto ptr_ArmorPenetration = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3082773153u);
    if (ptr_ArmorPenetration != nullptr) {
        ArmorPenetration = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_ArmorPenetration, 1403141140u);
    }

    auto ptr_abilityPower = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2131952818u);
    if (ptr_abilityPower != nullptr) {
        abilityPower = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_abilityPower, 1403141140u);
    }

    auto ptr_mana = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3650585354u);
    if (ptr_mana != nullptr) {
        mana = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_mana, 1403141140u);
    }

    auto ptr_MagicPenetration = prop->cast_prop<yordle::data::prop::inline_structure_prop>(7704105u);
    if (ptr_MagicPenetration != nullptr) {
        MagicPenetration = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_MagicPenetration, 1403141140u);
    }

    auto ptr_Health = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1805184399u);
    if (ptr_Health != nullptr) {
        Health = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_Health, 1403141140u);
    }

    auto ptr_Armor = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4165567700u);
    if (ptr_Armor != nullptr) {
        Armor = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_Armor, 1403141140u);
    }

    auto ptr_MagicResist = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3069384942u);
    if (ptr_MagicResist != nullptr) {
        MagicResist = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_MagicResist, 1403141140u);
    }

    auto ptr_abilityHaste = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4035519652u);
    if (ptr_abilityHaste != nullptr) {
        abilityHaste = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_abilityHaste, 1403141140u);
    }

    auto ptr_MoveSpeed = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2672392607u);
    if (ptr_MoveSpeed != nullptr) {
        MoveSpeed = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_MoveSpeed, 1403141140u);
    }

    auto ptr_xd628825f = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3592979039u);
    if (ptr_xd628825f != nullptr) {
        xd628825f = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_xd628825f, 1403141140u);
    }

    auto ptr_DisableStatFilters = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2389543464u);
    if (ptr_DisableStatFilters != nullptr) {
        DisableStatFilters = yordle::data::meta::deserialize<yordle::data::meta::StatFilterDefinition>(ptr_DisableStatFilters, 1403141140u);
    }
}

yordle::data::meta::HudItemShopData::HudItemShopData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TabButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1001273705u);
    if (ptr_TabButtonDefinition != nullptr) {
        TabButtonDefinition = ptr_TabButtonDefinition->value;
    }

    auto ptr_CloseButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(893211270u);
    if (ptr_CloseButtonDefinition != nullptr) {
        CloseButtonDefinition = ptr_CloseButtonDefinition->value;
    }

    auto ptr_PurchaseButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(514438747u);
    if (ptr_PurchaseButtonDefinition != nullptr) {
        PurchaseButtonDefinition = ptr_PurchaseButtonDefinition->value;
    }

    auto ptr_SellButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1498444244u);
    if (ptr_SellButtonDefinition != nullptr) {
        SellButtonDefinition = ptr_SellButtonDefinition->value;
    }

    auto ptr_UndoButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1026575442u);
    if (ptr_UndoButtonDefinition != nullptr) {
        UndoButtonDefinition = ptr_UndoButtonDefinition->value;
    }

    auto ptr_x616b3a84 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1634417284u);
    if (ptr_x616b3a84 != nullptr) {
        x616b3a84 = ptr_x616b3a84->value;
    }

    auto ptr_x1ee195a0 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(518100384u);
    if (ptr_x1ee195a0 != nullptr) {
        x1ee195a0 = ptr_x1ee195a0->value;
    }

    auto ptr_xdcf2bbe3 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3706895331u);
    if (ptr_xdcf2bbe3 != nullptr) {
        xdcf2bbe3 = ptr_xdcf2bbe3->value;
    }

    auto ptr_xaa05f252 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2852516434u);
    if (ptr_xaa05f252 != nullptr) {
        xaa05f252 = ptr_xaa05f252->value;
    }

    auto ptr_x6d532c7a = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1834167418u);
    if (ptr_x6d532c7a != nullptr) {
        x6d532c7a = ptr_x6d532c7a->value;
    }

    auto ptr_x655c70a4 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1700556964u);
    if (ptr_x655c70a4 != nullptr) {
        x655c70a4 = ptr_x655c70a4->value;
    }

    auto ptr_xf1b77de6 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4055334374u);
    if (ptr_xf1b77de6 != nullptr) {
        xf1b77de6 = ptr_xf1b77de6->value;
    }

    auto ptr_xd2202861 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3525322849u);
    if (ptr_xd2202861 != nullptr) {
        xd2202861 = ptr_xd2202861->value;
    }

    auto ptr_x6ff1fabe = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1878129342u);
    if (ptr_x6ff1fabe != nullptr) {
        x6ff1fabe = ptr_x6ff1fabe->value;
    }

    auto ptr_xa1f85097 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2717405335u);
    if (ptr_xa1f85097 != nullptr) {
        xa1f85097 = ptr_xa1f85097->value;
    }

    auto ptr_x77595aa9 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2002344617u);
    if (ptr_x77595aa9 != nullptr) {
        x77595aa9 = ptr_x77595aa9->value;
    }

    auto ptr_x71d17542 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1909552450u);
    if (ptr_x71d17542 != nullptr) {
        x71d17542 = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_x71d17542, 2330109623u);
    }

    auto ptr_xce14c25 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(216091685u);
    if (ptr_xce14c25 != nullptr) {
        xce14c25 = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_xce14c25, 2330109623u);
    }

    auto ptr_xb3e9d346 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3018445638u);
    if (ptr_xb3e9d346 != nullptr) {
        xb3e9d346 = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_xb3e9d346, 2330109623u);
    }

    auto ptr_SearchViewPaneDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3413797483u);
    if (ptr_SearchViewPaneDefinition != nullptr) {
        SearchViewPaneDefinition = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_SearchViewPaneDefinition, 2330109623u);
    }

    auto ptr_AllItemsHeaderRegion = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4127331397u);
    if (ptr_AllItemsHeaderRegion != nullptr) {
        AllItemsHeaderRegion = ptr_AllItemsHeaderRegion->value;
    }

    auto ptr_AllItemsItemRegion = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3049899247u);
    if (ptr_AllItemsItemRegion != nullptr) {
        AllItemsItemRegion = ptr_AllItemsItemRegion->value;
    }

    auto ptr_ItemSetsHeaderRegion = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3759192106u);
    if (ptr_ItemSetsHeaderRegion != nullptr) {
        ItemSetsHeaderRegion = ptr_ItemSetsHeaderRegion->value;
    }

    auto ptr_ItemSetsItemRegion = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2176092468u);
    if (ptr_ItemSetsItemRegion != nullptr) {
        ItemSetsItemRegion = ptr_ItemSetsItemRegion->value;
    }

    auto ptr_AllItemsHeaderText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3663687686u);
    if (ptr_AllItemsHeaderText != nullptr) {
        AllItemsHeaderText = ptr_AllItemsHeaderText->value;
    }

    auto ptr_xf481f566 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4102157670u);
    if (ptr_xf481f566 != nullptr) {
        xf481f566 = ptr_xf481f566->value;
    }

    auto ptr_x4823f71d = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1210316573u);
    if (ptr_x4823f71d != nullptr) {
        x4823f71d = ptr_x4823f71d->value;
    }

    auto ptr_x79a37750 = prop->cast_prop<yordle::data::prop::set_prop>(2040756048u);
    if (ptr_x79a37750 != nullptr) {
        for (const auto &entry : ptr_x79a37750->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                x79a37750.emplace(yordle::data::meta::deserialize<yordle::data::meta::x38691790>(ptr_entry, 946411408u));
            }
        }
    }

    auto ptr_BootsPanelDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3791212177u);
    if (ptr_BootsPanelDefinition != nullptr) {
        BootsPanelDefinition = yordle::data::meta::deserialize<yordle::data::meta::xd20000f6>(ptr_BootsPanelDefinition, 3523215606u);
    }

    auto ptr_ConsumablesPanelDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3882654550u);
    if (ptr_ConsumablesPanelDefinition != nullptr) {
        ConsumablesPanelDefinition = yordle::data::meta::deserialize<yordle::data::meta::xd20000f6>(ptr_ConsumablesPanelDefinition, 3523215606u);
    }

    auto ptr_InventoryPanelDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(464225146u);
    if (ptr_InventoryPanelDefinition != nullptr) {
        InventoryPanelDefinition = yordle::data::meta::deserialize<yordle::data::meta::xd20000f6>(ptr_InventoryPanelDefinition, 3523215606u);
    }

    auto ptr_xe00be811 = prop->cast_prop<yordle::data::prop::set_prop>(3758876689u);
    if (ptr_xe00be811 != nullptr) {
        for (const auto &entry : ptr_xe00be811->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                xe00be811.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_xf8310aa = prop->cast_prop<yordle::data::prop::float32_prop>(260247722u);
    if (ptr_xf8310aa != nullptr) {
        xf8310aa = ptr_xf8310aa->value;
    }

    auto ptr_BuildsIntoIconDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1179496250u);
    if (ptr_BuildsIntoIconDefinition != nullptr) {
        BuildsIntoIconDefinition = ptr_BuildsIntoIconDefinition->value;
    }

    auto ptr_BuildTreeIconDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(717593223u);
    if (ptr_BuildTreeIconDefinition != nullptr) {
        BuildTreeIconDefinition = ptr_BuildTreeIconDefinition->value;
    }

    auto ptr_QuickBuyIconDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1642715352u);
    if (ptr_QuickBuyIconDefinition != nullptr) {
        QuickBuyIconDefinition = ptr_QuickBuyIconDefinition->value;
    }

    auto ptr_InventoryIconDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1738783271u);
    if (ptr_InventoryIconDefinition != nullptr) {
        InventoryIconDefinition = ptr_InventoryIconDefinition->value;
    }

    auto ptr_AllItemsIconDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1677099276u);
    if (ptr_AllItemsIconDefinition != nullptr) {
        AllItemsIconDefinition = ptr_AllItemsIconDefinition->value;
    }

    auto ptr_ItemSetsIconDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(97175695u);
    if (ptr_ItemSetsIconDefinition != nullptr) {
        ItemSetsIconDefinition = ptr_ItemSetsIconDefinition->value;
    }

    auto ptr_SearchIconDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1016719341u);
    if (ptr_SearchIconDefinition != nullptr) {
        SearchIconDefinition = ptr_SearchIconDefinition->value;
    }

    auto ptr_x494a4b42 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1229605698u);
    if (ptr_x494a4b42 != nullptr) {
        x494a4b42 = ptr_x494a4b42->value;
    }

    auto ptr_CommonlyBuiltIconDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(930069533u);
    if (ptr_CommonlyBuiltIconDefinition != nullptr) {
        CommonlyBuiltIconDefinition = ptr_CommonlyBuiltIconDefinition->value;
    }

    auto ptr_x5ab9b659 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1522120281u);
    if (ptr_x5ab9b659 != nullptr) {
        x5ab9b659 = ptr_x5ab9b659->value;
    }

    auto ptr_xf8e1342c = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4175508524u);
    if (ptr_xf8e1342c != nullptr) {
        xf8e1342c = ptr_xf8e1342c->value;
    }

    auto ptr_x69988db6 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1771605430u);
    if (ptr_x69988db6 != nullptr) {
        x69988db6 = ptr_x69988db6->value;
    }

    auto ptr_ItemDetailsScene = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1865188340u);
    if (ptr_ItemDetailsScene != nullptr) {
        ItemDetailsScene = ptr_ItemDetailsScene->value;
    }

    auto ptr_xaa352f81 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2855612289u);
    if (ptr_xaa352f81 != nullptr) {
        xaa352f81 = ptr_xaa352f81->value;
    }

    auto ptr_xd6f8b1fa = prop->cast_prop<yordle::data::prop::string_prop>(3606622714u);
    if (ptr_xd6f8b1fa != nullptr) {
        xd6f8b1fa = ptr_xd6f8b1fa->value;
    }
}

yordle::data::meta::IHudLoadingScreenWidget::IHudLoadingScreenWidget(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSceneName = prop->cast_prop<yordle::data::prop::string_prop>(3978511459u);
    if (ptr_mSceneName != nullptr) {
        mSceneName = ptr_mSceneName->value;
    }
}

yordle::data::meta::HudLoadingScreenCarouselData::HudLoadingScreenCarouselData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_image = prop->cast_prop<yordle::data::prop::string_prop>(3008443898u);
    if (ptr_image != nullptr) {
        image = ptr_image->value;
    }

    auto ptr_mTipType = prop->cast_prop<yordle::data::prop::uint8_prop>(1888172557u);
    if (ptr_mTipType != nullptr) {
        mTipType = ptr_mTipType->value;
    }
}

yordle::data::meta::HudLoadingScreenWidgetCarousel::HudLoadingScreenWidgetCarousel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IHudLoadingScreenWidget(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x7b1f4fc8 = prop->cast_prop<yordle::data::prop::uint8_prop>(2065649608u);
    if (ptr_x7b1f4fc8 != nullptr) {
        x7b1f4fc8 = ptr_x7b1f4fc8->value;
    }

    auto ptr_mCarouselData = prop->cast_prop<yordle::data::prop::reference_prop>(878940594u);
    if (ptr_mCarouselData != nullptr) {
        mCarouselData = ptr_mCarouselData->value;
    }
}

yordle::data::meta::HudLoadingScreenWidgetClash::HudLoadingScreenWidgetClash(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IHudLoadingScreenWidget(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::HudLoadingScreenWidgetPing::HudLoadingScreenWidgetPing(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IHudLoadingScreenWidget(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDebugPing = prop->cast_prop<yordle::data::prop::uint32_prop>(263459155u);
    if (ptr_mDebugPing != nullptr) {
        mDebugPing = ptr_mDebugPing->value;
    }

    auto ptr_mPingThresholdGreen = prop->cast_prop<yordle::data::prop::uint32_prop>(1478759938u);
    if (ptr_mPingThresholdGreen != nullptr) {
        mPingThresholdGreen = ptr_mPingThresholdGreen->value;
    }

    auto ptr_mPingThresholdYellow = prop->cast_prop<yordle::data::prop::uint32_prop>(237959287u);
    if (ptr_mPingThresholdYellow != nullptr) {
        mPingThresholdYellow = ptr_mPingThresholdYellow->value;
    }

    auto ptr_mPingThresholdOrange = prop->cast_prop<yordle::data::prop::uint32_prop>(2734588361u);
    if (ptr_mPingThresholdOrange != nullptr) {
        mPingThresholdOrange = ptr_mPingThresholdOrange->value;
    }

    auto ptr_mPingThresholdRed = prop->cast_prop<yordle::data::prop::uint32_prop>(3859670210u);
    if (ptr_mPingThresholdRed != nullptr) {
        mPingThresholdRed = ptr_mPingThresholdRed->value;
    }
}

yordle::data::meta::HudLoadingScreenWidgetPlayers::HudLoadingScreenWidgetPlayers(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IHudLoadingScreenWidget(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCardConfig = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4101352720u);
    if (ptr_mCardConfig != nullptr) {
        mCardConfig = yordle::data::meta::deserialize<yordle::data::meta::PlayerCardWidgetConfig>(ptr_mCardConfig, 1376467180u);
    }
}

yordle::data::meta::HudLoadingScreenWidgetProgressBar::HudLoadingScreenWidgetProgressBar(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IHudLoadingScreenWidget(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::HudLoadingScreenWidgetTutorial::HudLoadingScreenWidgetTutorial(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IHudLoadingScreenWidget(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::PlayerCardWidgetConfig::PlayerCardWidgetConfig(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTeamBased = prop->cast_prop<yordle::data::prop::bool_prop>(3602094040u);
    if (ptr_mTeamBased != nullptr) {
        mTeamBased = ptr_mTeamBased->value;
    }

    auto ptr_mCardType = prop->cast_prop<yordle::data::prop::uint8_prop>(1497660678u);
    if (ptr_mCardType != nullptr) {
        mCardType = ptr_mCardType->value;
    }

    auto ptr_x7b9b52c3 = prop->cast_prop<yordle::data::prop::uint32_prop>(2073776835u);
    if (ptr_x7b9b52c3 != nullptr) {
        x7b9b52c3 = ptr_x7b9b52c3->value;
    }
}

yordle::data::meta::x97599ad3::x97599ad3(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x634c549e = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1665946782u);
    if (ptr_x634c549e != nullptr) {
        x634c549e = ptr_x634c549e->value;
    }

    auto ptr_x299164e2 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(697394402u);
    if (ptr_x299164e2 != nullptr) {
        x299164e2 = ptr_x299164e2->value;
    }
}

yordle::data::meta::HudReplaySliderIconData::HudReplaySliderIconData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mType = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2280500912u);
    if (ptr_mType != nullptr) {
        mType = ptr_mType->value;
    }

    auto ptr_mTooltipStyle = prop->cast_prop<yordle::data::prop::uint8_prop>(3659078020u);
    if (ptr_mTooltipStyle != nullptr) {
        mTooltipStyle = ptr_mTooltipStyle->value;
    }

    auto ptr_mElementName = prop->cast_prop<yordle::data::prop::string_prop>(2033120547u);
    if (ptr_mElementName != nullptr) {
        mElementName = ptr_mElementName->value;
    }

    auto ptr_mElementSpacer = prop->cast_prop<yordle::data::prop::float32_prop>(934076876u);
    if (ptr_mElementSpacer != nullptr) {
        mElementSpacer = ptr_mElementSpacer->value;
    }

    auto ptr_mElementAlphaDefault = prop->cast_prop<yordle::data::prop::float32_prop>(1961918889u);
    if (ptr_mElementAlphaDefault != nullptr) {
        mElementAlphaDefault = ptr_mElementAlphaDefault->value;
    }

    auto ptr_mElementAlphaSelected = prop->cast_prop<yordle::data::prop::float32_prop>(139234845u);
    if (ptr_mElementAlphaSelected != nullptr) {
        mElementAlphaSelected = ptr_mElementAlphaSelected->value;
    }

    auto ptr_mElementAlphaUnselected = prop->cast_prop<yordle::data::prop::float32_prop>(2265566630u);
    if (ptr_mElementAlphaUnselected != nullptr) {
        mElementAlphaUnselected = ptr_mElementAlphaUnselected->value;
    }

    auto ptr_mTooltipIconNames = prop->cast_prop<yordle::data::prop::set_prop>(1336248446u);
    if (ptr_mTooltipIconNames != nullptr) {
        for (const auto &entry : ptr_mTooltipIconNames->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mTooltipIconNames.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::HudReplaySliderData::HudReplaySliderData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mIconDataPriorityList = prop->cast_prop<yordle::data::prop::set_prop>(1209290521u);
    if (ptr_mIconDataPriorityList != nullptr) {
        for (const auto &entry : ptr_mIconDataPriorityList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mIconDataPriorityList.emplace(yordle::data::meta::deserialize<yordle::data::meta::HudReplaySliderIconData>(ptr_entry, 3703833425u));
            }
        }
    }

    auto ptr_mTooltipEventWindow = prop->cast_prop<yordle::data::prop::float32_prop>(4170280481u);
    if (ptr_mTooltipEventWindow != nullptr) {
        mTooltipEventWindow = ptr_mTooltipEventWindow->value;
    }
}

yordle::data::meta::WadFileDescriptor::WadFileDescriptor(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::BaseRigPoseModifierData::BaseRigPoseModifierData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ConformToPathRigPoseModifierData::ConformToPathRigPoseModifierData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseRigPoseModifierData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStartingJointName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3332956195u);
    if (ptr_mStartingJointName != nullptr) {
        mStartingJointName = ptr_mStartingJointName->value;
    }

    auto ptr_mEndingJointName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2530986134u);
    if (ptr_mEndingJointName != nullptr) {
        mEndingJointName = ptr_mEndingJointName->value;
    }

    auto ptr_mDefaultMaskName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1344738098u);
    if (ptr_mDefaultMaskName != nullptr) {
        mDefaultMaskName = ptr_mDefaultMaskName->value;
    }

    auto ptr_mMaxBoneAngle = prop->cast_prop<yordle::data::prop::float32_prop>(2478307955u);
    if (ptr_mMaxBoneAngle != nullptr) {
        mMaxBoneAngle = ptr_mMaxBoneAngle->value;
    }

    auto ptr_mDampingValue = prop->cast_prop<yordle::data::prop::float32_prop>(4210191615u);
    if (ptr_mDampingValue != nullptr) {
        mDampingValue = ptr_mDampingValue->value;
    }

    auto ptr_mVelMultiplier = prop->cast_prop<yordle::data::prop::float32_prop>(847828696u);
    if (ptr_mVelMultiplier != nullptr) {
        mVelMultiplier = ptr_mVelMultiplier->value;
    }

    auto ptr_mFrequency = prop->cast_prop<yordle::data::prop::float32_prop>(825003174u);
    if (ptr_mFrequency != nullptr) {
        mFrequency = ptr_mFrequency->value;
    }
}

yordle::data::meta::JointSnapRigPoseModifilerData::JointSnapRigPoseModifilerData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseRigPoseModifierData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::LockRootOrientationRigPoseModifierData::LockRootOrientationRigPoseModifierData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseRigPoseModifierData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::SyncedAnimationRigPoseModifierData::SyncedAnimationRigPoseModifierData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseRigPoseModifierData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VertexAnimationRigPoseModifierData::VertexAnimationRigPoseModifierData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseRigPoseModifierData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMaxSpeed = prop->cast_prop<yordle::data::prop::float32_prop>(4018095465u);
    if (ptr_mMaxSpeed != nullptr) {
        mMaxSpeed = ptr_mMaxSpeed->value;
    }

    auto ptr_mStiffness = prop->cast_prop<yordle::data::prop::float32_prop>(3055644709u);
    if (ptr_mStiffness != nullptr) {
        mStiffness = ptr_mStiffness->value;
    }

    auto ptr_mMass = prop->cast_prop<yordle::data::prop::float32_prop>(2937243320u);
    if (ptr_mMass != nullptr) {
        mMass = ptr_mMass->value;
    }

    auto ptr_mDamping = prop->cast_prop<yordle::data::prop::float32_prop>(190351422u);
    if (ptr_mDamping != nullptr) {
        mDamping = ptr_mDamping->value;
    }
}

yordle::data::meta::AnimationGraphData::AnimationGraphData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mUseCascadeBlend = prop->cast_prop<yordle::data::prop::bool_prop>(3281533642u);
    if (ptr_mUseCascadeBlend != nullptr) {
        mUseCascadeBlend = ptr_mUseCascadeBlend->value;
    }

    auto ptr_mCascadeBlendValue = prop->cast_prop<yordle::data::prop::float32_prop>(508817726u);
    if (ptr_mCascadeBlendValue != nullptr) {
        mCascadeBlendValue = ptr_mCascadeBlendValue->value;
    }

    auto ptr_mClipDataMap = prop->cast_prop<yordle::data::prop::map_prop>(1172382456u);
    if (ptr_mClipDataMap != nullptr) {
        for (const auto &pair : ptr_mClipDataMap->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mClipDataMap[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::ClipBaseData>(ptr_value, 3917866950u);
            }
        }
    }

    auto ptr_mMaskDataMap = prop->cast_prop<yordle::data::prop::map_prop>(3724833902u);
    if (ptr_mMaskDataMap != nullptr) {
        for (const auto &pair : ptr_mMaskDataMap->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mMaskDataMap[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MaskData>(ptr_value, 725360953u);
            }
        }
    }

    auto ptr_mTrackDataMap = prop->cast_prop<yordle::data::prop::map_prop>(954893735u);
    if (ptr_mTrackDataMap != nullptr) {
        for (const auto &pair : ptr_mTrackDataMap->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mTrackDataMap[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::TrackData>(ptr_value, 2552904996u);
            }
        }
    }

    auto ptr_mSyncGroupDataMap = prop->cast_prop<yordle::data::prop::map_prop>(2944942468u);
    if (ptr_mSyncGroupDataMap != nullptr) {
        for (const auto &pair : ptr_mSyncGroupDataMap->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mSyncGroupDataMap[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::SyncGroupData>(ptr_value, 1718266157u);
            }
        }
    }

    auto ptr_mBlendDataTable = prop->cast_prop<yordle::data::prop::map_prop>(814814125u);
    if (ptr_mBlendDataTable != nullptr) {
        for (const auto &pair : ptr_mBlendDataTable->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint64_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mBlendDataTable[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::BaseBlendData>(ptr_value, 3172694155u);
            }
        }
    }
}

yordle::data::meta::AnimationResourceData::AnimationResourceData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAnimationFilePath = prop->cast_prop<yordle::data::prop::string_prop>(53080535u);
    if (ptr_mAnimationFilePath != nullptr) {
        mAnimationFilePath = ptr_mAnimationFilePath->value;
    }
}

yordle::data::meta::MaskData::MaskData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mId = prop->cast_prop<yordle::data::prop::uint32_prop>(3280944101u);
    if (ptr_mId != nullptr) {
        mId = ptr_mId->value;
    }

    auto ptr_mWeightList = prop->cast_prop<yordle::data::prop::set_prop>(2747794304u);
    if (ptr_mWeightList != nullptr) {
        for (const auto &entry : ptr_mWeightList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mWeightList.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::Joint::Joint(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mIndex = prop->cast_prop<yordle::data::prop::uint16_prop>(1776682100u);
    if (ptr_mIndex != nullptr) {
        mIndex = ptr_mIndex->value;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mNameHash = prop->cast_prop<yordle::data::prop::uint32_prop>(957441723u);
    if (ptr_mNameHash != nullptr) {
        mNameHash = ptr_mNameHash->value;
    }

    auto ptr_mFlags = prop->cast_prop<yordle::data::prop::uint16_prop>(2374013483u);
    if (ptr_mFlags != nullptr) {
        mFlags = ptr_mFlags->value;
    }

    auto ptr_mRadius = prop->cast_prop<yordle::data::prop::float32_prop>(1679911566u);
    if (ptr_mRadius != nullptr) {
        mRadius = ptr_mRadius->value;
    }

    auto ptr_mParentIndex = prop->cast_prop<yordle::data::prop::int16_prop>(1157679812u);
    if (ptr_mParentIndex != nullptr) {
        mParentIndex = ptr_mParentIndex->value;
    }
}

yordle::data::meta::RigResource::RigResource(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mAssetName = prop->cast_prop<yordle::data::prop::string_prop>(356995163u);
    if (ptr_mAssetName != nullptr) {
        mAssetName = ptr_mAssetName->value;
    }

    auto ptr_mFlags = prop->cast_prop<yordle::data::prop::uint16_prop>(2374013483u);
    if (ptr_mFlags != nullptr) {
        mFlags = ptr_mFlags->value;
    }

    auto ptr_mJointList = prop->cast_prop<yordle::data::prop::set_prop>(1510409276u);
    if (ptr_mJointList != nullptr) {
        for (const auto &entry : ptr_mJointList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mJointList.emplace(yordle::data::meta::deserialize<yordle::data::meta::Joint>(ptr_entry, 2930641015u));
            }
        }
    }

    auto ptr_mShaderJointList = prop->cast_prop<yordle::data::prop::set_prop>(1196455427u);
    if (ptr_mShaderJointList != nullptr) {
        for (const auto &entry : ptr_mShaderJointList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint16_prop>(entry);
            if (ptr_entry != nullptr) {
                mShaderJointList.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::SyncGroupData::SyncGroupData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mType = prop->cast_prop<yordle::data::prop::uint32_prop>(2280500912u);
    if (ptr_mType != nullptr) {
        mType = ptr_mType->value;
    }
}

yordle::data::meta::TrackData::TrackData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mPriority = prop->cast_prop<yordle::data::prop::uint32_prop>(259093296u);
    if (ptr_mPriority != nullptr) {
        mPriority = ptr_mPriority->value;
    }

    auto ptr_mBlendWeight = prop->cast_prop<yordle::data::prop::float32_prop>(4093742719u);
    if (ptr_mBlendWeight != nullptr) {
        mBlendWeight = ptr_mBlendWeight->value;
    }

    auto ptr_mBlendMode = prop->cast_prop<yordle::data::prop::uint32_prop>(2598765068u);
    if (ptr_mBlendMode != nullptr) {
        mBlendMode = ptr_mBlendMode->value;
    }
}

yordle::data::meta::UpdaterData::UpdaterData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mInputType = prop->cast_prop<yordle::data::prop::uint32_prop>(2951212868u);
    if (ptr_mInputType != nullptr) {
        mInputType = ptr_mInputType->value;
    }

    auto ptr_mOutputType = prop->cast_prop<yordle::data::prop::uint32_prop>(1688448797u);
    if (ptr_mOutputType != nullptr) {
        mOutputType = ptr_mOutputType->value;
    }

    auto ptr_mValueProcessorDataList = prop->cast_prop<yordle::data::prop::set_prop>(3511496507u);
    if (ptr_mValueProcessorDataList != nullptr) {
        for (const auto &entry : ptr_mValueProcessorDataList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mValueProcessorDataList.emplace(yordle::data::meta::deserialize<yordle::data::meta::ValueProcessorData>(ptr_entry, 3487022u));
            }
        }
    }
}

yordle::data::meta::UpdaterResourceData::UpdaterResourceData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mUpdaterDataList = prop->cast_prop<yordle::data::prop::set_prop>(3198934893u);
    if (ptr_mUpdaterDataList != nullptr) {
        for (const auto &entry : ptr_mUpdaterDataList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mUpdaterDataList.emplace(yordle::data::meta::deserialize<yordle::data::meta::UpdaterData>(ptr_entry, 3953106978u));
            }
        }
    }
}

yordle::data::meta::ConditionFloatPairData::ConditionFloatPairData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mClipName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3391849597u);
    if (ptr_mClipName != nullptr) {
        mClipName = ptr_mClipName->value;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::float32_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = ptr_mValue->value;
    }

    auto ptr_mHoldAnimationToHigher = prop->cast_prop<yordle::data::prop::float32_prop>(1770789383u);
    if (ptr_mHoldAnimationToHigher != nullptr) {
        mHoldAnimationToHigher = ptr_mHoldAnimationToHigher->value;
    }

    auto ptr_mHoldAnimationToLower = prop->cast_prop<yordle::data::prop::float32_prop>(918766713u);
    if (ptr_mHoldAnimationToLower != nullptr) {
        mHoldAnimationToLower = ptr_mHoldAnimationToLower->value;
    }
}

yordle::data::meta::ParametricPairData::ParametricPairData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mClipName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3391849597u);
    if (ptr_mClipName != nullptr) {
        mClipName = ptr_mClipName->value;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::float32_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = ptr_mValue->value;
    }
}

yordle::data::meta::SelectorPairData::SelectorPairData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mClipName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3391849597u);
    if (ptr_mClipName != nullptr) {
        mClipName = ptr_mClipName->value;
    }

    auto ptr_mProbability = prop->cast_prop<yordle::data::prop::float32_prop>(1674287183u);
    if (ptr_mProbability != nullptr) {
        mProbability = ptr_mProbability->value;
    }
}

yordle::data::meta::BaseBlendData::BaseBlendData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::BaseEventData::BaseEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mStartFrame = prop->cast_prop<yordle::data::prop::float32_prop>(621607905u);
    if (ptr_mStartFrame != nullptr) {
        mStartFrame = ptr_mStartFrame->value;
    }

    auto ptr_mEndFrame = prop->cast_prop<yordle::data::prop::float32_prop>(3072661310u);
    if (ptr_mEndFrame != nullptr) {
        mEndFrame = ptr_mEndFrame->value;
    }

    auto ptr_mIsSelfOnly = prop->cast_prop<yordle::data::prop::bool_prop>(1217133356u);
    if (ptr_mIsSelfOnly != nullptr) {
        mIsSelfOnly = ptr_mIsSelfOnly->value;
    }

    auto ptr_mFireIfAnimationEndsEarly = prop->cast_prop<yordle::data::prop::bool_prop>(2710483352u);
    if (ptr_mFireIfAnimationEndsEarly != nullptr) {
        mFireIfAnimationEndsEarly = ptr_mFireIfAnimationEndsEarly->value;
    }
}

yordle::data::meta::ClipBaseData::ClipBaseData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFlags = prop->cast_prop<yordle::data::prop::uint32_prop>(2374013483u);
    if (ptr_mFlags != nullptr) {
        mFlags = ptr_mFlags->value;
    }

    auto ptr_mAnimationInterruptionGroupNames = prop->cast_prop<yordle::data::prop::set_prop>(2312323136u);
    if (ptr_mAnimationInterruptionGroupNames != nullptr) {
        for (const auto &entry : ptr_mAnimationInterruptionGroupNames->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mAnimationInterruptionGroupNames.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ConformToPathEventData::ConformToPathEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseEventData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMaskDataName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(56193947u);
    if (ptr_mMaskDataName != nullptr) {
        mMaskDataName = ptr_mMaskDataName->value;
    }

    auto ptr_mBlendInTime = prop->cast_prop<yordle::data::prop::float32_prop>(3744416425u);
    if (ptr_mBlendInTime != nullptr) {
        mBlendInTime = ptr_mBlendInTime->value;
    }

    auto ptr_mBlendOutTime = prop->cast_prop<yordle::data::prop::float32_prop>(2831513780u);
    if (ptr_mBlendOutTime != nullptr) {
        mBlendOutTime = ptr_mBlendOutTime->value;
    }
}

yordle::data::meta::EnableLookAtEventData::EnableLookAtEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseEventData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEnableLookAt = prop->cast_prop<yordle::data::prop::bool_prop>(2671813641u);
    if (ptr_mEnableLookAt != nullptr) {
        mEnableLookAt = ptr_mEnableLookAt->value;
    }

    auto ptr_mLockCurrentValues = prop->cast_prop<yordle::data::prop::bool_prop>(209526758u);
    if (ptr_mLockCurrentValues != nullptr) {
        mLockCurrentValues = ptr_mLockCurrentValues->value;
    }
}

yordle::data::meta::FaceCameraEventData::FaceCameraEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseEventData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xb9cfc1ab = prop->cast_prop<yordle::data::prop::float32_prop>(3117400491u);
    if (ptr_xb9cfc1ab != nullptr) {
        xb9cfc1ab = ptr_xb9cfc1ab->value;
    }

    auto ptr_BlendInTime = prop->cast_prop<yordle::data::prop::float32_prop>(2577320358u);
    if (ptr_BlendInTime != nullptr) {
        BlendInTime = ptr_BlendInTime->value;
    }

    auto ptr_BlendOutTime = prop->cast_prop<yordle::data::prop::float32_prop>(2367322749u);
    if (ptr_BlendOutTime != nullptr) {
        BlendOutTime = ptr_BlendOutTime->value;
    }
}

yordle::data::meta::FadeEventData::FadeEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseEventData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTimeToFade = prop->cast_prop<yordle::data::prop::float32_prop>(1615348070u);
    if (ptr_mTimeToFade != nullptr) {
        mTimeToFade = ptr_mTimeToFade->value;
    }

    auto ptr_mTargetAlpha = prop->cast_prop<yordle::data::prop::float32_prop>(646437671u);
    if (ptr_mTargetAlpha != nullptr) {
        mTargetAlpha = ptr_mTargetAlpha->value;
    }
}

yordle::data::meta::IdleParticlesVisibilityEventData::IdleParticlesVisibilityEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseEventData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mShow = prop->cast_prop<yordle::data::prop::bool_prop>(3454275985u);
    if (ptr_mShow != nullptr) {
        mShow = ptr_mShow->value;
    }
}

yordle::data::meta::JointSnapEventData::JointSnapEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseEventData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mJointNameToOverride = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2893065058u);
    if (ptr_mJointNameToOverride != nullptr) {
        mJointNameToOverride = ptr_mJointNameToOverride->value;
    }

    auto ptr_mJointNameToSnapTo = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4142323859u);
    if (ptr_mJointNameToSnapTo != nullptr) {
        mJointNameToSnapTo = ptr_mJointNameToSnapTo->value;
    }
}

yordle::data::meta::LockRootOrientationEventData::LockRootOrientationEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseEventData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ParticleEventDataPair::ParticleEventDataPair(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBoneName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3951561061u);
    if (ptr_mBoneName != nullptr) {
        mBoneName = ptr_mBoneName->value;
    }

    auto ptr_mTargetBoneName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2512086968u);
    if (ptr_mTargetBoneName != nullptr) {
        mTargetBoneName = ptr_mTargetBoneName->value;
    }
}

yordle::data::meta::ParticleEventData::ParticleEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseEventData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEffectKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4130890368u);
    if (ptr_mEffectKey != nullptr) {
        mEffectKey = ptr_mEffectKey->value;
    }

    auto ptr_mEnemyEffectKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2564755380u);
    if (ptr_mEnemyEffectKey != nullptr) {
        mEnemyEffectKey = ptr_mEnemyEffectKey->value;
    }

    auto ptr_mEffectName = prop->cast_prop<yordle::data::prop::string_prop>(1514000834u);
    if (ptr_mEffectName != nullptr) {
        mEffectName = ptr_mEffectName->value;
    }

    auto ptr_mParticleEventDataPairList = prop->cast_prop<yordle::data::prop::set_prop>(1617190250u);
    if (ptr_mParticleEventDataPairList != nullptr) {
        for (const auto &entry : ptr_mParticleEventDataPairList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mParticleEventDataPairList.emplace(yordle::data::meta::deserialize<yordle::data::meta::ParticleEventDataPair>(ptr_entry, 1574343673u));
            }
        }
    }

    auto ptr_mIsLoop = prop->cast_prop<yordle::data::prop::bool_prop>(3642634990u);
    if (ptr_mIsLoop != nullptr) {
        mIsLoop = ptr_mIsLoop->value;
    }

    auto ptr_mIsKillEvent = prop->cast_prop<yordle::data::prop::bool_prop>(1923104760u);
    if (ptr_mIsKillEvent != nullptr) {
        mIsKillEvent = ptr_mIsKillEvent->value;
    }

    auto ptr_mIsDetachable = prop->cast_prop<yordle::data::prop::bool_prop>(1106882915u);
    if (ptr_mIsDetachable != nullptr) {
        mIsDetachable = ptr_mIsDetachable->value;
    }

    auto ptr_mScalePlaySpeedWithAnimation = prop->cast_prop<yordle::data::prop::bool_prop>(2350291263u);
    if (ptr_mScalePlaySpeedWithAnimation != nullptr) {
        mScalePlaySpeedWithAnimation = ptr_mScalePlaySpeedWithAnimation->value;
    }

    auto ptr_xa3826203 = prop->cast_prop<yordle::data::prop::bool_prop>(2743230979u);
    if (ptr_xa3826203 != nullptr) {
        xa3826203 = ptr_xa3826203->value;
    }
}

yordle::data::meta::SoundEventData::SoundEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseEventData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSoundName = prop->cast_prop<yordle::data::prop::string_prop>(2638708340u);
    if (ptr_mSoundName != nullptr) {
        mSoundName = ptr_mSoundName->value;
    }

    auto ptr_mIsLoop = prop->cast_prop<yordle::data::prop::bool_prop>(3642634990u);
    if (ptr_mIsLoop != nullptr) {
        mIsLoop = ptr_mIsLoop->value;
    }

    auto ptr_mIsKillEvent = prop->cast_prop<yordle::data::prop::bool_prop>(1923104760u);
    if (ptr_mIsKillEvent != nullptr) {
        mIsKillEvent = ptr_mIsKillEvent->value;
    }

    auto ptr_x67227d6 = prop->cast_prop<yordle::data::prop::bool_prop>(108144598u);
    if (ptr_x67227d6 != nullptr) {
        x67227d6 = ptr_x67227d6->value;
    }
}

yordle::data::meta::StopAnimationEventData::StopAnimationEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseEventData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStopAnimationName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3449836557u);
    if (ptr_mStopAnimationName != nullptr) {
        mStopAnimationName = ptr_mStopAnimationName->value;
    }
}

yordle::data::meta::SubmeshVisibilityEventData::SubmeshVisibilityEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseEventData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mShowSubmeshList = prop->cast_prop<yordle::data::prop::set_prop>(1833779920u);
    if (ptr_mShowSubmeshList != nullptr) {
        for (const auto &entry : ptr_mShowSubmeshList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mShowSubmeshList.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mHideSubmeshList = prop->cast_prop<yordle::data::prop::set_prop>(3141641307u);
    if (ptr_mHideSubmeshList != nullptr) {
        for (const auto &entry : ptr_mHideSubmeshList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mHideSubmeshList.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::SyncedAnimationEventData::SyncedAnimationEventData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseEventData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mLerpTime = prop->cast_prop<yordle::data::prop::float32_prop>(1809558616u);
    if (ptr_mLerpTime != nullptr) {
        mLerpTime = ptr_mLerpTime->value;
    }
}

yordle::data::meta::TimeBlendData::TimeBlendData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseBlendData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTime = prop->cast_prop<yordle::data::prop::float32_prop>(2888110417u);
    if (ptr_mTime != nullptr) {
        mTime = ptr_mTime->value;
    }
}

yordle::data::meta::TransitionClipBlendData::TransitionClipBlendData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseBlendData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mClipName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3391849597u);
    if (ptr_mClipName != nullptr) {
        mClipName = ptr_mClipName->value;
    }
}

yordle::data::meta::ValueProcessorData::ValueProcessorData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::EngineFeatureToggles::EngineFeatureToggles(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x5fe6e49 = prop->cast_prop<yordle::data::prop::bool_prop>(100560457u);
    if (ptr_x5fe6e49 != nullptr) {
        x5fe6e49 = ptr_x5fe6e49->value;
    }

    auto ptr_xcdbbc6e1 = prop->cast_prop<yordle::data::prop::bool_prop>(3451635425u);
    if (ptr_xcdbbc6e1 != nullptr) {
        xcdbbc6e1 = ptr_xcdbbc6e1->value;
    }
}

yordle::data::meta::MapComponent::MapComponent(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::MapContainer::MapContainer(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mapPath = prop->cast_prop<yordle::data::prop::string_prop>(3428745354u);
    if (ptr_mapPath != nullptr) {
        mapPath = ptr_mapPath->value;
    }

    auto ptr_components = prop->cast_prop<yordle::data::prop::set_prop>(469045609u);
    if (ptr_components != nullptr) {
        for (const auto &entry : ptr_components->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                components.emplace(yordle::data::meta::deserialize<yordle::data::meta::MapComponent>(ptr_entry, 72326764u));
            }
        }
    }

    auto ptr_boundsMin = prop->cast_prop<yordle::data::prop::point_prop>(2973931428u);
    if (ptr_boundsMin != nullptr) {
        boundsMin = ptr_boundsMin->value;
    }

    auto ptr_boundsMax = prop->cast_prop<yordle::data::prop::point_prop>(3210098022u);
    if (ptr_boundsMax != nullptr) {
        boundsMax = ptr_boundsMax->value;
    }

    auto ptr_lowestWalkableHeight = prop->cast_prop<yordle::data::prop::float32_prop>(4016087337u);
    if (ptr_lowestWalkableHeight != nullptr) {
        lowestWalkableHeight = ptr_lowestWalkableHeight->value;
    }

    auto ptr_xf010defb = prop->cast_prop<yordle::data::prop::float32_prop>(4027637499u);
    if (ptr_xf010defb != nullptr) {
        xf010defb = ptr_xf010defb->value;
    }

    auto ptr_chunks = prop->cast_prop<yordle::data::prop::map_prop>(1577983395u);
    if (ptr_chunks != nullptr) {
        for (const auto &pair : ptr_chunks->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                chunks[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::MapContainsOtherMaps::MapContainsOtherMaps(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapComponent(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_MapContainerLocations = prop->cast_prop<yordle::data::prop::reference_prop>(3704860912u);
    if (ptr_MapContainerLocations != nullptr) {
        MapContainerLocations = ptr_MapContainerLocations->value;
    }
}

yordle::data::meta::LaneData::LaneData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mNavigationPoints = prop->cast_prop<yordle::data::prop::set_prop>(14980125u);
    if (ptr_mNavigationPoints != nullptr) {
        for (const auto &entry : ptr_mNavigationPoints->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mNavigationPoints.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mContainedRegions = prop->cast_prop<yordle::data::prop::set_prop>(3967407862u);
    if (ptr_mContainedRegions != nullptr) {
        for (const auto &entry : ptr_mContainedRegions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mContainedRegions.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::MapLaneComponent::MapLaneComponent(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapComponent(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mLanes = prop->cast_prop<yordle::data::prop::set_prop>(2327119739u);
    if (ptr_mLanes != nullptr) {
        for (const auto &entry : ptr_mLanes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mLanes.emplace(yordle::data::meta::deserialize<yordle::data::meta::LaneData>(ptr_entry, 243000503u));
            }
        }
    }
}

yordle::data::meta::MapPathSegment::MapPathSegment(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_EndPosition = prop->cast_prop<yordle::data::prop::vector_prop>(1047456757u);
    if (ptr_EndPosition != nullptr) {
        EndPosition = ptr_EndPosition->value;
    }
}

yordle::data::meta::MapPathLineSegment::MapPathLineSegment(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapPathSegment(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::MapPathCurveSegment::MapPathCurveSegment(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapPathSegment(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ControlPoint1 = prop->cast_prop<yordle::data::prop::vector_prop>(69564147u);
    if (ptr_ControlPoint1 != nullptr) {
        ControlPoint1 = ptr_ControlPoint1->value;
    }

    auto ptr_ControlPoint2 = prop->cast_prop<yordle::data::prop::vector_prop>(86341766u);
    if (ptr_ControlPoint2 != nullptr) {
        ControlPoint2 = ptr_ControlPoint2->value;
    }
}

yordle::data::meta::MapNavGrid::MapNavGrid(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapComponent(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_NavGridPath = prop->cast_prop<yordle::data::prop::string_prop>(4145642937u);
    if (ptr_NavGridPath != nullptr) {
        NavGridPath = ptr_NavGridPath->value;
    }
}

yordle::data::meta::MapPlaceable::MapPlaceable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_transform = prop->cast_prop<yordle::data::prop::matrix_prop>(3786248987u);
    if (ptr_transform != nullptr) {
        transform = ptr_transform->value;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_mVisibilityFlags = prop->cast_prop<yordle::data::prop::uint8_prop>(3438777127u);
    if (ptr_mVisibilityFlags != nullptr) {
        mVisibilityFlags = ptr_mVisibilityFlags->value;
    }
}

yordle::data::meta::GenericMapPlaceable::GenericMapPlaceable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapPlaceable(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::MapPlaceableContainer::MapPlaceableContainer(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_items = prop->cast_prop<yordle::data::prop::map_prop>(981021583u);
    if (ptr_items != nullptr) {
        for (const auto &pair : ptr_items->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                items[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MapPlaceable>(ptr_value, 1502315240u);
            }
        }
    }
}

yordle::data::meta::MapPrefabInstance::MapPrefabInstance(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapPlaceable(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_prefabDefinition = prop->cast_prop<yordle::data::prop::reference_prop>(2120627422u);
    if (ptr_prefabDefinition != nullptr) {
        prefabDefinition = ptr_prefabDefinition->value;
    }
}

yordle::data::meta::MapThemeMusic::MapThemeMusic(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapComponent(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_LocalThemeMusic = prop->cast_prop<yordle::data::prop::string_prop>(3546830876u);
    if (ptr_LocalThemeMusic != nullptr) {
        LocalThemeMusic = ptr_LocalThemeMusic->value;
    }

    auto ptr_ThemeMusicTransitionEvent = prop->cast_prop<yordle::data::prop::string_prop>(1036822818u);
    if (ptr_ThemeMusicTransitionEvent != nullptr) {
        ThemeMusicTransitionEvent = ptr_ThemeMusicTransitionEvent->value;
    }
}

yordle::data::meta::RegionsThatAllowContent::RegionsThatAllowContent(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mRegionList = prop->cast_prop<yordle::data::prop::set_prop>(314052692u);
    if (ptr_mRegionList != nullptr) {
        for (const auto &entry : ptr_mRegionList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mRegionList.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::RegionSettings::RegionSettings(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mContentTypeAllowedSettings = prop->cast_prop<yordle::data::prop::map_prop>(2189143518u);
    if (ptr_mContentTypeAllowedSettings != nullptr) {
        for (const auto &pair : ptr_mContentTypeAllowedSettings->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mContentTypeAllowedSettings[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::RegionsThatAllowContent>(ptr_value, 2486262273u);
            }
        }
    }
}

yordle::data::meta::FontLocaleType::FontLocaleType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_localeName = prop->cast_prop<yordle::data::prop::string_prop>(446645588u);
    if (ptr_localeName != nullptr) {
        localeName = ptr_localeName->value;
    }

    auto ptr_mFontFilePath = prop->cast_prop<yordle::data::prop::string_prop>(2271524388u);
    if (ptr_mFontFilePath != nullptr) {
        mFontFilePath = ptr_mFontFilePath->value;
    }

    auto ptr_FontFilePathBold = prop->cast_prop<yordle::data::prop::string_prop>(281301214u);
    if (ptr_FontFilePathBold != nullptr) {
        FontFilePathBold = ptr_FontFilePathBold->value;
    }

    auto ptr_FontFilePathItalics = prop->cast_prop<yordle::data::prop::string_prop>(1802990466u);
    if (ptr_FontFilePathItalics != nullptr) {
        FontFilePathItalics = ptr_FontFilePathItalics->value;
    }
}

yordle::data::meta::FontResolution::FontResolution(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_screenHeight = prop->cast_prop<yordle::data::prop::uint32_prop>(106932982u);
    if (ptr_screenHeight != nullptr) {
        screenHeight = ptr_screenHeight->value;
    }

    auto ptr_fontSize = prop->cast_prop<yordle::data::prop::uint32_prop>(684013793u);
    if (ptr_fontSize != nullptr) {
        fontSize = ptr_fontSize->value;
    }

    auto ptr_outlineSize = prop->cast_prop<yordle::data::prop::uint32_prop>(555547636u);
    if (ptr_outlineSize != nullptr) {
        outlineSize = ptr_outlineSize->value;
    }

    auto ptr_shadowDepthX = prop->cast_prop<yordle::data::prop::int32_prop>(413663674u);
    if (ptr_shadowDepthX != nullptr) {
        shadowDepthX = ptr_shadowDepthX->value;
    }

    auto ptr_shadowDepthY = prop->cast_prop<yordle::data::prop::int32_prop>(430441293u);
    if (ptr_shadowDepthY != nullptr) {
        shadowDepthY = ptr_shadowDepthY->value;
    }
}

yordle::data::meta::FontLocaleResolutions::FontLocaleResolutions(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_localeName = prop->cast_prop<yordle::data::prop::string_prop>(446645588u);
    if (ptr_localeName != nullptr) {
        localeName = ptr_localeName->value;
    }

    auto ptr_resolutions = prop->cast_prop<yordle::data::prop::set_prop>(3615842484u);
    if (ptr_resolutions != nullptr) {
        for (const auto &entry : ptr_resolutions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                resolutions.emplace(yordle::data::meta::deserialize<yordle::data::meta::FontResolution>(ptr_entry, 3120352850u));
            }
        }
    }
}

yordle::data::meta::FontType::FontType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_localeTypes = prop->cast_prop<yordle::data::prop::set_prop>(2359137012u);
    if (ptr_localeTypes != nullptr) {
        for (const auto &entry : ptr_localeTypes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                localeTypes.emplace(yordle::data::meta::deserialize<yordle::data::meta::FontLocaleType>(ptr_entry, 2600090346u));
            }
        }
    }
}

yordle::data::meta::FontResolutionData::FontResolutionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_autoScale = prop->cast_prop<yordle::data::prop::bool_prop>(80733204u);
    if (ptr_autoScale != nullptr) {
        autoScale = ptr_autoScale->value;
    }

    auto ptr_localeResolutions = prop->cast_prop<yordle::data::prop::set_prop>(3726722642u);
    if (ptr_localeResolutions != nullptr) {
        for (const auto &entry : ptr_localeResolutions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                localeResolutions.emplace(yordle::data::meta::deserialize<yordle::data::meta::FontLocaleResolutions>(ptr_entry, 3919875225u));
            }
        }
    }
}

yordle::data::meta::GameFontDescription::GameFontDescription(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_typeData = prop->cast_prop<yordle::data::prop::reference_prop>(2066243309u);
    if (ptr_typeData != nullptr) {
        typeData = ptr_typeData->value;
    }

    auto ptr_resolutionData = prop->cast_prop<yordle::data::prop::reference_prop>(289487383u);
    if (ptr_resolutionData != nullptr) {
        resolutionData = ptr_resolutionData->value;
    }

    auto ptr_color = prop->cast_prop<yordle::data::prop::color_prop>(1031692888u);
    if (ptr_color != nullptr) {
        color = ptr_color->value;
    }

    auto ptr_outlineColor = prop->cast_prop<yordle::data::prop::color_prop>(324183760u);
    if (ptr_outlineColor != nullptr) {
        outlineColor = ptr_outlineColor->value;
    }

    auto ptr_shadowColor = prop->cast_prop<yordle::data::prop::color_prop>(1853436228u);
    if (ptr_shadowColor != nullptr) {
        shadowColor = ptr_shadowColor->value;
    }

    auto ptr_glowColor = prop->cast_prop<yordle::data::prop::color_prop>(915454787u);
    if (ptr_glowColor != nullptr) {
        glowColor = ptr_glowColor->value;
    }

    auto ptr_x3cc9ac15 = prop->cast_prop<yordle::data::prop::color_prop>(1019849749u);
    if (ptr_x3cc9ac15 != nullptr) {
        x3cc9ac15 = ptr_x3cc9ac15->value;
    }

    auto ptr_colorblindColor = prop->cast_prop<yordle::data::prop::optional_prop>(4042010374u);
    if (ptr_colorblindColor != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::color_prop>(ptr_colorblindColor->value);
        if(ptr_entry != nullptr) {
            colorblindColor = ptr_entry->value;
        }
    }

    auto ptr_colorblindOutlineColor = prop->cast_prop<yordle::data::prop::optional_prop>(2346750194u);
    if (ptr_colorblindOutlineColor != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::color_prop>(ptr_colorblindOutlineColor->value);
        if(ptr_entry != nullptr) {
            colorblindOutlineColor = ptr_entry->value;
        }
    }

    auto ptr_colorblindShadowColor = prop->cast_prop<yordle::data::prop::optional_prop>(2607664878u);
    if (ptr_colorblindShadowColor != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::color_prop>(ptr_colorblindShadowColor->value);
        if(ptr_entry != nullptr) {
            colorblindShadowColor = ptr_entry->value;
        }
    }

    auto ptr_colorblindGlowColor = prop->cast_prop<yordle::data::prop::optional_prop>(926840181u);
    if (ptr_colorblindGlowColor != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::color_prop>(ptr_colorblindGlowColor->value);
        if(ptr_entry != nullptr) {
            colorblindGlowColor = ptr_entry->value;
        }
    }

    auto ptr_xc2008b7b = prop->cast_prop<yordle::data::prop::optional_prop>(3254815611u);
    if (ptr_xc2008b7b != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::color_prop>(ptr_xc2008b7b->value);
        if(ptr_entry != nullptr) {
            xc2008b7b = ptr_entry->value;
        }
    }

    auto ptr_fillTextureName = prop->cast_prop<yordle::data::prop::string_prop>(2414715336u);
    if (ptr_fillTextureName != nullptr) {
        fillTextureName = ptr_fillTextureName->value;
    }
}

yordle::data::meta::CSSStyle::CSSStyle(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_color = prop->cast_prop<yordle::data::prop::optional_prop>(1031692888u);
    if (ptr_color != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::color_prop>(ptr_color->value);
        if(ptr_entry != nullptr) {
            color = ptr_entry->value;
        }
    }

    auto ptr_bold = prop->cast_prop<yordle::data::prop::optional_prop>(3734435446u);
    if (ptr_bold != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_bold->value);
        if(ptr_entry != nullptr) {
            bold = ptr_entry->value;
        }
    }

    auto ptr_italics = prop->cast_prop<yordle::data::prop::optional_prop>(2924892218u);
    if (ptr_italics != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_italics->value);
        if(ptr_entry != nullptr) {
            italics = ptr_entry->value;
        }
    }

    auto ptr_underline = prop->cast_prop<yordle::data::prop::optional_prop>(3850515583u);
    if (ptr_underline != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_underline->value);
        if(ptr_entry != nullptr) {
            underline = ptr_entry->value;
        }
    }
}

yordle::data::meta::CSSIcon::CSSIcon(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xy = prop->cast_prop<yordle::data::prop::point_prop>(1482915802u);
    if (ptr_xy != nullptr) {
        xy = ptr_xy->value;
    }

    auto ptr_wh = prop->cast_prop<yordle::data::prop::point_prop>(1732755706u);
    if (ptr_wh != nullptr) {
        wh = ptr_wh->value;
    }

    auto ptr_x81e208ef = prop->cast_prop<yordle::data::prop::float32_prop>(2179074287u);
    if (ptr_x81e208ef != nullptr) {
        x81e208ef = ptr_x81e208ef->value;
    }
}

yordle::data::meta::CSSSheet::CSSSheet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_styles = prop->cast_prop<yordle::data::prop::map_prop>(3042401727u);
    if (ptr_styles != nullptr) {
        for (const auto &pair : ptr_styles->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                styles[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::CSSStyle>(ptr_value, 1461391717u);
            }
        }
    }

    auto ptr_iconTexture = prop->cast_prop<yordle::data::prop::string_prop>(2380000075u);
    if (ptr_iconTexture != nullptr) {
        iconTexture = ptr_iconTexture->value;
    }

    auto ptr_icons = prop->cast_prop<yordle::data::prop::map_prop>(4192329017u);
    if (ptr_icons != nullptr) {
        for (const auto &pair : ptr_icons->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                icons[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::CSSIcon>(ptr_value, 3991255873u);
            }
        }
    }
}

yordle::data::meta::TooltipFormat::TooltipFormat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mObjectName = prop->cast_prop<yordle::data::prop::string_prop>(3028469036u);
    if (ptr_mObjectName != nullptr) {
        mObjectName = ptr_mObjectName->value;
    }

    auto ptr_mInputLocKeysWithDefaults = prop->cast_prop<yordle::data::prop::map_prop>(3505929588u);
    if (ptr_mInputLocKeysWithDefaults != nullptr) {
        for (const auto &pair : ptr_mInputLocKeysWithDefaults->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mInputLocKeysWithDefaults[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_mListNames = prop->cast_prop<yordle::data::prop::set_prop>(463602576u);
    if (ptr_mListNames != nullptr) {
        for (const auto &entry : ptr_mListNames->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mListNames.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mListTypeChoices = prop->cast_prop<yordle::data::prop::map_prop>(1590857024u);
    if (ptr_mListTypeChoices != nullptr) {
        for (const auto &pair : ptr_mListTypeChoices->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mListTypeChoices[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_mListStyles = prop->cast_prop<yordle::data::prop::map_prop>(991429346u);
    if (ptr_mListStyles != nullptr) {
        for (const auto &pair : ptr_mListStyles->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mListStyles[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_mUsesListValues = prop->cast_prop<yordle::data::prop::bool_prop>(3605006742u);
    if (ptr_mUsesListValues != nullptr) {
        mUsesListValues = ptr_mUsesListValues->value;
    }

    auto ptr_mListValueSeparator = prop->cast_prop<yordle::data::prop::string_prop>(13471608u);
    if (ptr_mListValueSeparator != nullptr) {
        mListValueSeparator = ptr_mListValueSeparator->value;
    }

    auto ptr_mListGridPrefix = prop->cast_prop<yordle::data::prop::string_prop>(1080737036u);
    if (ptr_mListGridPrefix != nullptr) {
        mListGridPrefix = ptr_mListGridPrefix->value;
    }

    auto ptr_mListGridPostfix = prop->cast_prop<yordle::data::prop::string_prop>(2925803501u);
    if (ptr_mListGridPostfix != nullptr) {
        mListGridPostfix = ptr_mListGridPostfix->value;
    }

    auto ptr_mListGridSeparator = prop->cast_prop<yordle::data::prop::string_prop>(1775813879u);
    if (ptr_mListGridSeparator != nullptr) {
        mListGridSeparator = ptr_mListGridSeparator->value;
    }

    auto ptr_mOutputStrings = prop->cast_prop<yordle::data::prop::map_prop>(392320929u);
    if (ptr_mOutputStrings != nullptr) {
        for (const auto &pair : ptr_mOutputStrings->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mOutputStrings[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::TooltipInstanceListElement::TooltipInstanceListElement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_type = prop->cast_prop<yordle::data::prop::string_prop>(1361572173u);
    if (ptr_type != nullptr) {
        type = ptr_type->value;
    }

    auto ptr_typeIndex = prop->cast_prop<yordle::data::prop::int32_prop>(868232595u);
    if (ptr_typeIndex != nullptr) {
        typeIndex = ptr_typeIndex->value;
    }

    auto ptr_multiplier = prop->cast_prop<yordle::data::prop::float32_prop>(4110862310u);
    if (ptr_multiplier != nullptr) {
        multiplier = ptr_multiplier->value;
    }

    auto ptr_nameOverride = prop->cast_prop<yordle::data::prop::string_prop>(1450128390u);
    if (ptr_nameOverride != nullptr) {
        nameOverride = ptr_nameOverride->value;
    }

    auto ptr_Style = prop->cast_prop<yordle::data::prop::uint32_prop>(2888859350u);
    if (ptr_Style != nullptr) {
        Style = ptr_Style->value;
    }
}

yordle::data::meta::TooltipInstanceList::TooltipInstanceList(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_levelCount = prop->cast_prop<yordle::data::prop::uint32_prop>(119163100u);
    if (ptr_levelCount != nullptr) {
        levelCount = ptr_levelCount->value;
    }

    auto ptr_elements = prop->cast_prop<yordle::data::prop::set_prop>(1519694028u);
    if (ptr_elements != nullptr) {
        for (const auto &entry : ptr_elements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                elements.emplace(yordle::data::meta::deserialize<yordle::data::meta::TooltipInstanceListElement>(ptr_entry, 2585474309u));
            }
        }
    }
}

yordle::data::meta::TooltipInstance::TooltipInstance(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mObjectName = prop->cast_prop<yordle::data::prop::string_prop>(3028469036u);
    if (ptr_mObjectName != nullptr) {
        mObjectName = ptr_mObjectName->value;
    }

    auto ptr_mFormat = prop->cast_prop<yordle::data::prop::reference_prop>(1471721755u);
    if (ptr_mFormat != nullptr) {
        mFormat = ptr_mFormat->value;
    }

    auto ptr_mLocKeys = prop->cast_prop<yordle::data::prop::map_prop>(58849250u);
    if (ptr_mLocKeys != nullptr) {
        for (const auto &pair : ptr_mLocKeys->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mLocKeys[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_mLists = prop->cast_prop<yordle::data::prop::map_prop>(2448230345u);
    if (ptr_mLists != nullptr) {
        for (const auto &pair : ptr_mLists->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mLists[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::TooltipInstanceList>(ptr_value, 4214485747u);
            }
        }
    }
}

yordle::data::meta::ValueFloat::ValueFloat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_constantValue = prop->cast_prop<yordle::data::prop::float32_prop>(3031705514u);
    if (ptr_constantValue != nullptr) {
        constantValue = ptr_constantValue->value;
    }

    auto ptr_dynamics = prop->cast_prop<yordle::data::prop::structure_prop>(3154345447u);
    if (ptr_dynamics != nullptr) {
        dynamics = yordle::data::meta::deserialize<yordle::data::meta::VfxAnimatedFloatVariableData>(ptr_dynamics, 4261825672u);
    }
}

yordle::data::meta::IntegratedValueFloat::IntegratedValueFloat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ValueFloat(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ValueVector2::ValueVector2(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_constantValue = prop->cast_prop<yordle::data::prop::point_prop>(3031705514u);
    if (ptr_constantValue != nullptr) {
        constantValue = ptr_constantValue->value;
    }

    auto ptr_dynamics = prop->cast_prop<yordle::data::prop::structure_prop>(3154345447u);
    if (ptr_dynamics != nullptr) {
        dynamics = yordle::data::meta::deserialize<yordle::data::meta::VfxAnimatedVector2fVariableData>(ptr_dynamics, 772710981u);
    }
}

yordle::data::meta::IntegratedValueVector2::IntegratedValueVector2(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ValueVector2(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ValueVector3::ValueVector3(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_constantValue = prop->cast_prop<yordle::data::prop::vector_prop>(3031705514u);
    if (ptr_constantValue != nullptr) {
        constantValue = ptr_constantValue->value;
    }

    auto ptr_dynamics = prop->cast_prop<yordle::data::prop::structure_prop>(3154345447u);
    if (ptr_dynamics != nullptr) {
        dynamics = yordle::data::meta::deserialize<yordle::data::meta::VfxAnimatedVector3fVariableData>(ptr_dynamics, 2899841408u);
    }
}

yordle::data::meta::IntegratedValueVector3::IntegratedValueVector3(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ValueVector3(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ValueColor::ValueColor(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_constantValue = prop->cast_prop<yordle::data::prop::quaternion_prop>(3031705514u);
    if (ptr_constantValue != nullptr) {
        constantValue = ptr_constantValue->value;
    }

    auto ptr_dynamics = prop->cast_prop<yordle::data::prop::structure_prop>(3154345447u);
    if (ptr_dynamics != nullptr) {
        dynamics = yordle::data::meta::deserialize<yordle::data::meta::VfxAnimatedColorVariableData>(ptr_dynamics, 1128908277u);
    }
}

yordle::data::meta::VfxAnimatedFloatVariableData::VfxAnimatedFloatVariableData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_probabilityTables = prop->cast_prop<yordle::data::prop::set_prop>(2802337561u);
    if (ptr_probabilityTables != nullptr) {
        for (const auto &entry : ptr_probabilityTables->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                probabilityTables.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxProbabilityTableData>(ptr_entry, 1403439486u));
            }
        }
    }

    auto ptr_times = prop->cast_prop<yordle::data::prop::set_prop>(1567157941u);
    if (ptr_times != nullptr) {
        for (const auto &entry : ptr_times->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                times.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_values = prop->cast_prop<yordle::data::prop::set_prop>(877087803u);
    if (ptr_values != nullptr) {
        for (const auto &entry : ptr_values->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                values.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::VfxAnimatedVector2fVariableData::VfxAnimatedVector2fVariableData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_probabilityTables = prop->cast_prop<yordle::data::prop::set_prop>(2802337561u);
    if (ptr_probabilityTables != nullptr) {
        for (const auto &entry : ptr_probabilityTables->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                probabilityTables.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxProbabilityTableData>(ptr_entry, 1403439486u));
            }
        }
    }

    auto ptr_times = prop->cast_prop<yordle::data::prop::set_prop>(1567157941u);
    if (ptr_times != nullptr) {
        for (const auto &entry : ptr_times->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                times.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_values = prop->cast_prop<yordle::data::prop::set_prop>(877087803u);
    if (ptr_values != nullptr) {
        for (const auto &entry : ptr_values->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::point_prop>(entry);
            if (ptr_entry != nullptr) {
                values.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::VfxAnimatedVector3fVariableData::VfxAnimatedVector3fVariableData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_probabilityTables = prop->cast_prop<yordle::data::prop::set_prop>(2802337561u);
    if (ptr_probabilityTables != nullptr) {
        for (const auto &entry : ptr_probabilityTables->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                probabilityTables.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxProbabilityTableData>(ptr_entry, 1403439486u));
            }
        }
    }

    auto ptr_times = prop->cast_prop<yordle::data::prop::set_prop>(1567157941u);
    if (ptr_times != nullptr) {
        for (const auto &entry : ptr_times->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                times.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_values = prop->cast_prop<yordle::data::prop::set_prop>(877087803u);
    if (ptr_values != nullptr) {
        for (const auto &entry : ptr_values->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::vector_prop>(entry);
            if (ptr_entry != nullptr) {
                values.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::VfxAnimatedColorVariableData::VfxAnimatedColorVariableData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_probabilityTables = prop->cast_prop<yordle::data::prop::set_prop>(2802337561u);
    if (ptr_probabilityTables != nullptr) {
        for (const auto &entry : ptr_probabilityTables->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                probabilityTables.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxProbabilityTableData>(ptr_entry, 1403439486u));
            }
        }
    }

    auto ptr_times = prop->cast_prop<yordle::data::prop::set_prop>(1567157941u);
    if (ptr_times != nullptr) {
        for (const auto &entry : ptr_times->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                times.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_values = prop->cast_prop<yordle::data::prop::set_prop>(877087803u);
    if (ptr_values != nullptr) {
        for (const auto &entry : ptr_values->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::quaternion_prop>(entry);
            if (ptr_entry != nullptr) {
                values.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::VfxSoftParticleDefinitionData::VfxSoftParticleDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_beginIn = prop->cast_prop<yordle::data::prop::float32_prop>(1804195137u);
    if (ptr_beginIn != nullptr) {
        beginIn = ptr_beginIn->value;
    }

    auto ptr_beginOut = prop->cast_prop<yordle::data::prop::float32_prop>(4078228802u);
    if (ptr_beginOut != nullptr) {
        beginOut = ptr_beginOut->value;
    }

    auto ptr_deltaIn = prop->cast_prop<yordle::data::prop::float32_prop>(526783490u);
    if (ptr_deltaIn != nullptr) {
        deltaIn = ptr_deltaIn->value;
    }

    auto ptr_deltaOut = prop->cast_prop<yordle::data::prop::float32_prop>(2136143771u);
    if (ptr_deltaOut != nullptr) {
        deltaOut = ptr_deltaOut->value;
    }
}

yordle::data::meta::FlexValueVector3::FlexValueVector3(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFlexID = prop->cast_prop<yordle::data::prop::uint32_prop>(1186773642u);
    if (ptr_mFlexID != nullptr) {
        mFlexID = ptr_mFlexID->value;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::inline_structure_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_mValue, 1759261366u);
    }
}

yordle::data::meta::FlexValueVector2::FlexValueVector2(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFlexID = prop->cast_prop<yordle::data::prop::uint32_prop>(1186773642u);
    if (ptr_mFlexID != nullptr) {
        mFlexID = ptr_mFlexID->value;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::inline_structure_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = yordle::data::meta::deserialize<yordle::data::meta::ValueVector2>(ptr_mValue, 1776038985u);
    }
}

yordle::data::meta::FlexValueFloat::FlexValueFloat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFlexID = prop->cast_prop<yordle::data::prop::uint32_prop>(1186773642u);
    if (ptr_mFlexID != nullptr) {
        mFlexID = ptr_mFlexID->value;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::inline_structure_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_mValue, 70254680u);
    }
}

yordle::data::meta::FlexTypeFloat::FlexTypeFloat(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFlexID = prop->cast_prop<yordle::data::prop::uint32_prop>(1186773642u);
    if (ptr_mFlexID != nullptr) {
        mFlexID = ptr_mFlexID->value;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::float32_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = ptr_mValue->value;
    }
}

yordle::data::meta::VfxFieldAccelerationDefinitionData::VfxFieldAccelerationDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_isLocalSpace = prop->cast_prop<yordle::data::prop::bool_prop>(809538110u);
    if (ptr_isLocalSpace != nullptr) {
        isLocalSpace = ptr_isLocalSpace->value;
    }

    auto ptr_acceleration = prop->cast_prop<yordle::data::prop::inline_structure_prop>(799062685u);
    if (ptr_acceleration != nullptr) {
        acceleration = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_acceleration, 1759261366u);
    }
}

yordle::data::meta::VfxFieldAttractionDefinitionData::VfxFieldAttractionDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_position = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2471448074u);
    if (ptr_position != nullptr) {
        position = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_position, 1759261366u);
    }

    auto ptr_radius = prop->cast_prop<yordle::data::prop::inline_structure_prop>(230313139u);
    if (ptr_radius != nullptr) {
        radius = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_radius, 70254680u);
    }

    auto ptr_acceleration = prop->cast_prop<yordle::data::prop::inline_structure_prop>(799062685u);
    if (ptr_acceleration != nullptr) {
        acceleration = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_acceleration, 70254680u);
    }
}

yordle::data::meta::VfxFieldCollectionDefinitionData::VfxFieldCollectionDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_fieldAccelerationDefinitions = prop->cast_prop<yordle::data::prop::set_prop>(1566632327u);
    if (ptr_fieldAccelerationDefinitions != nullptr) {
        for (const auto &entry : ptr_fieldAccelerationDefinitions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                fieldAccelerationDefinitions.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxFieldAccelerationDefinitionData>(ptr_entry, 177533908u));
            }
        }
    }

    auto ptr_fieldAttractionDefinitions = prop->cast_prop<yordle::data::prop::set_prop>(3286520488u);
    if (ptr_fieldAttractionDefinitions != nullptr) {
        for (const auto &entry : ptr_fieldAttractionDefinitions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                fieldAttractionDefinitions.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxFieldAttractionDefinitionData>(ptr_entry, 443947005u));
            }
        }
    }

    auto ptr_fieldDragDefinitions = prop->cast_prop<yordle::data::prop::set_prop>(3057240217u);
    if (ptr_fieldDragDefinitions != nullptr) {
        for (const auto &entry : ptr_fieldDragDefinitions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                fieldDragDefinitions.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxFieldDragDefinitionData>(ptr_entry, 3880844002u));
            }
        }
    }

    auto ptr_fieldNoiseDefinitions = prop->cast_prop<yordle::data::prop::set_prop>(4198039623u);
    if (ptr_fieldNoiseDefinitions != nullptr) {
        for (const auto &entry : ptr_fieldNoiseDefinitions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                fieldNoiseDefinitions.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxFieldNoiseDefinitionData>(ptr_entry, 1666037840u));
            }
        }
    }

    auto ptr_fieldOrbitalDefinitions = prop->cast_prop<yordle::data::prop::set_prop>(1787848546u);
    if (ptr_fieldOrbitalDefinitions != nullptr) {
        for (const auto &entry : ptr_fieldOrbitalDefinitions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                fieldOrbitalDefinitions.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxFieldOrbitalDefinitionData>(ptr_entry, 3061509743u));
            }
        }
    }
}

yordle::data::meta::VfxFieldDragDefinitionData::VfxFieldDragDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_position = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2471448074u);
    if (ptr_position != nullptr) {
        position = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_position, 1759261366u);
    }

    auto ptr_radius = prop->cast_prop<yordle::data::prop::inline_structure_prop>(230313139u);
    if (ptr_radius != nullptr) {
        radius = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_radius, 70254680u);
    }

    auto ptr_strength = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3766098096u);
    if (ptr_strength != nullptr) {
        strength = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_strength, 70254680u);
    }
}

yordle::data::meta::VfxFieldNoiseDefinitionData::VfxFieldNoiseDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_position = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2471448074u);
    if (ptr_position != nullptr) {
        position = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_position, 1759261366u);
    }

    auto ptr_radius = prop->cast_prop<yordle::data::prop::inline_structure_prop>(230313139u);
    if (ptr_radius != nullptr) {
        radius = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_radius, 70254680u);
    }

    auto ptr_frequency = prop->cast_prop<yordle::data::prop::inline_structure_prop>(800267265u);
    if (ptr_frequency != nullptr) {
        frequency = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_frequency, 70254680u);
    }

    auto ptr_velocityDelta = prop->cast_prop<yordle::data::prop::inline_structure_prop>(195920292u);
    if (ptr_velocityDelta != nullptr) {
        velocityDelta = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_velocityDelta, 70254680u);
    }

    auto ptr_axisFraction = prop->cast_prop<yordle::data::prop::vector_prop>(3473668094u);
    if (ptr_axisFraction != nullptr) {
        axisFraction = ptr_axisFraction->value;
    }
}

yordle::data::meta::VfxFieldOrbitalDefinitionData::VfxFieldOrbitalDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_isLocalSpace = prop->cast_prop<yordle::data::prop::bool_prop>(809538110u);
    if (ptr_isLocalSpace != nullptr) {
        isLocalSpace = ptr_isLocalSpace->value;
    }

    auto ptr_direction = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3748513642u);
    if (ptr_direction != nullptr) {
        direction = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_direction, 1759261366u);
    }
}

yordle::data::meta::IVfxMaterialDriver::IVfxMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VfxMaterialOverrideDefinitionData::VfxMaterialOverrideDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_priority = prop->cast_prop<yordle::data::prop::int32_prop>(2498028297u);
    if (ptr_priority != nullptr) {
        priority = ptr_priority->value;
    }

    auto ptr_subMeshName = prop->cast_prop<yordle::data::prop::optional_prop>(820886375u);
    if (ptr_subMeshName != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(ptr_subMeshName->value);
        if(ptr_entry != nullptr) {
            subMeshName = ptr_entry->value;
        }
    }

    auto ptr_overrideBlendMode = prop->cast_prop<yordle::data::prop::uint32_prop>(1421063571u);
    if (ptr_overrideBlendMode != nullptr) {
        overrideBlendMode = ptr_overrideBlendMode->value;
    }

    auto ptr_baseTexture = prop->cast_prop<yordle::data::prop::string_prop>(2722972947u);
    if (ptr_baseTexture != nullptr) {
        baseTexture = ptr_baseTexture->value;
    }

    auto ptr_glossTexture = prop->cast_prop<yordle::data::prop::string_prop>(3728192392u);
    if (ptr_glossTexture != nullptr) {
        glossTexture = ptr_glossTexture->value;
    }

    auto ptr_transitionTexture = prop->cast_prop<yordle::data::prop::string_prop>(405112181u);
    if (ptr_transitionTexture != nullptr) {
        transitionTexture = ptr_transitionTexture->value;
    }

    auto ptr_transitionSample = prop->cast_prop<yordle::data::prop::float32_prop>(1989024792u);
    if (ptr_transitionSample != nullptr) {
        transitionSample = ptr_transitionSample->value;
    }

    auto ptr_transitionSource = prop->cast_prop<yordle::data::prop::uint32_prop>(3331829535u);
    if (ptr_transitionSource != nullptr) {
        transitionSource = ptr_transitionSource->value;
    }

    auto ptr_material = prop->cast_prop<yordle::data::prop::reference_prop>(3538210912u);
    if (ptr_material != nullptr) {
        material = ptr_material->value;
    }
}

yordle::data::meta::VfxProbabilityTableData::VfxProbabilityTableData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_keyTimes = prop->cast_prop<yordle::data::prop::set_prop>(1086542298u);
    if (ptr_keyTimes != nullptr) {
        for (const auto &entry : ptr_keyTimes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                keyTimes.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_keyValues = prop->cast_prop<yordle::data::prop::set_prop>(3830150018u);
    if (ptr_keyValues != nullptr) {
        for (const auto &entry : ptr_keyValues->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                keyValues.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_singleValue = prop->cast_prop<yordle::data::prop::float32_prop>(2905890262u);
    if (ptr_singleValue != nullptr) {
        singleValue = ptr_singleValue->value;
    }
}

yordle::data::meta::VfxMigrationResources::VfxMigrationResources(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_resourceMap = prop->cast_prop<yordle::data::prop::map_prop>(3539306273u);
    if (ptr_resourceMap != nullptr) {
        for (const auto &pair : ptr_resourceMap->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                resourceMap[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::VfxAssetRemap::VfxAssetRemap(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_type = prop->cast_prop<yordle::data::prop::uint32_prop>(1361572173u);
    if (ptr_type != nullptr) {
        type = ptr_type->value;
    }

    auto ptr_oldAsset = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2085612194u);
    if (ptr_oldAsset != nullptr) {
        oldAsset = ptr_oldAsset->value;
    }

    auto ptr_newAsset = prop->cast_prop<yordle::data::prop::string_prop>(2577864719u);
    if (ptr_newAsset != nullptr) {
        newAsset = ptr_newAsset->value;
    }
}

yordle::data::meta::VfxColorOverLifeMaterialDriver::VfxColorOverLifeMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IVfxMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_frequency = prop->cast_prop<yordle::data::prop::uint8_prop>(800267265u);
    if (ptr_frequency != nullptr) {
        frequency = ptr_frequency->value;
    }

    auto ptr_colors = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4176775601u);
    if (ptr_colors != nullptr) {
        colors = yordle::data::meta::deserialize<yordle::data::meta::VfxAnimatedColorVariableData>(ptr_colors, 1128908277u);
    }
}

yordle::data::meta::VfxShape::VfxShape(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_birthTranslation = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4286385729u);
    if (ptr_birthTranslation != nullptr) {
        birthTranslation = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_birthTranslation, 1759261366u);
    }

    auto ptr_emitOffset = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3857869021u);
    if (ptr_emitOffset != nullptr) {
        emitOffset = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_emitOffset, 1759261366u);
    }

    auto ptr_emitRotationAngles = prop->cast_prop<yordle::data::prop::set_prop>(133437496u);
    if (ptr_emitRotationAngles != nullptr) {
        for (const auto &entry : ptr_emitRotationAngles->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                emitRotationAngles.emplace(yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_entry, 70254680u));
            }
        }
    }

    auto ptr_emitRotationAxes = prop->cast_prop<yordle::data::prop::set_prop>(3514342501u);
    if (ptr_emitRotationAxes != nullptr) {
        for (const auto &entry : ptr_emitRotationAxes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::vector_prop>(entry);
            if (ptr_entry != nullptr) {
                emitRotationAxes.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::VfxEmitterDefinitionData::VfxEmitterDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_soundOnCreateName = prop->cast_prop<yordle::data::prop::string_prop>(2483486550u);
    if (ptr_soundOnCreateName != nullptr) {
        soundOnCreateName = ptr_soundOnCreateName->value;
    }

    auto ptr_soundPersistentName = prop->cast_prop<yordle::data::prop::string_prop>(2596207722u);
    if (ptr_soundPersistentName != nullptr) {
        soundPersistentName = ptr_soundPersistentName->value;
    }

    auto ptr_voiceOverOnCreateName = prop->cast_prop<yordle::data::prop::string_prop>(1368414985u);
    if (ptr_voiceOverOnCreateName != nullptr) {
        voiceOverOnCreateName = ptr_voiceOverOnCreateName->value;
    }

    auto ptr_voiceOverPersistentName = prop->cast_prop<yordle::data::prop::string_prop>(391068981u);
    if (ptr_voiceOverPersistentName != nullptr) {
        voiceOverPersistentName = ptr_voiceOverPersistentName->value;
    }

    auto ptr_timeBeforeFirstEmission = prop->cast_prop<yordle::data::prop::float32_prop>(585589692u);
    if (ptr_timeBeforeFirstEmission != nullptr) {
        timeBeforeFirstEmission = ptr_timeBeforeFirstEmission->value;
    }

    auto ptr_xcef2ba70 = prop->cast_prop<yordle::data::prop::float32_prop>(3472013936u);
    if (ptr_xcef2ba70 != nullptr) {
        xcef2ba70 = ptr_xcef2ba70->value;
    }

    auto ptr_rate = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2927860839u);
    if (ptr_rate != nullptr) {
        rate = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_rate, 70254680u);
    }

    auto ptr_x538effa4 = prop->cast_prop<yordle::data::prop::bit_prop>(1401880484u);
    if (ptr_x538effa4 != nullptr) {
        x538effa4 = (ptr_x538effa4->value & 8) == 8;
        x538effa4 = ptr_x538effa4->value;
    }

    auto ptr_particleLifetime = prop->cast_prop<yordle::data::prop::inline_structure_prop>(710223508u);
    if (ptr_particleLifetime != nullptr) {
        particleLifetime = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_particleLifetime, 70254680u);
    }

    auto ptr_particleLingerType = prop->cast_prop<yordle::data::prop::uint8_prop>(948533348u);
    if (ptr_particleLingerType != nullptr) {
        particleLingerType = ptr_particleLingerType->value;
    }

    auto ptr_particleLinger = prop->cast_prop<yordle::data::prop::optional_prop>(607245356u);
    if (ptr_particleLinger != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_particleLinger->value);
        if(ptr_entry != nullptr) {
            particleLinger = ptr_entry->value;
        }
    }

    auto ptr_lifetime = prop->cast_prop<yordle::data::prop::optional_prop>(1376955374u);
    if (ptr_lifetime != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_lifetime->value);
        if(ptr_entry != nullptr) {
            lifetime = ptr_entry->value;
        }
    }

    auto ptr_isSingleParticle = prop->cast_prop<yordle::data::prop::bit_prop>(1119715179u);
    if (ptr_isSingleParticle != nullptr) {
        isSingleParticle = (ptr_isSingleParticle->value & 16) == 16;
        isSingleParticle = ptr_isSingleParticle->value;
    }

    auto ptr_emitterLinger = prop->cast_prop<yordle::data::prop::optional_prop>(1002806966u);
    if (ptr_emitterLinger != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_emitterLinger->value);
        if(ptr_entry != nullptr) {
            emitterLinger = ptr_entry->value;
        }
    }

    auto ptr_excludedAttachmentTypes = prop->cast_prop<yordle::data::prop::set_prop>(4200859411u);
    if (ptr_excludedAttachmentTypes != nullptr) {
        for (const auto &entry : ptr_excludedAttachmentTypes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                excludedAttachmentTypes.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_period = prop->cast_prop<yordle::data::prop::optional_prop>(2580104964u);
    if (ptr_period != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_period->value);
        if(ptr_entry != nullptr) {
            period = ptr_entry->value;
        }
    }

    auto ptr_timeActiveDuringPeriod = prop->cast_prop<yordle::data::prop::optional_prop>(400147918u);
    if (ptr_timeActiveDuringPeriod != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_timeActiveDuringPeriod->value);
        if(ptr_entry != nullptr) {
            timeActiveDuringPeriod = ptr_entry->value;
        }
    }

    auto ptr_rateByVelocityFunction = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1354185085u);
    if (ptr_rateByVelocityFunction != nullptr) {
        rateByVelocityFunction = yordle::data::meta::deserialize<yordle::data::meta::ValueVector2>(ptr_rateByVelocityFunction, 1776038985u);
    }

    auto ptr_MaximumRateByVelocity = prop->cast_prop<yordle::data::prop::optional_prop>(3338279773u);
    if (ptr_MaximumRateByVelocity != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_MaximumRateByVelocity->value);
        if(ptr_entry != nullptr) {
            MaximumRateByVelocity = ptr_entry->value;
        }
    }

    auto ptr_offsetLifetimeScaling = prop->cast_prop<yordle::data::prop::vector_prop>(1743020646u);
    if (ptr_offsetLifetimeScaling != nullptr) {
        offsetLifetimeScaling = ptr_offsetLifetimeScaling->value;
    }

    auto ptr_offsetLifeScalingSymmetryMode = prop->cast_prop<yordle::data::prop::uint8_prop>(1302105276u);
    if (ptr_offsetLifeScalingSymmetryMode != nullptr) {
        offsetLifeScalingSymmetryMode = ptr_offsetLifeScalingSymmetryMode->value;
    }

    auto ptr_doesLifetimeScale = prop->cast_prop<yordle::data::prop::bit_prop>(2041100123u);
    if (ptr_doesLifetimeScale != nullptr) {
        doesLifetimeScale = (ptr_doesLifetimeScale->value & 64) == 64;
        doesLifetimeScale = ptr_doesLifetimeScale->value;
    }

    auto ptr_flexRate = prop->cast_prop<yordle::data::prop::structure_prop>(1999564000u);
    if (ptr_flexRate != nullptr) {
        flexRate = yordle::data::meta::deserialize<yordle::data::meta::FlexValueFloat>(ptr_flexRate, 1370198255u);
    }

    auto ptr_flexParticleLifetime = prop->cast_prop<yordle::data::prop::structure_prop>(1875177007u);
    if (ptr_flexParticleLifetime != nullptr) {
        flexParticleLifetime = yordle::data::meta::deserialize<yordle::data::meta::FlexValueFloat>(ptr_flexParticleLifetime, 1370198255u);
    }

    auto ptr_doesParticleLifetimeScale = prop->cast_prop<yordle::data::prop::bit_prop>(283792845u);
    if (ptr_doesParticleLifetimeScale != nullptr) {
        doesParticleLifetimeScale = (ptr_doesParticleLifetimeScale->value & 32) == 32;
        doesParticleLifetimeScale = ptr_doesParticleLifetimeScale->value;
    }

    auto ptr_emissionSurfaceDefinition = prop->cast_prop<yordle::data::prop::structure_prop>(1414715544u);
    if (ptr_emissionSurfaceDefinition != nullptr) {
        emissionSurfaceDefinition = yordle::data::meta::deserialize<yordle::data::meta::VfxEmissionSurfaceData>(ptr_emissionSurfaceDefinition, 3217219891u);
    }

    auto ptr_childParticleSetDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2687919304u);
    if (ptr_childParticleSetDefinition != nullptr) {
        childParticleSetDefinition = yordle::data::meta::deserialize<yordle::data::meta::VfxChildParticleSetDefinitionData>(ptr_childParticleSetDefinition, 3038774362u);
    }

    auto ptr_fieldCollectionDefinition = prop->cast_prop<yordle::data::prop::structure_prop>(2924424250u);
    if (ptr_fieldCollectionDefinition != nullptr) {
        fieldCollectionDefinition = yordle::data::meta::deserialize<yordle::data::meta::VfxFieldCollectionDefinitionData>(ptr_fieldCollectionDefinition, 3149931448u);
    }

    auto ptr_emitterName = prop->cast_prop<yordle::data::prop::string_prop>(1025882318u);
    if (ptr_emitterName != nullptr) {
        emitterName = ptr_emitterName->value;
    }

    auto ptr_disabled = prop->cast_prop<yordle::data::prop::bool_prop>(871591685u);
    if (ptr_disabled != nullptr) {
        disabled = ptr_disabled->value;
    }

    auto ptr_importance = prop->cast_prop<yordle::data::prop::uint8_prop>(3109120623u);
    if (ptr_importance != nullptr) {
        importance = ptr_importance->value;
    }

    auto ptr_colorblindVisibility = prop->cast_prop<yordle::data::prop::uint8_prop>(1183687955u);
    if (ptr_colorblindVisibility != nullptr) {
        colorblindVisibility = ptr_colorblindVisibility->value;
    }

    auto ptr_keywordsRequired = prop->cast_prop<yordle::data::prop::set_prop>(339958704u);
    if (ptr_keywordsRequired != nullptr) {
        for (const auto &entry : ptr_keywordsRequired->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                keywordsRequired.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_keywordsExcluded = prop->cast_prop<yordle::data::prop::set_prop>(3245931207u);
    if (ptr_keywordsExcluded != nullptr) {
        for (const auto &entry : ptr_keywordsExcluded->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                keywordsExcluded.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_keywordsIncluded = prop->cast_prop<yordle::data::prop::set_prop>(1204559849u);
    if (ptr_keywordsIncluded != nullptr) {
        for (const auto &entry : ptr_keywordsIncluded->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                keywordsIncluded.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_spectatorPolicy = prop->cast_prop<yordle::data::prop::uint8_prop>(3864561452u);
    if (ptr_spectatorPolicy != nullptr) {
        spectatorPolicy = ptr_spectatorPolicy->value;
    }

    auto ptr_censorPolicy = prop->cast_prop<yordle::data::prop::uint8_prop>(590183341u);
    if (ptr_censorPolicy != nullptr) {
        censorPolicy = ptr_censorPolicy->value;
    }

    auto ptr_translationOverride = prop->cast_prop<yordle::data::prop::vector_prop>(3010264884u);
    if (ptr_translationOverride != nullptr) {
        translationOverride = ptr_translationOverride->value;
    }

    auto ptr_rotationOverride = prop->cast_prop<yordle::data::prop::vector_prop>(191882543u);
    if (ptr_rotationOverride != nullptr) {
        rotationOverride = ptr_rotationOverride->value;
    }

    auto ptr_birthOrbitalVelocity = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1363361524u);
    if (ptr_birthOrbitalVelocity != nullptr) {
        birthOrbitalVelocity = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_birthOrbitalVelocity, 1759261366u);
    }

    auto ptr_birthVelocity = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4198607757u);
    if (ptr_birthVelocity != nullptr) {
        birthVelocity = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_birthVelocity, 1759261366u);
    }

    auto ptr_birthDrag = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2188761752u);
    if (ptr_birthDrag != nullptr) {
        birthDrag = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_birthDrag, 1759261366u);
    }

    auto ptr_birthAcceleration = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2723004782u);
    if (ptr_birthAcceleration != nullptr) {
        birthAcceleration = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_birthAcceleration, 1759261366u);
    }

    auto ptr_velocity = prop->cast_prop<yordle::data::prop::inline_structure_prop>(846470194u);
    if (ptr_velocity != nullptr) {
        velocity = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_velocity, 1759261366u);
    }

    auto ptr_drag = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3096186179u);
    if (ptr_drag != nullptr) {
        drag = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_drag, 1759261366u);
    }

    auto ptr_acceleration = prop->cast_prop<yordle::data::prop::inline_structure_prop>(799062685u);
    if (ptr_acceleration != nullptr) {
        acceleration = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_acceleration, 1759261366u);
    }

    auto ptr_UseLingerVelocity = prop->cast_prop<yordle::data::prop::bit_prop>(848541616u);
    if (ptr_UseLingerVelocity != nullptr) {
        UseLingerVelocity = (ptr_UseLingerVelocity->value & 2) == 2;
        UseLingerVelocity = ptr_UseLingerVelocity->value;
    }

    auto ptr_lingerVelocity = prop->cast_prop<yordle::data::prop::inline_structure_prop>(160052109u);
    if (ptr_lingerVelocity != nullptr) {
        lingerVelocity = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_lingerVelocity, 1759261366u);
    }

    auto ptr_UseLingerDrag = prop->cast_prop<yordle::data::prop::bit_prop>(3007716357u);
    if (ptr_UseLingerDrag != nullptr) {
        UseLingerDrag = (ptr_UseLingerDrag->value & 16) == 16;
        UseLingerDrag = ptr_UseLingerDrag->value;
    }

    auto ptr_lingerDrag = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4207272600u);
    if (ptr_lingerDrag != nullptr) {
        lingerDrag = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_lingerDrag, 1759261366u);
    }

    auto ptr_UseLingerAcceleration = prop->cast_prop<yordle::data::prop::bit_prop>(4071846627u);
    if (ptr_UseLingerAcceleration != nullptr) {
        UseLingerAcceleration = (ptr_UseLingerAcceleration->value & 4) == 4;
        UseLingerAcceleration = ptr_UseLingerAcceleration->value;
    }

    auto ptr_lingerAcceleration = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3751201134u);
    if (ptr_lingerAcceleration != nullptr) {
        lingerAcceleration = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_lingerAcceleration, 1759261366u);
    }

    auto ptr_flexBirthVelocity = prop->cast_prop<yordle::data::prop::structure_prop>(2673908472u);
    if (ptr_flexBirthVelocity != nullptr) {
        flexBirthVelocity = yordle::data::meta::deserialize<yordle::data::meta::FlexValueVector3>(ptr_flexBirthVelocity, 1113621825u);
    }

    auto ptr_worldAcceleration = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3952758287u);
    if (ptr_worldAcceleration != nullptr) {
        worldAcceleration = yordle::data::meta::deserialize<yordle::data::meta::IntegratedValueVector3>(ptr_worldAcceleration, 1825341187u);
    }

    auto ptr_shape = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2646858022u);
    if (ptr_shape != nullptr) {
        shape = yordle::data::meta::deserialize<yordle::data::meta::VfxShape>(ptr_shape, 2010092456u);
    }

    auto ptr_bindWeight = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3393217302u);
    if (ptr_bindWeight != nullptr) {
        bindWeight = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_bindWeight, 70254680u);
    }

    auto ptr_scaleEmitOffsetByBoundObjectSize = prop->cast_prop<yordle::data::prop::float32_prop>(3233764894u);
    if (ptr_scaleEmitOffsetByBoundObjectSize != nullptr) {
        scaleEmitOffsetByBoundObjectSize = ptr_scaleEmitOffsetByBoundObjectSize->value;
    }

    auto ptr_emissionMeshScale = prop->cast_prop<yordle::data::prop::float32_prop>(3182003607u);
    if (ptr_emissionMeshScale != nullptr) {
        emissionMeshScale = ptr_emissionMeshScale->value;
    }

    auto ptr_emissionMeshName = prop->cast_prop<yordle::data::prop::string_prop>(557171924u);
    if (ptr_emissionMeshName != nullptr) {
        emissionMeshName = ptr_emissionMeshName->value;
    }

    auto ptr_scaleEmitOffsetByBoundObjectHeight = prop->cast_prop<yordle::data::prop::float32_prop>(464554200u);
    if (ptr_scaleEmitOffsetByBoundObjectHeight != nullptr) {
        scaleEmitOffsetByBoundObjectHeight = ptr_scaleEmitOffsetByBoundObjectHeight->value;
    }

    auto ptr_scaleEmitOffsetByBoundObjectRadius = prop->cast_prop<yordle::data::prop::float32_prop>(2055028341u);
    if (ptr_scaleEmitOffsetByBoundObjectRadius != nullptr) {
        scaleEmitOffsetByBoundObjectRadius = ptr_scaleEmitOffsetByBoundObjectRadius->value;
    }

    auto ptr_flexOffset = prop->cast_prop<yordle::data::prop::structure_prop>(3808923573u);
    if (ptr_flexOffset != nullptr) {
        flexOffset = yordle::data::meta::deserialize<yordle::data::meta::FlexValueVector3>(ptr_flexOffset, 1113621825u);
    }

    auto ptr_flexBirthTranslation = prop->cast_prop<yordle::data::prop::structure_prop>(2397835542u);
    if (ptr_flexBirthTranslation != nullptr) {
        flexBirthTranslation = yordle::data::meta::deserialize<yordle::data::meta::FlexValueVector3>(ptr_flexBirthTranslation, 1113621825u);
    }

    auto ptr_material = prop->cast_prop<yordle::data::prop::reference_prop>(3538210912u);
    if (ptr_material != nullptr) {
        material = ptr_material->value;
    }

    auto ptr_materialDrivers = prop->cast_prop<yordle::data::prop::map_prop>(3305964759u);
    if (ptr_materialDrivers != nullptr) {
        for (const auto &pair : ptr_materialDrivers->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                materialDrivers[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::IVfxMaterialDriver>(ptr_value, 37724083u);
            }
        }
    }

    auto ptr_renderPhaseOverride = prop->cast_prop<yordle::data::prop::uint8_prop>(1996186992u);
    if (ptr_renderPhaseOverride != nullptr) {
        renderPhaseOverride = ptr_renderPhaseOverride->value;
    }

    auto ptr_primitive = prop->cast_prop<yordle::data::prop::structure_prop>(8066294u);
    if (ptr_primitive != nullptr) {
        primitive = yordle::data::meta::deserialize<yordle::data::meta::VfxPrimitiveBase>(ptr_primitive, 3801322209u);
    }

    auto ptr_falloffTexture = prop->cast_prop<yordle::data::prop::string_prop>(2780351988u);
    if (ptr_falloffTexture != nullptr) {
        falloffTexture = ptr_falloffTexture->value;
    }

    auto ptr_particleColorTexture = prop->cast_prop<yordle::data::prop::string_prop>(3043919889u);
    if (ptr_particleColorTexture != nullptr) {
        particleColorTexture = ptr_particleColorTexture->value;
    }

    auto ptr_blendMode = prop->cast_prop<yordle::data::prop::uint8_prop>(4202188459u);
    if (ptr_blendMode != nullptr) {
        blendMode = ptr_blendMode->value;
    }

    auto ptr_birthColor = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2211310241u);
    if (ptr_birthColor != nullptr) {
        birthColor = yordle::data::meta::deserialize<yordle::data::meta::ValueColor>(ptr_birthColor, 122655197u);
    }

    auto ptr_color = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1031692888u);
    if (ptr_color != nullptr) {
        color = yordle::data::meta::deserialize<yordle::data::meta::ValueColor>(ptr_color, 122655197u);
    }

    auto ptr_useLingerColor = prop->cast_prop<yordle::data::prop::bit_prop>(452491014u);
    if (ptr_useLingerColor != nullptr) {
        useLingerColor = (ptr_useLingerColor->value & 8) == 8;
        useLingerColor = ptr_useLingerColor->value;
    }

    auto ptr_lingerColor = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3922363041u);
    if (ptr_lingerColor != nullptr) {
        lingerColor = yordle::data::meta::deserialize<yordle::data::meta::ValueColor>(ptr_lingerColor, 122655197u);
    }

    auto ptr_pass = prop->cast_prop<yordle::data::prop::int16_prop>(2071622424u);
    if (ptr_pass != nullptr) {
        pass = ptr_pass->value;
    }

    auto ptr_meshRenderFlags = prop->cast_prop<yordle::data::prop::uint8_prop>(431879391u);
    if (ptr_meshRenderFlags != nullptr) {
        meshRenderFlags = ptr_meshRenderFlags->value;
    }

    auto ptr_colorLookUpTypeX = prop->cast_prop<yordle::data::prop::uint8_prop>(628404258u);
    if (ptr_colorLookUpTypeX != nullptr) {
        colorLookUpTypeX = ptr_colorLookUpTypeX->value;
    }

    auto ptr_colorLookUpTypeY = prop->cast_prop<yordle::data::prop::uint8_prop>(645181877u);
    if (ptr_colorLookUpTypeY != nullptr) {
        colorLookUpTypeY = ptr_colorLookUpTypeY->value;
    }

    auto ptr_colorLookUpScales = prop->cast_prop<yordle::data::prop::point_prop>(4029404237u);
    if (ptr_colorLookUpScales != nullptr) {
        colorLookUpScales = ptr_colorLookUpScales->value;
    }

    auto ptr_alphaRef = prop->cast_prop<yordle::data::prop::uint8_prop>(3113423092u);
    if (ptr_alphaRef != nullptr) {
        alphaRef = ptr_alphaRef->value;
    }

    auto ptr_colorLookUpOffsets = prop->cast_prop<yordle::data::prop::point_prop>(3445240382u);
    if (ptr_colorLookUpOffsets != nullptr) {
        colorLookUpOffsets = ptr_colorLookUpOffsets->value;
    }

    auto ptr_softParticleParams = prop->cast_prop<yordle::data::prop::structure_prop>(3216043997u);
    if (ptr_softParticleParams != nullptr) {
        softParticleParams = yordle::data::meta::deserialize<yordle::data::meta::VfxSoftParticleDefinitionData>(ptr_softParticleParams, 497696688u);
    }

    auto ptr_colorRenderFlags = prop->cast_prop<yordle::data::prop::uint8_prop>(358556747u);
    if (ptr_colorRenderFlags != nullptr) {
        colorRenderFlags = ptr_colorRenderFlags->value;
    }

    auto ptr_censorModulateValue = prop->cast_prop<yordle::data::prop::quaternion_prop>(146090009u);
    if (ptr_censorModulateValue != nullptr) {
        censorModulateValue = ptr_censorModulateValue->value;
    }

    auto ptr_sliceTechniqueRange = prop->cast_prop<yordle::data::prop::float32_prop>(173979394u);
    if (ptr_sliceTechniqueRange != nullptr) {
        sliceTechniqueRange = ptr_sliceTechniqueRange->value;
    }

    auto ptr_modulationFactor = prop->cast_prop<yordle::data::prop::quaternion_prop>(1704114260u);
    if (ptr_modulationFactor != nullptr) {
        modulationFactor = ptr_modulationFactor->value;
    }

    auto ptr_alphaErosionDefinition = prop->cast_prop<yordle::data::prop::structure_prop>(3295031301u);
    if (ptr_alphaErosionDefinition != nullptr) {
        alphaErosionDefinition = yordle::data::meta::deserialize<yordle::data::meta::VfxAlphaErosionDefinitionData>(ptr_alphaErosionDefinition, 1585720219u);
    }

    auto ptr_reflectionDefinition = prop->cast_prop<yordle::data::prop::structure_prop>(1064658893u);
    if (ptr_reflectionDefinition != nullptr) {
        reflectionDefinition = yordle::data::meta::deserialize<yordle::data::meta::VfxReflectionDefinitionData>(ptr_reflectionDefinition, 1091758723u);
    }

    auto ptr_distortionDefinition = prop->cast_prop<yordle::data::prop::structure_prop>(3162545371u);
    if (ptr_distortionDefinition != nullptr) {
        distortionDefinition = yordle::data::meta::deserialize<yordle::data::meta::VfxDistortionDefinitionData>(ptr_distortionDefinition, 1238702953u);
    }

    auto ptr_isTexturePixelated = prop->cast_prop<yordle::data::prop::bool_prop>(3329156504u);
    if (ptr_isTexturePixelated != nullptr) {
        isTexturePixelated = ptr_isTexturePixelated->value;
    }

    auto ptr_uvParallaxScale = prop->cast_prop<yordle::data::prop::float32_prop>(4137197537u);
    if (ptr_uvParallaxScale != nullptr) {
        uvParallaxScale = ptr_uvParallaxScale->value;
    }

    auto ptr_depthBiasFactors = prop->cast_prop<yordle::data::prop::point_prop>(1739970345u);
    if (ptr_depthBiasFactors != nullptr) {
        depthBiasFactors = ptr_depthBiasFactors->value;
    }

    auto ptr_disableBackfaceCull = prop->cast_prop<yordle::data::prop::bool_prop>(1016188605u);
    if (ptr_disableBackfaceCull != nullptr) {
        disableBackfaceCull = ptr_disableBackfaceCull->value;
    }

    auto ptr_miscRenderFlags = prop->cast_prop<yordle::data::prop::uint8_prop>(1701035752u);
    if (ptr_miscRenderFlags != nullptr) {
        miscRenderFlags = ptr_miscRenderFlags->value;
    }

    auto ptr_stencilMode = prop->cast_prop<yordle::data::prop::uint8_prop>(451903612u);
    if (ptr_stencilMode != nullptr) {
        stencilMode = ptr_stencilMode->value;
    }

    auto ptr_stencilRef = prop->cast_prop<yordle::data::prop::uint8_prop>(2068046572u);
    if (ptr_stencilRef != nullptr) {
        stencilRef = ptr_stencilRef->value;
    }

    auto ptr_uvScrollAlphaMult = prop->cast_prop<yordle::data::prop::bit_prop>(3946508263u);
    if (ptr_uvScrollAlphaMult != nullptr) {
        uvScrollAlphaMult = (ptr_uvScrollAlphaMult->value & 1) == 1;
        uvScrollAlphaMult = ptr_uvScrollAlphaMult->value;
    }

    auto ptr_particleIsLocalOrientation = prop->cast_prop<yordle::data::prop::bit_prop>(937277300u);
    if (ptr_particleIsLocalOrientation != nullptr) {
        particleIsLocalOrientation = (ptr_particleIsLocalOrientation->value & 2) == 2;
        particleIsLocalOrientation = ptr_particleIsLocalOrientation->value;
    }

    auto ptr_isDirectionOriented = prop->cast_prop<yordle::data::prop::bit_prop>(3724322854u);
    if (ptr_isDirectionOriented != nullptr) {
        isDirectionOriented = (ptr_isDirectionOriented->value & 4) == 4;
        isDirectionOriented = ptr_isDirectionOriented->value;
    }

    auto ptr_isUniformScale = prop->cast_prop<yordle::data::prop::bit_prop>(895082843u);
    if (ptr_isUniformScale != nullptr) {
        isUniformScale = (ptr_isUniformScale->value & 8) == 8;
        isUniformScale = ptr_isUniformScale->value;
    }

    auto ptr_hasPostRotateOrientation = prop->cast_prop<yordle::data::prop::bit_prop>(3985060700u);
    if (ptr_hasPostRotateOrientation != nullptr) {
        hasPostRotateOrientation = (ptr_hasPostRotateOrientation->value & 16) == 16;
        hasPostRotateOrientation = ptr_hasPostRotateOrientation->value;
    }

    auto ptr_isRandomStartFrame = prop->cast_prop<yordle::data::prop::bit_prop>(3768409787u);
    if (ptr_isRandomStartFrame != nullptr) {
        isRandomStartFrame = (ptr_isRandomStartFrame->value & 32) == 32;
        isRandomStartFrame = ptr_isRandomStartFrame->value;
    }

    auto ptr_isRandomStartFrameMult = prop->cast_prop<yordle::data::prop::bit_prop>(274016829u);
    if (ptr_isRandomStartFrameMult != nullptr) {
        isRandomStartFrameMult = (ptr_isRandomStartFrameMult->value & 64) == 64;
        isRandomStartFrameMult = ptr_isRandomStartFrameMult->value;
    }

    auto ptr_doesCastShadow = prop->cast_prop<yordle::data::prop::bit_prop>(3038085223u);
    if (ptr_doesCastShadow != nullptr) {
        doesCastShadow = (ptr_doesCastShadow->value & 128) == 128;
        doesCastShadow = ptr_doesCastShadow->value;
    }

    auto ptr_isRotationEnabled = prop->cast_prop<yordle::data::prop::bit_prop>(2368611444u);
    if (ptr_isRotationEnabled != nullptr) {
        isRotationEnabled = (ptr_isRotationEnabled->value & 1) == 1;
        isRotationEnabled = ptr_isRotationEnabled->value;
    }

    auto ptr_uvScrollClamp = prop->cast_prop<yordle::data::prop::bit_prop>(2791509514u);
    if (ptr_uvScrollClamp != nullptr) {
        uvScrollClamp = (ptr_uvScrollClamp->value & 2) == 2;
        uvScrollClamp = ptr_uvScrollClamp->value;
    }

    auto ptr_uvScrollClampMult = prop->cast_prop<yordle::data::prop::bit_prop>(2059647136u);
    if (ptr_uvScrollClampMult != nullptr) {
        uvScrollClampMult = (ptr_uvScrollClampMult->value & 4) == 4;
        uvScrollClampMult = ptr_uvScrollClampMult->value;
    }

    auto ptr_isFollowingTerrain = prop->cast_prop<yordle::data::prop::bit_prop>(3131498697u);
    if (ptr_isFollowingTerrain != nullptr) {
        isFollowingTerrain = (ptr_isFollowingTerrain->value & 8) == 8;
        isFollowingTerrain = ptr_isFollowingTerrain->value;
    }

    auto ptr_isGroundLayer = prop->cast_prop<yordle::data::prop::bit_prop>(668207363u);
    if (ptr_isGroundLayer != nullptr) {
        isGroundLayer = (ptr_isGroundLayer->value & 16) == 16;
        isGroundLayer = ptr_isGroundLayer->value;
    }

    auto ptr_useEmissionMeshNormalForBirth = prop->cast_prop<yordle::data::prop::bit_prop>(2074613737u);
    if (ptr_useEmissionMeshNormalForBirth != nullptr) {
        useEmissionMeshNormalForBirth = (ptr_useEmissionMeshNormalForBirth->value & 32) == 32;
        useEmissionMeshNormalForBirth = ptr_useEmissionMeshNormalForBirth->value;
    }

    auto ptr_useNavmeshMask = prop->cast_prop<yordle::data::prop::bit_prop>(3722305920u);
    if (ptr_useNavmeshMask != nullptr) {
        useNavmeshMask = (ptr_useNavmeshMask->value & 64) == 64;
        useNavmeshMask = ptr_useNavmeshMask->value;
    }

    auto ptr_x676949a1 = prop->cast_prop<yordle::data::prop::bit_prop>(1734953377u);
    if (ptr_x676949a1 != nullptr) {
        x676949a1 = (ptr_x676949a1->value & 128) == 128;
        x676949a1 = ptr_x676949a1->value;
    }

    auto ptr_xbd9b83c7 = prop->cast_prop<yordle::data::prop::bit_prop>(3181085639u);
    if (ptr_xbd9b83c7 != nullptr) {
        xbd9b83c7 = (ptr_xbd9b83c7->value & 1) == 1;
        xbd9b83c7 = ptr_xbd9b83c7->value;
    }

    auto ptr_birthRotation0 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1496514460u);
    if (ptr_birthRotation0 != nullptr) {
        birthRotation0 = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_birthRotation0, 1759261366u);
    }

    auto ptr_birthRotationalVelocity0 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(494378602u);
    if (ptr_birthRotationalVelocity0 != nullptr) {
        birthRotationalVelocity0 = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_birthRotationalVelocity0, 1759261366u);
    }

    auto ptr_UseLingerRotation = prop->cast_prop<yordle::data::prop::bit_prop>(3730513113u);
    if (ptr_UseLingerRotation != nullptr) {
        UseLingerRotation = (ptr_UseLingerRotation->value & 2) == 2;
        UseLingerRotation = ptr_UseLingerRotation->value;
    }

    auto ptr_LingerRotation0 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1751193500u);
    if (ptr_LingerRotation0 != nullptr) {
        LingerRotation0 = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_LingerRotation0, 1759261366u);
    }

    auto ptr_isLocalOrientation = prop->cast_prop<yordle::data::prop::bit_prop>(719533490u);
    if (ptr_isLocalOrientation != nullptr) {
        isLocalOrientation = (ptr_isLocalOrientation->value & 32) == 32;
        isLocalOrientation = ptr_isLocalOrientation->value;
    }

    auto ptr_directionVelocityScale = prop->cast_prop<yordle::data::prop::float32_prop>(2061075621u);
    if (ptr_directionVelocityScale != nullptr) {
        directionVelocityScale = ptr_directionVelocityScale->value;
    }

    auto ptr_directionVelocityMinScale = prop->cast_prop<yordle::data::prop::float32_prop>(3956555907u);
    if (ptr_directionVelocityMinScale != nullptr) {
        directionVelocityMinScale = ptr_directionVelocityMinScale->value;
    }

    auto ptr_postRotateOrientationAxis = prop->cast_prop<yordle::data::prop::vector_prop>(4198887203u);
    if (ptr_postRotateOrientationAxis != nullptr) {
        postRotateOrientationAxis = ptr_postRotateOrientationAxis->value;
    }

    auto ptr_birthRotationalAcceleration = prop->cast_prop<yordle::data::prop::inline_structure_prop>(922375025u);
    if (ptr_birthRotationalAcceleration != nullptr) {
        birthRotationalAcceleration = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_birthRotationalAcceleration, 1759261366u);
    }

    auto ptr_flexBirthRotationalVelocity0 = prop->cast_prop<yordle::data::prop::structure_prop>(2007555677u);
    if (ptr_flexBirthRotationalVelocity0 != nullptr) {
        flexBirthRotationalVelocity0 = yordle::data::meta::deserialize<yordle::data::meta::FlexValueVector3>(ptr_flexBirthRotationalVelocity0, 1113621825u);
    }

    auto ptr_rotation0 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1898643901u);
    if (ptr_rotation0 != nullptr) {
        rotation0 = yordle::data::meta::deserialize<yordle::data::meta::IntegratedValueVector3>(ptr_rotation0, 1825341187u);
    }

    auto ptr_birthScale0 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4041961604u);
    if (ptr_birthScale0 != nullptr) {
        birthScale0 = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_birthScale0, 1759261366u);
    }

    auto ptr_scale0 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3571546707u);
    if (ptr_scale0 != nullptr) {
        scale0 = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_scale0, 1759261366u);
    }

    auto ptr_UseLingerScale = prop->cast_prop<yordle::data::prop::bit_prop>(1582117303u);
    if (ptr_UseLingerScale != nullptr) {
        UseLingerScale = (ptr_UseLingerScale->value & 4) == 4;
        UseLingerScale = ptr_UseLingerScale->value;
    }

    auto ptr_LingerScale0 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2106505348u);
    if (ptr_LingerScale0 != nullptr) {
        LingerScale0 = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_LingerScale0, 1759261366u);
    }

    auto ptr_scaleBirthScaleByBoundObjectSize = prop->cast_prop<yordle::data::prop::float32_prop>(2500926249u);
    if (ptr_scaleBirthScaleByBoundObjectSize != nullptr) {
        scaleBirthScaleByBoundObjectSize = ptr_scaleBirthScaleByBoundObjectSize->value;
    }

    auto ptr_scaleBirthScaleByBoundObjectRadius = prop->cast_prop<yordle::data::prop::float32_prop>(942293422u);
    if (ptr_scaleBirthScaleByBoundObjectRadius != nullptr) {
        scaleBirthScaleByBoundObjectRadius = ptr_scaleBirthScaleByBoundObjectRadius->value;
    }

    auto ptr_flexScaleBirthScale = prop->cast_prop<yordle::data::prop::structure_prop>(729256261u);
    if (ptr_flexScaleBirthScale != nullptr) {
        flexScaleBirthScale = yordle::data::meta::deserialize<yordle::data::meta::FlexTypeFloat>(ptr_flexScaleBirthScale, 796686208u);
    }

    auto ptr_flexScaleEmitOffset = prop->cast_prop<yordle::data::prop::structure_prop>(2007401040u);
    if (ptr_flexScaleEmitOffset != nullptr) {
        flexScaleEmitOffset = yordle::data::meta::deserialize<yordle::data::meta::FlexTypeFloat>(ptr_flexScaleEmitOffset, 796686208u);
    }

    auto ptr_FlexInstanceScale = prop->cast_prop<yordle::data::prop::structure_prop>(2172495129u);
    if (ptr_FlexInstanceScale != nullptr) {
        FlexInstanceScale = yordle::data::meta::deserialize<yordle::data::meta::FlexTypeFloat>(ptr_FlexInstanceScale, 796686208u);
    }

    auto ptr_scaleBirthScaleByBoundObjectHeight = prop->cast_prop<yordle::data::prop::float32_prop>(3859373059u);
    if (ptr_scaleBirthScaleByBoundObjectHeight != nullptr) {
        scaleBirthScaleByBoundObjectHeight = ptr_scaleBirthScaleByBoundObjectHeight->value;
    }

    auto ptr_texture = prop->cast_prop<yordle::data::prop::string_prop>(1013213428u);
    if (ptr_texture != nullptr) {
        texture = ptr_texture->value;
    }

    auto ptr_frameRate = prop->cast_prop<yordle::data::prop::float32_prop>(2601589476u);
    if (ptr_frameRate != nullptr) {
        frameRate = ptr_frameRate->value;
    }

    auto ptr_birthFrameRate = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3319946389u);
    if (ptr_birthFrameRate != nullptr) {
        birthFrameRate = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_birthFrameRate, 70254680u);
    }

    auto ptr_numFrames = prop->cast_prop<yordle::data::prop::uint16_prop>(510111985u);
    if (ptr_numFrames != nullptr) {
        numFrames = ptr_numFrames->value;
    }

    auto ptr_startFrame = prop->cast_prop<yordle::data::prop::uint16_prop>(1996008740u);
    if (ptr_startFrame != nullptr) {
        startFrame = ptr_startFrame->value;
    }

    auto ptr_uvMode = prop->cast_prop<yordle::data::prop::uint8_prop>(642448697u);
    if (ptr_uvMode != nullptr) {
        uvMode = ptr_uvMode->value;
    }

    auto ptr_paletteDefinition = prop->cast_prop<yordle::data::prop::structure_prop>(2325872577u);
    if (ptr_paletteDefinition != nullptr) {
        paletteDefinition = yordle::data::meta::deserialize<yordle::data::meta::VfxPaletteDefinitionData>(ptr_paletteDefinition, 2829943575u);
    }

    auto ptr_materialOverrideDefinitions = prop->cast_prop<yordle::data::prop::set_prop>(858467462u);
    if (ptr_materialOverrideDefinitions != nullptr) {
        for (const auto &entry : ptr_materialOverrideDefinitions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                materialOverrideDefinitions.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxMaterialOverrideDefinitionData>(ptr_entry, 3652726407u));
            }
        }
    }

    auto ptr_birthUvScrollRate = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3484878814u);
    if (ptr_birthUvScrollRate != nullptr) {
        birthUvScrollRate = yordle::data::meta::deserialize<yordle::data::meta::ValueVector2>(ptr_birthUvScrollRate, 1776038985u);
    }

    auto ptr_flexBirthUVScrollRate = prop->cast_prop<yordle::data::prop::structure_prop>(3188174315u);
    if (ptr_flexBirthUVScrollRate != nullptr) {
        flexBirthUVScrollRate = yordle::data::meta::deserialize<yordle::data::meta::FlexValueVector2>(ptr_flexBirthUVScrollRate, 1096844206u);
    }

    auto ptr_birthUVOffset = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3105458730u);
    if (ptr_birthUVOffset != nullptr) {
        birthUVOffset = yordle::data::meta::deserialize<yordle::data::meta::ValueVector2>(ptr_birthUVOffset, 1776038985u);
    }

    auto ptr_texAddressModeBase = prop->cast_prop<yordle::data::prop::uint8_prop>(844078864u);
    if (ptr_texAddressModeBase != nullptr) {
        texAddressModeBase = ptr_texAddressModeBase->value;
    }

    auto ptr_texDiv = prop->cast_prop<yordle::data::prop::point_prop>(2259174665u);
    if (ptr_texDiv != nullptr) {
        texDiv = ptr_texDiv->value;
    }

    auto ptr_particleUVScrollRate = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1683889035u);
    if (ptr_particleUVScrollRate != nullptr) {
        particleUVScrollRate = yordle::data::meta::deserialize<yordle::data::meta::IntegratedValueVector2>(ptr_particleUVScrollRate, 1808563568u);
    }

    auto ptr_emitterUvScrollRate = prop->cast_prop<yordle::data::prop::point_prop>(1375800169u);
    if (ptr_emitterUvScrollRate != nullptr) {
        emitterUvScrollRate = ptr_emitterUvScrollRate->value;
    }

    auto ptr_flexBirthUVOffset = prop->cast_prop<yordle::data::prop::structure_prop>(617655883u);
    if (ptr_flexBirthUVOffset != nullptr) {
        flexBirthUVOffset = yordle::data::meta::deserialize<yordle::data::meta::FlexValueVector2>(ptr_flexBirthUVOffset, 1096844206u);
    }

    auto ptr_uvScale = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3990797128u);
    if (ptr_uvScale != nullptr) {
        uvScale = yordle::data::meta::deserialize<yordle::data::meta::ValueVector2>(ptr_uvScale, 1776038985u);
    }

    auto ptr_uvRotation = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2525133280u);
    if (ptr_uvRotation != nullptr) {
        uvRotation = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_uvRotation, 70254680u);
    }

    auto ptr_birthUvRotateRate = prop->cast_prop<yordle::data::prop::inline_structure_prop>(849595928u);
    if (ptr_birthUvRotateRate != nullptr) {
        birthUvRotateRate = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_birthUvRotateRate, 70254680u);
    }

    auto ptr_particleUVRotateRate = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3224963885u);
    if (ptr_particleUVRotateRate != nullptr) {
        particleUVRotateRate = yordle::data::meta::deserialize<yordle::data::meta::IntegratedValueFloat>(ptr_particleUVRotateRate, 3515916773u);
    }

    auto ptr_uvTransformCenter = prop->cast_prop<yordle::data::prop::point_prop>(1989927343u);
    if (ptr_uvTransformCenter != nullptr) {
        uvTransformCenter = ptr_uvTransformCenter->value;
    }

    auto ptr_textureMult = prop->cast_prop<yordle::data::prop::string_prop>(791583218u);
    if (ptr_textureMult != nullptr) {
        textureMult = ptr_textureMult->value;
    }

    auto ptr_birthUvScrollRateMult = prop->cast_prop<yordle::data::prop::inline_structure_prop>(842359924u);
    if (ptr_birthUvScrollRateMult != nullptr) {
        birthUvScrollRateMult = yordle::data::meta::deserialize<yordle::data::meta::ValueVector2>(ptr_birthUvScrollRateMult, 1776038985u);
    }

    auto ptr_birthUVOffsetMult = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1946986944u);
    if (ptr_birthUVOffsetMult != nullptr) {
        birthUVOffsetMult = yordle::data::meta::deserialize<yordle::data::meta::ValueVector2>(ptr_birthUVOffsetMult, 1776038985u);
    }

    auto ptr_texAddressModeMult = prop->cast_prop<yordle::data::prop::uint8_prop>(1529123847u);
    if (ptr_texAddressModeMult != nullptr) {
        texAddressModeMult = ptr_texAddressModeMult->value;
    }

    auto ptr_texDivMult = prop->cast_prop<yordle::data::prop::point_prop>(374036275u);
    if (ptr_texDivMult != nullptr) {
        texDivMult = ptr_texDivMult->value;
    }

    auto ptr_uvScaleMult = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3440526982u);
    if (ptr_uvScaleMult != nullptr) {
        uvScaleMult = yordle::data::meta::deserialize<yordle::data::meta::ValueVector2>(ptr_uvScaleMult, 1776038985u);
    }

    auto ptr_birthUvRotateRateMult = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3988564566u);
    if (ptr_birthUvRotateRateMult != nullptr) {
        birthUvRotateRateMult = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_birthUvRotateRateMult, 70254680u);
    }

    auto ptr_particleUVRotateRateMult = prop->cast_prop<yordle::data::prop::inline_structure_prop>(328812087u);
    if (ptr_particleUVRotateRateMult != nullptr) {
        particleUVRotateRateMult = yordle::data::meta::deserialize<yordle::data::meta::IntegratedValueFloat>(ptr_particleUVRotateRateMult, 3515916773u);
    }

    auto ptr_uvTransformCenterMult = prop->cast_prop<yordle::data::prop::point_prop>(947681201u);
    if (ptr_uvTransformCenterMult != nullptr) {
        uvTransformCenterMult = ptr_uvTransformCenterMult->value;
    }

    auto ptr_particleUVScrollRateMult = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1838660429u);
    if (ptr_particleUVScrollRateMult != nullptr) {
        particleUVScrollRateMult = yordle::data::meta::deserialize<yordle::data::meta::IntegratedValueVector2>(ptr_particleUVScrollRateMult, 1808563568u);
    }

    auto ptr_emitterUvScrollRateMult = prop->cast_prop<yordle::data::prop::point_prop>(3785168275u);
    if (ptr_emitterUvScrollRateMult != nullptr) {
        emitterUvScrollRateMult = ptr_emitterUvScrollRateMult->value;
    }

    auto ptr_flexBirthUVScrollRateMult = prop->cast_prop<yordle::data::prop::structure_prop>(3083423149u);
    if (ptr_flexBirthUVScrollRateMult != nullptr) {
        flexBirthUVScrollRateMult = yordle::data::meta::deserialize<yordle::data::meta::FlexValueVector2>(ptr_flexBirthUVScrollRateMult, 1096844206u);
    }

    auto ptr_scaleOverride = prop->cast_prop<yordle::data::prop::vector_prop>(240857825u);
    if (ptr_scaleOverride != nullptr) {
        scaleOverride = ptr_scaleOverride->value;
    }

    auto ptr_birthScale1 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4058739223u);
    if (ptr_birthScale1 != nullptr) {
        birthScale1 = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_birthScale1, 70254680u);
    }

    auto ptr_scale1 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3554769088u);
    if (ptr_scale1 != nullptr) {
        scale1 = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_scale1, 70254680u);
    }

    auto ptr_birthRotation1 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1513292079u);
    if (ptr_birthRotation1 != nullptr) {
        birthRotation1 = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_birthRotation1, 70254680u);
    }

    auto ptr_particleBind = prop->cast_prop<yordle::data::prop::point_prop>(1364523800u);
    if (ptr_particleBind != nullptr) {
        particleBind = ptr_particleBind->value;
    }

    auto ptr_birthRotationalVelocity1 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(511156221u);
    if (ptr_birthRotationalVelocity1 != nullptr) {
        birthRotationalVelocity1 = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_birthRotationalVelocity1, 70254680u);
    }

    auto ptr_orientation = prop->cast_prop<yordle::data::prop::uint8_prop>(3309681697u);
    if (ptr_orientation != nullptr) {
        orientation = ptr_orientation->value;
    }

    auto ptr_rotation1 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1881866282u);
    if (ptr_rotation1 != nullptr) {
        rotation1 = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_rotation1, 70254680u);
    }

    auto ptr_scaleBias = prop->cast_prop<yordle::data::prop::point_prop>(1183217344u);
    if (ptr_scaleBias != nullptr) {
        scaleBias = ptr_scaleBias->value;
    }

    auto ptr_uvScrollRate1 = prop->cast_prop<yordle::data::prop::point_prop>(542661344u);
    if (ptr_uvScrollRate1 != nullptr) {
        uvScrollRate1 = ptr_uvScrollRate1->value;
    }

    auto ptr_hasFixedOrbit = prop->cast_prop<yordle::data::prop::bit_prop>(874974657u);
    if (ptr_hasFixedOrbit != nullptr) {
        hasFixedOrbit = (ptr_hasFixedOrbit->value & 64) == 64;
        hasFixedOrbit = ptr_hasFixedOrbit->value;
    }

    auto ptr_fixedOrbitType = prop->cast_prop<yordle::data::prop::uint8_prop>(3168650627u);
    if (ptr_fixedOrbitType != nullptr) {
        fixedOrbitType = ptr_fixedOrbitType->value;
    }

    auto ptr_scaleUpFromOrigin = prop->cast_prop<yordle::data::prop::bit_prop>(4190326694u);
    if (ptr_scaleUpFromOrigin != nullptr) {
        scaleUpFromOrigin = (ptr_scaleUpFromOrigin->value & 1) == 1;
        scaleUpFromOrigin = ptr_scaleUpFromOrigin->value;
    }

    auto ptr_lockedToEmitter = prop->cast_prop<yordle::data::prop::bit_prop>(2575304460u);
    if (ptr_lockedToEmitter != nullptr) {
        lockedToEmitter = (ptr_lockedToEmitter->value & 128) == 128;
        lockedToEmitter = ptr_lockedToEmitter->value;
    }

    auto ptr_flexBirthRotationalVelocity1 = prop->cast_prop<yordle::data::prop::structure_prop>(1990778058u);
    if (ptr_flexBirthRotationalVelocity1 != nullptr) {
        flexBirthRotationalVelocity1 = yordle::data::meta::deserialize<yordle::data::meta::FlexValueFloat>(ptr_flexBirthRotationalVelocity1, 1370198255u);
    }
}

yordle::data::meta::VfxChildIdentifier::VfxChildIdentifier(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_effectKey = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2600665331u);
    if (ptr_effectKey != nullptr) {
        effectKey = ptr_effectKey->value;
    }

    auto ptr_effect = prop->cast_prop<yordle::data::prop::reference_prop>(1852738900u);
    if (ptr_effect != nullptr) {
        effect = ptr_effect->value;
    }

    auto ptr_effectName = prop->cast_prop<yordle::data::prop::string_prop>(1209207887u);
    if (ptr_effectName != nullptr) {
        effectName = ptr_effectName->value;
    }
}

yordle::data::meta::VfxChildParticleSetDefinitionData::VfxChildParticleSetDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_childrenIdentifiers = prop->cast_prop<yordle::data::prop::set_prop>(1715426790u);
    if (ptr_childrenIdentifiers != nullptr) {
        for (const auto &entry : ptr_childrenIdentifiers->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                childrenIdentifiers.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxChildIdentifier>(ptr_entry, 2526736020u));
            }
        }
    }

    auto ptr_boneToSpawnAt = prop->cast_prop<yordle::data::prop::set_prop>(1694370028u);
    if (ptr_boneToSpawnAt != nullptr) {
        for (const auto &entry : ptr_boneToSpawnAt->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                boneToSpawnAt.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_childrenProbability = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4057072085u);
    if (ptr_childrenProbability != nullptr) {
        childrenProbability = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_childrenProbability, 70254680u);
    }

    auto ptr_childEmitOnDeath = prop->cast_prop<yordle::data::prop::bool_prop>(3277691919u);
    if (ptr_childEmitOnDeath != nullptr) {
        childEmitOnDeath = ptr_childEmitOnDeath->value;
    }
}

yordle::data::meta::VfxAlphaErosionDefinitionData::VfxAlphaErosionDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_erosionDriveCurve = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3338382549u);
    if (ptr_erosionDriveCurve != nullptr) {
        erosionDriveCurve = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_erosionDriveCurve, 70254680u);
    }

    auto ptr_erosionDriveSource = prop->cast_prop<yordle::data::prop::uint32_prop>(3556272143u);
    if (ptr_erosionDriveSource != nullptr) {
        erosionDriveSource = ptr_erosionDriveSource->value;
    }

    auto ptr_UseLingerErosionDriveCurve = prop->cast_prop<yordle::data::prop::bool_prop>(649389603u);
    if (ptr_UseLingerErosionDriveCurve != nullptr) {
        UseLingerErosionDriveCurve = ptr_UseLingerErosionDriveCurve->value;
    }

    auto ptr_LingerErosionDriveCurve = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2102344908u);
    if (ptr_LingerErosionDriveCurve != nullptr) {
        LingerErosionDriveCurve = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_LingerErosionDriveCurve, 70254680u);
    }

    auto ptr_erosionFeatherIn = prop->cast_prop<yordle::data::prop::float32_prop>(884924650u);
    if (ptr_erosionFeatherIn != nullptr) {
        erosionFeatherIn = ptr_erosionFeatherIn->value;
    }

    auto ptr_erosionFeatherOut = prop->cast_prop<yordle::data::prop::float32_prop>(574933667u);
    if (ptr_erosionFeatherOut != nullptr) {
        erosionFeatherOut = ptr_erosionFeatherOut->value;
    }

    auto ptr_erosionSliceWidth = prop->cast_prop<yordle::data::prop::float32_prop>(2088333528u);
    if (ptr_erosionSliceWidth != nullptr) {
        erosionSliceWidth = ptr_erosionSliceWidth->value;
    }

    auto ptr_erosionMapName = prop->cast_prop<yordle::data::prop::string_prop>(1570791323u);
    if (ptr_erosionMapName != nullptr) {
        erosionMapName = ptr_erosionMapName->value;
    }

    auto ptr_erosionMapChannelMixer = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2960738944u);
    if (ptr_erosionMapChannelMixer != nullptr) {
        erosionMapChannelMixer = yordle::data::meta::deserialize<yordle::data::meta::ValueColor>(ptr_erosionMapChannelMixer, 122655197u);
    }

    auto ptr_erosionMapAddressMode = prop->cast_prop<yordle::data::prop::uint8_prop>(724705915u);
    if (ptr_erosionMapAddressMode != nullptr) {
        erosionMapAddressMode = ptr_erosionMapAddressMode->value;
    }
}

yordle::data::meta::VfxPaletteDefinitionData::VfxPaletteDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_paletteTexture = prop->cast_prop<yordle::data::prop::string_prop>(4289139195u);
    if (ptr_paletteTexture != nullptr) {
        paletteTexture = ptr_paletteTexture->value;
    }

    auto ptr_PaletteTextureAddressMode = prop->cast_prop<yordle::data::prop::uint8_prop>(91092758u);
    if (ptr_PaletteTextureAddressMode != nullptr) {
        PaletteTextureAddressMode = ptr_PaletteTextureAddressMode->value;
    }

    auto ptr_palleteSrcMixColor = prop->cast_prop<yordle::data::prop::inline_structure_prop>(339674833u);
    if (ptr_palleteSrcMixColor != nullptr) {
        palleteSrcMixColor = yordle::data::meta::deserialize<yordle::data::meta::ValueColor>(ptr_palleteSrcMixColor, 122655197u);
    }

    auto ptr_paletteSelector = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2345951285u);
    if (ptr_paletteSelector != nullptr) {
        paletteSelector = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_paletteSelector, 1759261366u);
    }

    auto ptr_x34d8fac6 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(886635206u);
    if (ptr_x34d8fac6 != nullptr) {
        x34d8fac6 = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_x34d8fac6, 70254680u);
    }

    auto ptr_x44fd44cb = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1157448907u);
    if (ptr_x44fd44cb != nullptr) {
        x44fd44cb = yordle::data::meta::deserialize<yordle::data::meta::ValueFloat>(ptr_x44fd44cb, 70254680u);
    }

    auto ptr_paletteCount = prop->cast_prop<yordle::data::prop::int32_prop>(2656188463u);
    if (ptr_paletteCount != nullptr) {
        paletteCount = ptr_paletteCount->value;
    }
}

yordle::data::meta::VfxReflectionDefinitionData::VfxReflectionDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_reflectionMapTexture = prop->cast_prop<yordle::data::prop::string_prop>(2242072317u);
    if (ptr_reflectionMapTexture != nullptr) {
        reflectionMapTexture = ptr_reflectionMapTexture->value;
    }

    auto ptr_reflectionOpacityDirect = prop->cast_prop<yordle::data::prop::float32_prop>(297562208u);
    if (ptr_reflectionOpacityDirect != nullptr) {
        reflectionOpacityDirect = ptr_reflectionOpacityDirect->value;
    }

    auto ptr_reflectionOpacityGlancing = prop->cast_prop<yordle::data::prop::float32_prop>(389700534u);
    if (ptr_reflectionOpacityGlancing != nullptr) {
        reflectionOpacityGlancing = ptr_reflectionOpacityGlancing->value;
    }

    auto ptr_reflectionFresnel = prop->cast_prop<yordle::data::prop::float32_prop>(319643915u);
    if (ptr_reflectionFresnel != nullptr) {
        reflectionFresnel = ptr_reflectionFresnel->value;
    }

    auto ptr_reflectionFresnelColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(1444892650u);
    if (ptr_reflectionFresnelColor != nullptr) {
        reflectionFresnelColor = ptr_reflectionFresnelColor->value;
    }

    auto ptr_fresnel = prop->cast_prop<yordle::data::prop::float32_prop>(2436355000u);
    if (ptr_fresnel != nullptr) {
        fresnel = ptr_fresnel->value;
    }

    auto ptr_fresnelColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(954992847u);
    if (ptr_fresnelColor != nullptr) {
        fresnelColor = ptr_fresnelColor->value;
    }
}

yordle::data::meta::VfxDistortionDefinitionData::VfxDistortionDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_distortion = prop->cast_prop<yordle::data::prop::float32_prop>(3160342186u);
    if (ptr_distortion != nullptr) {
        distortion = ptr_distortion->value;
    }

    auto ptr_distortionMode = prop->cast_prop<yordle::data::prop::uint8_prop>(1086688113u);
    if (ptr_distortionMode != nullptr) {
        distortionMode = ptr_distortionMode->value;
    }

    auto ptr_normalMapTexture = prop->cast_prop<yordle::data::prop::string_prop>(3866285399u);
    if (ptr_normalMapTexture != nullptr) {
        normalMapTexture = ptr_normalMapTexture->value;
    }
}

yordle::data::meta::VfxProjectionDefinitionData::VfxProjectionDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mYRange = prop->cast_prop<yordle::data::prop::float32_prop>(2169557736u);
    if (ptr_mYRange != nullptr) {
        mYRange = ptr_mYRange->value;
    }

    auto ptr_mFading = prop->cast_prop<yordle::data::prop::float32_prop>(2044953657u);
    if (ptr_mFading != nullptr) {
        mFading = ptr_mFading->value;
    }
}

yordle::data::meta::VfxTrailDefinitionData::VfxTrailDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMode = prop->cast_prop<yordle::data::prop::uint8_prop>(2891566923u);
    if (ptr_mMode != nullptr) {
        mMode = ptr_mMode->value;
    }

    auto ptr_mCutoff = prop->cast_prop<yordle::data::prop::float32_prop>(4001898525u);
    if (ptr_mCutoff != nullptr) {
        mCutoff = ptr_mCutoff->value;
    }

    auto ptr_mBirthTilingSize = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2356694983u);
    if (ptr_mBirthTilingSize != nullptr) {
        mBirthTilingSize = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_mBirthTilingSize, 1759261366u);
    }

    auto ptr_mSmoothingMode = prop->cast_prop<yordle::data::prop::uint8_prop>(245815745u);
    if (ptr_mSmoothingMode != nullptr) {
        mSmoothingMode = ptr_mSmoothingMode->value;
    }

    auto ptr_mMaxAddedPerFrame = prop->cast_prop<yordle::data::prop::int32_prop>(2130103752u);
    if (ptr_mMaxAddedPerFrame != nullptr) {
        mMaxAddedPerFrame = ptr_mMaxAddedPerFrame->value;
    }
}

yordle::data::meta::VfxBeamDefinitionData::VfxBeamDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSegments = prop->cast_prop<yordle::data::prop::int32_prop>(1511982030u);
    if (ptr_mSegments != nullptr) {
        mSegments = ptr_mSegments->value;
    }

    auto ptr_mBirthTilingSize = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2356694983u);
    if (ptr_mBirthTilingSize != nullptr) {
        mBirthTilingSize = yordle::data::meta::deserialize<yordle::data::meta::ValueVector3>(ptr_mBirthTilingSize, 1759261366u);
    }

    auto ptr_mIsColorBindedWithDistance = prop->cast_prop<yordle::data::prop::bool_prop>(149298770u);
    if (ptr_mIsColorBindedWithDistance != nullptr) {
        mIsColorBindedWithDistance = ptr_mIsColorBindedWithDistance->value;
    }

    auto ptr_mAnimatedColorWithDistance = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3415283031u);
    if (ptr_mAnimatedColorWithDistance != nullptr) {
        mAnimatedColorWithDistance = yordle::data::meta::deserialize<yordle::data::meta::ValueColor>(ptr_mAnimatedColorWithDistance, 122655197u);
    }

    auto ptr_mLocalSpaceSourceOffset = prop->cast_prop<yordle::data::prop::vector_prop>(4203155437u);
    if (ptr_mLocalSpaceSourceOffset != nullptr) {
        mLocalSpaceSourceOffset = ptr_mLocalSpaceSourceOffset->value;
    }

    auto ptr_mLocalSpaceTargetOffset = prop->cast_prop<yordle::data::prop::vector_prop>(3458073573u);
    if (ptr_mLocalSpaceTargetOffset != nullptr) {
        mLocalSpaceTargetOffset = ptr_mLocalSpaceTargetOffset->value;
    }

    auto ptr_mTrailMode = prop->cast_prop<yordle::data::prop::uint8_prop>(1546659607u);
    if (ptr_mTrailMode != nullptr) {
        mTrailMode = ptr_mTrailMode->value;
    }

    auto ptr_mMode = prop->cast_prop<yordle::data::prop::uint8_prop>(2891566923u);
    if (ptr_mMode != nullptr) {
        mMode = ptr_mMode->value;
    }
}

yordle::data::meta::VfxEmissionSurfaceData::VfxEmissionSurfaceData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_meshName = prop->cast_prop<yordle::data::prop::string_prop>(4164724151u);
    if (ptr_meshName != nullptr) {
        meshName = ptr_meshName->value;
    }

    auto ptr_skeletonName = prop->cast_prop<yordle::data::prop::string_prop>(1880291021u);
    if (ptr_skeletonName != nullptr) {
        skeletonName = ptr_skeletonName->value;
    }

    auto ptr_animationName = prop->cast_prop<yordle::data::prop::string_prop>(2555738718u);
    if (ptr_animationName != nullptr) {
        animationName = ptr_animationName->value;
    }

    auto ptr_meshScale = prop->cast_prop<yordle::data::prop::float32_prop>(2936095126u);
    if (ptr_meshScale != nullptr) {
        meshScale = ptr_meshScale->value;
    }

    auto ptr_maxJointWeights = prop->cast_prop<yordle::data::prop::uint16_prop>(2823368956u);
    if (ptr_maxJointWeights != nullptr) {
        maxJointWeights = ptr_maxJointWeights->value;
    }

    auto ptr_useAvatarPose = prop->cast_prop<yordle::data::prop::bool_prop>(2080397708u);
    if (ptr_useAvatarPose != nullptr) {
        useAvatarPose = ptr_useAvatarPose->value;
    }

    auto ptr_useSurfaceNormalForBirthPhysics = prop->cast_prop<yordle::data::prop::bool_prop>(2603314277u);
    if (ptr_useSurfaceNormalForBirthPhysics != nullptr) {
        useSurfaceNormalForBirthPhysics = ptr_useSurfaceNormalForBirthPhysics->value;
    }
}

yordle::data::meta::VfxMeshDefinitionData::VfxMeshDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSimpleMeshName = prop->cast_prop<yordle::data::prop::string_prop>(3563579584u);
    if (ptr_mSimpleMeshName != nullptr) {
        mSimpleMeshName = ptr_mSimpleMeshName->value;
    }

    auto ptr_mMeshName = prop->cast_prop<yordle::data::prop::string_prop>(2353111854u);
    if (ptr_mMeshName != nullptr) {
        mMeshName = ptr_mMeshName->value;
    }

    auto ptr_mMeshSkeletonName = prop->cast_prop<yordle::data::prop::string_prop>(2421774869u);
    if (ptr_mMeshSkeletonName != nullptr) {
        mMeshSkeletonName = ptr_mMeshSkeletonName->value;
    }

    auto ptr_mAnimationName = prop->cast_prop<yordle::data::prop::string_prop>(4224806837u);
    if (ptr_mAnimationName != nullptr) {
        mAnimationName = ptr_mAnimationName->value;
    }

    auto ptr_mAnimationVariants = prop->cast_prop<yordle::data::prop::set_prop>(343869212u);
    if (ptr_mAnimationVariants != nullptr) {
        for (const auto &entry : ptr_mAnimationVariants->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                mAnimationVariants.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mSubmeshesToDraw = prop->cast_prop<yordle::data::prop::set_prop>(3680754520u);
    if (ptr_mSubmeshesToDraw != nullptr) {
        for (const auto &entry : ptr_mSubmeshesToDraw->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mSubmeshesToDraw.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mSubmeshesToDrawAlways = prop->cast_prop<yordle::data::prop::set_prop>(2980241797u);
    if (ptr_mSubmeshesToDrawAlways != nullptr) {
        for (const auto &entry : ptr_mSubmeshesToDrawAlways->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mSubmeshesToDrawAlways.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mLockMeshToAttachment = prop->cast_prop<yordle::data::prop::bool_prop>(3885867394u);
    if (ptr_mLockMeshToAttachment != nullptr) {
        mLockMeshToAttachment = ptr_mLockMeshToAttachment->value;
    }
}

yordle::data::meta::VfxPrimitiveBase::VfxPrimitiveBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VfxPrimitiveCameraQuad::VfxPrimitiveCameraQuad(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveBase(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VfxPrimitiveArbitraryQuad::VfxPrimitiveArbitraryQuad(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveBase(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VfxPrimitiveRay::VfxPrimitiveRay(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveBase(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VfxPrimitiveProjectionBase::VfxPrimitiveProjectionBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveBase(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mProjection = prop->cast_prop<yordle::data::prop::inline_structure_prop>(81269909u);
    if (ptr_mProjection != nullptr) {
        mProjection = yordle::data::meta::deserialize<yordle::data::meta::VfxProjectionDefinitionData>(ptr_mProjection, 259276035u);
    }
}

yordle::data::meta::VfxPrimitivePlanarProjection::VfxPrimitivePlanarProjection(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveProjectionBase(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VfxPrimitiveTrailBase::VfxPrimitiveTrailBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveBase(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTrail = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1583751124u);
    if (ptr_mTrail != nullptr) {
        mTrail = yordle::data::meta::deserialize<yordle::data::meta::VfxTrailDefinitionData>(ptr_mTrail, 12755856u);
    }
}

yordle::data::meta::VfxPrimitiveCameraTrail::VfxPrimitiveCameraTrail(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveTrailBase(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VfxPrimitiveArbitraryTrail::VfxPrimitiveArbitraryTrail(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveTrailBase(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VfxPrimitiveBeamBase::VfxPrimitiveBeamBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveBase(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBeam = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3562411207u);
    if (ptr_mBeam != nullptr) {
        mBeam = yordle::data::meta::deserialize<yordle::data::meta::VfxBeamDefinitionData>(ptr_mBeam, 532209417u);
    }
}

yordle::data::meta::VfxPrimitiveCameraSegmentBeam::VfxPrimitiveCameraSegmentBeam(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveBeamBase(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VfxPrimitiveArbitrarySegmentBeam::VfxPrimitiveArbitrarySegmentBeam(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveBeamBase(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VfxPrimitiveMeshBase::VfxPrimitiveMeshBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveBase(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMesh = prop->cast_prop<yordle::data::prop::inline_structure_prop>(227111725u);
    if (ptr_mMesh != nullptr) {
        mMesh = yordle::data::meta::deserialize<yordle::data::meta::VfxMeshDefinitionData>(ptr_mMesh, 1787328523u);
    }

    auto ptr_xfbf6793f = prop->cast_prop<yordle::data::prop::bool_prop>(4227234111u);
    if (ptr_xfbf6793f != nullptr) {
        xfbf6793f = ptr_xfbf6793f->value;
    }

    auto ptr_xea861daa = prop->cast_prop<yordle::data::prop::bool_prop>(3934657962u);
    if (ptr_xea861daa != nullptr) {
        xea861daa = ptr_xea861daa->value;
    }
}

yordle::data::meta::VfxPrimitiveMesh::VfxPrimitiveMesh(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveMeshBase(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VfxPrimitiveAttachedMesh::VfxPrimitiveAttachedMesh(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveMeshBase(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VfxPrimitiveBeam::VfxPrimitiveBeam(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : VfxPrimitiveBase(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMesh = prop->cast_prop<yordle::data::prop::inline_structure_prop>(227111725u);
    if (ptr_mMesh != nullptr) {
        mMesh = yordle::data::meta::deserialize<yordle::data::meta::VfxMeshDefinitionData>(ptr_mMesh, 1787328523u);
    }

    auto ptr_mBeam = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3562411207u);
    if (ptr_mBeam != nullptr) {
        mBeam = yordle::data::meta::deserialize<yordle::data::meta::VfxBeamDefinitionData>(ptr_mBeam, 532209417u);
    }
}

yordle::data::meta::VfxFloatOverLifeMaterialDriver::VfxFloatOverLifeMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IVfxMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_frequency = prop->cast_prop<yordle::data::prop::uint8_prop>(800267265u);
    if (ptr_frequency != nullptr) {
        frequency = ptr_frequency->value;
    }

    auto ptr_graph = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3111650887u);
    if (ptr_graph != nullptr) {
        graph = yordle::data::meta::deserialize<yordle::data::meta::VfxAnimatedFloatVariableData>(ptr_graph, 4261825672u);
    }
}

yordle::data::meta::VfxSineMaterialDriver::VfxSineMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IVfxMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFrequency = prop->cast_prop<yordle::data::prop::float32_prop>(825003174u);
    if (ptr_mFrequency != nullptr) {
        mFrequency = ptr_mFrequency->value;
    }

    auto ptr_mScale = prop->cast_prop<yordle::data::prop::float32_prop>(1962815642u);
    if (ptr_mScale != nullptr) {
        mScale = ptr_mScale->value;
    }

    auto ptr_mBias = prop->cast_prop<yordle::data::prop::float32_prop>(536303437u);
    if (ptr_mBias != nullptr) {
        mBias = ptr_mBias->value;
    }
}

yordle::data::meta::MapParticle::MapParticle(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapPlaceable(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_system = prop->cast_prop<yordle::data::prop::reference_prop>(1226705564u);
    if (ptr_system != nullptr) {
        system = ptr_system->value;
    }

    auto ptr_eyeCandy = prop->cast_prop<yordle::data::prop::bool_prop>(1435159183u);
    if (ptr_eyeCandy != nullptr) {
        eyeCandy = ptr_eyeCandy->value;
    }

    auto ptr_Transitional = prop->cast_prop<yordle::data::prop::bool_prop>(2372739535u);
    if (ptr_Transitional != nullptr) {
        Transitional = ptr_Transitional->value;
    }

    auto ptr_quality = prop->cast_prop<yordle::data::prop::int32_prop>(2597670950u);
    if (ptr_quality != nullptr) {
        quality = ptr_quality->value;
    }

    auto ptr_visibilityMode = prop->cast_prop<yordle::data::prop::uint32_prop>(231165746u);
    if (ptr_visibilityMode != nullptr) {
        visibilityMode = ptr_visibilityMode->value;
    }

    auto ptr_colorModulate = prop->cast_prop<yordle::data::prop::quaternion_prop>(3259422695u);
    if (ptr_colorModulate != nullptr) {
        colorModulate = ptr_colorModulate->value;
    }

    auto ptr_groupName = prop->cast_prop<yordle::data::prop::string_prop>(3504806855u);
    if (ptr_groupName != nullptr) {
        groupName = ptr_groupName->value;
    }

    auto ptr_startDisabled = prop->cast_prop<yordle::data::prop::bool_prop>(1054618511u);
    if (ptr_startDisabled != nullptr) {
        startDisabled = ptr_startDisabled->value;
    }
}

yordle::data::meta::MapParticleGroups::MapParticleGroups(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_groups = prop->cast_prop<yordle::data::prop::set_prop>(2943077229u);
    if (ptr_groups != nullptr) {
        for (const auto &entry : ptr_groups->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(entry);
            if (ptr_entry != nullptr) {
                groups.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::DynamicMaterialParameterDef::DynamicMaterialParameterDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_enabled = prop->cast_prop<yordle::data::prop::bool_prop>(49525662u);
    if (ptr_enabled != nullptr) {
        enabled = ptr_enabled->value;
    }

    auto ptr_driver = prop->cast_prop<yordle::data::prop::structure_prop>(3847494111u);
    if (ptr_driver != nullptr) {
        driver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialDriver>(ptr_driver, 1009087838u);
    }
}

yordle::data::meta::DynamicMaterialTextureSwapOption::DynamicMaterialTextureSwapOption(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_driver = prop->cast_prop<yordle::data::prop::structure_prop>(3847494111u);
    if (ptr_driver != nullptr) {
        driver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialBoolDriver>(ptr_driver, 3663840478u);
    }

    auto ptr_textureName = prop->cast_prop<yordle::data::prop::string_prop>(3004290287u);
    if (ptr_textureName != nullptr) {
        textureName = ptr_textureName->value;
    }
}

yordle::data::meta::DynamicMaterialTextureSwapDef::DynamicMaterialTextureSwapDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_enabled = prop->cast_prop<yordle::data::prop::bool_prop>(49525662u);
    if (ptr_enabled != nullptr) {
        enabled = ptr_enabled->value;
    }

    auto ptr_options = prop->cast_prop<yordle::data::prop::set_prop>(4012403877u);
    if (ptr_options != nullptr) {
        for (const auto &entry : ptr_options->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                options.emplace(yordle::data::meta::deserialize<yordle::data::meta::DynamicMaterialTextureSwapOption>(ptr_entry, 567330916u));
            }
        }
    }
}

yordle::data::meta::DynamicMaterialStaticSwitch::DynamicMaterialStaticSwitch(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_enabled = prop->cast_prop<yordle::data::prop::bool_prop>(49525662u);
    if (ptr_enabled != nullptr) {
        enabled = ptr_enabled->value;
    }

    auto ptr_driver = prop->cast_prop<yordle::data::prop::structure_prop>(3847494111u);
    if (ptr_driver != nullptr) {
        driver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialBoolDriver>(ptr_driver, 3663840478u);
    }
}

yordle::data::meta::DynamicMaterialDef::DynamicMaterialDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x5ed2db8d = prop->cast_prop<yordle::data::prop::bool_prop>(1590877069u);
    if (ptr_x5ed2db8d != nullptr) {
        x5ed2db8d = ptr_x5ed2db8d->value;
    }

    auto ptr_parameters = prop->cast_prop<yordle::data::prop::set_prop>(1218784985u);
    if (ptr_parameters != nullptr) {
        for (const auto &entry : ptr_parameters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                parameters.emplace(yordle::data::meta::deserialize<yordle::data::meta::DynamicMaterialParameterDef>(ptr_entry, 121596497u));
            }
        }
    }

    auto ptr_textures = prop->cast_prop<yordle::data::prop::set_prop>(2567998597u);
    if (ptr_textures != nullptr) {
        for (const auto &entry : ptr_textures->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                textures.emplace(yordle::data::meta::deserialize<yordle::data::meta::DynamicMaterialTextureSwapDef>(ptr_entry, 1303930364u));
            }
        }
    }

    auto ptr_staticSwitch = prop->cast_prop<yordle::data::prop::structure_prop>(61107051u);
    if (ptr_staticSwitch != nullptr) {
        staticSwitch = yordle::data::meta::deserialize<yordle::data::meta::DynamicMaterialStaticSwitch>(ptr_staticSwitch, 4013554309u);
    }
}

yordle::data::meta::IDynamicMaterialDriver::IDynamicMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::IDynamicMaterialFloatDriver::IDynamicMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::LerpMaterialDriver::LerpMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBoolDriver = prop->cast_prop<yordle::data::prop::structure_prop>(3971470678u);
    if (ptr_mBoolDriver != nullptr) {
        mBoolDriver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialBoolDriver>(ptr_mBoolDriver, 3663840478u);
    }

    auto ptr_mOnValue = prop->cast_prop<yordle::data::prop::float32_prop>(40847278u);
    if (ptr_mOnValue != nullptr) {
        mOnValue = ptr_mOnValue->value;
    }

    auto ptr_mOffValue = prop->cast_prop<yordle::data::prop::float32_prop>(255992418u);
    if (ptr_mOffValue != nullptr) {
        mOffValue = ptr_mOffValue->value;
    }

    auto ptr_mTurnOnTimeSec = prop->cast_prop<yordle::data::prop::float32_prop>(795636852u);
    if (ptr_mTurnOnTimeSec != nullptr) {
        mTurnOnTimeSec = ptr_mTurnOnTimeSec->value;
    }

    auto ptr_mTurnOffTimeSec = prop->cast_prop<yordle::data::prop::float32_prop>(650281490u);
    if (ptr_mTurnOffTimeSec != nullptr) {
        mTurnOffTimeSec = ptr_mTurnOffTimeSec->value;
    }

    auto ptr_xa452be9f = prop->cast_prop<yordle::data::prop::bool_prop>(2756886175u);
    if (ptr_xa452be9f != nullptr) {
        xa452be9f = ptr_xa452be9f->value;
    }
}

yordle::data::meta::MaxMaterialDriver::MaxMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDrivers = prop->cast_prop<yordle::data::prop::set_prop>(2060372495u);
    if (ptr_mDrivers != nullptr) {
        for (const auto &entry : ptr_mDrivers->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mDrivers.emplace(yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialDriver>(ptr_entry, 1009087838u));
            }
        }
    }
}

yordle::data::meta::MinMaterialDriver::MinMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDrivers = prop->cast_prop<yordle::data::prop::set_prop>(2060372495u);
    if (ptr_mDrivers != nullptr) {
        for (const auto &entry : ptr_mDrivers->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mDrivers.emplace(yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialDriver>(ptr_entry, 1009087838u));
            }
        }
    }
}

yordle::data::meta::RemapFloatMaterialDriver::RemapFloatMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDriver = prop->cast_prop<yordle::data::prop::structure_prop>(2231653222u);
    if (ptr_mDriver != nullptr) {
        mDriver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialFloatDriver>(ptr_mDriver, 1090223300u);
    }

    auto ptr_mMinValue = prop->cast_prop<yordle::data::prop::float32_prop>(1364466029u);
    if (ptr_mMinValue != nullptr) {
        mMinValue = ptr_mMinValue->value;
    }

    auto ptr_mMaxValue = prop->cast_prop<yordle::data::prop::float32_prop>(1603283223u);
    if (ptr_mMaxValue != nullptr) {
        mMaxValue = ptr_mMaxValue->value;
    }

    auto ptr_mOutputMinValue = prop->cast_prop<yordle::data::prop::float32_prop>(4072804348u);
    if (ptr_mOutputMinValue != nullptr) {
        mOutputMinValue = ptr_mOutputMinValue->value;
    }

    auto ptr_mOutputMaxValue = prop->cast_prop<yordle::data::prop::float32_prop>(3827115510u);
    if (ptr_mOutputMaxValue != nullptr) {
        mOutputMaxValue = ptr_mOutputMaxValue->value;
    }
}

yordle::data::meta::SineMaterialDriver::SineMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDriver = prop->cast_prop<yordle::data::prop::structure_prop>(2231653222u);
    if (ptr_mDriver != nullptr) {
        mDriver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialFloatDriver>(ptr_mDriver, 1090223300u);
    }

    auto ptr_mFrequency = prop->cast_prop<yordle::data::prop::float32_prop>(825003174u);
    if (ptr_mFrequency != nullptr) {
        mFrequency = ptr_mFrequency->value;
    }

    auto ptr_mScale = prop->cast_prop<yordle::data::prop::float32_prop>(1962815642u);
    if (ptr_mScale != nullptr) {
        mScale = ptr_mScale->value;
    }

    auto ptr_mBias = prop->cast_prop<yordle::data::prop::float32_prop>(536303437u);
    if (ptr_mBias != nullptr) {
        mBias = ptr_mBias->value;
    }
}

yordle::data::meta::SpecificColorMaterialDriver::SpecificColorMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(1399972751u);
    if (ptr_mColor != nullptr) {
        mColor = ptr_mColor->value;
    }
}

yordle::data::meta::SwitchMaterialDriverElement::SwitchMaterialDriverElement(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCondition = prop->cast_prop<yordle::data::prop::structure_prop>(813840573u);
    if (ptr_mCondition != nullptr) {
        mCondition = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialBoolDriver>(ptr_mCondition, 3663840478u);
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::structure_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialDriver>(ptr_mValue, 1009087838u);
    }
}

yordle::data::meta::SwitchMaterialDriver::SwitchMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mElements = prop->cast_prop<yordle::data::prop::set_prop>(1929323817u);
    if (ptr_mElements != nullptr) {
        for (const auto &entry : ptr_mElements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mElements.emplace(yordle::data::meta::deserialize<yordle::data::meta::SwitchMaterialDriverElement>(ptr_entry, 1173409658u));
            }
        }
    }

    auto ptr_mDefaultValue = prop->cast_prop<yordle::data::prop::structure_prop>(3115772794u);
    if (ptr_mDefaultValue != nullptr) {
        mDefaultValue = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialDriver>(ptr_mDefaultValue, 1009087838u);
    }
}

yordle::data::meta::BlendingSwitchMaterialDriver::BlendingSwitchMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : SwitchMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBlendTime = prop->cast_prop<yordle::data::prop::float32_prop>(970057882u);
    if (ptr_mBlendTime != nullptr) {
        mBlendTime = ptr_mBlendTime->value;
    }

    auto ptr_mOverrideBlendTimes = prop->cast_prop<yordle::data::prop::set_prop>(642664763u);
    if (ptr_mOverrideBlendTimes != nullptr) {
        for (const auto &entry : ptr_mOverrideBlendTimes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(entry);
            if (ptr_entry != nullptr) {
                mOverrideBlendTimes.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::TimeMaterialDriver::TimeMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::IdMappingEntry::IdMappingEntry(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ID = prop->cast_prop<yordle::data::prop::uint16_prop>(926444256u);
    if (ptr_ID != nullptr) {
        ID = ptr_ID->value;
    }

    auto ptr_Count = prop->cast_prop<yordle::data::prop::uint16_prop>(967958004u);
    if (ptr_Count != nullptr) {
        Count = ptr_Count->value;
    }
}

yordle::data::meta::HybridMaterialDefPreset::HybridMaterialDefPreset(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_shaderMacros = prop->cast_prop<yordle::data::prop::map_prop>(3872816621u);
    if (ptr_shaderMacros != nullptr) {
        for (const auto &pair : ptr_shaderMacros->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                shaderMacros[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_depthEnable = prop->cast_prop<yordle::data::prop::bool_prop>(3528489273u);
    if (ptr_depthEnable != nullptr) {
        depthEnable = ptr_depthEnable->value;
    }

    auto ptr_stencilEnable = prop->cast_prop<yordle::data::prop::bool_prop>(1146928892u);
    if (ptr_stencilEnable != nullptr) {
        stencilEnable = ptr_stencilEnable->value;
    }

    auto ptr_blendEnable = prop->cast_prop<yordle::data::prop::bool_prop>(599217559u);
    if (ptr_blendEnable != nullptr) {
        blendEnable = ptr_blendEnable->value;
    }

    auto ptr_cullEnable = prop->cast_prop<yordle::data::prop::bool_prop>(1259296206u);
    if (ptr_cullEnable != nullptr) {
        cullEnable = ptr_cullEnable->value;
    }

    auto ptr_xaab4104c = prop->cast_prop<yordle::data::prop::bool_prop>(2863927372u);
    if (ptr_xaab4104c != nullptr) {
        xaab4104c = ptr_xaab4104c->value;
    }

    auto ptr_depthCompareFunc = prop->cast_prop<yordle::data::prop::uint8_prop>(2697402219u);
    if (ptr_depthCompareFunc != nullptr) {
        depthCompareFunc = ptr_depthCompareFunc->value;
    }

    auto ptr_stencilCompareFunc = prop->cast_prop<yordle::data::prop::uint8_prop>(2544340276u);
    if (ptr_stencilCompareFunc != nullptr) {
        stencilCompareFunc = ptr_stencilCompareFunc->value;
    }

    auto ptr_stencilReferenceVal = prop->cast_prop<yordle::data::prop::uint32_prop>(3448804615u);
    if (ptr_stencilReferenceVal != nullptr) {
        stencilReferenceVal = ptr_stencilReferenceVal->value;
    }

    auto ptr_stencilMask = prop->cast_prop<yordle::data::prop::uint32_prop>(3062613287u);
    if (ptr_stencilMask != nullptr) {
        stencilMask = ptr_stencilMask->value;
    }

    auto ptr_stencilFailOp = prop->cast_prop<yordle::data::prop::uint8_prop>(3703169072u);
    if (ptr_stencilFailOp != nullptr) {
        stencilFailOp = ptr_stencilFailOp->value;
    }

    auto ptr_stencilPassDepthFailOp = prop->cast_prop<yordle::data::prop::uint8_prop>(2959881956u);
    if (ptr_stencilPassDepthFailOp != nullptr) {
        stencilPassDepthFailOp = ptr_stencilPassDepthFailOp->value;
    }

    auto ptr_stencilPassDepthPassOp = prop->cast_prop<yordle::data::prop::uint8_prop>(1502843381u);
    if (ptr_stencilPassDepthPassOp != nullptr) {
        stencilPassDepthPassOp = ptr_stencilPassDepthPassOp->value;
    }

    auto ptr_srcColorBlendFactor = prop->cast_prop<yordle::data::prop::uint8_prop>(583059408u);
    if (ptr_srcColorBlendFactor != nullptr) {
        srcColorBlendFactor = ptr_srcColorBlendFactor->value;
    }

    auto ptr_srcAlphaBlendFactor = prop->cast_prop<yordle::data::prop::uint8_prop>(2694155521u);
    if (ptr_srcAlphaBlendFactor != nullptr) {
        srcAlphaBlendFactor = ptr_srcAlphaBlendFactor->value;
    }

    auto ptr_dstColorBlendFactor = prop->cast_prop<yordle::data::prop::uint8_prop>(3188374517u);
    if (ptr_dstColorBlendFactor != nullptr) {
        dstColorBlendFactor = ptr_dstColorBlendFactor->value;
    }

    auto ptr_dstAlphaBlendFactor = prop->cast_prop<yordle::data::prop::uint8_prop>(1938154804u);
    if (ptr_dstAlphaBlendFactor != nullptr) {
        dstAlphaBlendFactor = ptr_dstAlphaBlendFactor->value;
    }

    auto ptr_blendEquation = prop->cast_prop<yordle::data::prop::uint8_prop>(2415646430u);
    if (ptr_blendEquation != nullptr) {
        blendEquation = ptr_blendEquation->value;
    }

    auto ptr_windingToCull = prop->cast_prop<yordle::data::prop::uint8_prop>(1267909100u);
    if (ptr_windingToCull != nullptr) {
        windingToCull = ptr_windingToCull->value;
    }

    auto ptr_writeMask = prop->cast_prop<yordle::data::prop::uint8_prop>(3125879276u);
    if (ptr_writeMask != nullptr) {
        writeMask = ptr_writeMask->value;
    }

    auto ptr_depthOffsetSlope = prop->cast_prop<yordle::data::prop::float32_prop>(67660240u);
    if (ptr_depthOffsetSlope != nullptr) {
        depthOffsetSlope = ptr_depthOffsetSlope->value;
    }

    auto ptr_depthOffsetBias = prop->cast_prop<yordle::data::prop::float32_prop>(4249953804u);
    if (ptr_depthOffsetBias != nullptr) {
        depthOffsetBias = ptr_depthOffsetBias->value;
    }
}

yordle::data::meta::IMaterialDef::IMaterialDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ShaderLogicalParameter::ShaderLogicalParameter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_fields = prop->cast_prop<yordle::data::prop::uint32_prop>(104883580u);
    if (ptr_fields != nullptr) {
        fields = ptr_fields->value;
    }
}

yordle::data::meta::ShaderPhysicalParameter::ShaderPhysicalParameter(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_data = prop->cast_prop<yordle::data::prop::quaternion_prop>(3631407781u);
    if (ptr_data != nullptr) {
        data = ptr_data->value;
    }

    auto ptr_logicalParameters = prop->cast_prop<yordle::data::prop::set_prop>(1952915864u);
    if (ptr_logicalParameters != nullptr) {
        for (const auto &entry : ptr_logicalParameters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                logicalParameters.emplace(yordle::data::meta::deserialize<yordle::data::meta::ShaderLogicalParameter>(ptr_entry, 346210042u));
            }
        }
    }
}

yordle::data::meta::ShaderStaticSwitch::ShaderStaticSwitch(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_onByDefault = prop->cast_prop<yordle::data::prop::bool_prop>(2867435862u);
    if (ptr_onByDefault != nullptr) {
        onByDefault = ptr_onByDefault->value;
    }
}

yordle::data::meta::ShaderTexture::ShaderTexture(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_defaultTexturePath = prop->cast_prop<yordle::data::prop::string_prop>(850621690u);
    if (ptr_defaultTexturePath != nullptr) {
        defaultTexturePath = ptr_defaultTexturePath->value;
    }
}

yordle::data::meta::IShaderDef::IShaderDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_parameters = prop->cast_prop<yordle::data::prop::set_prop>(1218784985u);
    if (ptr_parameters != nullptr) {
        for (const auto &entry : ptr_parameters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                parameters.emplace(yordle::data::meta::deserialize<yordle::data::meta::ShaderPhysicalParameter>(ptr_entry, 2171032536u));
            }
        }
    }

    auto ptr_staticSwitches = prop->cast_prop<yordle::data::prop::set_prop>(848380795u);
    if (ptr_staticSwitches != nullptr) {
        for (const auto &entry : ptr_staticSwitches->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                staticSwitches.emplace(yordle::data::meta::deserialize<yordle::data::meta::ShaderStaticSwitch>(ptr_entry, 1621267174u));
            }
        }
    }

    auto ptr_textures = prop->cast_prop<yordle::data::prop::set_prop>(2567998597u);
    if (ptr_textures != nullptr) {
        for (const auto &entry : ptr_textures->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                textures.emplace(yordle::data::meta::deserialize<yordle::data::meta::ShaderTexture>(ptr_entry, 835838499u));
            }
        }
    }

    auto ptr_featureDefines = prop->cast_prop<yordle::data::prop::map_prop>(2921932923u);
    if (ptr_featureDefines != nullptr) {
        for (const auto &pair : ptr_featureDefines->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                featureDefines[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_featureMask = prop->cast_prop<yordle::data::prop::uint32_prop>(632775201u);
    if (ptr_featureMask != nullptr) {
        featureMask = ptr_featureMask->value;
    }

    auto ptr_x9bfe7d81 = prop->cast_prop<yordle::data::prop::uint32_prop>(2617146753u);
    if (ptr_x9bfe7d81 != nullptr) {
        x9bfe7d81 = ptr_x9bfe7d81->value;
    }
}

yordle::data::meta::MaterialParameterData::MaterialParameterData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_type = prop->cast_prop<yordle::data::prop::uint8_prop>(1361572173u);
    if (ptr_type != nullptr) {
        type = ptr_type->value;
    }

    auto ptr_DefaultValue = prop->cast_prop<yordle::data::prop::quaternion_prop>(102228511u);
    if (ptr_DefaultValue != nullptr) {
        DefaultValue = ptr_DefaultValue->value;
    }
}

yordle::data::meta::MaterialTextureData::MaterialTextureData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_defaultTexturePath = prop->cast_prop<yordle::data::prop::string_prop>(850621690u);
    if (ptr_defaultTexturePath != nullptr) {
        defaultTexturePath = ptr_defaultTexturePath->value;
    }

    auto ptr_addressU = prop->cast_prop<yordle::data::prop::uint8_prop>(287229650u);
    if (ptr_addressU != nullptr) {
        addressU = ptr_addressU->value;
    }

    auto ptr_addressV = prop->cast_prop<yordle::data::prop::uint8_prop>(270452031u);
    if (ptr_addressV != nullptr) {
        addressV = ptr_addressV->value;
    }

    auto ptr_addressW = prop->cast_prop<yordle::data::prop::uint8_prop>(253674412u);
    if (ptr_addressW != nullptr) {
        addressW = ptr_addressW->value;
    }

    auto ptr_filterMin = prop->cast_prop<yordle::data::prop::uint8_prop>(422645233u);
    if (ptr_filterMin != nullptr) {
        filterMin = ptr_filterMin->value;
    }

    auto ptr_filterMip = prop->cast_prop<yordle::data::prop::uint8_prop>(590421423u);
    if (ptr_filterMip != nullptr) {
        filterMip = ptr_filterMip->value;
    }

    auto ptr_filterMag = prop->cast_prop<yordle::data::prop::uint8_prop>(1078252302u);
    if (ptr_filterMag != nullptr) {
        filterMag = ptr_filterMag->value;
    }
}

yordle::data::meta::MaterialSwitchData::MaterialSwitchData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_on = prop->cast_prop<yordle::data::prop::bool_prop>(1630810064u);
    if (ptr_on != nullptr) {
        on = ptr_on->value;
    }
}

yordle::data::meta::MaterialParameterDataCollection::MaterialParameterDataCollection(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_nextID = prop->cast_prop<yordle::data::prop::uint16_prop>(2874286421u);
    if (ptr_nextID != nullptr) {
        nextID = ptr_nextID->value;
    }

    auto ptr_Entries = prop->cast_prop<yordle::data::prop::map_prop>(1868071667u);
    if (ptr_Entries != nullptr) {
        for (const auto &pair : ptr_Entries->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                Entries[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::IdMappingEntry>(ptr_value, 176045846u);
            }
        }
    }

    auto ptr_xea57bf12 = prop->cast_prop<yordle::data::prop::string_prop>(3931619090u);
    if (ptr_xea57bf12 != nullptr) {
        xea57bf12 = ptr_xea57bf12->value;
    }

    auto ptr_data = prop->cast_prop<yordle::data::prop::map_prop>(3631407781u);
    if (ptr_data != nullptr) {
        for (const auto &pair : ptr_data->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint16_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                data[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MaterialParameterData>(ptr_value, 1407148951u);
            }
        }
    }
}

yordle::data::meta::MaterialTextureDataCollection::MaterialTextureDataCollection(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_nextID = prop->cast_prop<yordle::data::prop::uint16_prop>(2874286421u);
    if (ptr_nextID != nullptr) {
        nextID = ptr_nextID->value;
    }

    auto ptr_Entries = prop->cast_prop<yordle::data::prop::map_prop>(1868071667u);
    if (ptr_Entries != nullptr) {
        for (const auto &pair : ptr_Entries->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                Entries[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::IdMappingEntry>(ptr_value, 176045846u);
            }
        }
    }

    auto ptr_xea57bf12 = prop->cast_prop<yordle::data::prop::string_prop>(3931619090u);
    if (ptr_xea57bf12 != nullptr) {
        xea57bf12 = ptr_xea57bf12->value;
    }

    auto ptr_data = prop->cast_prop<yordle::data::prop::map_prop>(3631407781u);
    if (ptr_data != nullptr) {
        for (const auto &pair : ptr_data->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint16_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                data[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MaterialTextureData>(ptr_value, 3791453475u);
            }
        }
    }
}

yordle::data::meta::MaterialSwitchDataCollection::MaterialSwitchDataCollection(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_nextID = prop->cast_prop<yordle::data::prop::uint16_prop>(2874286421u);
    if (ptr_nextID != nullptr) {
        nextID = ptr_nextID->value;
    }

    auto ptr_Entries = prop->cast_prop<yordle::data::prop::map_prop>(1868071667u);
    if (ptr_Entries != nullptr) {
        for (const auto &pair : ptr_Entries->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                Entries[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::IdMappingEntry>(ptr_value, 176045846u);
            }
        }
    }

    auto ptr_xea57bf12 = prop->cast_prop<yordle::data::prop::string_prop>(3931619090u);
    if (ptr_xea57bf12 != nullptr) {
        xea57bf12 = ptr_xea57bf12->value;
    }

    auto ptr_data = prop->cast_prop<yordle::data::prop::map_prop>(3631407781u);
    if (ptr_data != nullptr) {
        for (const auto &pair : ptr_data->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint16_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                data[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MaterialSwitchData>(ptr_value, 1327860340u);
            }
        }
    }
}

yordle::data::meta::MaterialDataCollections::MaterialDataCollections(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ParameterData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2084884472u);
    if (ptr_ParameterData != nullptr) {
        ParameterData = yordle::data::meta::deserialize<yordle::data::meta::MaterialParameterDataCollection>(ptr_ParameterData, 3921803671u);
    }

    auto ptr_TextureData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3842163164u);
    if (ptr_TextureData != nullptr) {
        TextureData = yordle::data::meta::deserialize<yordle::data::meta::MaterialTextureDataCollection>(ptr_TextureData, 1749974331u);
    }

    auto ptr_switchData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2718256129u);
    if (ptr_switchData != nullptr) {
        switchData = yordle::data::meta::deserialize<yordle::data::meta::MaterialSwitchDataCollection>(ptr_switchData, 3078356408u);
    }
}

yordle::data::meta::MaterialInstanceParamDef::MaterialInstanceParamDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::quaternion_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = ptr_value->value;
    }
}

yordle::data::meta::MaterialInstanceSwitchDef::MaterialInstanceSwitchDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_on = prop->cast_prop<yordle::data::prop::bool_prop>(1630810064u);
    if (ptr_on != nullptr) {
        on = ptr_on->value;
    }
}

yordle::data::meta::MaterialInstanceTextureDef::MaterialInstanceTextureDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_texturePath = prop->cast_prop<yordle::data::prop::string_prop>(4037239779u);
    if (ptr_texturePath != nullptr) {
        texturePath = ptr_texturePath->value;
    }

    auto ptr_uncensoredTextures = prop->cast_prop<yordle::data::prop::map_prop>(1284590733u);
    if (ptr_uncensoredTextures != nullptr) {
        for (const auto &pair : ptr_uncensoredTextures->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                uncensoredTextures[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::xf7084b4a::xf7084b4a(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_shaderMacros = prop->cast_prop<yordle::data::prop::map_prop>(3872816621u);
    if (ptr_shaderMacros != nullptr) {
        for (const auto &pair : ptr_shaderMacros->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                shaderMacros[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::MaterialInstanceDynamicParam::MaterialInstanceDynamicParam(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_enabled = prop->cast_prop<yordle::data::prop::bool_prop>(49525662u);
    if (ptr_enabled != nullptr) {
        enabled = ptr_enabled->value;
    }

    auto ptr_driver = prop->cast_prop<yordle::data::prop::structure_prop>(3847494111u);
    if (ptr_driver != nullptr) {
        driver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialDriver>(ptr_driver, 1009087838u);
    }
}

yordle::data::meta::MaterialInstanceDynamicSwitch::MaterialInstanceDynamicSwitch(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_enabled = prop->cast_prop<yordle::data::prop::bool_prop>(49525662u);
    if (ptr_enabled != nullptr) {
        enabled = ptr_enabled->value;
    }

    auto ptr_driver = prop->cast_prop<yordle::data::prop::structure_prop>(3847494111u);
    if (ptr_driver != nullptr) {
        driver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialBoolDriver>(ptr_driver, 3663840478u);
    }
}

yordle::data::meta::MaterialInstanceDynamicTexture::MaterialInstanceDynamicTexture(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_enabled = prop->cast_prop<yordle::data::prop::bool_prop>(49525662u);
    if (ptr_enabled != nullptr) {
        enabled = ptr_enabled->value;
    }

    auto ptr_options = prop->cast_prop<yordle::data::prop::set_prop>(4012403877u);
    if (ptr_options != nullptr) {
        for (const auto &entry : ptr_options->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                options.emplace(yordle::data::meta::deserialize<yordle::data::meta::DynamicMaterialTextureSwapOption>(ptr_entry, 567330916u));
            }
        }
    }
}

yordle::data::meta::StaticMaterialShaderParamDef::StaticMaterialShaderParamDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::quaternion_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = ptr_value->value;
    }
}

yordle::data::meta::StaticMaterialSwitchDef::StaticMaterialSwitchDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_on = prop->cast_prop<yordle::data::prop::bool_prop>(1630810064u);
    if (ptr_on != nullptr) {
        on = ptr_on->value;
    }
}

yordle::data::meta::StaticMaterialShaderSamplerDef::StaticMaterialShaderSamplerDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_samplerName = prop->cast_prop<yordle::data::prop::string_prop>(48757580u);
    if (ptr_samplerName != nullptr) {
        samplerName = ptr_samplerName->value;
    }

    auto ptr_textureName = prop->cast_prop<yordle::data::prop::string_prop>(3004290287u);
    if (ptr_textureName != nullptr) {
        textureName = ptr_textureName->value;
    }

    auto ptr_uncensoredTextures = prop->cast_prop<yordle::data::prop::map_prop>(1284590733u);
    if (ptr_uncensoredTextures != nullptr) {
        for (const auto &pair : ptr_uncensoredTextures->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                uncensoredTextures[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_addressU = prop->cast_prop<yordle::data::prop::uint32_prop>(287229650u);
    if (ptr_addressU != nullptr) {
        addressU = ptr_addressU->value;
    }

    auto ptr_addressV = prop->cast_prop<yordle::data::prop::uint32_prop>(270452031u);
    if (ptr_addressV != nullptr) {
        addressV = ptr_addressV->value;
    }

    auto ptr_addressW = prop->cast_prop<yordle::data::prop::uint32_prop>(253674412u);
    if (ptr_addressW != nullptr) {
        addressW = ptr_addressW->value;
    }

    auto ptr_filterMin = prop->cast_prop<yordle::data::prop::uint32_prop>(422645233u);
    if (ptr_filterMin != nullptr) {
        filterMin = ptr_filterMin->value;
    }

    auto ptr_filterMip = prop->cast_prop<yordle::data::prop::uint32_prop>(590421423u);
    if (ptr_filterMip != nullptr) {
        filterMip = ptr_filterMip->value;
    }

    auto ptr_filterMag = prop->cast_prop<yordle::data::prop::uint32_prop>(1078252302u);
    if (ptr_filterMag != nullptr) {
        filterMag = ptr_filterMag->value;
    }
}

yordle::data::meta::StaticMaterialPassDef::StaticMaterialPassDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_shader = prop->cast_prop<yordle::data::prop::reference_prop>(895309160u);
    if (ptr_shader != nullptr) {
        shader = ptr_shader->value;
    }

    auto ptr_shaderMacros = prop->cast_prop<yordle::data::prop::map_prop>(3872816621u);
    if (ptr_shaderMacros != nullptr) {
        for (const auto &pair : ptr_shaderMacros->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                shaderMacros[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_paramValues = prop->cast_prop<yordle::data::prop::set_prop>(3500885688u);
    if (ptr_paramValues != nullptr) {
        for (const auto &entry : ptr_paramValues->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                paramValues.emplace(yordle::data::meta::deserialize<yordle::data::meta::StaticMaterialShaderParamDef>(ptr_entry, 3729264367u));
            }
        }
    }

    auto ptr_depthEnable = prop->cast_prop<yordle::data::prop::bool_prop>(3528489273u);
    if (ptr_depthEnable != nullptr) {
        depthEnable = ptr_depthEnable->value;
    }

    auto ptr_stencilEnable = prop->cast_prop<yordle::data::prop::bool_prop>(1146928892u);
    if (ptr_stencilEnable != nullptr) {
        stencilEnable = ptr_stencilEnable->value;
    }

    auto ptr_blendEnable = prop->cast_prop<yordle::data::prop::bool_prop>(599217559u);
    if (ptr_blendEnable != nullptr) {
        blendEnable = ptr_blendEnable->value;
    }

    auto ptr_cullEnable = prop->cast_prop<yordle::data::prop::bool_prop>(1259296206u);
    if (ptr_cullEnable != nullptr) {
        cullEnable = ptr_cullEnable->value;
    }

    auto ptr_xaab4104c = prop->cast_prop<yordle::data::prop::bool_prop>(2863927372u);
    if (ptr_xaab4104c != nullptr) {
        xaab4104c = ptr_xaab4104c->value;
    }

    auto ptr_depthCompareFunc = prop->cast_prop<yordle::data::prop::uint32_prop>(2697402219u);
    if (ptr_depthCompareFunc != nullptr) {
        depthCompareFunc = ptr_depthCompareFunc->value;
    }

    auto ptr_stencilCompareFunc = prop->cast_prop<yordle::data::prop::uint32_prop>(2544340276u);
    if (ptr_stencilCompareFunc != nullptr) {
        stencilCompareFunc = ptr_stencilCompareFunc->value;
    }

    auto ptr_stencilReferenceVal = prop->cast_prop<yordle::data::prop::uint32_prop>(3448804615u);
    if (ptr_stencilReferenceVal != nullptr) {
        stencilReferenceVal = ptr_stencilReferenceVal->value;
    }

    auto ptr_stencilMask = prop->cast_prop<yordle::data::prop::uint32_prop>(3062613287u);
    if (ptr_stencilMask != nullptr) {
        stencilMask = ptr_stencilMask->value;
    }

    auto ptr_stencilFailOp = prop->cast_prop<yordle::data::prop::uint32_prop>(3703169072u);
    if (ptr_stencilFailOp != nullptr) {
        stencilFailOp = ptr_stencilFailOp->value;
    }

    auto ptr_stencilPassDepthFailOp = prop->cast_prop<yordle::data::prop::uint32_prop>(2959881956u);
    if (ptr_stencilPassDepthFailOp != nullptr) {
        stencilPassDepthFailOp = ptr_stencilPassDepthFailOp->value;
    }

    auto ptr_stencilPassDepthPassOp = prop->cast_prop<yordle::data::prop::uint32_prop>(1502843381u);
    if (ptr_stencilPassDepthPassOp != nullptr) {
        stencilPassDepthPassOp = ptr_stencilPassDepthPassOp->value;
    }

    auto ptr_srcColorBlendFactor = prop->cast_prop<yordle::data::prop::uint32_prop>(583059408u);
    if (ptr_srcColorBlendFactor != nullptr) {
        srcColorBlendFactor = ptr_srcColorBlendFactor->value;
    }

    auto ptr_srcAlphaBlendFactor = prop->cast_prop<yordle::data::prop::uint32_prop>(2694155521u);
    if (ptr_srcAlphaBlendFactor != nullptr) {
        srcAlphaBlendFactor = ptr_srcAlphaBlendFactor->value;
    }

    auto ptr_dstColorBlendFactor = prop->cast_prop<yordle::data::prop::uint32_prop>(3188374517u);
    if (ptr_dstColorBlendFactor != nullptr) {
        dstColorBlendFactor = ptr_dstColorBlendFactor->value;
    }

    auto ptr_dstAlphaBlendFactor = prop->cast_prop<yordle::data::prop::uint32_prop>(1938154804u);
    if (ptr_dstAlphaBlendFactor != nullptr) {
        dstAlphaBlendFactor = ptr_dstAlphaBlendFactor->value;
    }

    auto ptr_blendEquation = prop->cast_prop<yordle::data::prop::uint32_prop>(2415646430u);
    if (ptr_blendEquation != nullptr) {
        blendEquation = ptr_blendEquation->value;
    }

    auto ptr_windingToCull = prop->cast_prop<yordle::data::prop::uint32_prop>(1267909100u);
    if (ptr_windingToCull != nullptr) {
        windingToCull = ptr_windingToCull->value;
    }

    auto ptr_writeMask = prop->cast_prop<yordle::data::prop::uint32_prop>(3125879276u);
    if (ptr_writeMask != nullptr) {
        writeMask = ptr_writeMask->value;
    }

    auto ptr_depthOffsetSlope = prop->cast_prop<yordle::data::prop::float32_prop>(67660240u);
    if (ptr_depthOffsetSlope != nullptr) {
        depthOffsetSlope = ptr_depthOffsetSlope->value;
    }

    auto ptr_depthOffsetBias = prop->cast_prop<yordle::data::prop::float32_prop>(4249953804u);
    if (ptr_depthOffsetBias != nullptr) {
        depthOffsetBias = ptr_depthOffsetBias->value;
    }
}

yordle::data::meta::StaticMaterialTechniqueDef::StaticMaterialTechniqueDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_passes = prop->cast_prop<yordle::data::prop::set_prop>(1648153180u);
    if (ptr_passes != nullptr) {
        for (const auto &entry : ptr_passes->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                passes.emplace(yordle::data::meta::deserialize<yordle::data::meta::StaticMaterialPassDef>(ptr_entry, 2235027650u));
            }
        }
    }
}

yordle::data::meta::StaticMaterialChildTechniqueDef::StaticMaterialChildTechniqueDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_parentName = prop->cast_prop<yordle::data::prop::string_prop>(3063326206u);
    if (ptr_parentName != nullptr) {
        parentName = ptr_parentName->value;
    }

    auto ptr_shaderMacros = prop->cast_prop<yordle::data::prop::map_prop>(3872816621u);
    if (ptr_shaderMacros != nullptr) {
        for (const auto &pair : ptr_shaderMacros->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                shaderMacros[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::MapPerInstanceInfo::MapPerInstanceInfo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_shadowMapPath = prop->cast_prop<yordle::data::prop::string_prop>(3971273918u);
    if (ptr_shadowMapPath != nullptr) {
        shadowMapPath = ptr_shadowMapPath->value;
    }

    auto ptr_shadowMapUVScaleAndBias = prop->cast_prop<yordle::data::prop::quaternion_prop>(2774890840u);
    if (ptr_shadowMapUVScaleAndBias != nullptr) {
        shadowMapUVScaleAndBias = ptr_shadowMapUVScaleAndBias->value;
    }
}

yordle::data::meta::MapBakeProperties::MapBakeProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapComponent(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_lightGridSize = prop->cast_prop<yordle::data::prop::uint32_prop>(1184620962u);
    if (ptr_lightGridSize != nullptr) {
        lightGridSize = ptr_lightGridSize->value;
    }

    auto ptr_x22d24a9a = prop->cast_prop<yordle::data::prop::float32_prop>(584207002u);
    if (ptr_x22d24a9a != nullptr) {
        x22d24a9a = ptr_x22d24a9a->value;
    }

    auto ptr_lightGridCharacterFullBrightIntensity = prop->cast_prop<yordle::data::prop::float32_prop>(1550454284u);
    if (ptr_lightGridCharacterFullBrightIntensity != nullptr) {
        lightGridCharacterFullBrightIntensity = ptr_lightGridCharacterFullBrightIntensity->value;
    }

    auto ptr_xea4e5cc8 = prop->cast_prop<yordle::data::prop::float32_prop>(3931004104u);
    if (ptr_xea4e5cc8 != nullptr) {
        xea4e5cc8 = ptr_xea4e5cc8->value;
    }

    auto ptr_x2f3b5471 = prop->cast_prop<yordle::data::prop::float32_prop>(792417393u);
    if (ptr_x2f3b5471 != nullptr) {
        x2f3b5471 = ptr_x2f3b5471->value;
    }

    auto ptr_lightGridFileName = prop->cast_prop<yordle::data::prop::string_prop>(1969336478u);
    if (ptr_lightGridFileName != nullptr) {
        lightGridFileName = ptr_lightGridFileName->value;
    }
}

yordle::data::meta::MapCloudsLayer::MapCloudsLayer(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_scale = prop->cast_prop<yordle::data::prop::float32_prop>(2190941297u);
    if (ptr_scale != nullptr) {
        scale = ptr_scale->value;
    }

    auto ptr_speed = prop->cast_prop<yordle::data::prop::float32_prop>(2072037248u);
    if (ptr_speed != nullptr) {
        speed = ptr_speed->value;
    }

    auto ptr_direction = prop->cast_prop<yordle::data::prop::point_prop>(3748513642u);
    if (ptr_direction != nullptr) {
        direction = ptr_direction->value;
    }
}

yordle::data::meta::MapGraphicsFeature::MapGraphicsFeature(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapComponent(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::MapLightingV2::MapLightingV2(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapGraphicsFeature(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xee91017d = prop->cast_prop<yordle::data::prop::float32_prop>(4002480509u);
    if (ptr_xee91017d != nullptr) {
        xee91017d = ptr_xee91017d->value;
    }

    auto ptr_xc916a9fc = prop->cast_prop<yordle::data::prop::float32_prop>(3373705724u);
    if (ptr_xc916a9fc != nullptr) {
        xc916a9fc = ptr_xc916a9fc->value;
    }
}

yordle::data::meta::MapLightingVolume::MapLightingVolume(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapPlaceable(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_sunColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(1716133700u);
    if (ptr_sunColor != nullptr) {
        sunColor = ptr_sunColor->value;
    }

    auto ptr_sunDirection = prop->cast_prop<yordle::data::prop::vector_prop>(3784342774u);
    if (ptr_sunDirection != nullptr) {
        sunDirection = ptr_sunDirection->value;
    }

    auto ptr_xa04bd9bf = prop->cast_prop<yordle::data::prop::optional_prop>(2689325503u);
    if (ptr_xa04bd9bf != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::vector_prop>(ptr_xa04bd9bf->value);
        if(ptr_entry != nullptr) {
            xa04bd9bf = ptr_entry->value;
        }
    }

    auto ptr_xd8851203 = prop->cast_prop<yordle::data::prop::float32_prop>(3632599555u);
    if (ptr_xd8851203 != nullptr) {
        xd8851203 = ptr_xd8851203->value;
    }

    auto ptr_xba02f116 = prop->cast_prop<yordle::data::prop::float32_prop>(3120754966u);
    if (ptr_xba02f116 != nullptr) {
        xba02f116 = ptr_xba02f116->value;
    }

    auto ptr_skyLightColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(174422349u);
    if (ptr_skyLightColor != nullptr) {
        skyLightColor = ptr_skyLightColor->value;
    }

    auto ptr_horizonColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(4248650671u);
    if (ptr_horizonColor != nullptr) {
        horizonColor = ptr_horizonColor->value;
    }

    auto ptr_groundColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(1480323041u);
    if (ptr_groundColor != nullptr) {
        groundColor = ptr_groundColor->value;
    }

    auto ptr_skyLightScale = prop->cast_prop<yordle::data::prop::float32_prop>(3013280816u);
    if (ptr_skyLightScale != nullptr) {
        skyLightScale = ptr_skyLightScale->value;
    }

    auto ptr_lightMapColorScale = prop->cast_prop<yordle::data::prop::float32_prop>(2557103452u);
    if (ptr_lightMapColorScale != nullptr) {
        lightMapColorScale = ptr_lightMapColorScale->value;
    }

    auto ptr_fogEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(8689476u);
    if (ptr_fogEnabled != nullptr) {
        fogEnabled = ptr_fogEnabled->value;
    }

    auto ptr_fogColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(37429198u);
    if (ptr_fogColor != nullptr) {
        fogColor = ptr_fogColor->value;
    }

    auto ptr_fogAlternateColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(1217852122u);
    if (ptr_fogAlternateColor != nullptr) {
        fogAlternateColor = ptr_fogAlternateColor->value;
    }

    auto ptr_fogStartAndEnd = prop->cast_prop<yordle::data::prop::point_prop>(1923555699u);
    if (ptr_fogStartAndEnd != nullptr) {
        fogStartAndEnd = ptr_fogStartAndEnd->value;
    }

    auto ptr_fogEmissiveRemap = prop->cast_prop<yordle::data::prop::float32_prop>(666752577u);
    if (ptr_fogEmissiveRemap != nullptr) {
        fogEmissiveRemap = ptr_fogEmissiveRemap->value;
    }

    auto ptr_fogLowQualityModeEmissiveRemap = prop->cast_prop<yordle::data::prop::float32_prop>(1058583641u);
    if (ptr_fogLowQualityModeEmissiveRemap != nullptr) {
        fogLowQualityModeEmissiveRemap = ptr_fogLowQualityModeEmissiveRemap->value;
    }
}

yordle::data::meta::MapPointLight::MapPointLight(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapPlaceable(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_type = prop->cast_prop<yordle::data::prop::reference_prop>(1361572173u);
    if (ptr_type != nullptr) {
        type = ptr_type->value;
    }

    auto ptr_radiusScale = prop->cast_prop<yordle::data::prop::float32_prop>(4161999371u);
    if (ptr_radiusScale != nullptr) {
        radiusScale = ptr_radiusScale->value;
    }

    auto ptr_intensityScale = prop->cast_prop<yordle::data::prop::float32_prop>(1015244992u);
    if (ptr_intensityScale != nullptr) {
        intensityScale = ptr_intensityScale->value;
    }

    auto ptr_overrideCastStaticShadows = prop->cast_prop<yordle::data::prop::optional_prop>(511307017u);
    if (ptr_overrideCastStaticShadows != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_overrideCastStaticShadows->value);
        if(ptr_entry != nullptr) {
            overrideCastStaticShadows = ptr_entry->value;
        }
    }

    auto ptr_overrideUseSpecular = prop->cast_prop<yordle::data::prop::optional_prop>(1878817909u);
    if (ptr_overrideUseSpecular != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_overrideUseSpecular->value);
        if(ptr_entry != nullptr) {
            overrideUseSpecular = ptr_entry->value;
        }
    }
}

yordle::data::meta::MapPointLightType::MapPointLightType(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_lightColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(1953294142u);
    if (ptr_lightColor != nullptr) {
        lightColor = ptr_lightColor->value;
    }

    auto ptr_falloffColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(1668349784u);
    if (ptr_falloffColor != nullptr) {
        falloffColor = ptr_falloffColor->value;
    }

    auto ptr_radius = prop->cast_prop<yordle::data::prop::float32_prop>(230313139u);
    if (ptr_radius != nullptr) {
        radius = ptr_radius->value;
    }

    auto ptr_castStaticShadows = prop->cast_prop<yordle::data::prop::bool_prop>(3223158033u);
    if (ptr_castStaticShadows != nullptr) {
        castStaticShadows = ptr_castStaticShadows->value;
    }

    auto ptr_specular = prop->cast_prop<yordle::data::prop::bool_prop>(3195258592u);
    if (ptr_specular != nullptr) {
        specular = ptr_specular->value;
    }

    auto ptr_Impact = prop->cast_prop<yordle::data::prop::int32_prop>(510767767u);
    if (ptr_Impact != nullptr) {
        Impact = ptr_Impact->value;
    }
}

yordle::data::meta::MapSunProperties::MapSunProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapComponent(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_sunColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(1716133700u);
    if (ptr_sunColor != nullptr) {
        sunColor = ptr_sunColor->value;
    }

    auto ptr_sunDirection = prop->cast_prop<yordle::data::prop::vector_prop>(3784342774u);
    if (ptr_sunDirection != nullptr) {
        sunDirection = ptr_sunDirection->value;
    }

    auto ptr_xa04bd9bf = prop->cast_prop<yordle::data::prop::optional_prop>(2689325503u);
    if (ptr_xa04bd9bf != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::vector_prop>(ptr_xa04bd9bf->value);
        if(ptr_entry != nullptr) {
            xa04bd9bf = ptr_entry->value;
        }
    }

    auto ptr_xd8851203 = prop->cast_prop<yordle::data::prop::float32_prop>(3632599555u);
    if (ptr_xd8851203 != nullptr) {
        xd8851203 = ptr_xd8851203->value;
    }

    auto ptr_xba02f116 = prop->cast_prop<yordle::data::prop::float32_prop>(3120754966u);
    if (ptr_xba02f116 != nullptr) {
        xba02f116 = ptr_xba02f116->value;
    }

    auto ptr_skyLightColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(174422349u);
    if (ptr_skyLightColor != nullptr) {
        skyLightColor = ptr_skyLightColor->value;
    }

    auto ptr_horizonColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(4248650671u);
    if (ptr_horizonColor != nullptr) {
        horizonColor = ptr_horizonColor->value;
    }

    auto ptr_groundColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(1480323041u);
    if (ptr_groundColor != nullptr) {
        groundColor = ptr_groundColor->value;
    }

    auto ptr_skyLightScale = prop->cast_prop<yordle::data::prop::float32_prop>(3013280816u);
    if (ptr_skyLightScale != nullptr) {
        skyLightScale = ptr_skyLightScale->value;
    }

    auto ptr_lightMapColorScale = prop->cast_prop<yordle::data::prop::float32_prop>(2557103452u);
    if (ptr_lightMapColorScale != nullptr) {
        lightMapColorScale = ptr_lightMapColorScale->value;
    }

    auto ptr_fogEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(8689476u);
    if (ptr_fogEnabled != nullptr) {
        fogEnabled = ptr_fogEnabled->value;
    }

    auto ptr_fogColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(37429198u);
    if (ptr_fogColor != nullptr) {
        fogColor = ptr_fogColor->value;
    }

    auto ptr_fogAlternateColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(1217852122u);
    if (ptr_fogAlternateColor != nullptr) {
        fogAlternateColor = ptr_fogAlternateColor->value;
    }

    auto ptr_fogStartAndEnd = prop->cast_prop<yordle::data::prop::point_prop>(1923555699u);
    if (ptr_fogStartAndEnd != nullptr) {
        fogStartAndEnd = ptr_fogStartAndEnd->value;
    }

    auto ptr_fogEmissiveRemap = prop->cast_prop<yordle::data::prop::float32_prop>(666752577u);
    if (ptr_fogEmissiveRemap != nullptr) {
        fogEmissiveRemap = ptr_fogEmissiveRemap->value;
    }

    auto ptr_fogLowQualityModeEmissiveRemap = prop->cast_prop<yordle::data::prop::float32_prop>(1058583641u);
    if (ptr_fogLowQualityModeEmissiveRemap != nullptr) {
        fogLowQualityModeEmissiveRemap = ptr_fogLowQualityModeEmissiveRemap->value;
    }

    auto ptr_useBloom = prop->cast_prop<yordle::data::prop::bool_prop>(1188357031u);
    if (ptr_useBloom != nullptr) {
        useBloom = ptr_useBloom->value;
    }

    auto ptr_surfaceAreaToShadowMapScale = prop->cast_prop<yordle::data::prop::float32_prop>(163905068u);
    if (ptr_surfaceAreaToShadowMapScale != nullptr) {
        surfaceAreaToShadowMapScale = ptr_surfaceAreaToShadowMapScale->value;
    }
}

yordle::data::meta::MapTerrainPaint::MapTerrainPaint(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapGraphicsFeature(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TerrainPaintTexturePath = prop->cast_prop<yordle::data::prop::string_prop>(3270086406u);
    if (ptr_TerrainPaintTexturePath != nullptr) {
        TerrainPaintTexturePath = ptr_TerrainPaintTexturePath->value;
    }
}

yordle::data::meta::SHData::SHData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_bandData = prop->cast_prop<yordle::data::prop::set_prop>(1254218822u);
    if (ptr_bandData != nullptr) {
        for (const auto &entry : ptr_bandData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::vector_prop>(entry);
            if (ptr_entry != nullptr) {
                bandData.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::SkinMeshDataProperties_MaterialOverride::SkinMeshDataProperties_MaterialOverride(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_material = prop->cast_prop<yordle::data::prop::reference_prop>(3538210912u);
    if (ptr_material != nullptr) {
        material = ptr_material->value;
    }

    auto ptr_texture = prop->cast_prop<yordle::data::prop::string_prop>(1013213428u);
    if (ptr_texture != nullptr) {
        texture = ptr_texture->value;
    }

    auto ptr_glossTexture = prop->cast_prop<yordle::data::prop::string_prop>(3728192392u);
    if (ptr_glossTexture != nullptr) {
        glossTexture = ptr_glossTexture->value;
    }

    auto ptr_submesh = prop->cast_prop<yordle::data::prop::string_prop>(2866241836u);
    if (ptr_submesh != nullptr) {
        submesh = ptr_submesh->value;
    }
}

yordle::data::meta::SkinnedMeshDataMaterialController::SkinnedMeshDataMaterialController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::SkinMeshDataProperties::SkinMeshDataProperties(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_skeleton = prop->cast_prop<yordle::data::prop::string_prop>(2974586734u);
    if (ptr_skeleton != nullptr) {
        skeleton = ptr_skeleton->value;
    }

    auto ptr_simpleSkin = prop->cast_prop<yordle::data::prop::string_prop>(3600813558u);
    if (ptr_simpleSkin != nullptr) {
        simpleSkin = ptr_simpleSkin->value;
    }

    auto ptr_xd62df07c = prop->cast_prop<yordle::data::prop::bool_prop>(3593334908u);
    if (ptr_xd62df07c != nullptr) {
        xd62df07c = ptr_xd62df07c->value;
    }

    auto ptr_texture = prop->cast_prop<yordle::data::prop::string_prop>(1013213428u);
    if (ptr_texture != nullptr) {
        texture = ptr_texture->value;
    }

    auto ptr_emissiveTexture = prop->cast_prop<yordle::data::prop::string_prop>(2593342865u);
    if (ptr_emissiveTexture != nullptr) {
        emissiveTexture = ptr_emissiveTexture->value;
    }

    auto ptr_glossTexture = prop->cast_prop<yordle::data::prop::string_prop>(3728192392u);
    if (ptr_glossTexture != nullptr) {
        glossTexture = ptr_glossTexture->value;
    }

    auto ptr_skinScale = prop->cast_prop<yordle::data::prop::float32_prop>(2717386202u);
    if (ptr_skinScale != nullptr) {
        skinScale = ptr_skinScale->value;
    }

    auto ptr_selfIllumination = prop->cast_prop<yordle::data::prop::float32_prop>(623863940u);
    if (ptr_selfIllumination != nullptr) {
        selfIllumination = ptr_selfIllumination->value;
    }

    auto ptr_brushAlphaOverride = prop->cast_prop<yordle::data::prop::float32_prop>(3373988429u);
    if (ptr_brushAlphaOverride != nullptr) {
        brushAlphaOverride = ptr_brushAlphaOverride->value;
    }

    auto ptr_overrideBoundingBox = prop->cast_prop<yordle::data::prop::optional_prop>(1551500082u);
    if (ptr_overrideBoundingBox != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::vector_prop>(ptr_overrideBoundingBox->value);
        if(ptr_entry != nullptr) {
            overrideBoundingBox = ptr_entry->value;
        }
    }

    auto ptr_material = prop->cast_prop<yordle::data::prop::reference_prop>(3538210912u);
    if (ptr_material != nullptr) {
        material = ptr_material->value;
    }

    auto ptr_boundingCylinderRadius = prop->cast_prop<yordle::data::prop::float32_prop>(84321477u);
    if (ptr_boundingCylinderRadius != nullptr) {
        boundingCylinderRadius = ptr_boundingCylinderRadius->value;
    }

    auto ptr_boundingCylinderHeight = prop->cast_prop<yordle::data::prop::float32_prop>(1885628584u);
    if (ptr_boundingCylinderHeight != nullptr) {
        boundingCylinderHeight = ptr_boundingCylinderHeight->value;
    }

    auto ptr_boundingSphereRadius = prop->cast_prop<yordle::data::prop::optional_prop>(2518064342u);
    if (ptr_boundingSphereRadius != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_boundingSphereRadius->value);
        if(ptr_entry != nullptr) {
            boundingSphereRadius = ptr_entry->value;
        }
    }

    auto ptr_fresnelColor = prop->cast_prop<yordle::data::prop::color_prop>(954992847u);
    if (ptr_fresnelColor != nullptr) {
        fresnelColor = ptr_fresnelColor->value;
    }

    auto ptr_fresnel = prop->cast_prop<yordle::data::prop::float32_prop>(2436355000u);
    if (ptr_fresnel != nullptr) {
        fresnel = ptr_fresnel->value;
    }

    auto ptr_usesSkinVO = prop->cast_prop<yordle::data::prop::bool_prop>(3841323775u);
    if (ptr_usesSkinVO != nullptr) {
        usesSkinVO = ptr_usesSkinVO->value;
    }

    auto ptr_castShadows = prop->cast_prop<yordle::data::prop::bool_prop>(2967188775u);
    if (ptr_castShadows != nullptr) {
        castShadows = ptr_castShadows->value;
    }

    auto ptr_allowCharacterInking = prop->cast_prop<yordle::data::prop::bool_prop>(374007017u);
    if (ptr_allowCharacterInking != nullptr) {
        allowCharacterInking = ptr_allowCharacterInking->value;
    }

    auto ptr_reflectionMap = prop->cast_prop<yordle::data::prop::string_prop>(3678458954u);
    if (ptr_reflectionMap != nullptr) {
        reflectionMap = ptr_reflectionMap->value;
    }

    auto ptr_reflectionOpacityDirect = prop->cast_prop<yordle::data::prop::float32_prop>(297562208u);
    if (ptr_reflectionOpacityDirect != nullptr) {
        reflectionOpacityDirect = ptr_reflectionOpacityDirect->value;
    }

    auto ptr_reflectionOpacityGlancing = prop->cast_prop<yordle::data::prop::float32_prop>(389700534u);
    if (ptr_reflectionOpacityGlancing != nullptr) {
        reflectionOpacityGlancing = ptr_reflectionOpacityGlancing->value;
    }

    auto ptr_reflectionFresnel = prop->cast_prop<yordle::data::prop::float32_prop>(319643915u);
    if (ptr_reflectionFresnel != nullptr) {
        reflectionFresnel = ptr_reflectionFresnel->value;
    }

    auto ptr_reflectionFresnelColor = prop->cast_prop<yordle::data::prop::color_prop>(1444892650u);
    if (ptr_reflectionFresnelColor != nullptr) {
        reflectionFresnelColor = ptr_reflectionFresnelColor->value;
    }

    auto ptr_initialSubmeshToHide = prop->cast_prop<yordle::data::prop::string_prop>(2159540111u);
    if (ptr_initialSubmeshToHide != nullptr) {
        initialSubmeshToHide = ptr_initialSubmeshToHide->value;
    }

    auto ptr_initialSubmeshShadowsToHide = prop->cast_prop<yordle::data::prop::string_prop>(4105854110u);
    if (ptr_initialSubmeshShadowsToHide != nullptr) {
        initialSubmeshShadowsToHide = ptr_initialSubmeshShadowsToHide->value;
    }

    auto ptr_initialSubmeshMouseOversToHide = prop->cast_prop<yordle::data::prop::string_prop>(942155177u);
    if (ptr_initialSubmeshMouseOversToHide != nullptr) {
        initialSubmeshMouseOversToHide = ptr_initialSubmeshMouseOversToHide->value;
    }

    auto ptr_submeshRenderOrder = prop->cast_prop<yordle::data::prop::string_prop>(763054772u);
    if (ptr_submeshRenderOrder != nullptr) {
        submeshRenderOrder = ptr_submeshRenderOrder->value;
    }

    auto ptr_x2543480a = prop->cast_prop<yordle::data::prop::bool_prop>(625166346u);
    if (ptr_x2543480a != nullptr) {
        x2543480a = ptr_x2543480a->value;
    }

    auto ptr_materialOverride = prop->cast_prop<yordle::data::prop::set_prop>(611473680u);
    if (ptr_materialOverride != nullptr) {
        for (const auto &entry : ptr_materialOverride->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                materialOverride.emplace(yordle::data::meta::deserialize<yordle::data::meta::SkinMeshDataProperties_MaterialOverride>(ptr_entry, 2340045716u));
            }
        }
    }

    auto ptr_materialController = prop->cast_prop<yordle::data::prop::structure_prop>(2059875848u);
    if (ptr_materialController != nullptr) {
        materialController = yordle::data::meta::deserialize<yordle::data::meta::SkinnedMeshDataMaterialController>(ptr_materialController, 3460011047u);
    }

    auto ptr_rigPoseModifierData = prop->cast_prop<yordle::data::prop::set_prop>(3922297473u);
    if (ptr_rigPoseModifierData != nullptr) {
        for (const auto &entry : ptr_rigPoseModifierData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                rigPoseModifierData.emplace(yordle::data::meta::deserialize<yordle::data::meta::BaseRigPoseModifierData>(ptr_entry, 3000850570u));
            }
        }
    }
}

yordle::data::meta::IResource::IResource(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::IResourceResolver::IResourceResolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::FunctionDefinition::FunctionDefinition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Sequence = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1011085160u);
    if (ptr_Sequence != nullptr) {
        Sequence = yordle::data::meta::deserialize<yordle::data::meta::ScriptSequence>(ptr_Sequence, 2793907875u);
    }

    auto ptr_InputParameters = prop->cast_prop<yordle::data::prop::set_prop>(579790947u);
    if (ptr_InputParameters != nullptr) {
        for (const auto &entry : ptr_InputParameters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                InputParameters.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_OutputParameters = prop->cast_prop<yordle::data::prop::set_prop>(1183067080u);
    if (ptr_OutputParameters != nullptr) {
        for (const auto &entry : ptr_OutputParameters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                OutputParameters.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::IScriptBlock::IScriptBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_IsDisabled = prop->cast_prop<yordle::data::prop::bool_prop>(1782481269u);
    if (ptr_IsDisabled != nullptr) {
        IsDisabled = ptr_IsDisabled->value;
    }
}

yordle::data::meta::SwitchCase::SwitchCase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_IsDisabled = prop->cast_prop<yordle::data::prop::bool_prop>(1782481269u);
    if (ptr_IsDisabled != nullptr) {
        IsDisabled = ptr_IsDisabled->value;
    }

    auto ptr_Condition = prop->cast_prop<yordle::data::prop::structure_prop>(3524459198u);
    if (ptr_Condition != nullptr) {
        Condition = yordle::data::meta::deserialize<yordle::data::meta::IScriptCondition>(ptr_Condition, 3324095080u);
    }

    auto ptr_Sequence = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1011085160u);
    if (ptr_Sequence != nullptr) {
        Sequence = yordle::data::meta::deserialize<yordle::data::meta::ScriptSequence>(ptr_Sequence, 2793907875u);
    }
}

yordle::data::meta::SwitchScriptBlock::SwitchScriptBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Cases = prop->cast_prop<yordle::data::prop::set_prop>(4254620006u);
    if (ptr_Cases != nullptr) {
        for (const auto &entry : ptr_Cases->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                Cases.emplace(yordle::data::meta::deserialize<yordle::data::meta::SwitchCase>(ptr_entry, 3460129365u));
            }
        }
    }
}

yordle::data::meta::IScriptCondition::IScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TableValueExistsScriptCondition::TableValueExistsScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TableValue = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2274995220u);
    if (ptr_TableValue != nullptr) {
        TableValue = yordle::data::meta::deserialize<yordle::data::meta::ScriptTableGet>(ptr_TableValue, 574110442u);
    }
}

yordle::data::meta::RandomChanceScriptCondition::RandomChanceScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Chance = prop->cast_prop<yordle::data::prop::structure_prop>(2459084481u);
    if (ptr_Chance != nullptr) {
        Chance = yordle::data::meta::deserialize<yordle::data::meta::IFloatGet>(ptr_Chance, 2798892082u);
    }
}

yordle::data::meta::AndScriptCondition::AndScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Conditions = prop->cast_prop<yordle::data::prop::set_prop>(2162217143u);
    if (ptr_Conditions != nullptr) {
        for (const auto &entry : ptr_Conditions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                Conditions.emplace(yordle::data::meta::deserialize<yordle::data::meta::IScriptCondition>(ptr_entry, 3324095080u));
            }
        }
    }
}

yordle::data::meta::OrScriptCondition::OrScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Conditions = prop->cast_prop<yordle::data::prop::set_prop>(2162217143u);
    if (ptr_Conditions != nullptr) {
        for (const auto &entry : ptr_Conditions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                Conditions.emplace(yordle::data::meta::deserialize<yordle::data::meta::IScriptCondition>(ptr_entry, 3324095080u));
            }
        }
    }
}

yordle::data::meta::NotScriptCondition::NotScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Condition = prop->cast_prop<yordle::data::prop::structure_prop>(3524459198u);
    if (ptr_Condition != nullptr) {
        Condition = yordle::data::meta::deserialize<yordle::data::meta::IScriptCondition>(ptr_Condition, 3324095080u);
    }
}

yordle::data::meta::ComparisonScriptCondition::ComparisonScriptCondition(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptCondition(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Value1 = prop->cast_prop<yordle::data::prop::structure_prop>(1984410657u);
    if (ptr_Value1 != nullptr) {
        Value1 = yordle::data::meta::deserialize<yordle::data::meta::IScriptValueGet>(ptr_Value1, 4142338480u);
    }

    auto ptr_Operation = prop->cast_prop<yordle::data::prop::uint32_prop>(1396605190u);
    if (ptr_Operation != nullptr) {
        Operation = ptr_Operation->value;
    }

    auto ptr_Value2 = prop->cast_prop<yordle::data::prop::structure_prop>(1934077800u);
    if (ptr_Value2 != nullptr) {
        Value2 = yordle::data::meta::deserialize<yordle::data::meta::IScriptValueGet>(ptr_Value2, 4142338480u);
    }
}

yordle::data::meta::RScript::RScript(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ScriptTable::ScriptTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::PassThroughParamsTable::PassThroughParamsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTable(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ScriptTableSet::ScriptTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Table = prop->cast_prop<yordle::data::prop::structure_prop>(1251777503u);
    if (ptr_Table != nullptr) {
        Table = yordle::data::meta::deserialize<yordle::data::meta::ScriptTable>(ptr_Table, 619916734u);
    }

    auto ptr_Var = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2317739966u);
    if (ptr_Var != nullptr) {
        Var = ptr_Var->value;
    }
}

yordle::data::meta::IntTableSet::IntTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTableSet(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::BoolTableSet::BoolTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTableSet(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::FloatTableSet::FloatTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTableSet(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::StringTableSet::StringTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTableSet(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VectorTableSet::VectorTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTableSet(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::FunctionTableSet::FunctionTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTableSet(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::CustomTableSet::CustomTableSet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTableSet(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::IScriptValueGet::IScriptValueGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::IStringGet::IStringGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptValueGet(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::StringGet::StringGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStringGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::string_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = ptr_value->value;
    }
}

yordle::data::meta::StringTableGet::StringTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IStringGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Table = prop->cast_prop<yordle::data::prop::structure_prop>(1251777503u);
    if (ptr_Table != nullptr) {
        Table = yordle::data::meta::deserialize<yordle::data::meta::ScriptTable>(ptr_Table, 619916734u);
    }

    auto ptr_Var = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2317739966u);
    if (ptr_Var != nullptr) {
        Var = ptr_Var->value;
    }

    auto ptr_Default = prop->cast_prop<yordle::data::prop::optional_prop>(2470140894u);
    if (ptr_Default != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(ptr_Default->value);
        if(ptr_entry != nullptr) {
            Default = ptr_entry->value;
        }
    }
}

yordle::data::meta::IVectorGet::IVectorGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptValueGet(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::VectorGet::VectorGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IVectorGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::vector_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = ptr_value->value;
    }
}

yordle::data::meta::VectorTableGet::VectorTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IVectorGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Table = prop->cast_prop<yordle::data::prop::structure_prop>(1251777503u);
    if (ptr_Table != nullptr) {
        Table = yordle::data::meta::deserialize<yordle::data::meta::ScriptTable>(ptr_Table, 619916734u);
    }

    auto ptr_Var = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2317739966u);
    if (ptr_Var != nullptr) {
        Var = ptr_Var->value;
    }

    auto ptr_Default = prop->cast_prop<yordle::data::prop::optional_prop>(2470140894u);
    if (ptr_Default != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::vector_prop>(ptr_Default->value);
        if(ptr_entry != nullptr) {
            Default = ptr_entry->value;
        }
    }
}

yordle::data::meta::xd1951f45::xd1951f45(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_transitionTime = prop->cast_prop<yordle::data::prop::float32_prop>(646358147u);
    if (ptr_transitionTime != nullptr) {
        transitionTime = ptr_transitionTime->value;
    }

    auto ptr_EasingType = prop->cast_prop<yordle::data::prop::uint8_prop>(1933980160u);
    if (ptr_EasingType != nullptr) {
        EasingType = ptr_EasingType->value;
    }

    auto ptr_startAlpha = prop->cast_prop<yordle::data::prop::uint8_prop>(2095402753u);
    if (ptr_startAlpha != nullptr) {
        startAlpha = ptr_startAlpha->value;
    }

    auto ptr_endAlpha = prop->cast_prop<yordle::data::prop::uint8_prop>(987558866u);
    if (ptr_endAlpha != nullptr) {
        endAlpha = ptr_endAlpha->value;
    }
}

yordle::data::meta::x8f1e6a22::x8f1e6a22(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : xd1951f45(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::x6ce97639::x6ce97639(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : xd1951f45(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Edge = prop->cast_prop<yordle::data::prop::uint8_prop>(1459017788u);
    if (ptr_Edge != nullptr) {
        Edge = ptr_Edge->value;
    }
}

yordle::data::meta::SceneData::SceneData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(1239023785u);
    if (ptr_mEnabled != nullptr) {
        mEnabled = ptr_mEnabled->value;
    }

    auto ptr_mLayer = prop->cast_prop<yordle::data::prop::uint32_prop>(2191912109u);
    if (ptr_mLayer != nullptr) {
        mLayer = ptr_mLayer->value;
    }

    auto ptr_mHealthBar = prop->cast_prop<yordle::data::prop::bool_prop>(584400855u);
    if (ptr_mHealthBar != nullptr) {
        mHealthBar = ptr_mHealthBar->value;
    }

    auto ptr_x22413173 = prop->cast_prop<yordle::data::prop::bool_prop>(574697843u);
    if (ptr_x22413173 != nullptr) {
        x22413173 = ptr_x22413173->value;
    }

    auto ptr_mParentScene = prop->cast_prop<yordle::data::prop::reference_prop>(3830041648u);
    if (ptr_mParentScene != nullptr) {
        mParentScene = ptr_mParentScene->value;
    }

    auto ptr_SceneTransitionIn = prop->cast_prop<yordle::data::prop::structure_prop>(2280590099u);
    if (ptr_SceneTransitionIn != nullptr) {
        SceneTransitionIn = yordle::data::meta::deserialize<yordle::data::meta::xd1951f45>(ptr_SceneTransitionIn, 3516211013u);
    }

    auto ptr_SceneTransitionOut = prop->cast_prop<yordle::data::prop::structure_prop>(2238755712u);
    if (ptr_SceneTransitionOut != nullptr) {
        SceneTransitionOut = yordle::data::meta::deserialize<yordle::data::meta::xd1951f45>(ptr_SceneTransitionOut, 3516211013u);
    }

    auto ptr_xf80397ee = prop->cast_prop<yordle::data::prop::bool_prop>(4160985070u);
    if (ptr_xf80397ee != nullptr) {
        xf80397ee = ptr_xf80397ee->value;
    }
}

yordle::data::meta::AnchorBase::AnchorBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::AnchorSingle::AnchorSingle(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : AnchorBase(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_anchor = prop->cast_prop<yordle::data::prop::point_prop>(1122880180u);
    if (ptr_anchor != nullptr) {
        anchor = ptr_anchor->value;
    }
}

yordle::data::meta::AnchorDouble::AnchorDouble(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : AnchorBase(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_anchorLeft = prop->cast_prop<yordle::data::prop::point_prop>(901312053u);
    if (ptr_anchorLeft != nullptr) {
        anchorLeft = ptr_anchorLeft->value;
    }

    auto ptr_anchorRight = prop->cast_prop<yordle::data::prop::point_prop>(3926783566u);
    if (ptr_anchorRight != nullptr) {
        anchorRight = ptr_anchorRight->value;
    }
}

yordle::data::meta::AtlasDataBase::AtlasDataBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTextureName = prop->cast_prop<yordle::data::prop::string_prop>(4185004664u);
    if (ptr_mTextureName != nullptr) {
        mTextureName = ptr_mTextureName->value;
    }

    auto ptr_mTextureSourceResolutionWidth = prop->cast_prop<yordle::data::prop::uint32_prop>(2880937936u);
    if (ptr_mTextureSourceResolutionWidth != nullptr) {
        mTextureSourceResolutionWidth = ptr_mTextureSourceResolutionWidth->value;
    }

    auto ptr_mTextureSourceResolutionHeight = prop->cast_prop<yordle::data::prop::uint32_prop>(2677474759u);
    if (ptr_mTextureSourceResolutionHeight != nullptr) {
        mTextureSourceResolutionHeight = ptr_mTextureSourceResolutionHeight->value;
    }
}

yordle::data::meta::AtlasData::AtlasData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : AtlasDataBase(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTextureUV = prop->cast_prop<yordle::data::prop::quaternion_prop>(628942860u);
    if (ptr_mTextureUV != nullptr) {
        mTextureUV = ptr_mTextureUV->value;
    }
}

yordle::data::meta::xb5d136db::xb5d136db(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : AtlasDataBase(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TextureUs = prop->cast_prop<yordle::data::prop::quaternion_prop>(3808350240u);
    if (ptr_TextureUs != nullptr) {
        TextureUs = ptr_TextureUs->value;
    }

    auto ptr_TextureVs = prop->cast_prop<yordle::data::prop::point_prop>(3942718287u);
    if (ptr_TextureVs != nullptr) {
        TextureVs = ptr_TextureVs->value;
    }

    auto ptr_x1b57cc27 = prop->cast_prop<yordle::data::prop::point_prop>(458738727u);
    if (ptr_x1b57cc27 != nullptr) {
        x1b57cc27 = ptr_x1b57cc27->value;
    }
}

yordle::data::meta::xa3d11a85::xa3d11a85(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : AtlasDataBase(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TextureUs = prop->cast_prop<yordle::data::prop::point_prop>(3808350240u);
    if (ptr_TextureUs != nullptr) {
        TextureUs = ptr_TextureUs->value;
    }

    auto ptr_TextureVs = prop->cast_prop<yordle::data::prop::quaternion_prop>(3942718287u);
    if (ptr_TextureVs != nullptr) {
        TextureVs = ptr_TextureVs->value;
    }

    auto ptr_x15ec9181 = prop->cast_prop<yordle::data::prop::point_prop>(367825281u);
    if (ptr_x15ec9181 != nullptr) {
        x15ec9181 = ptr_x15ec9181->value;
    }
}

yordle::data::meta::xab3d1567::xab3d1567(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : AtlasDataBase(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TextureUs = prop->cast_prop<yordle::data::prop::quaternion_prop>(3808350240u);
    if (ptr_TextureUs != nullptr) {
        TextureUs = ptr_TextureUs->value;
    }

    auto ptr_TextureVs = prop->cast_prop<yordle::data::prop::quaternion_prop>(3942718287u);
    if (ptr_TextureVs != nullptr) {
        TextureVs = ptr_TextureVs->value;
    }

    auto ptr_x15ec9181 = prop->cast_prop<yordle::data::prop::point_prop>(367825281u);
    if (ptr_x15ec9181 != nullptr) {
        x15ec9181 = ptr_x15ec9181->value;
    }

    auto ptr_x1b57cc27 = prop->cast_prop<yordle::data::prop::point_prop>(458738727u);
    if (ptr_x1b57cc27 != nullptr) {
        x1b57cc27 = ptr_x1b57cc27->value;
    }
}

yordle::data::meta::x231dd1a2::x231dd1a2(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mName = prop->cast_prop<yordle::data::prop::string_prop>(435142619u);
    if (ptr_mName != nullptr) {
        mName = ptr_mName->value;
    }

    auto ptr_mScene = prop->cast_prop<yordle::data::prop::reference_prop>(2391911648u);
    if (ptr_mScene != nullptr) {
        mScene = ptr_mScene->value;
    }
}

yordle::data::meta::ElementSoundEvents::ElementSoundEvents(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_RolloverEvent = prop->cast_prop<yordle::data::prop::string_prop>(2774166396u);
    if (ptr_RolloverEvent != nullptr) {
        RolloverEvent = ptr_RolloverEvent->value;
    }

    auto ptr_x210ea29e = prop->cast_prop<yordle::data::prop::string_prop>(554607262u);
    if (ptr_x210ea29e != nullptr) {
        x210ea29e = ptr_x210ea29e->value;
    }

    auto ptr_MouseDownEvent = prop->cast_prop<yordle::data::prop::string_prop>(3629002872u);
    if (ptr_MouseDownEvent != nullptr) {
        MouseDownEvent = ptr_MouseDownEvent->value;
    }

    auto ptr_x452034c = prop->cast_prop<yordle::data::prop::string_prop>(72483660u);
    if (ptr_x452034c != nullptr) {
        x452034c = ptr_x452034c->value;
    }

    auto ptr_MouseUpEvent = prop->cast_prop<yordle::data::prop::string_prop>(2226573059u);
    if (ptr_MouseUpEvent != nullptr) {
        MouseUpEvent = ptr_MouseUpEvent->value;
    }

    auto ptr_xb49ca145 = prop->cast_prop<yordle::data::prop::string_prop>(3030163781u);
    if (ptr_xb49ca145 != nullptr) {
        xb49ca145 = ptr_xb49ca145->value;
    }
}

yordle::data::meta::ElementGroupButtonState::ElementGroupButtonState(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_displayElements = prop->cast_prop<yordle::data::prop::set_prop>(120427356u);
    if (ptr_displayElements != nullptr) {
        for (const auto &entry : ptr_displayElements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                displayElements.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_TextElement = prop->cast_prop<yordle::data::prop::reference_prop>(4005730134u);
    if (ptr_TextElement != nullptr) {
        TextElement = ptr_TextElement->value;
    }
}

yordle::data::meta::ElementGroupData::ElementGroupData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : x231dd1a2(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_elements = prop->cast_prop<yordle::data::prop::set_prop>(1519694028u);
    if (ptr_elements != nullptr) {
        for (const auto &entry : ptr_elements->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                elements.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::x20d0e681::x20d0e681(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ElementGroupData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x76ef64de = prop->cast_prop<yordle::data::prop::reference_prop>(1995400414u);
    if (ptr_x76ef64de != nullptr) {
        x76ef64de = ptr_x76ef64de->value;
    }
}

yordle::data::meta::ElementGroupGridData::ElementGroupGridData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ElementGroupData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_GridRegion = prop->cast_prop<yordle::data::prop::reference_prop>(3648377257u);
    if (ptr_GridRegion != nullptr) {
        GridRegion = ptr_GridRegion->value;
    }

    auto ptr_LayoutType = prop->cast_prop<yordle::data::prop::uint32_prop>(2640041031u);
    if (ptr_LayoutType != nullptr) {
        LayoutType = ptr_LayoutType->value;
    }
}

yordle::data::meta::xaf7ac937::xaf7ac937(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xd8073196 = prop->cast_prop<yordle::data::prop::string_prop>(3624350102u);
    if (ptr_xd8073196 != nullptr) {
        xd8073196 = ptr_xd8073196->value;
    }

    auto ptr_x8f1a336d = prop->cast_prop<yordle::data::prop::string_prop>(2400858989u);
    if (ptr_x8f1a336d != nullptr) {
        x8f1a336d = ptr_x8f1a336d->value;
    }

    auto ptr_x73dbef7a = prop->cast_prop<yordle::data::prop::string_prop>(1943793530u);
    if (ptr_x73dbef7a != nullptr) {
        x73dbef7a = ptr_x73dbef7a->value;
    }
}

yordle::data::meta::ElementGroupSliderState::ElementGroupSliderState(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_BarBackdrop = prop->cast_prop<yordle::data::prop::reference_prop>(2211737984u);
    if (ptr_BarBackdrop != nullptr) {
        BarBackdrop = ptr_BarBackdrop->value;
    }

    auto ptr_BarFill = prop->cast_prop<yordle::data::prop::reference_prop>(2976871175u);
    if (ptr_BarFill != nullptr) {
        BarFill = ptr_BarFill->value;
    }

    auto ptr_sliderIcon = prop->cast_prop<yordle::data::prop::reference_prop>(4149898573u);
    if (ptr_sliderIcon != nullptr) {
        sliderIcon = ptr_sliderIcon->value;
    }
}

yordle::data::meta::ElementGroupSliderData::ElementGroupSliderData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ElementGroupData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_DefaultState = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3680683107u);
    if (ptr_DefaultState != nullptr) {
        DefaultState = yordle::data::meta::deserialize<yordle::data::meta::ElementGroupSliderState>(ptr_DefaultState, 2718727252u);
    }

    auto ptr_SliderClickedState = prop->cast_prop<yordle::data::prop::inline_structure_prop>(39763638u);
    if (ptr_SliderClickedState != nullptr) {
        SliderClickedState = yordle::data::meta::deserialize<yordle::data::meta::ElementGroupSliderState>(ptr_SliderClickedState, 2718727252u);
    }

    auto ptr_x5b9cbd0 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(96062416u);
    if (ptr_x5b9cbd0 != nullptr) {
        x5b9cbd0 = yordle::data::meta::deserialize<yordle::data::meta::ElementGroupSliderState>(ptr_x5b9cbd0, 2718727252u);
    }

    auto ptr_xb4f0cbde = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3035679710u);
    if (ptr_xb4f0cbde != nullptr) {
        xb4f0cbde = yordle::data::meta::deserialize<yordle::data::meta::ElementGroupSliderState>(ptr_xb4f0cbde, 2718727252u);
    }

    auto ptr_BarHitRegion = prop->cast_prop<yordle::data::prop::reference_prop>(4212105619u);
    if (ptr_BarHitRegion != nullptr) {
        BarHitRegion = ptr_BarHitRegion->value;
    }

    auto ptr_SliderHitRegion = prop->cast_prop<yordle::data::prop::reference_prop>(1034263897u);
    if (ptr_SliderHitRegion != nullptr) {
        SliderHitRegion = ptr_SliderHitRegion->value;
    }

    auto ptr_direction = prop->cast_prop<yordle::data::prop::uint8_prop>(3748513642u);
    if (ptr_direction != nullptr) {
        direction = ptr_direction->value;
    }

    auto ptr_soundEvents = prop->cast_prop<yordle::data::prop::structure_prop>(2735039949u);
    if (ptr_soundEvents != nullptr) {
        soundEvents = yordle::data::meta::deserialize<yordle::data::meta::xaf7ac937>(ptr_soundEvents, 2944059703u);
    }
}

yordle::data::meta::IconElementDataExtension::IconElementDataExtension(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::IconElementGradientExtension::IconElementGradientExtension(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IconElementDataExtension(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mStartColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(70392427u);
    if (ptr_mStartColor != nullptr) {
        mStartColor = ptr_mStartColor->value;
    }

    auto ptr_mEndColor = prop->cast_prop<yordle::data::prop::quaternion_prop>(3094142512u);
    if (ptr_mEndColor != nullptr) {
        mEndColor = ptr_mEndColor->value;
    }

    auto ptr_mGradientDirection = prop->cast_prop<yordle::data::prop::uint32_prop>(3627292793u);
    if (ptr_mGradientDirection != nullptr) {
        mGradientDirection = ptr_mGradientDirection->value;
    }

    auto ptr_x4dff519d = prop->cast_prop<yordle::data::prop::quaternion_prop>(1308578205u);
    if (ptr_x4dff519d != nullptr) {
        x4dff519d = ptr_x4dff519d->value;
    }

    auto ptr_mAlphaTexture = prop->cast_prop<yordle::data::prop::string_prop>(1859970775u);
    if (ptr_mAlphaTexture != nullptr) {
        mAlphaTexture = ptr_mAlphaTexture->value;
    }
}

yordle::data::meta::X3DSharedConstantDef::X3DSharedConstantDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_type = prop->cast_prop<yordle::data::prop::uint32_prop>(1361572173u);
    if (ptr_type != nullptr) {
        type = ptr_type->value;
    }

    auto ptr_Count = prop->cast_prop<yordle::data::prop::uint32_prop>(967958004u);
    if (ptr_Count != nullptr) {
        Count = ptr_Count->value;
    }

    auto ptr__register = prop->cast_prop<yordle::data::prop::int32_prop>(761819584u);
    if (ptr__register != nullptr) {
        _register = ptr__register->value;
    }

    auto ptr_SetManually = prop->cast_prop<yordle::data::prop::bool_prop>(1757672278u);
    if (ptr_SetManually != nullptr) {
        SetManually = ptr_SetManually->value;
    }

    auto ptr_PlatformMask = prop->cast_prop<yordle::data::prop::uint32_prop>(3548357530u);
    if (ptr_PlatformMask != nullptr) {
        PlatformMask = ptr_PlatformMask->value;
    }
}

yordle::data::meta::X3DSharedConstantBufferDef::X3DSharedConstantBufferDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_type = prop->cast_prop<yordle::data::prop::uint32_prop>(1361572173u);
    if (ptr_type != nullptr) {
        type = ptr_type->value;
    }

    auto ptr_frequency = prop->cast_prop<yordle::data::prop::uint32_prop>(800267265u);
    if (ptr_frequency != nullptr) {
        frequency = ptr_frequency->value;
    }

    auto ptr_constants = prop->cast_prop<yordle::data::prop::set_prop>(2914248034u);
    if (ptr_constants != nullptr) {
        for (const auto &entry : ptr_constants->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                constants.emplace(yordle::data::meta::deserialize<yordle::data::meta::X3DSharedConstantDef>(ptr_entry, 19256412u));
            }
        }
    }

    auto ptr_xa87049bc = prop->cast_prop<yordle::data::prop::bool_prop>(2825931196u);
    if (ptr_xa87049bc != nullptr) {
        xa87049bc = ptr_xa87049bc->value;
    }

    auto ptr__register = prop->cast_prop<yordle::data::prop::int32_prop>(761819584u);
    if (ptr__register != nullptr) {
        _register = ptr__register->value;
    }

    auto ptr_PlatformMask = prop->cast_prop<yordle::data::prop::uint32_prop>(3548357530u);
    if (ptr_PlatformMask != nullptr) {
        PlatformMask = ptr_PlatformMask->value;
    }
}

yordle::data::meta::X3DSharedData::X3DSharedData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xe595dd78 = prop->cast_prop<yordle::data::prop::set_prop>(3851804024u);
    if (ptr_xe595dd78 != nullptr) {
        for (const auto &entry : ptr_xe595dd78->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                xe595dd78.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_textures = prop->cast_prop<yordle::data::prop::set_prop>(2567998597u);
    if (ptr_textures != nullptr) {
        for (const auto &entry : ptr_textures->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                textures.emplace(yordle::data::meta::deserialize<yordle::data::meta::X3DSharedTextureDef>(ptr_entry, 927275163u));
            }
        }
    }
}

yordle::data::meta::X3DSharedTextureDef::X3DSharedTextureDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : bin_class(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_type = prop->cast_prop<yordle::data::prop::uint32_prop>(1361572173u);
    if (ptr_type != nullptr) {
        type = ptr_type->value;
    }

    auto ptr__register = prop->cast_prop<yordle::data::prop::int32_prop>(761819584u);
    if (ptr__register != nullptr) {
        _register = ptr__register->value;
    }

    auto ptr_PlatformMask = prop->cast_prop<yordle::data::prop::uint32_prop>(3548357530u);
    if (ptr_PlatformMask != nullptr) {
        PlatformMask = ptr_PlatformMask->value;
    }
}

yordle::data::meta::ContextualActionData::ContextualActionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IResource(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCooldown = prop->cast_prop<yordle::data::prop::float32_prop>(1368574361u);
    if (ptr_mCooldown != nullptr) {
        mCooldown = ptr_mCooldown->value;
    }

    auto ptr_x9fd838b2 = prop->cast_prop<yordle::data::prop::float32_prop>(2681747634u);
    if (ptr_x9fd838b2 != nullptr) {
        x9fd838b2 = ptr_x9fd838b2->value;
    }

    auto ptr_mSituations = prop->cast_prop<yordle::data::prop::map_prop>(1868478721u);
    if (ptr_mSituations != nullptr) {
        for (const auto &pair : ptr_mSituations->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mSituations[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::ContextualSituation>(ptr_value, 4230456894u);
            }
        }
    }

    auto ptr_mObjectPath = prop->cast_prop<yordle::data::prop::string_prop>(482068904u);
    if (ptr_mObjectPath != nullptr) {
        mObjectPath = ptr_mObjectPath->value;
    }
}

yordle::data::meta::Champion::Champion(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : WadFileDescriptor(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_statStoneSets = prop->cast_prop<yordle::data::prop::set_prop>(1668387205u);
    if (ptr_statStoneSets != nullptr) {
        for (const auto &entry : ptr_statStoneSets->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                statStoneSets.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_mChampionItemRecommendations = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1665628256u);
    if (ptr_mChampionItemRecommendations != nullptr) {
        mChampionItemRecommendations = yordle::data::meta::deserialize<yordle::data::meta::ChampionItemRecommendations>(ptr_mChampionItemRecommendations, 3337884263u);
    }

    auto ptr_additionalCharacters = prop->cast_prop<yordle::data::prop::set_prop>(3994493072u);
    if (ptr_additionalCharacters != nullptr) {
        for (const auto &entry : ptr_additionalCharacters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                additionalCharacters.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_fixedLoadScreenPosition = prop->cast_prop<yordle::data::prop::int8_prop>(3723573990u);
    if (ptr_fixedLoadScreenPosition != nullptr) {
        fixedLoadScreenPosition = ptr_fixedLoadScreenPosition->value;
    }

    auto ptr_xc7d8a053 = prop->cast_prop<yordle::data::prop::uint32_prop>(3352862803u);
    if (ptr_xc7d8a053 != nullptr) {
        xc7d8a053 = ptr_xc7d8a053->value;
    }
}

yordle::data::meta::AbilityResourceDynamicMaterialFloatDriver::AbilityResourceDynamicMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_slot = prop->cast_prop<yordle::data::prop::uint8_prop>(1888831345u);
    if (ptr_slot != nullptr) {
        slot = ptr_slot->value;
    }
}

yordle::data::meta::AnimationFractionDynamicMaterialFloatDriver::AnimationFractionDynamicMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAnimationName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4224806837u);
    if (ptr_mAnimationName != nullptr) {
        mAnimationName = ptr_mAnimationName->value;
    }
}

yordle::data::meta::BuffCounterDynamicMaterialFloatDriver::BuffCounterDynamicMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mScriptName = prop->cast_prop<yordle::data::prop::string_prop>(3370352368u);
    if (ptr_mScriptName != nullptr) {
        mScriptName = ptr_mScriptName->value;
    }
}

yordle::data::meta::DistanceToPlayerMaterialFloatDriver::DistanceToPlayerMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_minDistance = prop->cast_prop<yordle::data::prop::float32_prop>(3090534224u);
    if (ptr_minDistance != nullptr) {
        minDistance = ptr_minDistance->value;
    }

    auto ptr_maxDistance = prop->cast_prop<yordle::data::prop::float32_prop>(3868286198u);
    if (ptr_maxDistance != nullptr) {
        maxDistance = ptr_maxDistance->value;
    }
}

yordle::data::meta::x1e6c47fe::x1e6c47fe(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mKeyName = prop->cast_prop<yordle::data::prop::string_prop>(808890788u);
    if (ptr_mKeyName != nullptr) {
        mKeyName = ptr_mKeyName->value;
    }
}

yordle::data::meta::xe856a498::xe856a498(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mKeyName = prop->cast_prop<yordle::data::prop::string_prop>(808890788u);
    if (ptr_mKeyName != nullptr) {
        mKeyName = ptr_mKeyName->value;
    }
}

yordle::data::meta::HealthDynamicMaterialFloatDriver::HealthDynamicMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::x1fbea063::x1fbea063(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::UVScaleBiasFromAnimationDynamicMaterialDriver::UVScaleBiasFromAnimationDynamicMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSubMeshName = prop->cast_prop<yordle::data::prop::string_prop>(2717239288u);
    if (ptr_mSubMeshName != nullptr) {
        mSubMeshName = ptr_mSubMeshName->value;
    }

    auto ptr_xdbad132e = prop->cast_prop<yordle::data::prop::uint32_prop>(3685552942u);
    if (ptr_xdbad132e != nullptr) {
        xdbad132e = ptr_xdbad132e->value;
    }
}

yordle::data::meta::VelocityDynamicMaterialFloatDriver::VelocityDynamicMaterialFloatDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ParticleWadFileDescriptor::ParticleWadFileDescriptor(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : WadFileDescriptor(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::GdsMapObject::GdsMapObject(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GenericMapPlaceable(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_type = prop->cast_prop<yordle::data::prop::uint8_prop>(1361572173u);
    if (ptr_type != nullptr) {
        type = ptr_type->value;
    }

    auto ptr_ignoreCollisionOnPlacement = prop->cast_prop<yordle::data::prop::bool_prop>(3241754439u);
    if (ptr_ignoreCollisionOnPlacement != nullptr) {
        ignoreCollisionOnPlacement = ptr_ignoreCollisionOnPlacement->value;
    }

    auto ptr_eyeCandy = prop->cast_prop<yordle::data::prop::bool_prop>(1435159183u);
    if (ptr_eyeCandy != nullptr) {
        eyeCandy = ptr_eyeCandy->value;
    }

    auto ptr_boxMin = prop->cast_prop<yordle::data::prop::vector_prop>(3769918886u);
    if (ptr_boxMin != nullptr) {
        boxMin = ptr_boxMin->value;
    }

    auto ptr_boxMax = prop->cast_prop<yordle::data::prop::vector_prop>(4073299124u);
    if (ptr_boxMax != nullptr) {
        boxMax = ptr_boxMax->value;
    }

    auto ptr_mapObjectSkinID = prop->cast_prop<yordle::data::prop::uint32_prop>(3596253366u);
    if (ptr_mapObjectSkinID != nullptr) {
        mapObjectSkinID = ptr_mapObjectSkinID->value;
    }

    auto ptr_extraInfo = prop->cast_prop<yordle::data::prop::set_prop>(4115267345u);
    if (ptr_extraInfo != nullptr) {
        for (const auto &entry : ptr_extraInfo->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                extraInfo.emplace(yordle::data::meta::deserialize<yordle::data::meta::GDSMapObjectExtraInfo>(ptr_entry, 1222455122u));
            }
        }
    }
}

yordle::data::meta::Map::Map(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : WadFileDescriptor(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mapStringId = prop->cast_prop<yordle::data::prop::string_prop>(3073648577u);
    if (ptr_mapStringId != nullptr) {
        mapStringId = ptr_mapStringId->value;
    }

    auto ptr_BasedOnMap = prop->cast_prop<yordle::data::prop::reference_prop>(3565747657u);
    if (ptr_BasedOnMap != nullptr) {
        BasedOnMap = ptr_BasedOnMap->value;
    }

    auto ptr_characterLists = prop->cast_prop<yordle::data::prop::unordered_set_prop>(137362161u);
    if (ptr_characterLists != nullptr) {
        for (const auto &entry : ptr_characterLists->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                characterLists.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x6744e6e3 = prop->cast_prop<yordle::data::prop::uint8_prop>(1732568803u);
    if (ptr_x6744e6e3 != nullptr) {
        x6744e6e3 = ptr_x6744e6e3->value;
    }

    auto ptr_x9e019715 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2650904341u);
    if (ptr_x9e019715 != nullptr) {
        x9e019715 = yordle::data::meta::deserialize<yordle::data::meta::MapVisibilityFlagDefinitions>(ptr_x9e019715, 1484706743u);
    }

    auto ptr_NavigationGridOverlays = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1830007018u);
    if (ptr_NavigationGridOverlays != nullptr) {
        NavigationGridOverlays = yordle::data::meta::deserialize<yordle::data::meta::MapNavigationGridOverlays>(ptr_NavigationGridOverlays, 3880372342u);
    }
}

yordle::data::meta::MapBehavior::MapBehavior(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GenericMapPlaceable(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Cue = prop->cast_prop<yordle::data::prop::string_prop>(3847623424u);
    if (ptr_Cue != nullptr) {
        Cue = ptr_Cue->value;
    }

    auto ptr_Actions = prop->cast_prop<yordle::data::prop::set_prop>(3048556132u);
    if (ptr_Actions != nullptr) {
        for (const auto &entry : ptr_Actions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                Actions.emplace(yordle::data::meta::deserialize<yordle::data::meta::MapAction>(ptr_entry, 3419333123u));
            }
        }
    }
}

yordle::data::meta::FxActionAnimate::FxActionAnimate(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFxAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_animName = prop->cast_prop<yordle::data::prop::string_prop>(3932645331u);
    if (ptr_animName != nullptr) {
        animName = ptr_animName->value;
    }

    auto ptr_TargetObject = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3865339871u);
    if (ptr_TargetObject != nullptr) {
        TargetObject = yordle::data::meta::deserialize<yordle::data::meta::FxTarget>(ptr_TargetObject, 87271638u);
    }

    auto ptr_xee7cd89a = prop->cast_prop<yordle::data::prop::bool_prop>(4001159322u);
    if (ptr_xee7cd89a != nullptr) {
        xee7cd89a = ptr_xee7cd89a->value;
    }

    auto ptr_Loop = prop->cast_prop<yordle::data::prop::bool_prop>(3723446379u);
    if (ptr_Loop != nullptr) {
        Loop = ptr_Loop->value;
    }

    auto ptr_PauseOnEnd = prop->cast_prop<yordle::data::prop::bool_prop>(2139202717u);
    if (ptr_PauseOnEnd != nullptr) {
        PauseOnEnd = ptr_PauseOnEnd->value;
    }
}

yordle::data::meta::x55d03617::x55d03617(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFxAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_position = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2471448074u);
    if (ptr_position != nullptr) {
        position = yordle::data::meta::deserialize<yordle::data::meta::FxTransform>(ptr_position, 754442341u);
    }
}

yordle::data::meta::xda3ab4c4::xda3ab4c4(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFxAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Magnitude = prop->cast_prop<yordle::data::prop::float32_prop>(1195911285u);
    if (ptr_Magnitude != nullptr) {
        Magnitude = ptr_Magnitude->value;
    }

    auto ptr_xc4afd6f9 = prop->cast_prop<yordle::data::prop::float32_prop>(3299858169u);
    if (ptr_xc4afd6f9 != nullptr) {
        xc4afd6f9 = ptr_xc4afd6f9->value;
    }

    auto ptr_FalloffRate = prop->cast_prop<yordle::data::prop::float32_prop>(3323767655u);
    if (ptr_FalloffRate != nullptr) {
        FalloffRate = ptr_FalloffRate->value;
    }

    auto ptr_direction = prop->cast_prop<yordle::data::prop::vector_prop>(3748513642u);
    if (ptr_direction != nullptr) {
        direction = ptr_direction->value;
    }
}

yordle::data::meta::xd082b191::xd082b191(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFxAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_position = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2471448074u);
    if (ptr_position != nullptr) {
        position = yordle::data::meta::deserialize<yordle::data::meta::FxTransform>(ptr_position, 754442341u);
    }

    auto ptr_fov = prop->cast_prop<yordle::data::prop::float32_prop>(2968750556u);
    if (ptr_fov != nullptr) {
        fov = ptr_fov->value;
    }

    auto ptr_yaw = prop->cast_prop<yordle::data::prop::float32_prop>(1655300712u);
    if (ptr_yaw != nullptr) {
        yaw = ptr_yaw->value;
    }

    auto ptr_pitch = prop->cast_prop<yordle::data::prop::float32_prop>(3174189745u);
    if (ptr_pitch != nullptr) {
        pitch = ptr_pitch->value;
    }

    auto ptr_x5a439ba5 = prop->cast_prop<yordle::data::prop::float32_prop>(1514380197u);
    if (ptr_x5a439ba5 != nullptr) {
        x5a439ba5 = ptr_x5a439ba5->value;
    }

    auto ptr_ZoomInTime = prop->cast_prop<yordle::data::prop::float32_prop>(2776875740u);
    if (ptr_ZoomInTime != nullptr) {
        ZoomInTime = ptr_ZoomInTime->value;
    }

    auto ptr_ZoomOutTime = prop->cast_prop<yordle::data::prop::float32_prop>(1368132831u);
    if (ptr_ZoomOutTime != nullptr) {
        ZoomOutTime = ptr_ZoomOutTime->value;
    }

    auto ptr_ZoomInEase = prop->cast_prop<yordle::data::prop::uint8_prop>(2271273847u);
    if (ptr_ZoomInEase != nullptr) {
        ZoomInEase = ptr_ZoomInEase->value;
    }

    auto ptr_ZoomOutEase = prop->cast_prop<yordle::data::prop::uint8_prop>(1653372332u);
    if (ptr_ZoomOutEase != nullptr) {
        ZoomOutEase = ptr_ZoomOutEase->value;
    }
}

yordle::data::meta::xa05a9472::xa05a9472(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFxAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_position = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2471448074u);
    if (ptr_position != nullptr) {
        position = yordle::data::meta::deserialize<yordle::data::meta::FxTransform>(ptr_position, 754442341u);
    }

    auto ptr_fov = prop->cast_prop<yordle::data::prop::float32_prop>(2968750556u);
    if (ptr_fov != nullptr) {
        fov = ptr_fov->value;
    }

    auto ptr_yaw = prop->cast_prop<yordle::data::prop::float32_prop>(1655300712u);
    if (ptr_yaw != nullptr) {
        yaw = ptr_yaw->value;
    }

    auto ptr_pitch = prop->cast_prop<yordle::data::prop::float32_prop>(3174189745u);
    if (ptr_pitch != nullptr) {
        pitch = ptr_pitch->value;
    }

    auto ptr_x5a439ba5 = prop->cast_prop<yordle::data::prop::float32_prop>(1514380197u);
    if (ptr_x5a439ba5 != nullptr) {
        x5a439ba5 = ptr_x5a439ba5->value;
    }

    auto ptr_follow = prop->cast_prop<yordle::data::prop::bool_prop>(1533824880u);
    if (ptr_follow != nullptr) {
        follow = ptr_follow->value;
    }

    auto ptr_ZoomEase = prop->cast_prop<yordle::data::prop::uint8_prop>(1810952680u);
    if (ptr_ZoomEase != nullptr) {
        ZoomEase = ptr_ZoomEase->value;
    }
}

yordle::data::meta::x99cce3c::x99cce3c(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFxAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ZoomEase = prop->cast_prop<yordle::data::prop::uint8_prop>(1810952680u);
    if (ptr_ZoomEase != nullptr) {
        ZoomEase = ptr_ZoomEase->value;
    }
}

yordle::data::meta::FxActionContinue::FxActionContinue(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFxAction(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::FxActionMove::FxActionMove(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFxAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TargetObject = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3865339871u);
    if (ptr_TargetObject != nullptr) {
        TargetObject = yordle::data::meta::deserialize<yordle::data::meta::FxTarget>(ptr_TargetObject, 87271638u);
    }

    auto ptr_Destination = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3000919231u);
    if (ptr_Destination != nullptr) {
        Destination = yordle::data::meta::deserialize<yordle::data::meta::FxTransform>(ptr_Destination, 754442341u);
    }

    auto ptr_EasingType = prop->cast_prop<yordle::data::prop::uint8_prop>(1933980160u);
    if (ptr_EasingType != nullptr) {
        EasingType = ptr_EasingType->value;
    }

    auto ptr_OvershootDistance = prop->cast_prop<yordle::data::prop::float32_prop>(1510344961u);
    if (ptr_OvershootDistance != nullptr) {
        OvershootDistance = ptr_OvershootDistance->value;
    }

    auto ptr_FaceVelocity = prop->cast_prop<yordle::data::prop::bool_prop>(2865748087u);
    if (ptr_FaceVelocity != nullptr) {
        FaceVelocity = ptr_FaceVelocity->value;
    }

    auto ptr_xd935fe42 = prop->cast_prop<yordle::data::prop::bool_prop>(3644194370u);
    if (ptr_xd935fe42 != nullptr) {
        xd935fe42 = ptr_xd935fe42->value;
    }
}

yordle::data::meta::FxActionMoveBase::FxActionMoveBase(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFxAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TargetObject = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3865339871u);
    if (ptr_TargetObject != nullptr) {
        TargetObject = yordle::data::meta::deserialize<yordle::data::meta::FxTarget>(ptr_TargetObject, 87271638u);
    }

    auto ptr_EasingType = prop->cast_prop<yordle::data::prop::uint8_prop>(1933980160u);
    if (ptr_EasingType != nullptr) {
        EasingType = ptr_EasingType->value;
    }

    auto ptr_OvershootDistance = prop->cast_prop<yordle::data::prop::float32_prop>(1510344961u);
    if (ptr_OvershootDistance != nullptr) {
        OvershootDistance = ptr_OvershootDistance->value;
    }

    auto ptr_FaceVelocity = prop->cast_prop<yordle::data::prop::bool_prop>(2865748087u);
    if (ptr_FaceVelocity != nullptr) {
        FaceVelocity = ptr_FaceVelocity->value;
    }
}

yordle::data::meta::FxActionMoveTo::FxActionMoveTo(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : FxActionMoveBase(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Destination = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3000919231u);
    if (ptr_Destination != nullptr) {
        Destination = yordle::data::meta::deserialize<yordle::data::meta::FxTransform>(ptr_Destination, 754442341u);
    }
}

yordle::data::meta::FxActionMoveReset::FxActionMoveReset(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : FxActionMoveBase(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::FxActionSfx::FxActionSfx(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFxAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_position = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2471448074u);
    if (ptr_position != nullptr) {
        position = yordle::data::meta::deserialize<yordle::data::meta::FxTransform>(ptr_position, 754442341u);
    }

    auto ptr_EventName = prop->cast_prop<yordle::data::prop::string_prop>(705137820u);
    if (ptr_EventName != nullptr) {
        EventName = ptr_EventName->value;
    }
}

yordle::data::meta::FxActionTimeDilate::FxActionTimeDilate(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFxAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TimeDilation = prop->cast_prop<yordle::data::prop::float32_prop>(1080534638u);
    if (ptr_TimeDilation != nullptr) {
        TimeDilation = ptr_TimeDilation->value;
    }

    auto ptr_intime = prop->cast_prop<yordle::data::prop::float32_prop>(1040660087u);
    if (ptr_intime != nullptr) {
        intime = ptr_intime->value;
    }

    auto ptr_InEase = prop->cast_prop<yordle::data::prop::uint8_prop>(1626816708u);
    if (ptr_InEase != nullptr) {
        InEase = ptr_InEase->value;
    }

    auto ptr_OutTime = prop->cast_prop<yordle::data::prop::float32_prop>(2390841198u);
    if (ptr_OutTime != nullptr) {
        OutTime = ptr_OutTime->value;
    }

    auto ptr_OutEase = prop->cast_prop<yordle::data::prop::uint8_prop>(2383131965u);
    if (ptr_OutEase != nullptr) {
        OutEase = ptr_OutEase->value;
    }
}

yordle::data::meta::FxActionVfx::FxActionVfx(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFxAction(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_follow = prop->cast_prop<yordle::data::prop::bool_prop>(1533824880u);
    if (ptr_follow != nullptr) {
        follow = ptr_follow->value;
    }

    auto ptr_position = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2471448074u);
    if (ptr_position != nullptr) {
        position = yordle::data::meta::deserialize<yordle::data::meta::FxTransform>(ptr_position, 754442341u);
    }

    auto ptr_TargetPosition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(764146427u);
    if (ptr_TargetPosition != nullptr) {
        TargetPosition = yordle::data::meta::deserialize<yordle::data::meta::FxTransform>(ptr_TargetPosition, 754442341u);
    }

    auto ptr_scale = prop->cast_prop<yordle::data::prop::float32_prop>(2190941297u);
    if (ptr_scale != nullptr) {
        scale = ptr_scale->value;
    }

    auto ptr_Particle = prop->cast_prop<yordle::data::prop::reference_prop>(2324120511u);
    if (ptr_Particle != nullptr) {
        Particle = ptr_Particle->value;
    }

    auto ptr_x39d6e480 = prop->cast_prop<yordle::data::prop::float32_prop>(970384512u);
    if (ptr_x39d6e480 != nullptr) {
        x39d6e480 = ptr_x39d6e480->value;
    }

    auto ptr_FollowPath = prop->cast_prop<yordle::data::prop::bool_prop>(54368471u);
    if (ptr_FollowPath != nullptr) {
        FollowPath = ptr_FollowPath->value;
    }

    auto ptr_PathTargetPosition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2754533364u);
    if (ptr_PathTargetPosition != nullptr) {
        PathTargetPosition = yordle::data::meta::deserialize<yordle::data::meta::FxTransform>(ptr_PathTargetPosition, 754442341u);
    }

    auto ptr_SplineInfo = prop->cast_prop<yordle::data::prop::structure_prop>(2747075936u);
    if (ptr_SplineInfo != nullptr) {
        SplineInfo = yordle::data::meta::deserialize<yordle::data::meta::ISplineInfo>(ptr_SplineInfo, 771419981u);
    }
}

yordle::data::meta::LolSpellScript::LolSpellScript(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : RScript(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_globalProperties = prop->cast_prop<yordle::data::prop::inline_structure_prop>(259216059u);
    if (ptr_globalProperties != nullptr) {
        globalProperties = yordle::data::meta::deserialize<yordle::data::meta::ScriptGlobalProperties>(ptr_globalProperties, 3193997900u);
    }

    auto ptr_sequences = prop->cast_prop<yordle::data::prop::map_prop>(4193347457u);
    if (ptr_sequences != nullptr) {
        for (const auto &pair : ptr_sequences->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                sequences[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::ScriptSequence>(ptr_value, 2793907875u);
            }
        }
    }

    auto ptr_CustomSequences = prop->cast_prop<yordle::data::prop::map_prop>(3141702788u);
    if (ptr_CustomSequences != nullptr) {
        for (const auto &pair : ptr_CustomSequences->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                CustomSequences[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::ScriptSequence>(ptr_value, 2793907875u);
            }
        }
    }

    auto ptr_PreloadData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1394950u);
    if (ptr_PreloadData != nullptr) {
        PreloadData = yordle::data::meta::deserialize<yordle::data::meta::LoLSpellPreloadData>(ptr_PreloadData, 3712288203u);
    }
}

yordle::data::meta::InstanceVarsTable::InstanceVarsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTable(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::CharacterVarsTable::CharacterVarsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTable(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::NextBuffVarsTable::NextBuffVarsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTable(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::WorldVarsTable::WorldVarsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTable(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::AvatarVarsTable::AvatarVarsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTable(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::NextSpellVarsTable::NextSpellVarsTable(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTable(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TempTable1Table::TempTable1Table(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTable(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TempTable2Table::TempTable2Table(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTable(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TempTable3Table::TempTable3Table(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ScriptTable(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TFTItemMaterialController::TFTItemMaterialController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : SkinnedMeshDataMaterialController(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::x9e2b8a86::x9e2b8a86(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x41aa9616 = prop->cast_prop<yordle::data::prop::uint32_prop>(1101698582u);
    if (ptr_x41aa9616 != nullptr) {
        x41aa9616 = ptr_x41aa9616->value;
    }

    auto ptr_x143e4d96 = prop->cast_prop<yordle::data::prop::uint32_prop>(339627414u);
    if (ptr_x143e4d96 != nullptr) {
        x143e4d96 = ptr_x143e4d96->value;
    }

    auto ptr_xeac10e8a = prop->cast_prop<yordle::data::prop::string_prop>(3938520714u);
    if (ptr_xeac10e8a != nullptr) {
        xeac10e8a = ptr_xeac10e8a->value;
    }

    auto ptr_x8b76c33f = prop->cast_prop<yordle::data::prop::string_prop>(2339816255u);
    if (ptr_x8b76c33f != nullptr) {
        x8b76c33f = ptr_x8b76c33f->value;
    }

    auto ptr_x73ce2a6 = prop->cast_prop<yordle::data::prop::string_prop>(121430694u);
    if (ptr_x73ce2a6 != nullptr) {
        x73ce2a6 = ptr_x73ce2a6->value;
    }

    auto ptr_x3ad4379e = prop->cast_prop<yordle::data::prop::string_prop>(986986398u);
    if (ptr_x3ad4379e != nullptr) {
        x3ad4379e = ptr_x3ad4379e->value;
    }

    auto ptr_x8ff1b151 = prop->cast_prop<yordle::data::prop::string_prop>(2414981457u);
    if (ptr_x8ff1b151 != nullptr) {
        x8ff1b151 = ptr_x8ff1b151->value;
    }

    auto ptr_xf7ee4522 = prop->cast_prop<yordle::data::prop::string_prop>(4159587618u);
    if (ptr_xf7ee4522 != nullptr) {
        xf7ee4522 = ptr_xf7ee4522->value;
    }

    auto ptr_x4babd89d = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1269553309u);
    if (ptr_x4babd89d != nullptr) {
        x4babd89d = ptr_x4babd89d->value;
    }

    auto ptr_xf5b8026a = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4122477162u);
    if (ptr_xf5b8026a != nullptr) {
        xf5b8026a = ptr_xf5b8026a->value;
    }

    auto ptr_xc5c5ca0 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(207379616u);
    if (ptr_xc5c5ca0 != nullptr) {
        xc5c5ca0 = ptr_xc5c5ca0->value;
    }

    auto ptr_xf2024d92 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4060237202u);
    if (ptr_xf2024d92 != nullptr) {
        xf2024d92 = yordle::data::meta::deserialize<yordle::data::meta::x2610e5a7>(ptr_xf2024d92, 638641575u);
    }

    auto ptr_Scene = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(543410963u);
    if (ptr_Scene != nullptr) {
        Scene = ptr_Scene->value;
    }

    auto ptr_x9dcf971d = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2647627549u);
    if (ptr_x9dcf971d != nullptr) {
        x9dcf971d = ptr_x9dcf971d->value;
    }

    auto ptr_xba1d038c = prop->cast_prop<yordle::data::prop::float32_prop>(3122463628u);
    if (ptr_xba1d038c != nullptr) {
        xba1d038c = ptr_xba1d038c->value;
    }

    auto ptr_x75f9cc79 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1979305081u);
    if (ptr_x75f9cc79 != nullptr) {
        x75f9cc79 = ptr_x75f9cc79->value;
    }
}

yordle::data::meta::TftGameStartViewController::TftGameStartViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x81317ee6 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2167504614u);
    if (ptr_x81317ee6 != nullptr) {
        x81317ee6 = ptr_x81317ee6->value;
    }

    auto ptr_xfc59b058 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4233736280u);
    if (ptr_xfc59b058 != nullptr) {
        xfc59b058 = ptr_xfc59b058->value;
    }

    auto ptr_xf6a44ab6 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4137962166u);
    if (ptr_xf6a44ab6 != nullptr) {
        xf6a44ab6 = ptr_xf6a44ab6->value;
    }

    auto ptr_x56b85896 = prop->cast_prop<yordle::data::prop::float32_prop>(1454921878u);
    if (ptr_x56b85896 != nullptr) {
        x56b85896 = ptr_x56b85896->value;
    }

    auto ptr_x14713b68 = prop->cast_prop<yordle::data::prop::float32_prop>(342965096u);
    if (ptr_x14713b68 != nullptr) {
        x14713b68 = ptr_x14713b68->value;
    }

    auto ptr_x87f66219 = prop->cast_prop<yordle::data::prop::float32_prop>(2281071129u);
    if (ptr_x87f66219 != nullptr) {
        x87f66219 = ptr_x87f66219->value;
    }
}

yordle::data::meta::TftUnitShopViewController::TftUnitShopViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ToggleShopButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1142025085u);
    if (ptr_ToggleShopButton != nullptr) {
        ToggleShopButton = ptr_ToggleShopButton->value;
    }

    auto ptr_LockButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2142289162u);
    if (ptr_LockButton != nullptr) {
        LockButton = ptr_LockButton->value;
    }

    auto ptr_BuyExpButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(20691162u);
    if (ptr_BuyExpButton != nullptr) {
        BuyExpButton = ptr_BuyExpButton->value;
    }

    auto ptr_RerollButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2401000787u);
    if (ptr_RerollButton != nullptr) {
        RerollButton = ptr_RerollButton->value;
    }

    auto ptr_InfoButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1948757681u);
    if (ptr_InfoButton != nullptr) {
        InfoButton = ptr_InfoButton->value;
    }

    auto ptr_xa0ae7cfa = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2695789818u);
    if (ptr_xa0ae7cfa != nullptr) {
        xa0ae7cfa = ptr_xa0ae7cfa->value;
    }

    auto ptr_xc43a3d1f = prop->cast_prop<yordle::data::prop::float32_prop>(3292151071u);
    if (ptr_xc43a3d1f != nullptr) {
        xc43a3d1f = ptr_xc43a3d1f->value;
    }

    auto ptr_x2781ed6b = prop->cast_prop<yordle::data::prop::map_prop>(662826347u);
    if (ptr_x2781ed6b != nullptr) {
        for (const auto &pair : ptr_x2781ed6b->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint32_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                x2781ed6b[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::x2781ed6b>(ptr_value, 662826347u);
            }
        }
    }
}

yordle::data::meta::AnnouncementsViewController::AnnouncementsViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x34b17566 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(884045158u);
    if (ptr_x34b17566 != nullptr) {
        x34b17566 = ptr_x34b17566->value;
    }
}

yordle::data::meta::InvalidDeviceViewController::InvalidDeviceViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::LoginViewController::LoginViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::PatchingViewController::PatchingViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_BeginPatchingButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1000346113u);
    if (ptr_BeginPatchingButtonDefinition != nullptr) {
        BeginPatchingButtonDefinition = ptr_BeginPatchingButtonDefinition->value;
    }

    auto ptr_OpenTeamPlannerButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4140331697u);
    if (ptr_OpenTeamPlannerButtonDefinition != nullptr) {
        OpenTeamPlannerButtonDefinition = ptr_OpenTeamPlannerButtonDefinition->value;
    }
}

yordle::data::meta::SummonerNameCreateViewController::SummonerNameCreateViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x2992fe27 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(697499175u);
    if (ptr_x2992fe27 != nullptr) {
        x2992fe27 = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_x2992fe27, 3273533950u);
    }

    auto ptr_SubmitButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2809917428u);
    if (ptr_SubmitButtonDefinition != nullptr) {
        SubmitButtonDefinition = ptr_SubmitButtonDefinition->value;
    }
}

yordle::data::meta::TftTeamPlannerViewController::TftTeamPlannerViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x6ee3bd2e = prop->cast_prop<yordle::data::prop::float32_prop>(1860418862u);
    if (ptr_x6ee3bd2e != nullptr) {
        x6ee3bd2e = ptr_x6ee3bd2e->value;
    }

    auto ptr_ViewPaneDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2330109623u);
    if (ptr_ViewPaneDefinition != nullptr) {
        ViewPaneDefinition = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_ViewPaneDefinition, 2330109623u);
    }

    auto ptr_ChampionButtonTemplate = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3019062520u);
    if (ptr_ChampionButtonTemplate != nullptr) {
        ChampionButtonTemplate = ptr_ChampionButtonTemplate->value;
    }

    auto ptr_xa88951d0 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2827571664u);
    if (ptr_xa88951d0 != nullptr) {
        xa88951d0 = ptr_xa88951d0->value;
    }

    auto ptr_ActiveTraitButtonTemplate = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(660238919u);
    if (ptr_ActiveTraitButtonTemplate != nullptr) {
        ActiveTraitButtonTemplate = ptr_ActiveTraitButtonTemplate->value;
    }

    auto ptr_PaginateTraitButtonTemplate = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1515685582u);
    if (ptr_PaginateTraitButtonTemplate != nullptr) {
        PaginateTraitButtonTemplate = ptr_PaginateTraitButtonTemplate->value;
    }

    auto ptr_CloseButtonTemplate = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1513907673u);
    if (ptr_CloseButtonTemplate != nullptr) {
        CloseButtonTemplate = ptr_CloseButtonTemplate->value;
    }

    auto ptr_ClearButtonTemplate = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3343676972u);
    if (ptr_ClearButtonTemplate != nullptr) {
        ClearButtonTemplate = ptr_ClearButtonTemplate->value;
    }

    auto ptr_ChampionsPerRow = prop->cast_prop<yordle::data::prop::uint8_prop>(1246660210u);
    if (ptr_ChampionsPerRow != nullptr) {
        ChampionsPerRow = ptr_ChampionsPerRow->value;
    }

    auto ptr_TraitsPerRow = prop->cast_prop<yordle::data::prop::uint8_prop>(1994263565u);
    if (ptr_TraitsPerRow != nullptr) {
        TraitsPerRow = ptr_TraitsPerRow->value;
    }
}

yordle::data::meta::ChatViewController::ChatViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_defaultWordWrapMargin = prop->cast_prop<yordle::data::prop::uint8_prop>(515316936u);
    if (ptr_defaultWordWrapMargin != nullptr) {
        defaultWordWrapMargin = ptr_defaultWordWrapMargin->value;
    }

    auto ptr_hideAfterSeconds = prop->cast_prop<yordle::data::prop::float32_prop>(3151249134u);
    if (ptr_hideAfterSeconds != nullptr) {
        hideAfterSeconds = ptr_hideAfterSeconds->value;
    }

    auto ptr_ViewPaneDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2330109623u);
    if (ptr_ViewPaneDefinition != nullptr) {
        ViewPaneDefinition = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_ViewPaneDefinition, 2330109623u);
    }

    auto ptr_SceneChat = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1637978957u);
    if (ptr_SceneChat != nullptr) {
        SceneChat = ptr_SceneChat->value;
    }

    auto ptr_x8284ebb3 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2189749171u);
    if (ptr_x8284ebb3 != nullptr) {
        x8284ebb3 = ptr_x8284ebb3->value;
    }

    auto ptr_xbc8c4eed = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3163311853u);
    if (ptr_xbc8c4eed != nullptr) {
        xbc8c4eed = ptr_xbc8c4eed->value;
    }
}

yordle::data::meta::VfxProbabilityTableDataGrande::VfxProbabilityTableDataGrande(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Scene = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(543410963u);
    if (ptr_Scene != nullptr) {
        Scene = ptr_Scene->value;
    }

    auto ptr_Backdrop = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2478896375u);
    if (ptr_Backdrop != nullptr) {
        Backdrop = ptr_Backdrop->value;
    }

    auto ptr_authoredWidth = prop->cast_prop<yordle::data::prop::float32_prop>(2831011545u);
    if (ptr_authoredWidth != nullptr) {
        authoredWidth = ptr_authoredWidth->value;
    }

    auto ptr_SourceResolutionWidth = prop->cast_prop<yordle::data::prop::float32_prop>(4133780694u);
    if (ptr_SourceResolutionWidth != nullptr) {
        SourceResolutionWidth = ptr_SourceResolutionWidth->value;
    }
}

yordle::data::meta::x75259ad3::x75259ad3(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CloseButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(893211270u);
    if (ptr_CloseButtonDefinition != nullptr) {
        CloseButtonDefinition = ptr_CloseButtonDefinition->value;
    }

    auto ptr_ConfirmButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3228738802u);
    if (ptr_ConfirmButtonDefinition != nullptr) {
        ConfirmButtonDefinition = ptr_ConfirmButtonDefinition->value;
    }

    auto ptr_CancelButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2278507006u);
    if (ptr_CancelButtonDefinition != nullptr) {
        CancelButtonDefinition = ptr_CancelButtonDefinition->value;
    }

    auto ptr_ContentScene = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3118963218u);
    if (ptr_ContentScene != nullptr) {
        ContentScene = ptr_ContentScene->value;
    }

    auto ptr_ViewPaneDefinition = prop->cast_prop<yordle::data::prop::structure_prop>(2330109623u);
    if (ptr_ViewPaneDefinition != nullptr) {
        ViewPaneDefinition = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_ViewPaneDefinition, 2330109623u);
    }
}

yordle::data::meta::ItemShopViewController::ItemShopViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_MaximumShopScale = prop->cast_prop<yordle::data::prop::float32_prop>(2871379417u);
    if (ptr_MaximumShopScale != nullptr) {
        MaximumShopScale = ptr_MaximumShopScale->value;
    }

    auto ptr_MinimumShopScale = prop->cast_prop<yordle::data::prop::float32_prop>(1240836131u);
    if (ptr_MinimumShopScale != nullptr) {
        MinimumShopScale = ptr_MinimumShopScale->value;
    }

    auto ptr_DragRegion = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(234709835u);
    if (ptr_DragRegion != nullptr) {
        DragRegion = ptr_DragRegion->value;
    }

    auto ptr_ResizeDragRegion = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1479680791u);
    if (ptr_ResizeDragRegion != nullptr) {
        ResizeDragRegion = ptr_ResizeDragRegion->value;
    }
}

yordle::data::meta::xe0e70cfc::xe0e70cfc(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::x4e4bbc2b::x4e4bbc2b(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::NavHeaderViewController::NavHeaderViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_backButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3498282858u);
    if (ptr_backButton != nullptr) {
        backButton = ptr_backButton->value;
    }

    auto ptr_socialButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2582753338u);
    if (ptr_socialButton != nullptr) {
        socialButton = ptr_socialButton->value;
    }

    auto ptr_notificationsButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(157177727u);
    if (ptr_notificationsButton != nullptr) {
        notificationsButton = ptr_notificationsButton->value;
    }

    auto ptr_settingsButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1701094588u);
    if (ptr_settingsButton != nullptr) {
        settingsButton = ptr_settingsButton->value;
    }

    auto ptr_MissionsButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3962715134u);
    if (ptr_MissionsButton != nullptr) {
        MissionsButton = ptr_MissionsButton->value;
    }

    auto ptr_StarShardsButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(811139480u);
    if (ptr_StarShardsButton != nullptr) {
        StarShardsButton = ptr_StarShardsButton->value;
    }

    auto ptr_x93a118fb = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2476808443u);
    if (ptr_x93a118fb != nullptr) {
        x93a118fb = ptr_x93a118fb->value;
    }

    auto ptr_x7b8e8695 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2072938133u);
    if (ptr_x7b8e8695 != nullptr) {
        x7b8e8695 = ptr_x7b8e8695->value;
    }
}

yordle::data::meta::OptionsViewController::OptionsViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ViewPaneDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2330109623u);
    if (ptr_ViewPaneDefinition != nullptr) {
        ViewPaneDefinition = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_ViewPaneDefinition, 2330109623u);
    }

    auto ptr_CloseButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(893211270u);
    if (ptr_CloseButtonDefinition != nullptr) {
        CloseButtonDefinition = ptr_CloseButtonDefinition->value;
    }

    auto ptr_TabButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1001273705u);
    if (ptr_TabButtonDefinition != nullptr) {
        TabButtonDefinition = ptr_TabButtonDefinition->value;
    }

    auto ptr_Button1Definition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2767052001u);
    if (ptr_Button1Definition != nullptr) {
        Button1Definition = ptr_Button1Definition->value;
    }

    auto ptr_Button2Definition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2129943644u);
    if (ptr_Button2Definition != nullptr) {
        Button2Definition = ptr_Button2Definition->value;
    }

    auto ptr_Tabs = prop->cast_prop<yordle::data::prop::set_prop>(203279661u);
    if (ptr_Tabs != nullptr) {
        for (const auto &entry : ptr_Tabs->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(entry);
            if (ptr_entry != nullptr) {
                Tabs.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x5a46f90c = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1514600716u);
    if (ptr_x5a46f90c != nullptr) {
        x5a46f90c = ptr_x5a46f90c->value;
    }

    auto ptr_LastItemPadding = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3998205451u);
    if (ptr_LastItemPadding != nullptr) {
        LastItemPadding = ptr_LastItemPadding->value;
    }
}

yordle::data::meta::PostGameViewController::PostGameViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PlayAgainButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1293073416u);
    if (ptr_PlayAgainButtonDefinition != nullptr) {
        PlayAgainButtonDefinition = ptr_PlayAgainButtonDefinition->value;
    }

    auto ptr_QuitButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1370950415u);
    if (ptr_QuitButtonDefinition != nullptr) {
        QuitButtonDefinition = ptr_QuitButtonDefinition->value;
    }

    auto ptr_RankIconData = prop->cast_prop<yordle::data::prop::set_prop>(541082918u);
    if (ptr_RankIconData != nullptr) {
        for (const auto &entry : ptr_RankIconData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                RankIconData.emplace(yordle::data::meta::deserialize<yordle::data::meta::NamedIconData>(ptr_entry, 2945891227u));
            }
        }
    }

    auto ptr_RankText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2661607648u);
    if (ptr_RankText != nullptr) {
        RankText = ptr_RankText->value;
    }

    auto ptr_CurrentExpText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(300223222u);
    if (ptr_CurrentExpText != nullptr) {
        CurrentExpText = ptr_CurrentExpText->value;
    }

    auto ptr_GainedExpText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(853760197u);
    if (ptr_GainedExpText != nullptr) {
        GainedExpText = ptr_GainedExpText->value;
    }

    auto ptr_LostExpText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2253137033u);
    if (ptr_LostExpText != nullptr) {
        LostExpText = ptr_LostExpText->value;
    }

    auto ptr_PlacementTextRight = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1297259667u);
    if (ptr_PlacementTextRight != nullptr) {
        PlacementTextRight = ptr_PlacementTextRight->value;
    }

    auto ptr_ProvisionalTextRight = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2820217180u);
    if (ptr_ProvisionalTextRight != nullptr) {
        ProvisionalTextRight = ptr_ProvisionalTextRight->value;
    }

    auto ptr_BackgroundTexture = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4243122060u);
    if (ptr_BackgroundTexture != nullptr) {
        BackgroundTexture = ptr_BackgroundTexture->value;
    }

    auto ptr_CurrentPlayerHighlight = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2016279161u);
    if (ptr_CurrentPlayerHighlight != nullptr) {
        CurrentPlayerHighlight = ptr_CurrentPlayerHighlight->value;
    }

    auto ptr_GainedRatingText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(529274973u);
    if (ptr_GainedRatingText != nullptr) {
        GainedRatingText = ptr_GainedRatingText->value;
    }

    auto ptr_LostRatingText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2295388633u);
    if (ptr_LostRatingText != nullptr) {
        LostRatingText = ptr_LostRatingText->value;
    }

    auto ptr_CurrentRatingText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3674095940u);
    if (ptr_CurrentRatingText != nullptr) {
        CurrentRatingText = ptr_CurrentRatingText->value;
    }

    auto ptr_x1abf4b19 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(448744217u);
    if (ptr_x1abf4b19 != nullptr) {
        x1abf4b19 = ptr_x1abf4b19->value;
    }

    auto ptr_RatedIconData = prop->cast_prop<yordle::data::prop::set_prop>(948589436u);
    if (ptr_RatedIconData != nullptr) {
        for (const auto &entry : ptr_RatedIconData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                RatedIconData.emplace(yordle::data::meta::deserialize<yordle::data::meta::NamedIconData>(ptr_entry, 2945891227u));
            }
        }
    }

    auto ptr_x8ecd9248 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2395837000u);
    if (ptr_x8ecd9248 != nullptr) {
        x8ecd9248 = ptr_x8ecd9248->value;
    }
}

yordle::data::meta::CelebrationViewController::CelebrationViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x615c3c29 = prop->cast_prop<yordle::data::prop::float32_prop>(1633434665u);
    if (ptr_x615c3c29 != nullptr) {
        x615c3c29 = ptr_x615c3c29->value;
    }

    auto ptr_x4fe75004 = prop->cast_prop<yordle::data::prop::string_prop>(1340559364u);
    if (ptr_x4fe75004 != nullptr) {
        x4fe75004 = ptr_x4fe75004->value;
    }

    auto ptr_xc4ecb642 = prop->cast_prop<yordle::data::prop::map_prop>(3303847490u);
    if (ptr_xc4ecb642 != nullptr) {
        for (const auto &pair : ptr_xc4ecb642->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                xc4ecb642[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::HomeViewController::HomeViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ModeSelectCustomButtonData = prop->cast_prop<yordle::data::prop::set_prop>(3395835653u);
    if (ptr_ModeSelectCustomButtonData != nullptr) {
        for (const auto &entry : ptr_ModeSelectCustomButtonData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                ModeSelectCustomButtonData.emplace(yordle::data::meta::deserialize<yordle::data::meta::ModeSelectButtonData>(ptr_entry, 3056512770u));
            }
        }
    }

    auto ptr_ModeSelectDefaultButtonData = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3821028943u);
    if (ptr_ModeSelectDefaultButtonData != nullptr) {
        ModeSelectDefaultButtonData = ptr_ModeSelectDefaultButtonData->value;
    }

    auto ptr_PlayGameButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2193212256u);
    if (ptr_PlayGameButtonDefinition != nullptr) {
        PlayGameButtonDefinition = ptr_PlayGameButtonDefinition->value;
    }

    auto ptr_BattlepassButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3822862547u);
    if (ptr_BattlepassButtonDefinition != nullptr) {
        BattlepassButtonDefinition = ptr_BattlepassButtonDefinition->value;
    }

    auto ptr_StoreButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3575910535u);
    if (ptr_StoreButtonDefinition != nullptr) {
        StoreButtonDefinition = ptr_StoreButtonDefinition->value;
    }

    auto ptr_TeamPlannerButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(89778525u);
    if (ptr_TeamPlannerButtonDefinition != nullptr) {
        TeamPlannerButtonDefinition = ptr_TeamPlannerButtonDefinition->value;
    }

    auto ptr_SpecialOfferButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2947402559u);
    if (ptr_SpecialOfferButtonDefinition != nullptr) {
        SpecialOfferButtonDefinition = ptr_SpecialOfferButtonDefinition->value;
    }

    auto ptr_SpecialOfferController = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4225182998u);
    if (ptr_SpecialOfferController != nullptr) {
        SpecialOfferController = yordle::data::meta::deserialize<yordle::data::meta::xfbd72d16>(ptr_SpecialOfferController, 4225182998u);
    }

    auto ptr_ThemeMusicStateGroup = prop->cast_prop<yordle::data::prop::string_prop>(3518751045u);
    if (ptr_ThemeMusicStateGroup != nullptr) {
        ThemeMusicStateGroup = ptr_ThemeMusicStateGroup->value;
    }

    auto ptr_ThemeMusicState = prop->cast_prop<yordle::data::prop::string_prop>(1435883698u);
    if (ptr_ThemeMusicState != nullptr) {
        ThemeMusicState = ptr_ThemeMusicState->value;
    }

    auto ptr_xdc1d621e = prop->cast_prop<yordle::data::prop::float32_prop>(3692913182u);
    if (ptr_xdc1d621e != nullptr) {
        xdc1d621e = ptr_xdc1d621e->value;
    }

    auto ptr_x86a69e37 = prop->cast_prop<yordle::data::prop::uint8_prop>(2259066423u);
    if (ptr_x86a69e37 != nullptr) {
        x86a69e37 = ptr_x86a69e37->value;
    }
}

yordle::data::meta::LoadoutSelectViewController::LoadoutSelectViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_LoadoutsButtonData = prop->cast_prop<yordle::data::prop::set_prop>(2293774348u);
    if (ptr_LoadoutsButtonData != nullptr) {
        for (const auto &entry : ptr_LoadoutsButtonData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                LoadoutsButtonData.emplace(yordle::data::meta::deserialize<yordle::data::meta::ILoadoutFeatureDataBehavior>(ptr_entry, 2293774348u));
            }
        }
    }
}

yordle::data::meta::LoadoutViewController::LoadoutViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CompanionInfoPanel = prop->cast_prop<yordle::data::prop::inline_structure_prop>(222799957u);
    if (ptr_CompanionInfoPanel != nullptr) {
        CompanionInfoPanel = yordle::data::meta::deserialize<yordle::data::meta::LoadoutCompanionInfoPanel>(ptr_CompanionInfoPanel, 172106287u);
    }

    auto ptr_ArenaInfoPanel = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3889368386u);
    if (ptr_ArenaInfoPanel != nullptr) {
        ArenaInfoPanel = yordle::data::meta::deserialize<yordle::data::meta::LoadoutArenaSkinInfoPanel>(ptr_ArenaInfoPanel, 2807723955u);
    }

    auto ptr_EmoteInfoPanel = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1746567471u);
    if (ptr_EmoteInfoPanel != nullptr) {
        EmoteInfoPanel = yordle::data::meta::deserialize<yordle::data::meta::LoadoutEmoteInfoPanel>(ptr_EmoteInfoPanel, 4100634241u);
    }

    auto ptr_DamageSkinInfoPanel = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1713107521u);
    if (ptr_DamageSkinInfoPanel != nullptr) {
        DamageSkinInfoPanel = yordle::data::meta::deserialize<yordle::data::meta::LoadoutDamageSkinInfoPanel>(ptr_DamageSkinInfoPanel, 845574667u);
    }

    auto ptr_equipButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(967670299u);
    if (ptr_equipButton != nullptr) {
        equipButton = ptr_equipButton->value;
    }

    auto ptr_gridItemButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3349513554u);
    if (ptr_gridItemButton != nullptr) {
        gridItemButton = ptr_gridItemButton->value;
    }

    auto ptr_closeButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3029377995u);
    if (ptr_closeButton != nullptr) {
        closeButton = ptr_closeButton->value;
    }

    auto ptr_upgradeButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3577606887u);
    if (ptr_upgradeButton != nullptr) {
        upgradeButton = ptr_upgradeButton->value;
    }

    auto ptr_x91672418 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2439455768u);
    if (ptr_x91672418 != nullptr) {
        x91672418 = ptr_x91672418->value;
    }

    auto ptr_xd1abeb9d = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3517705117u);
    if (ptr_xd1abeb9d != nullptr) {
        xd1abeb9d = ptr_xd1abeb9d->value;
    }

    auto ptr_SoundOnActivate = prop->cast_prop<yordle::data::prop::string_prop>(2690247672u);
    if (ptr_SoundOnActivate != nullptr) {
        SoundOnActivate = ptr_SoundOnActivate->value;
    }

    auto ptr_SoundOnDeActivate = prop->cast_prop<yordle::data::prop::string_prop>(54554555u);
    if (ptr_SoundOnDeActivate != nullptr) {
        SoundOnDeActivate = ptr_SoundOnDeActivate->value;
    }
}

yordle::data::meta::LobbyViewController::LobbyViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ReadyCheckAcceptButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3508832112u);
    if (ptr_ReadyCheckAcceptButton != nullptr) {
        ReadyCheckAcceptButton = ptr_ReadyCheckAcceptButton->value;
    }

    auto ptr_ReadyCheckDeclineButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2196467966u);
    if (ptr_ReadyCheckDeclineButton != nullptr) {
        ReadyCheckDeclineButton = ptr_ReadyCheckDeclineButton->value;
    }

    auto ptr_xd5989aae = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3583548078u);
    if (ptr_xd5989aae != nullptr) {
        xd5989aae = ptr_xd5989aae->value;
    }

    auto ptr_LobbyCloseButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(851604669u);
    if (ptr_LobbyCloseButton != nullptr) {
        LobbyCloseButton = ptr_LobbyCloseButton->value;
    }

    auto ptr_FriendInviteButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4167390460u);
    if (ptr_FriendInviteButton != nullptr) {
        FriendInviteButton = ptr_FriendInviteButton->value;
    }

    auto ptr_FriendEditButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2689792797u);
    if (ptr_FriendEditButton != nullptr) {
        FriendEditButton = ptr_FriendEditButton->value;
    }

    auto ptr_loadoutsButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1177766852u);
    if (ptr_loadoutsButton != nullptr) {
        loadoutsButton = ptr_loadoutsButton->value;
    }

    auto ptr_ThemeMusicStateGroup = prop->cast_prop<yordle::data::prop::string_prop>(3518751045u);
    if (ptr_ThemeMusicStateGroup != nullptr) {
        ThemeMusicStateGroup = ptr_ThemeMusicStateGroup->value;
    }

    auto ptr_LobbyMusicState = prop->cast_prop<yordle::data::prop::string_prop>(3570395155u);
    if (ptr_LobbyMusicState != nullptr) {
        LobbyMusicState = ptr_LobbyMusicState->value;
    }

    auto ptr_InQueueMusicState = prop->cast_prop<yordle::data::prop::string_prop>(706897365u);
    if (ptr_InQueueMusicState != nullptr) {
        InQueueMusicState = ptr_InQueueMusicState->value;
    }

    auto ptr_x1a361782 = prop->cast_prop<yordle::data::prop::string_prop>(439752578u);
    if (ptr_x1a361782 != nullptr) {
        x1a361782 = ptr_x1a361782->value;
    }

    auto ptr_xbd29d956 = prop->cast_prop<yordle::data::prop::map_prop>(3173636438u);
    if (ptr_xbd29d956 != nullptr) {
        for (const auto &pair : ptr_xbd29d956->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int64_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                xbd29d956[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_xa38f5021 = prop->cast_prop<yordle::data::prop::string_prop>(2744078369u);
    if (ptr_xa38f5021 != nullptr) {
        xa38f5021 = ptr_xa38f5021->value;
    }

    auto ptr_x72c4914b = prop->cast_prop<yordle::data::prop::string_prop>(1925484875u);
    if (ptr_x72c4914b != nullptr) {
        x72c4914b = ptr_x72c4914b->value;
    }

    auto ptr_xbf51f61a = prop->cast_prop<yordle::data::prop::string_prop>(3209819674u);
    if (ptr_xbf51f61a != nullptr) {
        xbf51f61a = ptr_xbf51f61a->value;
    }

    auto ptr_x671c34c8 = prop->cast_prop<yordle::data::prop::reference_prop>(1729901768u);
    if (ptr_x671c34c8 != nullptr) {
        x671c34c8 = ptr_x671c34c8->value;
    }

    auto ptr_xb3e2f60e = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3017995790u);
    if (ptr_xb3e2f60e != nullptr) {
        xb3e2f60e = ptr_xb3e2f60e->value;
    }
}

yordle::data::meta::LootTableDialogViewController::LootTableDialogViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : x75259ad3(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::MissionsPanelViewController::MissionsPanelViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ViewPaneDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2330109623u);
    if (ptr_ViewPaneDefinition != nullptr) {
        ViewPaneDefinition = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_ViewPaneDefinition, 2330109623u);
    }

    auto ptr_xfa7c8443 = prop->cast_prop<yordle::data::prop::float32_prop>(4202464323u);
    if (ptr_xfa7c8443 != nullptr) {
        xfa7c8443 = ptr_xfa7c8443->value;
    }

    auto ptr_xec740d9e = prop->cast_prop<yordle::data::prop::uint8_prop>(3967028638u);
    if (ptr_xec740d9e != nullptr) {
        xec740d9e = ptr_xec740d9e->value;
    }
}

yordle::data::meta::ModeSelectViewController::ModeSelectViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_queueDisplayData = prop->cast_prop<yordle::data::prop::set_prop>(1532902214u);
    if (ptr_queueDisplayData != nullptr) {
        for (const auto &entry : ptr_queueDisplayData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                queueDisplayData.emplace(yordle::data::meta::deserialize<yordle::data::meta::QueueDisplayData>(ptr_entry, 1532902214u));
            }
        }
    }

    auto ptr_x9e4be5ed = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2655774189u);
    if (ptr_x9e4be5ed != nullptr) {
        x9e4be5ed = ptr_x9e4be5ed->value;
    }

    auto ptr_PageLeftButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2239425430u);
    if (ptr_PageLeftButtonDefinition != nullptr) {
        PageLeftButtonDefinition = ptr_PageLeftButtonDefinition->value;
    }

    auto ptr_PageRightButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(409816793u);
    if (ptr_PageRightButtonDefinition != nullptr) {
        PageRightButtonDefinition = ptr_PageRightButtonDefinition->value;
    }

    auto ptr_SoundOnActivate = prop->cast_prop<yordle::data::prop::string_prop>(2690247672u);
    if (ptr_SoundOnActivate != nullptr) {
        SoundOnActivate = ptr_SoundOnActivate->value;
    }

    auto ptr_SoundOnDeActivate = prop->cast_prop<yordle::data::prop::string_prop>(54554555u);
    if (ptr_SoundOnDeActivate != nullptr) {
        SoundOnDeActivate = ptr_SoundOnDeActivate->value;
    }

    auto ptr_x71378d8b = prop->cast_prop<yordle::data::prop::set_prop>(1899466123u);
    if (ptr_x71378d8b != nullptr) {
        for (const auto &entry : ptr_x71378d8b->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                x71378d8b.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::NotificationsPanelViewController::NotificationsPanelViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ViewPaneDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2330109623u);
    if (ptr_ViewPaneDefinition != nullptr) {
        ViewPaneDefinition = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_ViewPaneDefinition, 2330109623u);
    }

    auto ptr_ClearAllButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2978897416u);
    if (ptr_ClearAllButtonDefinition != nullptr) {
        ClearAllButtonDefinition = ptr_ClearAllButtonDefinition->value;
    }
}

yordle::data::meta::PurchaseDialog::PurchaseDialog(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : x75259ad3(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_purchaseButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1457318954u);
    if (ptr_purchaseButton != nullptr) {
        purchaseButton = ptr_purchaseButton->value;
    }

    auto ptr_moreInfoButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(91533656u);
    if (ptr_moreInfoButton != nullptr) {
        moreInfoButton = ptr_moreInfoButton->value;
    }

    auto ptr_x88f6a038 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2297864248u);
    if (ptr_x88f6a038 != nullptr) {
        x88f6a038 = ptr_x88f6a038->value;
    }
}

yordle::data::meta::x39bbca88::x39bbca88(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : x75259ad3(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ActionButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(688187426u);
    if (ptr_ActionButtonDefinition != nullptr) {
        ActionButtonDefinition = ptr_ActionButtonDefinition->value;
    }
}

yordle::data::meta::SocialPanelViewController::SocialPanelViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ViewPaneDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2330109623u);
    if (ptr_ViewPaneDefinition != nullptr) {
        ViewPaneDefinition = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_ViewPaneDefinition, 2330109623u);
    }

    auto ptr_AddFriendButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(502506537u);
    if (ptr_AddFriendButtonDefinition != nullptr) {
        AddFriendButtonDefinition = ptr_AddFriendButtonDefinition->value;
    }

    auto ptr_InviteButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1200704461u);
    if (ptr_InviteButtonDefinition != nullptr) {
        InviteButtonDefinition = ptr_InviteButtonDefinition->value;
    }

    auto ptr_FriendButtonDefinition = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3699678108u);
    if (ptr_FriendButtonDefinition != nullptr) {
        FriendButtonDefinition = ptr_FriendButtonDefinition->value;
    }
}

yordle::data::meta::StoreViewController::StoreViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_MainViewPaneDefinition = prop->cast_prop<yordle::data::prop::structure_prop>(3402876242u);
    if (ptr_MainViewPaneDefinition != nullptr) {
        MainViewPaneDefinition = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_MainViewPaneDefinition, 2330109623u);
    }

    auto ptr_x9eae8cc2 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2662239426u);
    if (ptr_x9eae8cc2 != nullptr) {
        x9eae8cc2 = ptr_x9eae8cc2->value;
    }

    auto ptr_xd2cc0cdf = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3536587999u);
    if (ptr_xd2cc0cdf != nullptr) {
        xd2cc0cdf = ptr_xd2cc0cdf->value;
    }

    auto ptr_StoreCategoryButtonDefinitions = prop->cast_prop<yordle::data::prop::set_prop>(1877593956u);
    if (ptr_StoreCategoryButtonDefinitions != nullptr) {
        for (const auto &entry : ptr_StoreCategoryButtonDefinitions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                StoreCategoryButtonDefinitions.emplace(yordle::data::meta::deserialize<yordle::data::meta::StoreCategoryButtonDefinition>(ptr_entry, 4069990911u));
            }
        }
    }
}

yordle::data::meta::TFTBattlepassViewController::TFTBattlepassViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_ViewPaneDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2330109623u);
    if (ptr_ViewPaneDefinition != nullptr) {
        ViewPaneDefinition = yordle::data::meta::deserialize<yordle::data::meta::ViewPaneDefinition>(ptr_ViewPaneDefinition, 2330109623u);
    }

    auto ptr_upgradePassButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2938854594u);
    if (ptr_upgradePassButton != nullptr) {
        upgradePassButton = ptr_upgradePassButton->value;
    }

    auto ptr_lootTableButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1855297149u);
    if (ptr_lootTableButton != nullptr) {
        lootTableButton = ptr_lootTableButton->value;
    }

    auto ptr_xc034af02 = prop->cast_prop<yordle::data::prop::float32_prop>(3224678146u);
    if (ptr_xc034af02 != nullptr) {
        xc034af02 = ptr_xc034af02->value;
    }

    auto ptr_x650b36b5 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1695233717u);
    if (ptr_x650b36b5 != nullptr) {
        x650b36b5 = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_x650b36b5, 3273533950u);
    }

    auto ptr_x56f22512 = prop->cast_prop<yordle::data::prop::reference_prop>(1458709778u);
    if (ptr_x56f22512 != nullptr) {
        x56f22512 = ptr_x56f22512->value;
    }
}

yordle::data::meta::LoadoutArenaSkinInfoPanel::LoadoutArenaSkinInfoPanel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ILoadoutInfoPanel(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::LoadoutCompanionInfoPanel::LoadoutCompanionInfoPanel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ILoadoutInfoPanel(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_tierButton = prop->cast_prop<yordle::data::prop::set_prop>(2549755037u);
    if (ptr_tierButton != nullptr) {
        for (const auto &entry : ptr_tierButton->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                tierButton.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_upgradeTierButton = prop->cast_prop<yordle::data::prop::set_prop>(2085656919u);
    if (ptr_upgradeTierButton != nullptr) {
        for (const auto &entry : ptr_upgradeTierButton->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                upgradeTierButton.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_upgradeInfoText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(257989652u);
    if (ptr_upgradeInfoText != nullptr) {
        upgradeInfoText = ptr_upgradeInfoText->value;
    }

    auto ptr_upgradeErrorText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3055944576u);
    if (ptr_upgradeErrorText != nullptr) {
        upgradeErrorText = ptr_upgradeErrorText->value;
    }

    auto ptr_x6a5635f2 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1784034802u);
    if (ptr_x6a5635f2 != nullptr) {
        x6a5635f2 = ptr_x6a5635f2->value;
    }

    auto ptr_x90dd73ef = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2430432239u);
    if (ptr_x90dd73ef != nullptr) {
        x90dd73ef = ptr_x90dd73ef->value;
    }
}

yordle::data::meta::LoadoutDamageSkinInfoPanel::LoadoutDamageSkinInfoPanel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ILoadoutInfoPanel(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_tierButton = prop->cast_prop<yordle::data::prop::set_prop>(2549755037u);
    if (ptr_tierButton != nullptr) {
        for (const auto &entry : ptr_tierButton->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                tierButton.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::LoadoutEmoteInfoPanel::LoadoutEmoteInfoPanel(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ILoadoutInfoPanel(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_EmoteWheelUpperButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(523298734u);
    if (ptr_EmoteWheelUpperButton != nullptr) {
        EmoteWheelUpperButton = ptr_EmoteWheelUpperButton->value;
    }

    auto ptr_EmoteWheelLeftButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1647667135u);
    if (ptr_EmoteWheelLeftButton != nullptr) {
        EmoteWheelLeftButton = ptr_EmoteWheelLeftButton->value;
    }

    auto ptr_EmoteWheelLowerButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(44244159u);
    if (ptr_EmoteWheelLowerButton != nullptr) {
        EmoteWheelLowerButton = ptr_EmoteWheelLowerButton->value;
    }

    auto ptr_EmoteWheelRightButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(566058836u);
    if (ptr_EmoteWheelRightButton != nullptr) {
        EmoteWheelRightButton = ptr_EmoteWheelRightButton->value;
    }

    auto ptr_EmoteWheelCenterButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2902474295u);
    if (ptr_EmoteWheelCenterButton != nullptr) {
        EmoteWheelCenterButton = ptr_EmoteWheelCenterButton->value;
    }

    auto ptr_emoteStartButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2434524805u);
    if (ptr_emoteStartButton != nullptr) {
        emoteStartButton = ptr_emoteStartButton->value;
    }

    auto ptr_emoteVictoryButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3414208295u);
    if (ptr_emoteVictoryButton != nullptr) {
        emoteVictoryButton = ptr_emoteVictoryButton->value;
    }
}

yordle::data::meta::x759a8c58::x759a8c58(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : x75259ad3(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_upgradeText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2532609168u);
    if (ptr_upgradeText != nullptr) {
        upgradeText = ptr_upgradeText->value;
    }

    auto ptr_errorText = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(469739042u);
    if (ptr_errorText != nullptr) {
        errorText = ptr_errorText->value;
    }

    auto ptr_ItemIcon = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3708628627u);
    if (ptr_ItemIcon != nullptr) {
        ItemIcon = ptr_ItemIcon->value;
    }

    auto ptr_ItemFrame = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1778819735u);
    if (ptr_ItemFrame != nullptr) {
        ItemFrame = ptr_ItemFrame->value;
    }

    auto ptr_RarityFrameCommon = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(856050794u);
    if (ptr_RarityFrameCommon != nullptr) {
        RarityFrameCommon = ptr_RarityFrameCommon->value;
    }

    auto ptr_RarityFrameEpic = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1159147490u);
    if (ptr_RarityFrameEpic != nullptr) {
        RarityFrameEpic = ptr_RarityFrameEpic->value;
    }

    auto ptr_RarityFrameLegendary = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3311057616u);
    if (ptr_RarityFrameLegendary != nullptr) {
        RarityFrameLegendary = ptr_RarityFrameLegendary->value;
    }

    auto ptr_xda8bcd33 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3666595123u);
    if (ptr_xda8bcd33 != nullptr) {
        xda8bcd33 = ptr_xda8bcd33->value;
    }

    auto ptr_x41ed38a6 = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1106065574u);
    if (ptr_x41ed38a6 != nullptr) {
        x41ed38a6 = ptr_x41ed38a6->value;
    }
}

yordle::data::meta::QuestTrackerViewController::QuestTrackerViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x62eab0b = prop->cast_prop<yordle::data::prop::uint32_prop>(103721739u);
    if (ptr_x62eab0b != nullptr) {
        x62eab0b = ptr_x62eab0b->value;
    }

    auto ptr_MessageDisplayData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1848909498u);
    if (ptr_MessageDisplayData != nullptr) {
        MessageDisplayData = yordle::data::meta::deserialize<yordle::data::meta::HudMessageDisplayData>(ptr_MessageDisplayData, 1269294773u);
    }

    auto ptr_xdba6febb = prop->cast_prop<yordle::data::prop::float32_prop>(3685154491u);
    if (ptr_xdba6febb != nullptr) {
        xdba6febb = ptr_xdba6febb->value;
    }

    auto ptr_x18bae045 = prop->cast_prop<yordle::data::prop::float32_prop>(414900293u);
    if (ptr_x18bae045 != nullptr) {
        x18bae045 = ptr_x18bae045->value;
    }

    auto ptr_x9fa3719e = prop->cast_prop<yordle::data::prop::float32_prop>(2678288798u);
    if (ptr_x9fa3719e != nullptr) {
        x9fa3719e = ptr_x9fa3719e->value;
    }

    auto ptr_x28f5e138 = prop->cast_prop<yordle::data::prop::float32_prop>(687202616u);
    if (ptr_x28f5e138 != nullptr) {
        x28f5e138 = ptr_x28f5e138->value;
    }

    auto ptr_xa0ae36a8 = prop->cast_prop<yordle::data::prop::float32_prop>(2695771816u);
    if (ptr_xa0ae36a8 != nullptr) {
        xa0ae36a8 = ptr_xa0ae36a8->value;
    }

    auto ptr_xc67a95a4 = prop->cast_prop<yordle::data::prop::float32_prop>(3329922468u);
    if (ptr_xc67a95a4 != nullptr) {
        xc67a95a4 = ptr_xc67a95a4->value;
    }
}

yordle::data::meta::xe20be0be::xe20be0be(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::SettingsViewController::SettingsViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_GeneralSettings = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3487959510u);
    if (ptr_GeneralSettings != nullptr) {
        GeneralSettings = yordle::data::meta::deserialize<yordle::data::meta::GeneralSettingsGroup>(ptr_GeneralSettings, 4110481513u);
    }

    auto ptr_closeButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3029377995u);
    if (ptr_closeButton != nullptr) {
        closeButton = ptr_closeButton->value;
    }

    auto ptr_tabButton = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2523201800u);
    if (ptr_tabButton != nullptr) {
        tabButton = ptr_tabButton->value;
    }

    auto ptr_SoundOnActivate = prop->cast_prop<yordle::data::prop::string_prop>(2690247672u);
    if (ptr_SoundOnActivate != nullptr) {
        SoundOnActivate = ptr_SoundOnActivate->value;
    }

    auto ptr_SoundOnDeActivate = prop->cast_prop<yordle::data::prop::string_prop>(54554555u);
    if (ptr_SoundOnDeActivate != nullptr) {
        SoundOnDeActivate = ptr_SoundOnDeActivate->value;
    }
}

yordle::data::meta::TooltipInstanceSpell::TooltipInstanceSpell(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TooltipInstance(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_EnableExtendedTooltip = prop->cast_prop<yordle::data::prop::bool_prop>(4272119378u);
    if (ptr_EnableExtendedTooltip != nullptr) {
        EnableExtendedTooltip = ptr_EnableExtendedTooltip->value;
    }
}

yordle::data::meta::TooltipInstanceBuff::TooltipInstanceBuff(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TooltipInstance(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEnableExtendedTooltip = prop->cast_prop<yordle::data::prop::bool_prop>(2929024189u);
    if (ptr_mEnableExtendedTooltip != nullptr) {
        mEnableExtendedTooltip = ptr_mEnableExtendedTooltip->value;
    }
}

yordle::data::meta::TooltipInstanceItem::TooltipInstanceItem(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : TooltipInstance(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::TooltipViewController::TooltipViewController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ViewController(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_DefaultAdjustments = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1944635290u);
    if (ptr_DefaultAdjustments != nullptr) {
        DefaultAdjustments = yordle::data::meta::deserialize<yordle::data::meta::x9e5aed77>(ptr_DefaultAdjustments, 2656759159u);
    }

    auto ptr_xf5fc1d3a = prop->cast_prop<yordle::data::prop::map_prop>(4126940474u);
    if (ptr_xf5fc1d3a != nullptr) {
        for (const auto &pair : ptr_xf5fc1d3a->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                xf5fc1d3a[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::x9e5aed77>(ptr_value, 2656759159u);
            }
        }
    }

    auto ptr_x9e2fcad4 = prop->cast_prop<yordle::data::prop::float32_prop>(2653932244u);
    if (ptr_x9e2fcad4 != nullptr) {
        x9e2fcad4 = ptr_x9e2fcad4->value;
    }

    auto ptr_x750ad235 = prop->cast_prop<yordle::data::prop::float32_prop>(1963643445u);
    if (ptr_x750ad235 != nullptr) {
        x750ad235 = ptr_x750ad235->value;
    }
}

yordle::data::meta::EsportsBannerMaterialController::EsportsBannerMaterialController(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : SkinnedMeshDataMaterialController(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::BlendableClipData::BlendableClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ClipBaseData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMaskDataName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(56193947u);
    if (ptr_mMaskDataName != nullptr) {
        mMaskDataName = ptr_mMaskDataName->value;
    }

    auto ptr_mTrackDataName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(3549578180u);
    if (ptr_mTrackDataName != nullptr) {
        mTrackDataName = ptr_mTrackDataName->value;
    }

    auto ptr_mSyncGroupDataName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2694645089u);
    if (ptr_mSyncGroupDataName != nullptr) {
        mSyncGroupDataName = ptr_mSyncGroupDataName->value;
    }

    auto ptr_mEventDataMap = prop->cast_prop<yordle::data::prop::map_prop>(4120397374u);
    if (ptr_mEventDataMap != nullptr) {
        for (const auto &pair : ptr_mEventDataMap->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                mEventDataMap[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::BaseEventData>(ptr_value, 2039250216u);
            }
        }
    }
}

yordle::data::meta::ConditionBoolClipData::ConditionBoolClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ClipBaseData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mUpdaterType = prop->cast_prop<yordle::data::prop::uint32_prop>(479720153u);
    if (ptr_mUpdaterType != nullptr) {
        mUpdaterType = ptr_mUpdaterType->value;
    }

    auto ptr_mChangeAnimationMidPlay = prop->cast_prop<yordle::data::prop::bool_prop>(1177069846u);
    if (ptr_mChangeAnimationMidPlay != nullptr) {
        mChangeAnimationMidPlay = ptr_mChangeAnimationMidPlay->value;
    }

    auto ptr_x31db4e6a = prop->cast_prop<yordle::data::prop::bool_prop>(836456042u);
    if (ptr_x31db4e6a != nullptr) {
        x31db4e6a = ptr_x31db4e6a->value;
    }

    auto ptr_x92213dee = prop->cast_prop<yordle::data::prop::bool_prop>(2451652078u);
    if (ptr_x92213dee != nullptr) {
        x92213dee = ptr_x92213dee->value;
    }

    auto ptr_mTrueConditionClipName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1299862720u);
    if (ptr_mTrueConditionClipName != nullptr) {
        mTrueConditionClipName = ptr_mTrueConditionClipName->value;
    }

    auto ptr_mFalseConditionClipName = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(615471809u);
    if (ptr_mFalseConditionClipName != nullptr) {
        mFalseConditionClipName = ptr_mFalseConditionClipName->value;
    }

    auto ptr_mChildAnimDelaySwitchTime = prop->cast_prop<yordle::data::prop::float32_prop>(3722708743u);
    if (ptr_mChildAnimDelaySwitchTime != nullptr) {
        mChildAnimDelaySwitchTime = ptr_mChildAnimDelaySwitchTime->value;
    }
}

yordle::data::meta::ConditionFloatClipData::ConditionFloatClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ClipBaseData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mConditionFloatPairDataList = prop->cast_prop<yordle::data::prop::set_prop>(589950661u);
    if (ptr_mConditionFloatPairDataList != nullptr) {
        for (const auto &entry : ptr_mConditionFloatPairDataList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mConditionFloatPairDataList.emplace(yordle::data::meta::deserialize<yordle::data::meta::ConditionFloatPairData>(ptr_entry, 1675919456u));
            }
        }
    }

    auto ptr_mUpdaterType = prop->cast_prop<yordle::data::prop::uint32_prop>(479720153u);
    if (ptr_mUpdaterType != nullptr) {
        mUpdaterType = ptr_mUpdaterType->value;
    }

    auto ptr_mChangeAnimationMidPlay = prop->cast_prop<yordle::data::prop::bool_prop>(1177069846u);
    if (ptr_mChangeAnimationMidPlay != nullptr) {
        mChangeAnimationMidPlay = ptr_mChangeAnimationMidPlay->value;
    }

    auto ptr_x31db4e6a = prop->cast_prop<yordle::data::prop::bool_prop>(836456042u);
    if (ptr_x31db4e6a != nullptr) {
        x31db4e6a = ptr_x31db4e6a->value;
    }

    auto ptr_x92213dee = prop->cast_prop<yordle::data::prop::bool_prop>(2451652078u);
    if (ptr_x92213dee != nullptr) {
        x92213dee = ptr_x92213dee->value;
    }

    auto ptr_mChildAnimDelaySwitchTime = prop->cast_prop<yordle::data::prop::float32_prop>(3722708743u);
    if (ptr_mChildAnimDelaySwitchTime != nullptr) {
        mChildAnimDelaySwitchTime = ptr_mChildAnimDelaySwitchTime->value;
    }
}

yordle::data::meta::ParallelClipData::ParallelClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ClipBaseData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mClipNameList = prop->cast_prop<yordle::data::prop::set_prop>(126660569u);
    if (ptr_mClipNameList != nullptr) {
        for (const auto &entry : ptr_mClipNameList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mClipNameList.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::ParametricClipData::ParametricClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BlendableClipData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mUpdaterType = prop->cast_prop<yordle::data::prop::uint32_prop>(479720153u);
    if (ptr_mUpdaterType != nullptr) {
        mUpdaterType = ptr_mUpdaterType->value;
    }

    auto ptr_mParametricPairDataList = prop->cast_prop<yordle::data::prop::set_prop>(784579174u);
    if (ptr_mParametricPairDataList != nullptr) {
        for (const auto &entry : ptr_mParametricPairDataList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mParametricPairDataList.emplace(yordle::data::meta::deserialize<yordle::data::meta::ParametricPairData>(ptr_entry, 3371956895u));
            }
        }
    }
}

yordle::data::meta::SelectorClipData::SelectorClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ClipBaseData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSelectorPairDataList = prop->cast_prop<yordle::data::prop::set_prop>(1361876261u);
    if (ptr_mSelectorPairDataList != nullptr) {
        for (const auto &entry : ptr_mSelectorPairDataList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mSelectorPairDataList.emplace(yordle::data::meta::deserialize<yordle::data::meta::SelectorPairData>(ptr_entry, 1837663416u));
            }
        }
    }
}

yordle::data::meta::SequencerClipData::SequencerClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ClipBaseData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mClipNameList = prop->cast_prop<yordle::data::prop::set_prop>(126660569u);
    if (ptr_mClipNameList != nullptr) {
        for (const auto &entry : ptr_mClipNameList->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mClipNameList.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::LinearTransformProcessorData::LinearTransformProcessorData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ValueProcessorData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMultiplier = prop->cast_prop<yordle::data::prop::float32_prop>(746040831u);
    if (ptr_mMultiplier != nullptr) {
        mMultiplier = ptr_mMultiplier->value;
    }

    auto ptr_mIncrement = prop->cast_prop<yordle::data::prop::float32_prop>(2359684517u);
    if (ptr_mIncrement != nullptr) {
        mIncrement = ptr_mIncrement->value;
    }
}

yordle::data::meta::xc0c056f1::xc0c056f1(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GenericMapPlaceable(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_PropName = prop->cast_prop<yordle::data::prop::string_prop>(1392331355u);
    if (ptr_PropName != nullptr) {
        PropName = ptr_PropName->value;
    }

    auto ptr_PlayIdleAnimation = prop->cast_prop<yordle::data::prop::bool_prop>(2382726993u);
    if (ptr_PlayIdleAnimation != nullptr) {
        PlayIdleAnimation = ptr_PlayIdleAnimation->value;
    }

    auto ptr_IdleAnimationName = prop->cast_prop<yordle::data::prop::string_prop>(1947732752u);
    if (ptr_IdleAnimationName != nullptr) {
        IdleAnimationName = ptr_IdleAnimationName->value;
    }

    auto ptr_eyeCandy = prop->cast_prop<yordle::data::prop::bool_prop>(1435159183u);
    if (ptr_eyeCandy != nullptr) {
        eyeCandy = ptr_eyeCandy->value;
    }

    auto ptr_SkinID = prop->cast_prop<yordle::data::prop::uint32_prop>(2067069477u);
    if (ptr_SkinID != nullptr) {
        SkinID = ptr_SkinID->value;
    }

    auto ptr_quality = prop->cast_prop<yordle::data::prop::int32_prop>(2597670950u);
    if (ptr_quality != nullptr) {
        quality = ptr_quality->value;
    }

    auto ptr_isClickable = prop->cast_prop<yordle::data::prop::bool_prop>(2880359499u);
    if (ptr_isClickable != nullptr) {
        isClickable = ptr_isClickable->value;
    }
}

yordle::data::meta::MapAudio::MapAudio(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GenericMapPlaceable(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_EventName = prop->cast_prop<yordle::data::prop::string_prop>(705137820u);
    if (ptr_EventName != nullptr) {
        EventName = ptr_EventName->value;
    }

    auto ptr_AudioType = prop->cast_prop<yordle::data::prop::uint32_prop>(1984969617u);
    if (ptr_AudioType != nullptr) {
        AudioType = ptr_AudioType->value;
    }

    auto ptr_startTime = prop->cast_prop<yordle::data::prop::float32_prop>(2322632174u);
    if (ptr_startTime != nullptr) {
        startTime = ptr_startTime->value;
    }

    auto ptr_xdf1b8a47 = prop->cast_prop<yordle::data::prop::float32_prop>(3743124039u);
    if (ptr_xdf1b8a47 != nullptr) {
        xdf1b8a47 = ptr_xdf1b8a47->value;
    }

    auto ptr_x518f49b9 = prop->cast_prop<yordle::data::prop::float32_prop>(1368345017u);
    if (ptr_x518f49b9 != nullptr) {
        x518f49b9 = ptr_x518f49b9->value;
    }
}

yordle::data::meta::MapCamera::MapCamera(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapPlaceable(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x6f3e4327 = prop->cast_prop<yordle::data::prop::float32_prop>(1866351399u);
    if (ptr_x6f3e4327 != nullptr) {
        x6f3e4327 = ptr_x6f3e4327->value;
    }

    auto ptr_x563a1941 = prop->cast_prop<yordle::data::prop::float32_prop>(1446648129u);
    if (ptr_x563a1941 != nullptr) {
        x563a1941 = ptr_x563a1941->value;
    }

    auto ptr_pitch = prop->cast_prop<yordle::data::prop::float32_prop>(3174189745u);
    if (ptr_pitch != nullptr) {
        pitch = ptr_pitch->value;
    }

    auto ptr_yaw = prop->cast_prop<yordle::data::prop::float32_prop>(1655300712u);
    if (ptr_yaw != nullptr) {
        yaw = ptr_yaw->value;
    }

    auto ptr_FieldOfView = prop->cast_prop<yordle::data::prop::float32_prop>(2343344339u);
    if (ptr_FieldOfView != nullptr) {
        FieldOfView = ptr_FieldOfView->value;
    }
}

yordle::data::meta::MapLocator::MapLocator(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : GenericMapPlaceable(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::MapMotionPath::MapMotionPath(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapPlaceable(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Segments = prop->cast_prop<yordle::data::prop::set_prop>(1365364879u);
    if (ptr_Segments != nullptr) {
        for (const auto &entry : ptr_Segments->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                Segments.emplace(yordle::data::meta::deserialize<yordle::data::meta::MapPathSegment>(ptr_entry, 2603925163u));
            }
        }
    }
}

yordle::data::meta::ColorGraphMaterialDriver::ColorGraphMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_driver = prop->cast_prop<yordle::data::prop::structure_prop>(3847494111u);
    if (ptr_driver != nullptr) {
        driver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialFloatDriver>(ptr_driver, 1090223300u);
    }

    auto ptr_colors = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4176775601u);
    if (ptr_colors != nullptr) {
        colors = yordle::data::meta::deserialize<yordle::data::meta::VfxAnimatedColorVariableData>(ptr_colors, 1128908277u);
    }
}

yordle::data::meta::FloatGraphMaterialDriver::FloatGraphMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_driver = prop->cast_prop<yordle::data::prop::structure_prop>(3847494111u);
    if (ptr_driver != nullptr) {
        driver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialFloatDriver>(ptr_driver, 1090223300u);
    }

    auto ptr_graph = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3111650887u);
    if (ptr_graph != nullptr) {
        graph = yordle::data::meta::deserialize<yordle::data::meta::VfxAnimatedFloatVariableData>(ptr_graph, 4261825672u);
    }
}

yordle::data::meta::VfxSystemDefinitionData::VfxSystemDefinitionData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IResource(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_materialOverrideDefinitions = prop->cast_prop<yordle::data::prop::set_prop>(858467462u);
    if (ptr_materialOverrideDefinitions != nullptr) {
        for (const auto &entry : ptr_materialOverrideDefinitions->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                materialOverrideDefinitions.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxMaterialOverrideDefinitionData>(ptr_entry, 3652726407u));
            }
        }
    }

    auto ptr_complexEmitterDefinitionData = prop->cast_prop<yordle::data::prop::set_prop>(2257500010u);
    if (ptr_complexEmitterDefinitionData != nullptr) {
        for (const auto &entry : ptr_complexEmitterDefinitionData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                complexEmitterDefinitionData.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxEmitterDefinitionData>(ptr_entry, 164488258u));
            }
        }
    }

    auto ptr_simpleEmitterDefinitionData = prop->cast_prop<yordle::data::prop::set_prop>(1736566626u);
    if (ptr_simpleEmitterDefinitionData != nullptr) {
        for (const auto &entry : ptr_simpleEmitterDefinitionData->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                simpleEmitterDefinitionData.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxEmitterDefinitionData>(ptr_entry, 164488258u));
            }
        }
    }

    auto ptr_visibilityRadius = prop->cast_prop<yordle::data::prop::float32_prop>(4244744659u);
    if (ptr_visibilityRadius != nullptr) {
        visibilityRadius = ptr_visibilityRadius->value;
    }

    auto ptr_particleName = prop->cast_prop<yordle::data::prop::string_prop>(3975268028u);
    if (ptr_particleName != nullptr) {
        particleName = ptr_particleName->value;
    }

    auto ptr_particlePath = prop->cast_prop<yordle::data::prop::string_prop>(3882058040u);
    if (ptr_particlePath != nullptr) {
        particlePath = ptr_particlePath->value;
    }

    auto ptr_overrideScaleCap = prop->cast_prop<yordle::data::prop::optional_prop>(984499975u);
    if (ptr_overrideScaleCap != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_overrideScaleCap->value);
        if(ptr_entry != nullptr) {
            overrideScaleCap = ptr_entry->value;
        }
    }

    auto ptr_soundOnCreateDefault = prop->cast_prop<yordle::data::prop::string_prop>(3770906030u);
    if (ptr_soundOnCreateDefault != nullptr) {
        soundOnCreateDefault = ptr_soundOnCreateDefault->value;
    }

    auto ptr_voiceOverOnCreateDefault = prop->cast_prop<yordle::data::prop::string_prop>(1291847151u);
    if (ptr_voiceOverOnCreateDefault != nullptr) {
        voiceOverOnCreateDefault = ptr_voiceOverOnCreateDefault->value;
    }

    auto ptr_soundPersistentDefault = prop->cast_prop<yordle::data::prop::string_prop>(1516925922u);
    if (ptr_soundPersistentDefault != nullptr) {
        soundPersistentDefault = ptr_soundPersistentDefault->value;
    }

    auto ptr_voiceOverPersistentDefault = prop->cast_prop<yordle::data::prop::string_prop>(3733702107u);
    if (ptr_voiceOverPersistentDefault != nullptr) {
        voiceOverPersistentDefault = ptr_voiceOverPersistentDefault->value;
    }

    auto ptr_assetCategory = prop->cast_prop<yordle::data::prop::string_prop>(829774143u);
    if (ptr_assetCategory != nullptr) {
        assetCategory = ptr_assetCategory->value;
    }

    auto ptr_audioParameterFlexID = prop->cast_prop<yordle::data::prop::int32_prop>(1500211774u);
    if (ptr_audioParameterFlexID != nullptr) {
        audioParameterFlexID = ptr_audioParameterFlexID->value;
    }

    auto ptr_audioParameterTimeScaledDuration = prop->cast_prop<yordle::data::prop::float32_prop>(2709890627u);
    if (ptr_audioParameterTimeScaledDuration != nullptr) {
        audioParameterTimeScaledDuration = ptr_audioParameterTimeScaledDuration->value;
    }

    auto ptr_flags = prop->cast_prop<yordle::data::prop::uint8_prop>(2624027180u);
    if (ptr_flags != nullptr) {
        flags = ptr_flags->value;
    }

    auto ptr_buildUpTime = prop->cast_prop<yordle::data::prop::float32_prop>(3918823439u);
    if (ptr_buildUpTime != nullptr) {
        buildUpTime = ptr_buildUpTime->value;
    }

    auto ptr_selfIllumination = prop->cast_prop<yordle::data::prop::float32_prop>(623863940u);
    if (ptr_selfIllumination != nullptr) {
        selfIllumination = ptr_selfIllumination->value;
    }

    auto ptr_assetRemappingTable = prop->cast_prop<yordle::data::prop::set_prop>(3491373088u);
    if (ptr_assetRemappingTable != nullptr) {
        for (const auto &entry : ptr_assetRemappingTable->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                assetRemappingTable.emplace(yordle::data::meta::deserialize<yordle::data::meta::VfxAssetRemap>(ptr_entry, 4129808802u));
            }
        }
    }

    auto ptr_systemTranslation = prop->cast_prop<yordle::data::prop::vector_prop>(1606905703u);
    if (ptr_systemTranslation != nullptr) {
        systemTranslation = ptr_systemTranslation->value;
    }

    auto ptr_systemScale = prop->cast_prop<yordle::data::prop::vector_prop>(3841419510u);
    if (ptr_systemScale != nullptr) {
        systemScale = ptr_systemScale->value;
    }

    auto ptr_drawingLayer = prop->cast_prop<yordle::data::prop::uint8_prop>(3355691510u);
    if (ptr_drawingLayer != nullptr) {
        drawingLayer = ptr_drawingLayer->value;
    }

    auto ptr_hudLayerDimension = prop->cast_prop<yordle::data::prop::float32_prop>(4148591245u);
    if (ptr_hudLayerDimension != nullptr) {
        hudLayerDimension = ptr_hudLayerDimension->value;
    }

    auto ptr_HudLayerAspect = prop->cast_prop<yordle::data::prop::float32_prop>(3180870615u);
    if (ptr_HudLayerAspect != nullptr) {
        HudLayerAspect = ptr_HudLayerAspect->value;
    }

    auto ptr_hudAnchorPositionFromWorldProjection = prop->cast_prop<yordle::data::prop::bool_prop>(3696942245u);
    if (ptr_hudAnchorPositionFromWorldProjection != nullptr) {
        hudAnchorPositionFromWorldProjection = ptr_hudAnchorPositionFromWorldProjection->value;
    }

    auto ptr_scaleDynamicallyWithAttachedBone = prop->cast_prop<yordle::data::prop::bool_prop>(4116583538u);
    if (ptr_scaleDynamicallyWithAttachedBone != nullptr) {
        scaleDynamicallyWithAttachedBone = ptr_scaleDynamicallyWithAttachedBone->value;
    }

    auto ptr_mEyeCandy = prop->cast_prop<yordle::data::prop::bool_prop>(1915866710u);
    if (ptr_mEyeCandy != nullptr) {
        mEyeCandy = ptr_mEyeCandy->value;
    }

    auto ptr_xcf08f8e6 = prop->cast_prop<yordle::data::prop::bool_prop>(3473471718u);
    if (ptr_xcf08f8e6 != nullptr) {
        xcf08f8e6 = ptr_xcf08f8e6->value;
    }
}

yordle::data::meta::ColorChooserMaterialDriver::ColorChooserMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBoolDriver = prop->cast_prop<yordle::data::prop::structure_prop>(3971470678u);
    if (ptr_mBoolDriver != nullptr) {
        mBoolDriver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialBoolDriver>(ptr_mBoolDriver, 3663840478u);
    }

    auto ptr_mColorOn = prop->cast_prop<yordle::data::prop::quaternion_prop>(3054468938u);
    if (ptr_mColorOn != nullptr) {
        mColorOn = ptr_mColorOn->value;
    }

    auto ptr_mColorOff = prop->cast_prop<yordle::data::prop::quaternion_prop>(3595682748u);
    if (ptr_mColorOff != nullptr) {
        mColorOff = ptr_mColorOff->value;
    }
}

yordle::data::meta::FloatLiteralMaterialDriver::FloatLiteralMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mValue = prop->cast_prop<yordle::data::prop::float32_prop>(619900041u);
    if (ptr_mValue != nullptr) {
        mValue = ptr_mValue->value;
    }
}

yordle::data::meta::FloorFloatMaterialDriver::FloorFloatMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDriver = prop->cast_prop<yordle::data::prop::structure_prop>(2231653222u);
    if (ptr_mDriver != nullptr) {
        mDriver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialFloatDriver>(ptr_mDriver, 1090223300u);
    }
}

yordle::data::meta::IDynamicMaterialBoolDriver::IDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialFloatDriver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::AllTrueMaterialDriver::AllTrueMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDrivers = prop->cast_prop<yordle::data::prop::set_prop>(2060372495u);
    if (ptr_mDrivers != nullptr) {
        for (const auto &entry : ptr_mDrivers->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mDrivers.emplace(yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialBoolDriver>(ptr_entry, 3663840478u));
            }
        }
    }
}

yordle::data::meta::OneTrueMaterialDriver::OneTrueMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDrivers = prop->cast_prop<yordle::data::prop::set_prop>(2060372495u);
    if (ptr_mDrivers != nullptr) {
        for (const auto &entry : ptr_mDrivers->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                mDrivers.emplace(yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialBoolDriver>(ptr_entry, 3663840478u));
            }
        }
    }
}

yordle::data::meta::NotMaterialDriver::NotMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mDriver = prop->cast_prop<yordle::data::prop::structure_prop>(2231653222u);
    if (ptr_mDriver != nullptr) {
        mDriver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialBoolDriver>(ptr_mDriver, 3663840478u);
    }
}

yordle::data::meta::CustomShaderDef::CustomShaderDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IShaderDef(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_objectPath = prop->cast_prop<yordle::data::prop::string_prop>(490118185u);
    if (ptr_objectPath != nullptr) {
        objectPath = ptr_objectPath->value;
    }
}

yordle::data::meta::FixedShaderDef::FixedShaderDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IShaderDef(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_vertexShader = prop->cast_prop<yordle::data::prop::string_prop>(1330433874u);
    if (ptr_vertexShader != nullptr) {
        vertexShader = ptr_vertexShader->value;
    }

    auto ptr_pixelShader = prop->cast_prop<yordle::data::prop::string_prop>(1549166914u);
    if (ptr_pixelShader != nullptr) {
        pixelShader = ptr_pixelShader->value;
    }
}

yordle::data::meta::HybridMaterialDef::HybridMaterialDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : CustomShaderDef(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_type = prop->cast_prop<yordle::data::prop::uint32_prop>(1361572173u);
    if (ptr_type != nullptr) {
        type = ptr_type->value;
    }

    auto ptr_preset = prop->cast_prop<yordle::data::prop::reference_prop>(4111477022u);
    if (ptr_preset != nullptr) {
        preset = ptr_preset->value;
    }

    auto ptr_shaderMacros = prop->cast_prop<yordle::data::prop::map_prop>(3872816621u);
    if (ptr_shaderMacros != nullptr) {
        for (const auto &pair : ptr_shaderMacros->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                shaderMacros[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_DataCollections = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2866812454u);
    if (ptr_DataCollections != nullptr) {
        DataCollections = yordle::data::meta::deserialize<yordle::data::meta::MaterialDataCollections>(ptr_DataCollections, 1874373301u);
    }
}

yordle::data::meta::MaterialInstanceDef::MaterialInstanceDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IResource(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_BaseMaterial = prop->cast_prop<yordle::data::prop::reference_prop>(2404001921u);
    if (ptr_BaseMaterial != nullptr) {
        BaseMaterial = ptr_BaseMaterial->value;
    }

    auto ptr_childTechniques = prop->cast_prop<yordle::data::prop::set_prop>(2469455542u);
    if (ptr_childTechniques != nullptr) {
        for (const auto &entry : ptr_childTechniques->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                childTechniques.emplace(yordle::data::meta::deserialize<yordle::data::meta::xf7084b4a>(ptr_entry, 4144515914u));
            }
        }
    }

    auto ptr_shaderMacros = prop->cast_prop<yordle::data::prop::map_prop>(3872816621u);
    if (ptr_shaderMacros != nullptr) {
        for (const auto &pair : ptr_shaderMacros->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                shaderMacros[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_params = prop->cast_prop<yordle::data::prop::map_prop>(559900755u);
    if (ptr_params != nullptr) {
        for (const auto &pair : ptr_params->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint16_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                params[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MaterialInstanceParamDef>(ptr_value, 1496596895u);
            }
        }
    }

    auto ptr_textures = prop->cast_prop<yordle::data::prop::map_prop>(2567998597u);
    if (ptr_textures != nullptr) {
        for (const auto &pair : ptr_textures->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint16_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                textures[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MaterialInstanceTextureDef>(ptr_value, 1305331905u);
            }
        }
    }

    auto ptr_switches = prop->cast_prop<yordle::data::prop::map_prop>(3716012957u);
    if (ptr_switches != nullptr) {
        for (const auto &pair : ptr_switches->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint16_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                switches[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MaterialInstanceSwitchDef>(ptr_value, 2719807978u);
            }
        }
    }

    auto ptr_DynamicParams = prop->cast_prop<yordle::data::prop::map_prop>(2233445620u);
    if (ptr_DynamicParams != nullptr) {
        for (const auto &pair : ptr_DynamicParams->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint16_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                DynamicParams[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MaterialInstanceDynamicParam>(ptr_value, 1964830497u);
            }
        }
    }

    auto ptr_DynamicTextures = prop->cast_prop<yordle::data::prop::map_prop>(1873541542u);
    if (ptr_DynamicTextures != nullptr) {
        for (const auto &pair : ptr_DynamicTextures->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::uint16_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                DynamicTextures[ptr_key->value] = yordle::data::meta::deserialize<yordle::data::meta::MaterialInstanceDynamicTexture>(ptr_value, 1083476907u);
            }
        }
    }

    auto ptr_DynamicSwitch = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1887807190u);
    if (ptr_DynamicSwitch != nullptr) {
        DynamicSwitch = yordle::data::meta::deserialize<yordle::data::meta::MaterialInstanceDynamicSwitch>(ptr_DynamicSwitch, 1171267580u);
    }

    auto ptr_DynamicSwitchId = prop->cast_prop<yordle::data::prop::uint16_prop>(2613483115u);
    if (ptr_DynamicSwitchId != nullptr) {
        DynamicSwitchId = ptr_DynamicSwitchId->value;
    }
}

yordle::data::meta::StaticMaterialDef::StaticMaterialDef(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IResource(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_name = prop->cast_prop<yordle::data::prop::string_prop>(2369371622u);
    if (ptr_name != nullptr) {
        name = ptr_name->value;
    }

    auto ptr_type = prop->cast_prop<yordle::data::prop::uint32_prop>(1361572173u);
    if (ptr_type != nullptr) {
        type = ptr_type->value;
    }

    auto ptr_defaultTechnique = prop->cast_prop<yordle::data::prop::string_prop>(685392504u);
    if (ptr_defaultTechnique != nullptr) {
        defaultTechnique = ptr_defaultTechnique->value;
    }

    auto ptr_samplerValues = prop->cast_prop<yordle::data::prop::set_prop>(175050421u);
    if (ptr_samplerValues != nullptr) {
        for (const auto &entry : ptr_samplerValues->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                samplerValues.emplace(yordle::data::meta::deserialize<yordle::data::meta::StaticMaterialShaderSamplerDef>(ptr_entry, 151302480u));
            }
        }
    }

    auto ptr_paramValues = prop->cast_prop<yordle::data::prop::set_prop>(3500885688u);
    if (ptr_paramValues != nullptr) {
        for (const auto &entry : ptr_paramValues->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                paramValues.emplace(yordle::data::meta::deserialize<yordle::data::meta::StaticMaterialShaderParamDef>(ptr_entry, 3729264367u));
            }
        }
    }

    auto ptr_switches = prop->cast_prop<yordle::data::prop::set_prop>(3716012957u);
    if (ptr_switches != nullptr) {
        for (const auto &entry : ptr_switches->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                switches.emplace(yordle::data::meta::deserialize<yordle::data::meta::StaticMaterialSwitchDef>(ptr_entry, 237114017u));
            }
        }
    }

    auto ptr_shaderMacros = prop->cast_prop<yordle::data::prop::map_prop>(3872816621u);
    if (ptr_shaderMacros != nullptr) {
        for (const auto &pair : ptr_shaderMacros->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::string_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                shaderMacros[ptr_key->value] = ptr_value->value;
            }
        }
    }

    auto ptr_techniques = prop->cast_prop<yordle::data::prop::set_prop>(2219784270u);
    if (ptr_techniques != nullptr) {
        for (const auto &entry : ptr_techniques->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                techniques.emplace(yordle::data::meta::deserialize<yordle::data::meta::StaticMaterialTechniqueDef>(ptr_entry, 101336083u));
            }
        }
    }

    auto ptr_childTechniques = prop->cast_prop<yordle::data::prop::set_prop>(2469455542u);
    if (ptr_childTechniques != nullptr) {
        for (const auto &entry : ptr_childTechniques->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                childTechniques.emplace(yordle::data::meta::deserialize<yordle::data::meta::StaticMaterialChildTechniqueDef>(ptr_entry, 1935363221u));
            }
        }
    }

    auto ptr_dynamicMaterial = prop->cast_prop<yordle::data::prop::structure_prop>(2257018867u);
    if (ptr_dynamicMaterial != nullptr) {
        dynamicMaterial = yordle::data::meta::deserialize<yordle::data::meta::DynamicMaterialDef>(ptr_dynamicMaterial, 762048930u);
    }
}

yordle::data::meta::MapClouds::MapClouds(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : MapGraphicsFeature(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CloudsTexturePath = prop->cast_prop<yordle::data::prop::string_prop>(1664582205u);
    if (ptr_CloudsTexturePath != nullptr) {
        CloudsTexturePath = ptr_CloudsTexturePath->value;
    }

    auto ptr_x64847953 = prop->cast_prop<yordle::data::prop::quaternion_prop>(1686403411u);
    if (ptr_x64847953 != nullptr) {
        x64847953 = ptr_x64847953->value;
    }

    auto ptr_Layers = prop->cast_prop<yordle::data::prop::set_prop>(2411172191u);
    if (ptr_Layers != nullptr) {
        for (const auto &entry : ptr_Layers->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                Layers.emplace(yordle::data::meta::deserialize<yordle::data::meta::MapCloudsLayer>(ptr_entry, 769601740u));
            }
        }
    }

    auto ptr_IsEyeCandy = prop->cast_prop<yordle::data::prop::bool_prop>(839153119u);
    if (ptr_IsEyeCandy != nullptr) {
        IsEyeCandy = ptr_IsEyeCandy->value;
    }
}

yordle::data::meta::BaseResourceResolver::BaseResourceResolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IResourceResolver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_resourceMap = prop->cast_prop<yordle::data::prop::map_prop>(3539306273u);
    if (ptr_resourceMap != nullptr) {
        for (const auto &pair : ptr_resourceMap->value) {
            auto ptr_key = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(pair.first);
            auto ptr_value = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::reference_prop>(pair.second);
            if (ptr_key != nullptr && ptr_value != nullptr) {
                resourceMap[ptr_key->value] = ptr_value->value;
            }
        }
    }
}

yordle::data::meta::GlobalResourceResolver::GlobalResourceResolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseResourceResolver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ResourceResolver::ResourceResolver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseResourceResolver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::SetVarInTableBlock::SetVarInTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::structure_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = yordle::data::meta::deserialize<yordle::data::meta::IScriptValueGet>(ptr_value, 4142338480u);
    }

    auto ptr_Dest = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2583897173u);
    if (ptr_Dest != nullptr) {
        Dest = yordle::data::meta::deserialize<yordle::data::meta::ScriptTableSet>(ptr_Dest, 4139131590u);
    }
}

yordle::data::meta::ScriptCommentBlock::ScriptCommentBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Sequence = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1011085160u);
    if (ptr_Sequence != nullptr) {
        Sequence = yordle::data::meta::deserialize<yordle::data::meta::ScriptSequence>(ptr_Sequence, 2793907875u);
    }
}

yordle::data::meta::ConcatenateStringsBlock::ConcatenateStringsBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_String1 = prop->cast_prop<yordle::data::prop::structure_prop>(1852968235u);
    if (ptr_String1 != nullptr) {
        String1 = yordle::data::meta::deserialize<yordle::data::meta::IStringGet>(ptr_String1, 1166962967u);
    }

    auto ptr_String2 = prop->cast_prop<yordle::data::prop::structure_prop>(1869745854u);
    if (ptr_String2 != nullptr) {
        String2 = yordle::data::meta::deserialize<yordle::data::meta::IStringGet>(ptr_String2, 1166962967u);
    }

    auto ptr_Result = prop->cast_prop<yordle::data::prop::inline_structure_prop>(171406884u);
    if (ptr_Result != nullptr) {
        Result = yordle::data::meta::deserialize<yordle::data::meta::StringTableSet>(ptr_Result, 3580363220u);
    }
}

yordle::data::meta::CreateCustomTableBlock::CreateCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CustomTable = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4220587202u);
    if (ptr_CustomTable != nullptr) {
        CustomTable = yordle::data::meta::deserialize<yordle::data::meta::CustomTableSet>(ptr_CustomTable, 2864404146u);
    }
}

yordle::data::meta::DestroyCustomTableBlock::DestroyCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CustomTable = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4220587202u);
    if (ptr_CustomTable != nullptr) {
        CustomTable = yordle::data::meta::deserialize<yordle::data::meta::CustomTableSet>(ptr_CustomTable, 2864404146u);
    }
}

yordle::data::meta::SetKeyValueInCustomTableBlock::SetKeyValueInCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CustomTable = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4220587202u);
    if (ptr_CustomTable != nullptr) {
        CustomTable = yordle::data::meta::deserialize<yordle::data::meta::CustomTableGet>(ptr_CustomTable, 2681684398u);
    }

    auto ptr_Key = prop->cast_prop<yordle::data::prop::structure_prop>(1746258028u);
    if (ptr_Key != nullptr) {
        Key = yordle::data::meta::deserialize<yordle::data::meta::IScriptValueGet>(ptr_Key, 4142338480u);
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::structure_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = yordle::data::meta::deserialize<yordle::data::meta::IScriptValueGet>(ptr_value, 4142338480u);
    }
}

yordle::data::meta::GetKeyValueInCustomTableBlock::GetKeyValueInCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CustomTable = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4220587202u);
    if (ptr_CustomTable != nullptr) {
        CustomTable = yordle::data::meta::deserialize<yordle::data::meta::CustomTableGet>(ptr_CustomTable, 2681684398u);
    }

    auto ptr_Key = prop->cast_prop<yordle::data::prop::structure_prop>(1746258028u);
    if (ptr_Key != nullptr) {
        Key = yordle::data::meta::deserialize<yordle::data::meta::IScriptValueGet>(ptr_Key, 4142338480u);
    }

    auto ptr_OutValue = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2795494292u);
    if (ptr_OutValue != nullptr) {
        OutValue = yordle::data::meta::deserialize<yordle::data::meta::ScriptTableSet>(ptr_OutValue, 4139131590u);
    }
}

yordle::data::meta::InsertIntoCustomTableBlock::InsertIntoCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CustomTable = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4220587202u);
    if (ptr_CustomTable != nullptr) {
        CustomTable = yordle::data::meta::deserialize<yordle::data::meta::CustomTableGet>(ptr_CustomTable, 2681684398u);
    }

    auto ptr_Index = prop->cast_prop<yordle::data::prop::structure_prop>(151693739u);
    if (ptr_Index != nullptr) {
        Index = yordle::data::meta::deserialize<yordle::data::meta::IIntGet>(ptr_Index, 3256124575u);
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::structure_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = yordle::data::meta::deserialize<yordle::data::meta::IScriptValueGet>(ptr_value, 4142338480u);
    }

    auto ptr_OutIndex = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1322316709u);
    if (ptr_OutIndex != nullptr) {
        OutIndex = yordle::data::meta::deserialize<yordle::data::meta::IntTableSet>(ptr_OutIndex, 663538050u);
    }
}

yordle::data::meta::RemoveFromCustomTableBlock::RemoveFromCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CustomTable = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4220587202u);
    if (ptr_CustomTable != nullptr) {
        CustomTable = yordle::data::meta::deserialize<yordle::data::meta::CustomTableGet>(ptr_CustomTable, 2681684398u);
    }

    auto ptr_Key = prop->cast_prop<yordle::data::prop::structure_prop>(1746258028u);
    if (ptr_Key != nullptr) {
        Key = yordle::data::meta::deserialize<yordle::data::meta::IScriptValueGet>(ptr_Key, 4142338480u);
    }

    auto ptr_Index = prop->cast_prop<yordle::data::prop::structure_prop>(151693739u);
    if (ptr_Index != nullptr) {
        Index = yordle::data::meta::deserialize<yordle::data::meta::IIntGet>(ptr_Index, 3256124575u);
    }
}

yordle::data::meta::GetSizeOfCustomTableBlock::GetSizeOfCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CustomTable = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4220587202u);
    if (ptr_CustomTable != nullptr) {
        CustomTable = yordle::data::meta::deserialize<yordle::data::meta::CustomTableGet>(ptr_CustomTable, 2681684398u);
    }

    auto ptr_OutSize = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3615490486u);
    if (ptr_OutSize != nullptr) {
        OutSize = yordle::data::meta::deserialize<yordle::data::meta::ScriptTableSet>(ptr_OutSize, 4139131590u);
    }
}

yordle::data::meta::ForEachInCustomTableBlock::ForEachInCustomTableBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CustomTable = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4220587202u);
    if (ptr_CustomTable != nullptr) {
        CustomTable = yordle::data::meta::deserialize<yordle::data::meta::CustomTableGet>(ptr_CustomTable, 2681684398u);
    }

    auto ptr_SortedByKeys = prop->cast_prop<yordle::data::prop::bool_prop>(1055654413u);
    if (ptr_SortedByKeys != nullptr) {
        SortedByKeys = ptr_SortedByKeys->value;
    }

    auto ptr_OutKey = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2482342886u);
    if (ptr_OutKey != nullptr) {
        OutKey = yordle::data::meta::deserialize<yordle::data::meta::ScriptTableSet>(ptr_OutKey, 4139131590u);
    }

    auto ptr_OutValue = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2795494292u);
    if (ptr_OutValue != nullptr) {
        OutValue = yordle::data::meta::deserialize<yordle::data::meta::ScriptTableSet>(ptr_OutValue, 4139131590u);
    }

    auto ptr_Sequence = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1011085160u);
    if (ptr_Sequence != nullptr) {
        Sequence = yordle::data::meta::deserialize<yordle::data::meta::ScriptSequence>(ptr_Sequence, 2793907875u);
    }
}

yordle::data::meta::CustomTableContainsValueBlock::CustomTableContainsValueBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CustomTable = prop->cast_prop<yordle::data::prop::inline_structure_prop>(4220587202u);
    if (ptr_CustomTable != nullptr) {
        CustomTable = yordle::data::meta::deserialize<yordle::data::meta::CustomTableGet>(ptr_CustomTable, 2681684398u);
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::structure_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = yordle::data::meta::deserialize<yordle::data::meta::IScriptValueGet>(ptr_value, 4142338480u);
    }

    auto ptr_OutKey = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2482342886u);
    if (ptr_OutKey != nullptr) {
        OutKey = yordle::data::meta::deserialize<yordle::data::meta::ScriptTableSet>(ptr_OutKey, 4139131590u);
    }

    auto ptr_OutWasFound = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1766855372u);
    if (ptr_OutWasFound != nullptr) {
        OutWasFound = yordle::data::meta::deserialize<yordle::data::meta::BoolTableSet>(ptr_OutWasFound, 2728914349u);
    }
}

yordle::data::meta::CreateFunctionBlock::CreateFunctionBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Function = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2664841801u);
    if (ptr_Function != nullptr) {
        Function = yordle::data::meta::deserialize<yordle::data::meta::FunctionTableSet>(ptr_Function, 1262223041u);
    }

    auto ptr_FunctionDefinition = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3984358668u);
    if (ptr_FunctionDefinition != nullptr) {
        FunctionDefinition = yordle::data::meta::deserialize<yordle::data::meta::FunctionDefinition>(ptr_FunctionDefinition, 3984358668u);
    }
}

yordle::data::meta::IRunFunctionBlock::IRunFunctionBlock(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptBlock(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Function = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2664841801u);
    if (ptr_Function != nullptr) {
        Function = yordle::data::meta::deserialize<yordle::data::meta::FunctionTableGet>(ptr_Function, 800615629u);
    }

    auto ptr_InputParameters = prop->cast_prop<yordle::data::prop::set_prop>(579790947u);
    if (ptr_InputParameters != nullptr) {
        for (const auto &entry : ptr_InputParameters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                InputParameters.emplace(yordle::data::meta::deserialize<yordle::data::meta::IScriptValueGet>(ptr_entry, 4142338480u));
            }
        }
    }

    auto ptr_OutputParameters = prop->cast_prop<yordle::data::prop::set_prop>(1183067080u);
    if (ptr_OutputParameters != nullptr) {
        for (const auto &entry : ptr_OutputParameters->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::inline_structure_prop>(entry);
            if (ptr_entry != nullptr) {
                OutputParameters.emplace(yordle::data::meta::deserialize<yordle::data::meta::ScriptTableSet>(ptr_entry, 4139131590u));
            }
        }
    }
}

yordle::data::meta::IScriptSequence::IScriptSequence(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : RScript(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ScriptSequence::ScriptSequence(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptSequence(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_blocks = prop->cast_prop<yordle::data::prop::set_prop>(369992131u);
    if (ptr_blocks != nullptr) {
        for (const auto &entry : ptr_blocks->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::structure_prop>(entry);
            if (ptr_entry != nullptr) {
                blocks.emplace(yordle::data::meta::deserialize<yordle::data::meta::IScriptBlock>(ptr_entry, 1009431984u));
            }
        }
    }
}

yordle::data::meta::IBoolGet::IBoolGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptValueGet(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::BoolGet::BoolGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IBoolGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::bool_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = ptr_value->value;
    }
}

yordle::data::meta::BoolTableGet::BoolTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IBoolGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Table = prop->cast_prop<yordle::data::prop::structure_prop>(1251777503u);
    if (ptr_Table != nullptr) {
        Table = yordle::data::meta::deserialize<yordle::data::meta::ScriptTable>(ptr_Table, 619916734u);
    }

    auto ptr_Var = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2317739966u);
    if (ptr_Var != nullptr) {
        Var = ptr_Var->value;
    }

    auto ptr_Default = prop->cast_prop<yordle::data::prop::optional_prop>(2470140894u);
    if (ptr_Default != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::bool_prop>(ptr_Default->value);
        if(ptr_entry != nullptr) {
            Default = ptr_entry->value;
        }
    }
}

yordle::data::meta::CustomTableGet::CustomTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptValueGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Table = prop->cast_prop<yordle::data::prop::structure_prop>(1251777503u);
    if (ptr_Table != nullptr) {
        Table = yordle::data::meta::deserialize<yordle::data::meta::ScriptTable>(ptr_Table, 619916734u);
    }

    auto ptr_Var = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2317739966u);
    if (ptr_Var != nullptr) {
        Var = ptr_Var->value;
    }
}

yordle::data::meta::IFloatGet::IFloatGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptValueGet(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::FloatGet::FloatGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFloatGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::float32_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = ptr_value->value;
    }
}

yordle::data::meta::FloatTableGet::FloatTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFloatGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Table = prop->cast_prop<yordle::data::prop::structure_prop>(1251777503u);
    if (ptr_Table != nullptr) {
        Table = yordle::data::meta::deserialize<yordle::data::meta::ScriptTable>(ptr_Table, 619916734u);
    }

    auto ptr_Var = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2317739966u);
    if (ptr_Var != nullptr) {
        Var = ptr_Var->value;
    }

    auto ptr_Default = prop->cast_prop<yordle::data::prop::optional_prop>(2470140894u);
    if (ptr_Default != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::float32_prop>(ptr_Default->value);
        if(ptr_entry != nullptr) {
            Default = ptr_entry->value;
        }
    }
}

yordle::data::meta::FloatOffsetTableGet::FloatOffsetTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFloatGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Table = prop->cast_prop<yordle::data::prop::structure_prop>(1251777503u);
    if (ptr_Table != nullptr) {
        Table = yordle::data::meta::deserialize<yordle::data::meta::ScriptTable>(ptr_Table, 619916734u);
    }

    auto ptr_Var = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2317739966u);
    if (ptr_Var != nullptr) {
        Var = ptr_Var->value;
    }

    auto ptr_offset = prop->cast_prop<yordle::data::prop::float32_prop>(348705738u);
    if (ptr_offset != nullptr) {
        offset = ptr_offset->value;
    }
}

yordle::data::meta::IFunctionGet::IFunctionGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptValueGet(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::FunctionTableGet::FunctionTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IFunctionGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Table = prop->cast_prop<yordle::data::prop::structure_prop>(1251777503u);
    if (ptr_Table != nullptr) {
        Table = yordle::data::meta::deserialize<yordle::data::meta::ScriptTable>(ptr_Table, 619916734u);
    }

    auto ptr_Var = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2317739966u);
    if (ptr_Var != nullptr) {
        Var = ptr_Var->value;
    }
}

yordle::data::meta::IIntGet::IIntGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptValueGet(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::IntGet::IntGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IIntGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_value = prop->cast_prop<yordle::data::prop::int32_prop>(1113510858u);
    if (ptr_value != nullptr) {
        value = ptr_value->value;
    }
}

yordle::data::meta::IntTableGet::IntTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IIntGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Table = prop->cast_prop<yordle::data::prop::structure_prop>(1251777503u);
    if (ptr_Table != nullptr) {
        Table = yordle::data::meta::deserialize<yordle::data::meta::ScriptTable>(ptr_Table, 619916734u);
    }

    auto ptr_Var = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2317739966u);
    if (ptr_Var != nullptr) {
        Var = ptr_Var->value;
    }

    auto ptr_Default = prop->cast_prop<yordle::data::prop::optional_prop>(2470140894u);
    if (ptr_Default != nullptr) {
    auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::int32_prop>(ptr_Default->value);
        if(ptr_entry != nullptr) {
            Default = ptr_entry->value;
        }
    }
}

yordle::data::meta::IntOffsetTableGet::IntOffsetTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IIntGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Table = prop->cast_prop<yordle::data::prop::structure_prop>(1251777503u);
    if (ptr_Table != nullptr) {
        Table = yordle::data::meta::deserialize<yordle::data::meta::ScriptTable>(ptr_Table, 619916734u);
    }

    auto ptr_Var = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2317739966u);
    if (ptr_Var != nullptr) {
        Var = ptr_Var->value;
    }

    auto ptr_offset = prop->cast_prop<yordle::data::prop::int32_prop>(348705738u);
    if (ptr_offset != nullptr) {
        offset = ptr_offset->value;
    }
}

yordle::data::meta::ScriptTableGet::ScriptTableGet(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IScriptValueGet(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_Table = prop->cast_prop<yordle::data::prop::structure_prop>(1251777503u);
    if (ptr_Table != nullptr) {
        Table = yordle::data::meta::deserialize<yordle::data::meta::ScriptTable>(ptr_Table, 619916734u);
    }

    auto ptr_Var = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(2317739966u);
    if (ptr_Var != nullptr) {
        Var = ptr_Var->value;
    }
}

yordle::data::meta::BaseElementData::BaseElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : x231dd1a2(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(1239023785u);
    if (ptr_mEnabled != nullptr) {
        mEnabled = ptr_mEnabled->value;
    }

    auto ptr_mDraggable = prop->cast_prop<yordle::data::prop::uint32_prop>(1043285811u);
    if (ptr_mDraggable != nullptr) {
        mDraggable = ptr_mDraggable->value;
    }

    auto ptr_StickyDrag = prop->cast_prop<yordle::data::prop::bool_prop>(1502845044u);
    if (ptr_StickyDrag != nullptr) {
        StickyDrag = ptr_StickyDrag->value;
    }

    auto ptr_mLayer = prop->cast_prop<yordle::data::prop::uint32_prop>(2191912109u);
    if (ptr_mLayer != nullptr) {
        mLayer = ptr_mLayer->value;
    }

    auto ptr_mAnchors = prop->cast_prop<yordle::data::prop::structure_prop>(3822917598u);
    if (ptr_mAnchors != nullptr) {
        mAnchors = yordle::data::meta::deserialize<yordle::data::meta::AnchorBase>(ptr_mAnchors, 2131369601u);
    }

    auto ptr_mNoPixelSnappingX = prop->cast_prop<yordle::data::prop::bool_prop>(3390357923u);
    if (ptr_mNoPixelSnappingX != nullptr) {
        mNoPixelSnappingX = ptr_mNoPixelSnappingX->value;
    }

    auto ptr_mNoPixelSnappingY = prop->cast_prop<yordle::data::prop::bool_prop>(3373580304u);
    if (ptr_mNoPixelSnappingY != nullptr) {
        mNoPixelSnappingY = ptr_mNoPixelSnappingY->value;
    }

    auto ptr_mRect = prop->cast_prop<yordle::data::prop::quaternion_prop>(2414918774u);
    if (ptr_mRect != nullptr) {
        mRect = ptr_mRect->value;
    }

    auto ptr_mUseRectSourceResolutionAsFloor = prop->cast_prop<yordle::data::prop::bool_prop>(2429594800u);
    if (ptr_mUseRectSourceResolutionAsFloor != nullptr) {
        mUseRectSourceResolutionAsFloor = ptr_mUseRectSourceResolutionAsFloor->value;
    }

    auto ptr_mRectSourceResolutionWidth = prop->cast_prop<yordle::data::prop::uint16_prop>(757395387u);
    if (ptr_mRectSourceResolutionWidth != nullptr) {
        mRectSourceResolutionWidth = ptr_mRectSourceResolutionWidth->value;
    }

    auto ptr_mRectSourceResolutionHeight = prop->cast_prop<yordle::data::prop::uint16_prop>(881508694u);
    if (ptr_mRectSourceResolutionHeight != nullptr) {
        mRectSourceResolutionHeight = ptr_mRectSourceResolutionHeight->value;
    }

    auto ptr_mKeepMaxScale = prop->cast_prop<yordle::data::prop::bool_prop>(2320718105u);
    if (ptr_mKeepMaxScale != nullptr) {
        mKeepMaxScale = ptr_mKeepMaxScale->value;
    }

    auto ptr_mFullscreen = prop->cast_prop<yordle::data::prop::bool_prop>(3304332665u);
    if (ptr_mFullscreen != nullptr) {
        mFullscreen = ptr_mFullscreen->value;
    }

    auto ptr_mHitTestPolygon = prop->cast_prop<yordle::data::prop::set_prop>(2407827681u);
    if (ptr_mHitTestPolygon != nullptr) {
        for (const auto &entry : ptr_mHitTestPolygon->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::point_prop>(entry);
            if (ptr_entry != nullptr) {
                mHitTestPolygon.emplace(ptr_entry->value);
            }
        }
    }

    auto ptr_x258bae9a = prop->cast_prop<yordle::data::prop::bool_prop>(629911194u);
    if (ptr_x258bae9a != nullptr) {
        x258bae9a = ptr_x258bae9a->value;
    }
}

yordle::data::meta::EffectElementData::EffectElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseElementData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::EffectCooldownElementData::EffectCooldownElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEffectColor0 = prop->cast_prop<yordle::data::prop::color_prop>(2479726548u);
    if (ptr_mEffectColor0 != nullptr) {
        mEffectColor0 = ptr_mEffectColor0->value;
    }

    auto ptr_mEffectColor1 = prop->cast_prop<yordle::data::prop::color_prop>(2496504167u);
    if (ptr_mEffectColor1 != nullptr) {
        mEffectColor1 = ptr_mEffectColor1->value;
    }
}

yordle::data::meta::EffectCircleMaskCooldownElementData::EffectCircleMaskCooldownElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEffectColor0 = prop->cast_prop<yordle::data::prop::color_prop>(2479726548u);
    if (ptr_mEffectColor0 != nullptr) {
        mEffectColor0 = ptr_mEffectColor0->value;
    }

    auto ptr_mEffectColor1 = prop->cast_prop<yordle::data::prop::color_prop>(2496504167u);
    if (ptr_mEffectColor1 != nullptr) {
        mEffectColor1 = ptr_mEffectColor1->value;
    }
}

yordle::data::meta::EffectCooldownRadialElementData::EffectCooldownRadialElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mIsFill = prop->cast_prop<yordle::data::prop::bool_prop>(181492049u);
    if (ptr_mIsFill != nullptr) {
        mIsFill = ptr_mIsFill->value;
    }

    auto ptr_mFlipX = prop->cast_prop<yordle::data::prop::bool_prop>(4007892433u);
    if (ptr_mFlipX != nullptr) {
        mFlipX = ptr_mFlipX->value;
    }

    auto ptr_mFlipY = prop->cast_prop<yordle::data::prop::bool_prop>(3991114814u);
    if (ptr_mFlipY != nullptr) {
        mFlipY = ptr_mFlipY->value;
    }

    auto ptr_mPerPixelUvsX = prop->cast_prop<yordle::data::prop::bool_prop>(1342547873u);
    if (ptr_mPerPixelUvsX != nullptr) {
        mPerPixelUvsX = ptr_mPerPixelUvsX->value;
    }

    auto ptr_mAtlas = prop->cast_prop<yordle::data::prop::structure_prop>(3915856815u);
    if (ptr_mAtlas != nullptr) {
        mAtlas = yordle::data::meta::deserialize<yordle::data::meta::AtlasData>(ptr_mAtlas, 1906252436u);
    }
}

yordle::data::meta::EffectArcFillElementData::EffectArcFillElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFlipX = prop->cast_prop<yordle::data::prop::bool_prop>(4007892433u);
    if (ptr_mFlipX != nullptr) {
        mFlipX = ptr_mFlipX->value;
    }

    auto ptr_mFlipY = prop->cast_prop<yordle::data::prop::bool_prop>(3991114814u);
    if (ptr_mFlipY != nullptr) {
        mFlipY = ptr_mFlipY->value;
    }

    auto ptr_mPerPixelUvsX = prop->cast_prop<yordle::data::prop::bool_prop>(1342547873u);
    if (ptr_mPerPixelUvsX != nullptr) {
        mPerPixelUvsX = ptr_mPerPixelUvsX->value;
    }

    auto ptr_mAtlas = prop->cast_prop<yordle::data::prop::structure_prop>(3915856815u);
    if (ptr_mAtlas != nullptr) {
        mAtlas = yordle::data::meta::deserialize<yordle::data::meta::AtlasData>(ptr_mAtlas, 1906252436u);
    }
}

yordle::data::meta::EffectAmmoElementData::EffectAmmoElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mEffectColor0 = prop->cast_prop<yordle::data::prop::color_prop>(2479726548u);
    if (ptr_mEffectColor0 != nullptr) {
        mEffectColor0 = ptr_mEffectColor0->value;
    }

    auto ptr_mEffectColor1 = prop->cast_prop<yordle::data::prop::color_prop>(2496504167u);
    if (ptr_mEffectColor1 != nullptr) {
        mEffectColor1 = ptr_mEffectColor1->value;
    }
}

yordle::data::meta::EffectGlowElementData::EffectGlowElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFlipX = prop->cast_prop<yordle::data::prop::bool_prop>(4007892433u);
    if (ptr_mFlipX != nullptr) {
        mFlipX = ptr_mFlipX->value;
    }

    auto ptr_mFlipY = prop->cast_prop<yordle::data::prop::bool_prop>(3991114814u);
    if (ptr_mFlipY != nullptr) {
        mFlipY = ptr_mFlipY->value;
    }

    auto ptr_mPerPixelUvsX = prop->cast_prop<yordle::data::prop::bool_prop>(1342547873u);
    if (ptr_mPerPixelUvsX != nullptr) {
        mPerPixelUvsX = ptr_mPerPixelUvsX->value;
    }

    auto ptr_mAtlas = prop->cast_prop<yordle::data::prop::structure_prop>(3915856815u);
    if (ptr_mAtlas != nullptr) {
        mAtlas = yordle::data::meta::deserialize<yordle::data::meta::AtlasData>(ptr_mAtlas, 1906252436u);
    }

    auto ptr_CycleTime = prop->cast_prop<yordle::data::prop::float32_prop>(3876358408u);
    if (ptr_CycleTime != nullptr) {
        CycleTime = ptr_CycleTime->value;
    }

    auto ptr_BaseScale = prop->cast_prop<yordle::data::prop::float32_prop>(799444858u);
    if (ptr_BaseScale != nullptr) {
        BaseScale = ptr_BaseScale->value;
    }

    auto ptr_CycleBasedScaleAddition = prop->cast_prop<yordle::data::prop::float32_prop>(3428902562u);
    if (ptr_CycleBasedScaleAddition != nullptr) {
        CycleBasedScaleAddition = ptr_CycleBasedScaleAddition->value;
    }

    auto ptr_MinimumAlpha = prop->cast_prop<yordle::data::prop::float32_prop>(2308653897u);
    if (ptr_MinimumAlpha != nullptr) {
        MinimumAlpha = ptr_MinimumAlpha->value;
    }
}

yordle::data::meta::EffectAnimationElementData::EffectAnimationElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFlipX = prop->cast_prop<yordle::data::prop::bool_prop>(4007892433u);
    if (ptr_mFlipX != nullptr) {
        mFlipX = ptr_mFlipX->value;
    }

    auto ptr_mFlipY = prop->cast_prop<yordle::data::prop::bool_prop>(3991114814u);
    if (ptr_mFlipY != nullptr) {
        mFlipY = ptr_mFlipY->value;
    }

    auto ptr_mPerPixelUvsX = prop->cast_prop<yordle::data::prop::bool_prop>(1342547873u);
    if (ptr_mPerPixelUvsX != nullptr) {
        mPerPixelUvsX = ptr_mPerPixelUvsX->value;
    }

    auto ptr_mAtlas = prop->cast_prop<yordle::data::prop::structure_prop>(3915856815u);
    if (ptr_mAtlas != nullptr) {
        mAtlas = yordle::data::meta::deserialize<yordle::data::meta::AtlasData>(ptr_mAtlas, 1906252436u);
    }

    auto ptr_FramesPerSecond = prop->cast_prop<yordle::data::prop::float32_prop>(4285724010u);
    if (ptr_FramesPerSecond != nullptr) {
        FramesPerSecond = ptr_FramesPerSecond->value;
    }

    auto ptr_TotalNumberOfFrames = prop->cast_prop<yordle::data::prop::float32_prop>(2790357931u);
    if (ptr_TotalNumberOfFrames != nullptr) {
        TotalNumberOfFrames = ptr_TotalNumberOfFrames->value;
    }

    auto ptr_NumberOfFramesPerRowInAtlas = prop->cast_prop<yordle::data::prop::float32_prop>(2652370576u);
    if (ptr_NumberOfFramesPerRowInAtlas != nullptr) {
        NumberOfFramesPerRowInAtlas = ptr_NumberOfFramesPerRowInAtlas->value;
    }

    auto ptr_mLooping = prop->cast_prop<yordle::data::prop::bool_prop>(1824309994u);
    if (ptr_mLooping != nullptr) {
        mLooping = ptr_mLooping->value;
    }

    auto ptr_mFinishBehavior = prop->cast_prop<yordle::data::prop::uint8_prop>(3996911377u);
    if (ptr_mFinishBehavior != nullptr) {
        mFinishBehavior = ptr_mFinishBehavior->value;
    }
}

yordle::data::meta::EffectFillPercentageElementData::EffectFillPercentageElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFlipX = prop->cast_prop<yordle::data::prop::bool_prop>(4007892433u);
    if (ptr_mFlipX != nullptr) {
        mFlipX = ptr_mFlipX->value;
    }

    auto ptr_mFlipY = prop->cast_prop<yordle::data::prop::bool_prop>(3991114814u);
    if (ptr_mFlipY != nullptr) {
        mFlipY = ptr_mFlipY->value;
    }

    auto ptr_mPerPixelUvsX = prop->cast_prop<yordle::data::prop::bool_prop>(1342547873u);
    if (ptr_mPerPixelUvsX != nullptr) {
        mPerPixelUvsX = ptr_mPerPixelUvsX->value;
    }

    auto ptr_mAtlas = prop->cast_prop<yordle::data::prop::structure_prop>(3915856815u);
    if (ptr_mAtlas != nullptr) {
        mAtlas = yordle::data::meta::deserialize<yordle::data::meta::AtlasData>(ptr_mAtlas, 1906252436u);
    }
}

yordle::data::meta::EffectDesaturateElementData::EffectDesaturateElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFlipX = prop->cast_prop<yordle::data::prop::bool_prop>(4007892433u);
    if (ptr_mFlipX != nullptr) {
        mFlipX = ptr_mFlipX->value;
    }

    auto ptr_mFlipY = prop->cast_prop<yordle::data::prop::bool_prop>(3991114814u);
    if (ptr_mFlipY != nullptr) {
        mFlipY = ptr_mFlipY->value;
    }

    auto ptr_mPerPixelUvsX = prop->cast_prop<yordle::data::prop::bool_prop>(1342547873u);
    if (ptr_mPerPixelUvsX != nullptr) {
        mPerPixelUvsX = ptr_mPerPixelUvsX->value;
    }

    auto ptr_mAtlas = prop->cast_prop<yordle::data::prop::structure_prop>(3915856815u);
    if (ptr_mAtlas != nullptr) {
        mAtlas = yordle::data::meta::deserialize<yordle::data::meta::AtlasData>(ptr_mAtlas, 1906252436u);
    }

    auto ptr_MinimumSaturation = prop->cast_prop<yordle::data::prop::float32_prop>(3563919507u);
    if (ptr_MinimumSaturation != nullptr) {
        MinimumSaturation = ptr_MinimumSaturation->value;
    }

    auto ptr_MaximumSaturation = prop->cast_prop<yordle::data::prop::float32_prop>(1621658605u);
    if (ptr_MaximumSaturation != nullptr) {
        MaximumSaturation = ptr_MaximumSaturation->value;
    }
}

yordle::data::meta::EffectRotatingIconElementData::EffectRotatingIconElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAtlas = prop->cast_prop<yordle::data::prop::structure_prop>(3915856815u);
    if (ptr_mAtlas != nullptr) {
        mAtlas = yordle::data::meta::deserialize<yordle::data::meta::AtlasData>(ptr_mAtlas, 1906252436u);
    }
}

yordle::data::meta::EffectGlowingRotatingIconElementData::EffectGlowingRotatingIconElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectRotatingIconElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_CycleTime = prop->cast_prop<yordle::data::prop::float32_prop>(3876358408u);
    if (ptr_CycleTime != nullptr) {
        CycleTime = ptr_CycleTime->value;
    }

    auto ptr_x54c178e = prop->cast_prop<yordle::data::prop::float32_prop>(88872846u);
    if (ptr_x54c178e != nullptr) {
        x54c178e = ptr_x54c178e->value;
    }
}

yordle::data::meta::EffectAnimatedRotatingIconElementData::EffectAnimatedRotatingIconElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectAnimationElementData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::EffectLineElementData::EffectLineElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAtlas = prop->cast_prop<yordle::data::prop::structure_prop>(3915856815u);
    if (ptr_mAtlas != nullptr) {
        mAtlas = yordle::data::meta::deserialize<yordle::data::meta::AtlasData>(ptr_mAtlas, 1906252436u);
    }

    auto ptr_mThickness = prop->cast_prop<yordle::data::prop::float32_prop>(2691582042u);
    if (ptr_mThickness != nullptr) {
        mThickness = ptr_mThickness->value;
    }

    auto ptr_mRightSlicePercentage = prop->cast_prop<yordle::data::prop::float32_prop>(3387092960u);
    if (ptr_mRightSlicePercentage != nullptr) {
        mRightSlicePercentage = ptr_mRightSlicePercentage->value;
    }
}

yordle::data::meta::EffectInstancedElementData::EffectInstancedElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mFlipX = prop->cast_prop<yordle::data::prop::bool_prop>(4007892433u);
    if (ptr_mFlipX != nullptr) {
        mFlipX = ptr_mFlipX->value;
    }

    auto ptr_mFlipY = prop->cast_prop<yordle::data::prop::bool_prop>(3991114814u);
    if (ptr_mFlipY != nullptr) {
        mFlipY = ptr_mFlipY->value;
    }

    auto ptr_mPerPixelUvsX = prop->cast_prop<yordle::data::prop::bool_prop>(1342547873u);
    if (ptr_mPerPixelUvsX != nullptr) {
        mPerPixelUvsX = ptr_mPerPixelUvsX->value;
    }

    auto ptr_mAtlas = prop->cast_prop<yordle::data::prop::structure_prop>(3915856815u);
    if (ptr_mAtlas != nullptr) {
        mAtlas = yordle::data::meta::deserialize<yordle::data::meta::AtlasData>(ptr_mAtlas, 1906252436u);
    }

    auto ptr_mAdditionalOffsets = prop->cast_prop<yordle::data::prop::set_prop>(1136511019u);
    if (ptr_mAdditionalOffsets != nullptr) {
        for (const auto &entry : ptr_mAdditionalOffsets->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::point_prop>(entry);
            if (ptr_entry != nullptr) {
                mAdditionalOffsets.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::EffectCircleMaskDesaturateElementData::EffectCircleMaskDesaturateElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectDesaturateElementData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::xf6fd1c96::xf6fd1c96(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : EffectElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mMaterial = prop->cast_prop<yordle::data::prop::reference_prop>(2246894113u);
    if (ptr_mMaterial != nullptr) {
        mMaterial = ptr_mMaterial->value;
    }
}

yordle::data::meta::ElementGroupButtonData::ElementGroupButtonData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : ElementGroupData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_defaultStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(469001906u);
    if (ptr_defaultStateElements != nullptr) {
        defaultStateElements = yordle::data::meta::deserialize<yordle::data::meta::ElementGroupButtonState>(ptr_defaultStateElements, 3456684995u);
    }

    auto ptr_InactiveStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2025490612u);
    if (ptr_InactiveStateElements != nullptr) {
        InactiveStateElements = yordle::data::meta::deserialize<yordle::data::meta::ElementGroupButtonState>(ptr_InactiveStateElements, 3456684995u);
    }

    auto ptr_hoverStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3167879375u);
    if (ptr_hoverStateElements != nullptr) {
        hoverStateElements = yordle::data::meta::deserialize<yordle::data::meta::ElementGroupButtonState>(ptr_hoverStateElements, 3456684995u);
    }

    auto ptr_xad0f8882 = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2903476354u);
    if (ptr_xad0f8882 != nullptr) {
        xad0f8882 = yordle::data::meta::deserialize<yordle::data::meta::ElementGroupButtonState>(ptr_xad0f8882, 3456684995u);
    }

    auto ptr_selectedStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1180059016u);
    if (ptr_selectedStateElements != nullptr) {
        selectedStateElements = yordle::data::meta::deserialize<yordle::data::meta::ElementGroupButtonState>(ptr_selectedStateElements, 3456684995u);
    }

    auto ptr_SelectedHoverStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3146987930u);
    if (ptr_SelectedHoverStateElements != nullptr) {
        SelectedHoverStateElements = yordle::data::meta::deserialize<yordle::data::meta::ElementGroupButtonState>(ptr_SelectedHoverStateElements, 3456684995u);
    }

    auto ptr_SelectedClickedStateElements = prop->cast_prop<yordle::data::prop::inline_structure_prop>(1645717439u);
    if (ptr_SelectedClickedStateElements != nullptr) {
        SelectedClickedStateElements = yordle::data::meta::deserialize<yordle::data::meta::ElementGroupButtonState>(ptr_SelectedClickedStateElements, 3456684995u);
    }

    auto ptr_hitRegionElement = prop->cast_prop<yordle::data::prop::reference_prop>(1811093838u);
    if (ptr_hitRegionElement != nullptr) {
        hitRegionElement = ptr_hitRegionElement->value;
    }

    auto ptr_ClickReleaseParticleElement = prop->cast_prop<yordle::data::prop::reference_prop>(2074868558u);
    if (ptr_ClickReleaseParticleElement != nullptr) {
        ClickReleaseParticleElement = ptr_ClickReleaseParticleElement->value;
    }

    auto ptr_soundEvents = prop->cast_prop<yordle::data::prop::structure_prop>(2735039949u);
    if (ptr_soundEvents != nullptr) {
        soundEvents = yordle::data::meta::deserialize<yordle::data::meta::ElementSoundEvents>(ptr_soundEvents, 2222311051u);
    }

    auto ptr_ActiveTooltipTraKey = prop->cast_prop<yordle::data::prop::string_prop>(2351487734u);
    if (ptr_ActiveTooltipTraKey != nullptr) {
        ActiveTooltipTraKey = ptr_ActiveTooltipTraKey->value;
    }

    auto ptr_InactiveTooltipTraKey = prop->cast_prop<yordle::data::prop::string_prop>(1345521803u);
    if (ptr_InactiveTooltipTraKey != nullptr) {
        InactiveTooltipTraKey = ptr_InactiveTooltipTraKey->value;
    }

    auto ptr_IsActive = prop->cast_prop<yordle::data::prop::bool_prop>(3410127167u);
    if (ptr_IsActive != nullptr) {
        IsActive = ptr_IsActive->value;
    }

    auto ptr_IsEnabled = prop->cast_prop<yordle::data::prop::bool_prop>(3744155086u);
    if (ptr_IsEnabled != nullptr) {
        IsEnabled = ptr_IsEnabled->value;
    }

    auto ptr_IsSelected = prop->cast_prop<yordle::data::prop::bool_prop>(3756492740u);
    if (ptr_IsSelected != nullptr) {
        IsSelected = ptr_IsSelected->value;
    }
}

yordle::data::meta::IconElementData::IconElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mColor = prop->cast_prop<yordle::data::prop::color_prop>(1399972751u);
    if (ptr_mColor != nullptr) {
        mColor = ptr_mColor->value;
    }

    auto ptr_mUseAlpha = prop->cast_prop<yordle::data::prop::bool_prop>(1780648797u);
    if (ptr_mUseAlpha != nullptr) {
        mUseAlpha = ptr_mUseAlpha->value;
    }

    auto ptr_mPerPixelUvsX = prop->cast_prop<yordle::data::prop::bool_prop>(1342547873u);
    if (ptr_mPerPixelUvsX != nullptr) {
        mPerPixelUvsX = ptr_mPerPixelUvsX->value;
    }

    auto ptr_mFlipX = prop->cast_prop<yordle::data::prop::bool_prop>(4007892433u);
    if (ptr_mFlipX != nullptr) {
        mFlipX = ptr_mFlipX->value;
    }

    auto ptr_mFlipY = prop->cast_prop<yordle::data::prop::bool_prop>(3991114814u);
    if (ptr_mFlipY != nullptr) {
        mFlipY = ptr_mFlipY->value;
    }

    auto ptr_mAtlas = prop->cast_prop<yordle::data::prop::structure_prop>(3915856815u);
    if (ptr_mAtlas != nullptr) {
        mAtlas = yordle::data::meta::deserialize<yordle::data::meta::AtlasDataBase>(ptr_mAtlas, 2069111393u);
    }

    auto ptr_mMaterial = prop->cast_prop<yordle::data::prop::reference_prop>(2246894113u);
    if (ptr_mMaterial != nullptr) {
        mMaterial = ptr_mMaterial->value;
    }

    auto ptr_mExtension = prop->cast_prop<yordle::data::prop::structure_prop>(252763365u);
    if (ptr_mExtension != nullptr) {
        mExtension = yordle::data::meta::deserialize<yordle::data::meta::IconElementDataExtension>(ptr_mExtension, 3681459597u);
    }
}

yordle::data::meta::ParticleSystemElementData::ParticleSystemElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mVfxSystem = prop->cast_prop<yordle::data::prop::reference_prop>(992664269u);
    if (ptr_mVfxSystem != nullptr) {
        mVfxSystem = ptr_mVfxSystem->value;
    }

    auto ptr_xc47cf6c7 = prop->cast_prop<yordle::data::prop::uint32_prop>(3296523975u);
    if (ptr_xc47cf6c7 != nullptr) {
        xc47cf6c7 = ptr_xc47cf6c7->value;
    }

    auto ptr_x2824440 = prop->cast_prop<yordle::data::prop::bool_prop>(42091584u);
    if (ptr_x2824440 != nullptr) {
        x2824440 = ptr_x2824440->value;
    }

    auto ptr_x94b088ea = prop->cast_prop<yordle::data::prop::bool_prop>(2494597354u);
    if (ptr_x94b088ea != nullptr) {
        x94b088ea = ptr_x94b088ea->value;
    }

    auto ptr_x8ef629c9 = prop->cast_prop<yordle::data::prop::bool_prop>(2398497225u);
    if (ptr_x8ef629c9 != nullptr) {
        x8ef629c9 = ptr_x8ef629c9->value;
    }
}

yordle::data::meta::RegionElementData::RegionElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseElementData(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::ScissorRegionElementData::ScissorRegionElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_xaccc80b5 = prop->cast_prop<yordle::data::prop::reference_prop>(2899083445u);
    if (ptr_xaccc80b5 != nullptr) {
        xaccc80b5 = ptr_xaccc80b5->value;
    }
}

yordle::data::meta::TextElementData::TextElementData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BaseElementData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_TraKey = prop->cast_prop<yordle::data::prop::string_prop>(2975295581u);
    if (ptr_TraKey != nullptr) {
        TraKey = ptr_TraKey->value;
    }

    auto ptr_mFontDescription = prop->cast_prop<yordle::data::prop::reference_prop>(2221319337u);
    if (ptr_mFontDescription != nullptr) {
        mFontDescription = ptr_mFontDescription->value;
    }

    auto ptr_mTextAlignmentHorizontal = prop->cast_prop<yordle::data::prop::uint8_prop>(2685899512u);
    if (ptr_mTextAlignmentHorizontal != nullptr) {
        mTextAlignmentHorizontal = ptr_mTextAlignmentHorizontal->value;
    }

    auto ptr_mTextAlignmentVertical = prop->cast_prop<yordle::data::prop::uint8_prop>(397175058u);
    if (ptr_mTextAlignmentVertical != nullptr) {
        mTextAlignmentVertical = ptr_mTextAlignmentVertical->value;
    }

    auto ptr_x7c0a8359 = prop->cast_prop<yordle::data::prop::reference_prop>(2081063769u);
    if (ptr_x7c0a8359 != nullptr) {
        x7c0a8359 = ptr_x7c0a8359->value;
    }

    auto ptr_WrappingMode = prop->cast_prop<yordle::data::prop::uint8_prop>(1778988038u);
    if (ptr_WrappingMode != nullptr) {
        WrappingMode = ptr_WrappingMode->value;
    }

    auto ptr_iconScale = prop->cast_prop<yordle::data::prop::float32_prop>(255926962u);
    if (ptr_iconScale != nullptr) {
        iconScale = ptr_iconScale->value;
    }
}

yordle::data::meta::x9bd21f30::x9bd21f30(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mKeyName = prop->cast_prop<yordle::data::prop::string_prop>(808890788u);
    if (ptr_mKeyName != nullptr) {
        mKeyName = ptr_mKeyName->value;
    }
}

yordle::data::meta::xd0116dc8::xd0116dc8(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mKeyName = prop->cast_prop<yordle::data::prop::string_prop>(808890788u);
    if (ptr_mKeyName != nullptr) {
        mKeyName = ptr_mKeyName->value;
    }
}

yordle::data::meta::HasBuffDynamicMaterialBoolDriver::HasBuffDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mScriptName = prop->cast_prop<yordle::data::prop::string_prop>(3370352368u);
    if (ptr_mScriptName != nullptr) {
        mScriptName = ptr_mScriptName->value;
    }

    auto ptr_xff80df7a = prop->cast_prop<yordle::data::prop::float32_prop>(4286635898u);
    if (ptr_xff80df7a != nullptr) {
        xff80df7a = ptr_xff80df7a->value;
    }
}

yordle::data::meta::HasGearDynamicMaterialBoolDriver::HasGearDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mGearIndex = prop->cast_prop<yordle::data::prop::uint8_prop>(4240237057u);
    if (ptr_mGearIndex != nullptr) {
        mGearIndex = ptr_mGearIndex->value;
    }
}

yordle::data::meta::IsAnimationPlayingDynamicMaterialBoolDriver::IsAnimationPlayingDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mAnimationNames = prop->cast_prop<yordle::data::prop::set_prop>(817034418u);
    if (ptr_mAnimationNames != nullptr) {
        for (const auto &entry : ptr_mAnimationNames->value) {
            auto ptr_entry = yordle::data::prop::empty_prop::cast_prop<yordle::data::prop::fnv_hash_prop>(entry);
            if (ptr_entry != nullptr) {
                mAnimationNames.emplace(ptr_entry->value);
            }
        }
    }
}

yordle::data::meta::IsDeadDynamicMaterialBoolDriver::IsDeadDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::IsEnemyDynamicMaterialBoolDriver::IsEnemyDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::IsInGrassDynamicMaterialBoolDriver::IsInGrassDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }
}

yordle::data::meta::LearnedSpellDynamicMaterialBoolDriver::LearnedSpellDynamicMaterialBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mSlot = prop->cast_prop<yordle::data::prop::uint8_prop>(2133939236u);
    if (ptr_mSlot != nullptr) {
        mSlot = ptr_mSlot->value;
    }
}

yordle::data::meta::MessageBoxDialog::MessageBoxDialog(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : x75259ad3(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_x806ad11a = prop->cast_prop<yordle::data::prop::inline_structure_prop>(2154483994u);
    if (ptr_x806ad11a != nullptr) {
        x806ad11a = yordle::data::meta::deserialize<yordle::data::meta::HudMenuTransitionData>(ptr_x806ad11a, 3273533950u);
    }

    auto ptr_ConfirmButtonIcons = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(1117474311u);
    if (ptr_ConfirmButtonIcons != nullptr) {
        ConfirmButtonIcons = ptr_ConfirmButtonIcons->value;
    }

    auto ptr_CancelButtonIcons = prop->cast_prop<yordle::data::prop::fnv_hash_prop>(4040210147u);
    if (ptr_CancelButtonIcons != nullptr) {
        CancelButtonIcons = ptr_CancelButtonIcons->value;
    }
}

yordle::data::meta::AtomicClipData::AtomicClipData(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : BlendableClipData(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mTickDuration = prop->cast_prop<yordle::data::prop::float32_prop>(423584029u);
    if (ptr_mTickDuration != nullptr) {
        mTickDuration = ptr_mTickDuration->value;
    }

    auto ptr_mAnimationResourceData = prop->cast_prop<yordle::data::prop::inline_structure_prop>(3030349134u);
    if (ptr_mAnimationResourceData != nullptr) {
        mAnimationResourceData = yordle::data::meta::deserialize<yordle::data::meta::AnimationResourceData>(ptr_mAnimationResourceData, 2588617117u);
    }

    auto ptr_mUpdaterResourceData = prop->cast_prop<yordle::data::prop::structure_prop>(2524561345u);
    if (ptr_mUpdaterResourceData != nullptr) {
        mUpdaterResourceData = yordle::data::meta::deserialize<yordle::data::meta::UpdaterResourceData>(ptr_mUpdaterResourceData, 1426466346u);
    }
}

yordle::data::meta::DelayedBoolMaterialDriver::DelayedBoolMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mBoolDriver = prop->cast_prop<yordle::data::prop::structure_prop>(3971470678u);
    if (ptr_mBoolDriver != nullptr) {
        mBoolDriver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialBoolDriver>(ptr_mBoolDriver, 3663840478u);
    }

    auto ptr_mDelayOn = prop->cast_prop<yordle::data::prop::float32_prop>(3737718546u);
    if (ptr_mDelayOn != nullptr) {
        mDelayOn = ptr_mDelayOn->value;
    }

    auto ptr_mDelayOff = prop->cast_prop<yordle::data::prop::float32_prop>(446087716u);
    if (ptr_mDelayOff != nullptr) {
        mDelayOff = ptr_mDelayOff->value;
    }
}

yordle::data::meta::FixedDurationTriggeredBoolDriver::FixedDurationTriggeredBoolDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mCustomDuration = prop->cast_prop<yordle::data::prop::float32_prop>(2046475623u);
    if (ptr_mCustomDuration != nullptr) {
        mCustomDuration = ptr_mCustomDuration->value;
    }

    auto ptr_mBoolDriver = prop->cast_prop<yordle::data::prop::structure_prop>(3971470678u);
    if (ptr_mBoolDriver != nullptr) {
        mBoolDriver = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialBoolDriver>(ptr_mBoolDriver, 3663840478u);
    }
}

yordle::data::meta::FloatComparisonMaterialDriver::FloatComparisonMaterialDriver(const std::shared_ptr<yordle::data::prop::structure_prop> &prop) : IDynamicMaterialBoolDriver(prop) {
    if (prop == nullptr) {
        return;
    }

    auto ptr_mOperator = prop->cast_prop<yordle::data::prop::uint32_prop>(2087289448u);
    if (ptr_mOperator != nullptr) {
        mOperator = ptr_mOperator->value;
    }

    auto ptr_mValueA = prop->cast_prop<yordle::data::prop::structure_prop>(308998456u);
    if (ptr_mValueA != nullptr) {
        mValueA = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialFloatDriver>(ptr_mValueA, 1090223300u);
    }

    auto ptr_mValueB = prop->cast_prop<yordle::data::prop::structure_prop>(359331313u);
    if (ptr_mValueB != nullptr) {
        mValueB = yordle::data::meta::deserialize<yordle::data::meta::IDynamicMaterialFloatDriver>(ptr_mValueB, 1090223300u);
    }
}

/// </auto-generated>
