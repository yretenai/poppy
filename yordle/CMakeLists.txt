project(yordle)

add_library(yordle SHARED public/yordle/manifest/RiotManifest_generated.h)
set_target_properties(yordle PROPERTIES POSITION_INDEPENDENT_CODE 1)
target_compile_definitions(yordle PRIVATE DRAGON_LIBRARY_NAME="yordle")
if(MSVC)
    generate_export_header(yordle BASE_NAME yordle DEFINE_NO_DEPRECATED EXPORT_FILE_NAME ${PROJECT_SOURCE_DIR}/public/yordle/yordle_export_win.a.h)
else()
    generate_export_header(yordle BASE_NAME yordle DEFINE_NO_DEPRECATED EXPORT_FILE_NAME ${PROJECT_SOURCE_DIR}/public/yordle/yordle_export_linux.a.h)
endif()
target_include_directories(yordle PUBLIC ${PROJECT_SOURCE_DIR}/public)
add_subdirectory("private")
find_package(zstd CONFIG REQUIRED)
find_package(ZLIB REQUIRED)
find_package(Flatbuffers CONFIG REQUIRED)
find_package(nlohmann_json CONFIG REQUIRED)
target_link_libraries(yordle PRIVATE zstd::libzstd_shared)
target_link_libraries(yordle PRIVATE ZLIB::ZLIB)
target_link_libraries(yordle PUBLIC flatbuffers::flatbuffers)
target_link_libraries(yordle PUBLIC nlohmann_json nlohmann_json::nlohmann_json)
find_library(XXHASH_LIBRARY xxhash)
target_link_libraries(yordle PRIVATE ${XXHASH_LIBRARY})

file(GLOB_RECURSE YORDLE_HEADERS "public/*.h" "public/*.hpp")

include(GNUInstallDirs)
install(TARGETS yordle LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
install(DIRECTORY public/yordle DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} FILES_MATCHING PATTERN "*.hpp" PATTERN "*.h" PATTERN "*.fbs")
